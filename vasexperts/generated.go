// Code generated by radius-dict-gen. DO NOT EDIT.

package vasexperts

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_VasExperts_VendorID = 43823
)

func _VasExperts_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_VasExperts_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _VasExperts_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _VasExperts_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _VasExperts_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _VasExperts_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _VasExperts_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _VasExperts_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _VasExperts_AddVendor(p, typ, attr)
}

func _VasExperts_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _VasExperts_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func VasExpertsPolicingProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 1, a)
}

func VasExpertsPolicingProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 1, a)
}

func VasExpertsPolicingProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsPolicingProfile_Lookup(p)
	return
}

func VasExpertsPolicingProfile_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsPolicingProfile_LookupString(p)
	return
}

func VasExpertsPolicingProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsPolicingProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsPolicingProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsPolicingProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsPolicingProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 1, a)
}

func VasExpertsPolicingProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 1, a)
}

func VasExpertsPolicingProfile_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 1)
}

func VasExpertsServiceProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 2, a)
}

func VasExpertsServiceProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 2, a)
}

func VasExpertsServiceProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsServiceProfile_Lookup(p)
	return
}

func VasExpertsServiceProfile_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsServiceProfile_LookupString(p)
	return
}

func VasExpertsServiceProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsServiceProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsServiceProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsServiceProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsServiceProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 2, a)
}

func VasExpertsServiceProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 2, a)
}

func VasExpertsServiceProfile_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 2)
}

func VasExpertsEnableService_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 3, a)
}

func VasExpertsEnableService_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 3, a)
}

func VasExpertsEnableService_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsEnableService_Lookup(p)
	return
}

func VasExpertsEnableService_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsEnableService_LookupString(p)
	return
}

func VasExpertsEnableService_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsEnableService_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsEnableService_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsEnableService_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsEnableService_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 3, a)
}

func VasExpertsEnableService_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 3, a)
}

func VasExpertsEnableService_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 3)
}

type VasExpertsMultiIPUser uint32

var VasExpertsMultiIPUser_Strings = map[VasExpertsMultiIPUser]string{}

func (a VasExpertsMultiIPUser) String() string {
	if str, ok := VasExpertsMultiIPUser_Strings[a]; ok {
		return str
	}
	return "VasExpertsMultiIPUser(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func VasExpertsMultiIPUser_Add(p *radius.Packet, value VasExpertsMultiIPUser) (err error) {
	a := radius.NewInteger(uint32(value))
	return _VasExperts_AddVendor(p, 4, a)
}

func VasExpertsMultiIPUser_Get(p *radius.Packet) (value VasExpertsMultiIPUser) {
	value, _ = VasExpertsMultiIPUser_Lookup(p)
	return
}

func VasExpertsMultiIPUser_Gets(p *radius.Packet) (values []VasExpertsMultiIPUser, err error) {
	var i uint32
	for _, attr := range _VasExperts_GetsVendor(p, 4) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, VasExpertsMultiIPUser(i))
	}
	return
}

func VasExpertsMultiIPUser_Lookup(p *radius.Packet) (value VasExpertsMultiIPUser, err error) {
	a, ok := _VasExperts_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = VasExpertsMultiIPUser(i)
	return
}

func VasExpertsMultiIPUser_Set(p *radius.Packet, value VasExpertsMultiIPUser) (err error) {
	a := radius.NewInteger(uint32(value))
	return _VasExperts_SetVendor(p, 4, a)
}

func VasExpertsMultiIPUser_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 4)
}

func VasExpertsUserName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 5, a)
}

func VasExpertsUserName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 5, a)
}

func VasExpertsUserName_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsUserName_Lookup(p)
	return
}

func VasExpertsUserName_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsUserName_LookupString(p)
	return
}

func VasExpertsUserName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsUserName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsUserName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsUserName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsUserName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 5, a)
}

func VasExpertsUserName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 5, a)
}

func VasExpertsUserName_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 5)
}

type VasExpertsServiceType uint32

const (
	VasExpertsServiceType_Value_Auth     VasExpertsServiceType = 0
	VasExpertsServiceType_Value_DHCP     VasExpertsServiceType = 1
	VasExpertsServiceType_Value_PAP      VasExpertsServiceType = 2
	VasExpertsServiceType_Value_CHAP     VasExpertsServiceType = 3
	VasExpertsServiceType_Value_MSCHAPv2 VasExpertsServiceType = 4
	VasExpertsServiceType_Value_MACQinQ  VasExpertsServiceType = 5
	VasExpertsServiceType_Value_ARP      VasExpertsServiceType = 6
	VasExpertsServiceType_Value_DHCPv6   VasExpertsServiceType = 7
)

var VasExpertsServiceType_Strings = map[VasExpertsServiceType]string{
	VasExpertsServiceType_Value_Auth:     "Auth",
	VasExpertsServiceType_Value_DHCP:     "DHCP",
	VasExpertsServiceType_Value_PAP:      "PAP",
	VasExpertsServiceType_Value_CHAP:     "CHAP",
	VasExpertsServiceType_Value_MSCHAPv2: "MS_CHAPv2",
	VasExpertsServiceType_Value_MACQinQ:  "MAC_QinQ",
	VasExpertsServiceType_Value_ARP:      "ARP",
	VasExpertsServiceType_Value_DHCPv6:   "DHCPv6",
}

func (a VasExpertsServiceType) String() string {
	if str, ok := VasExpertsServiceType_Strings[a]; ok {
		return str
	}
	return "VasExpertsServiceType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func VasExpertsServiceType_Add(p *radius.Packet, value VasExpertsServiceType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _VasExperts_AddVendor(p, 6, a)
}

func VasExpertsServiceType_Get(p *radius.Packet) (value VasExpertsServiceType) {
	value, _ = VasExpertsServiceType_Lookup(p)
	return
}

func VasExpertsServiceType_Gets(p *radius.Packet) (values []VasExpertsServiceType, err error) {
	var i uint32
	for _, attr := range _VasExperts_GetsVendor(p, 6) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, VasExpertsServiceType(i))
	}
	return
}

func VasExpertsServiceType_Lookup(p *radius.Packet) (value VasExpertsServiceType, err error) {
	a, ok := _VasExperts_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = VasExpertsServiceType(i)
	return
}

func VasExpertsServiceType_Set(p *radius.Packet, value VasExpertsServiceType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _VasExperts_SetVendor(p, 6, a)
}

func VasExpertsServiceType_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 6)
}

type VasExpertsRestrictUser uint32

var VasExpertsRestrictUser_Strings = map[VasExpertsRestrictUser]string{}

func (a VasExpertsRestrictUser) String() string {
	if str, ok := VasExpertsRestrictUser_Strings[a]; ok {
		return str
	}
	return "VasExpertsRestrictUser(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func VasExpertsRestrictUser_Add(p *radius.Packet, value VasExpertsRestrictUser) (err error) {
	a := radius.NewInteger(uint32(value))
	return _VasExperts_AddVendor(p, 7, a)
}

func VasExpertsRestrictUser_Get(p *radius.Packet) (value VasExpertsRestrictUser) {
	value, _ = VasExpertsRestrictUser_Lookup(p)
	return
}

func VasExpertsRestrictUser_Gets(p *radius.Packet) (values []VasExpertsRestrictUser, err error) {
	var i uint32
	for _, attr := range _VasExperts_GetsVendor(p, 7) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, VasExpertsRestrictUser(i))
	}
	return
}

func VasExpertsRestrictUser_Lookup(p *radius.Packet) (value VasExpertsRestrictUser, err error) {
	a, ok := _VasExperts_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = VasExpertsRestrictUser(i)
	return
}

func VasExpertsRestrictUser_Set(p *radius.Packet, value VasExpertsRestrictUser) (err error) {
	a := radius.NewInteger(uint32(value))
	return _VasExperts_SetVendor(p, 7, a)
}

func VasExpertsRestrictUser_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 7)
}

type VasExpertsEnableInterconnect uint32

var VasExpertsEnableInterconnect_Strings = map[VasExpertsEnableInterconnect]string{}

func (a VasExpertsEnableInterconnect) String() string {
	if str, ok := VasExpertsEnableInterconnect_Strings[a]; ok {
		return str
	}
	return "VasExpertsEnableInterconnect(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func VasExpertsEnableInterconnect_Add(p *radius.Packet, value VasExpertsEnableInterconnect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _VasExperts_AddVendor(p, 8, a)
}

func VasExpertsEnableInterconnect_Get(p *radius.Packet) (value VasExpertsEnableInterconnect) {
	value, _ = VasExpertsEnableInterconnect_Lookup(p)
	return
}

func VasExpertsEnableInterconnect_Gets(p *radius.Packet) (values []VasExpertsEnableInterconnect, err error) {
	var i uint32
	for _, attr := range _VasExperts_GetsVendor(p, 8) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, VasExpertsEnableInterconnect(i))
	}
	return
}

func VasExpertsEnableInterconnect_Lookup(p *radius.Packet) (value VasExpertsEnableInterconnect, err error) {
	a, ok := _VasExperts_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = VasExpertsEnableInterconnect(i)
	return
}

func VasExpertsEnableInterconnect_Set(p *radius.Packet, value VasExpertsEnableInterconnect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _VasExperts_SetVendor(p, 8, a)
}

func VasExpertsEnableInterconnect_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 8)
}

type VasExpertsOutVLAN uint32

var VasExpertsOutVLAN_Strings = map[VasExpertsOutVLAN]string{}

func (a VasExpertsOutVLAN) String() string {
	if str, ok := VasExpertsOutVLAN_Strings[a]; ok {
		return str
	}
	return "VasExpertsOutVLAN(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func VasExpertsOutVLAN_Add(p *radius.Packet, value VasExpertsOutVLAN) (err error) {
	a := radius.NewInteger(uint32(value))
	return _VasExperts_AddVendor(p, 9, a)
}

func VasExpertsOutVLAN_Get(p *radius.Packet) (value VasExpertsOutVLAN) {
	value, _ = VasExpertsOutVLAN_Lookup(p)
	return
}

func VasExpertsOutVLAN_Gets(p *radius.Packet) (values []VasExpertsOutVLAN, err error) {
	var i uint32
	for _, attr := range _VasExperts_GetsVendor(p, 9) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, VasExpertsOutVLAN(i))
	}
	return
}

func VasExpertsOutVLAN_Lookup(p *radius.Packet) (value VasExpertsOutVLAN, err error) {
	a, ok := _VasExperts_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = VasExpertsOutVLAN(i)
	return
}

func VasExpertsOutVLAN_Set(p *radius.Packet, value VasExpertsOutVLAN) (err error) {
	a := radius.NewInteger(uint32(value))
	return _VasExperts_SetVendor(p, 9, a)
}

func VasExpertsOutVLAN_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 9)
}

type VasExpertsCommandCode uint32

const (
	VasExpertsCommandCode_Value_CheckAcct VasExpertsCommandCode = 1
)

var VasExpertsCommandCode_Strings = map[VasExpertsCommandCode]string{
	VasExpertsCommandCode_Value_CheckAcct: "Check-Acct",
}

func (a VasExpertsCommandCode) String() string {
	if str, ok := VasExpertsCommandCode_Strings[a]; ok {
		return str
	}
	return "VasExpertsCommandCode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func VasExpertsCommandCode_Add(p *radius.Packet, value VasExpertsCommandCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _VasExperts_AddVendor(p, 10, a)
}

func VasExpertsCommandCode_Get(p *radius.Packet) (value VasExpertsCommandCode) {
	value, _ = VasExpertsCommandCode_Lookup(p)
	return
}

func VasExpertsCommandCode_Gets(p *radius.Packet) (values []VasExpertsCommandCode, err error) {
	var i uint32
	for _, attr := range _VasExperts_GetsVendor(p, 10) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, VasExpertsCommandCode(i))
	}
	return
}

func VasExpertsCommandCode_Lookup(p *radius.Packet) (value VasExpertsCommandCode, err error) {
	a, ok := _VasExperts_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = VasExpertsCommandCode(i)
	return
}

func VasExpertsCommandCode_Set(p *radius.Packet, value VasExpertsCommandCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _VasExperts_SetVendor(p, 10, a)
}

func VasExpertsCommandCode_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 10)
}

func VasExpertsOutMAC_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 11, a)
}

func VasExpertsOutMAC_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 11, a)
}

func VasExpertsOutMAC_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsOutMAC_Lookup(p)
	return
}

func VasExpertsOutMAC_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsOutMAC_LookupString(p)
	return
}

func VasExpertsOutMAC_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsOutMAC_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsOutMAC_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsOutMAC_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsOutMAC_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 11, a)
}

func VasExpertsOutMAC_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 11, a)
}

func VasExpertsOutMAC_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 11)
}

func VasExpertsAcctTrafficClassName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 16, a)
}

func VasExpertsAcctTrafficClassName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 16, a)
}

func VasExpertsAcctTrafficClassName_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsAcctTrafficClassName_Lookup(p)
	return
}

func VasExpertsAcctTrafficClassName_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsAcctTrafficClassName_LookupString(p)
	return
}

func VasExpertsAcctTrafficClassName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 16) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsAcctTrafficClassName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 16) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsAcctTrafficClassName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsAcctTrafficClassName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsAcctTrafficClassName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 16, a)
}

func VasExpertsAcctTrafficClassName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 16, a)
}

func VasExpertsAcctTrafficClassName_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 16)
}

type VasExpertsAcctTrafficClassInputOctets uint64

var VasExpertsAcctTrafficClassInputOctets_Strings = map[VasExpertsAcctTrafficClassInputOctets]string{}

func (a VasExpertsAcctTrafficClassInputOctets) String() string {
	if str, ok := VasExpertsAcctTrafficClassInputOctets_Strings[a]; ok {
		return str
	}
	return "VasExpertsAcctTrafficClassInputOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func VasExpertsAcctTrafficClassInputOctets_Add(p *radius.Packet, value VasExpertsAcctTrafficClassInputOctets) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _VasExperts_AddVendor(p, 17, a)
}

func VasExpertsAcctTrafficClassInputOctets_Get(p *radius.Packet) (value VasExpertsAcctTrafficClassInputOctets) {
	value, _ = VasExpertsAcctTrafficClassInputOctets_Lookup(p)
	return
}

func VasExpertsAcctTrafficClassInputOctets_Gets(p *radius.Packet) (values []VasExpertsAcctTrafficClassInputOctets, err error) {
	var i uint64
	for _, attr := range _VasExperts_GetsVendor(p, 17) {
		i, err = radius.Integer64(attr)
		if err != nil {
			return
		}
		values = append(values, VasExpertsAcctTrafficClassInputOctets(i))
	}
	return
}

func VasExpertsAcctTrafficClassInputOctets_Lookup(p *radius.Packet) (value VasExpertsAcctTrafficClassInputOctets, err error) {
	a, ok := _VasExperts_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint64
	i, err = radius.Integer64(a)
	if err != nil {
		return
	}
	value = VasExpertsAcctTrafficClassInputOctets(i)
	return
}

func VasExpertsAcctTrafficClassInputOctets_Set(p *radius.Packet, value VasExpertsAcctTrafficClassInputOctets) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _VasExperts_SetVendor(p, 17, a)
}

func VasExpertsAcctTrafficClassInputOctets_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 17)
}

type VasExpertsAcctTrafficClassOutputOctets uint64

var VasExpertsAcctTrafficClassOutputOctets_Strings = map[VasExpertsAcctTrafficClassOutputOctets]string{}

func (a VasExpertsAcctTrafficClassOutputOctets) String() string {
	if str, ok := VasExpertsAcctTrafficClassOutputOctets_Strings[a]; ok {
		return str
	}
	return "VasExpertsAcctTrafficClassOutputOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func VasExpertsAcctTrafficClassOutputOctets_Add(p *radius.Packet, value VasExpertsAcctTrafficClassOutputOctets) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _VasExperts_AddVendor(p, 18, a)
}

func VasExpertsAcctTrafficClassOutputOctets_Get(p *radius.Packet) (value VasExpertsAcctTrafficClassOutputOctets) {
	value, _ = VasExpertsAcctTrafficClassOutputOctets_Lookup(p)
	return
}

func VasExpertsAcctTrafficClassOutputOctets_Gets(p *radius.Packet) (values []VasExpertsAcctTrafficClassOutputOctets, err error) {
	var i uint64
	for _, attr := range _VasExperts_GetsVendor(p, 18) {
		i, err = radius.Integer64(attr)
		if err != nil {
			return
		}
		values = append(values, VasExpertsAcctTrafficClassOutputOctets(i))
	}
	return
}

func VasExpertsAcctTrafficClassOutputOctets_Lookup(p *radius.Packet) (value VasExpertsAcctTrafficClassOutputOctets, err error) {
	a, ok := _VasExperts_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint64
	i, err = radius.Integer64(a)
	if err != nil {
		return
	}
	value = VasExpertsAcctTrafficClassOutputOctets(i)
	return
}

func VasExpertsAcctTrafficClassOutputOctets_Set(p *radius.Packet, value VasExpertsAcctTrafficClassOutputOctets) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _VasExperts_SetVendor(p, 18, a)
}

func VasExpertsAcctTrafficClassOutputOctets_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 18)
}

type VasExpertsAcctTrafficClassInputPackets uint64

var VasExpertsAcctTrafficClassInputPackets_Strings = map[VasExpertsAcctTrafficClassInputPackets]string{}

func (a VasExpertsAcctTrafficClassInputPackets) String() string {
	if str, ok := VasExpertsAcctTrafficClassInputPackets_Strings[a]; ok {
		return str
	}
	return "VasExpertsAcctTrafficClassInputPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func VasExpertsAcctTrafficClassInputPackets_Add(p *radius.Packet, value VasExpertsAcctTrafficClassInputPackets) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _VasExperts_AddVendor(p, 19, a)
}

func VasExpertsAcctTrafficClassInputPackets_Get(p *radius.Packet) (value VasExpertsAcctTrafficClassInputPackets) {
	value, _ = VasExpertsAcctTrafficClassInputPackets_Lookup(p)
	return
}

func VasExpertsAcctTrafficClassInputPackets_Gets(p *radius.Packet) (values []VasExpertsAcctTrafficClassInputPackets, err error) {
	var i uint64
	for _, attr := range _VasExperts_GetsVendor(p, 19) {
		i, err = radius.Integer64(attr)
		if err != nil {
			return
		}
		values = append(values, VasExpertsAcctTrafficClassInputPackets(i))
	}
	return
}

func VasExpertsAcctTrafficClassInputPackets_Lookup(p *radius.Packet) (value VasExpertsAcctTrafficClassInputPackets, err error) {
	a, ok := _VasExperts_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint64
	i, err = radius.Integer64(a)
	if err != nil {
		return
	}
	value = VasExpertsAcctTrafficClassInputPackets(i)
	return
}

func VasExpertsAcctTrafficClassInputPackets_Set(p *radius.Packet, value VasExpertsAcctTrafficClassInputPackets) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _VasExperts_SetVendor(p, 19, a)
}

func VasExpertsAcctTrafficClassInputPackets_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 19)
}

type VasExpertsAcctTrafficClassOutputPackets uint64

var VasExpertsAcctTrafficClassOutputPackets_Strings = map[VasExpertsAcctTrafficClassOutputPackets]string{}

func (a VasExpertsAcctTrafficClassOutputPackets) String() string {
	if str, ok := VasExpertsAcctTrafficClassOutputPackets_Strings[a]; ok {
		return str
	}
	return "VasExpertsAcctTrafficClassOutputPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func VasExpertsAcctTrafficClassOutputPackets_Add(p *radius.Packet, value VasExpertsAcctTrafficClassOutputPackets) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _VasExperts_AddVendor(p, 20, a)
}

func VasExpertsAcctTrafficClassOutputPackets_Get(p *radius.Packet) (value VasExpertsAcctTrafficClassOutputPackets) {
	value, _ = VasExpertsAcctTrafficClassOutputPackets_Lookup(p)
	return
}

func VasExpertsAcctTrafficClassOutputPackets_Gets(p *radius.Packet) (values []VasExpertsAcctTrafficClassOutputPackets, err error) {
	var i uint64
	for _, attr := range _VasExperts_GetsVendor(p, 20) {
		i, err = radius.Integer64(attr)
		if err != nil {
			return
		}
		values = append(values, VasExpertsAcctTrafficClassOutputPackets(i))
	}
	return
}

func VasExpertsAcctTrafficClassOutputPackets_Lookup(p *radius.Packet) (value VasExpertsAcctTrafficClassOutputPackets, err error) {
	a, ok := _VasExperts_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint64
	i, err = radius.Integer64(a)
	if err != nil {
		return
	}
	value = VasExpertsAcctTrafficClassOutputPackets(i)
	return
}

func VasExpertsAcctTrafficClassOutputPackets_Set(p *radius.Packet, value VasExpertsAcctTrafficClassOutputPackets) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _VasExperts_SetVendor(p, 20, a)
}

func VasExpertsAcctTrafficClassOutputPackets_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 20)
}

func VasExpertsNATIP_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 21, a)
}

func VasExpertsNATIP_Get(p *radius.Packet) (value net.IP) {
	value, _ = VasExpertsNATIP_Lookup(p)
	return
}

func VasExpertsNATIP_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _VasExperts_GetsVendor(p, 21) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsNATIP_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _VasExperts_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func VasExpertsNATIP_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 21, a)
}

func VasExpertsNATIP_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 21)
}

func VasExpertsDHCPHostname_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 32, a)
}

func VasExpertsDHCPHostname_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 32, a)
}

func VasExpertsDHCPHostname_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsDHCPHostname_Lookup(p)
	return
}

func VasExpertsDHCPHostname_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsDHCPHostname_LookupString(p)
	return
}

func VasExpertsDHCPHostname_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 32) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPHostname_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 32) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPHostname_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsDHCPHostname_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsDHCPHostname_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 32, a)
}

func VasExpertsDHCPHostname_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 32, a)
}

func VasExpertsDHCPHostname_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 32)
}

func VasExpertsDHCPClientId_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 33, a)
}

func VasExpertsDHCPClientId_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 33, a)
}

func VasExpertsDHCPClientId_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsDHCPClientId_Lookup(p)
	return
}

func VasExpertsDHCPClientId_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsDHCPClientId_LookupString(p)
	return
}

func VasExpertsDHCPClientId_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 33) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPClientId_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 33) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPClientId_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsDHCPClientId_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsDHCPClientId_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 33, a)
}

func VasExpertsDHCPClientId_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 33, a)
}

func VasExpertsDHCPClientId_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 33)
}

func VasExpertsDHCPClassId_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 34, a)
}

func VasExpertsDHCPClassId_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 34, a)
}

func VasExpertsDHCPClassId_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsDHCPClassId_Lookup(p)
	return
}

func VasExpertsDHCPClassId_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsDHCPClassId_LookupString(p)
	return
}

func VasExpertsDHCPClassId_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 34) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPClassId_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 34) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPClassId_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsDHCPClassId_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsDHCPClassId_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 34, a)
}

func VasExpertsDHCPClassId_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 34, a)
}

func VasExpertsDHCPClassId_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 34)
}

func VasExpertsDHCPRelayInfo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 35, a)
}

func VasExpertsDHCPRelayInfo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 35, a)
}

func VasExpertsDHCPRelayInfo_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsDHCPRelayInfo_Lookup(p)
	return
}

func VasExpertsDHCPRelayInfo_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsDHCPRelayInfo_LookupString(p)
	return
}

func VasExpertsDHCPRelayInfo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 35) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPRelayInfo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 35) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPRelayInfo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsDHCPRelayInfo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsDHCPRelayInfo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 35, a)
}

func VasExpertsDHCPRelayInfo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 35, a)
}

func VasExpertsDHCPRelayInfo_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 35)
}

func VasExpertsDHCPClientIP_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 36, a)
}

func VasExpertsDHCPClientIP_Get(p *radius.Packet) (value net.IP) {
	value, _ = VasExpertsDHCPClientIP_Lookup(p)
	return
}

func VasExpertsDHCPClientIP_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _VasExperts_GetsVendor(p, 36) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPClientIP_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _VasExperts_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func VasExpertsDHCPClientIP_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 36, a)
}

func VasExpertsDHCPClientIP_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 36)
}

type VasExpertsDHCPRequest uint32

const (
	VasExpertsDHCPRequest_Value_Discover VasExpertsDHCPRequest = 0
	VasExpertsDHCPRequest_Value_Inform   VasExpertsDHCPRequest = 1
	VasExpertsDHCPRequest_Value_Request  VasExpertsDHCPRequest = 2
)

var VasExpertsDHCPRequest_Strings = map[VasExpertsDHCPRequest]string{
	VasExpertsDHCPRequest_Value_Discover: "Discover",
	VasExpertsDHCPRequest_Value_Inform:   "Inform",
	VasExpertsDHCPRequest_Value_Request:  "Request",
}

func (a VasExpertsDHCPRequest) String() string {
	if str, ok := VasExpertsDHCPRequest_Strings[a]; ok {
		return str
	}
	return "VasExpertsDHCPRequest(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func VasExpertsDHCPRequest_Add(p *radius.Packet, value VasExpertsDHCPRequest) (err error) {
	a := radius.NewInteger(uint32(value))
	return _VasExperts_AddVendor(p, 37, a)
}

func VasExpertsDHCPRequest_Get(p *radius.Packet) (value VasExpertsDHCPRequest) {
	value, _ = VasExpertsDHCPRequest_Lookup(p)
	return
}

func VasExpertsDHCPRequest_Gets(p *radius.Packet) (values []VasExpertsDHCPRequest, err error) {
	var i uint32
	for _, attr := range _VasExperts_GetsVendor(p, 37) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, VasExpertsDHCPRequest(i))
	}
	return
}

func VasExpertsDHCPRequest_Lookup(p *radius.Packet) (value VasExpertsDHCPRequest, err error) {
	a, ok := _VasExperts_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = VasExpertsDHCPRequest(i)
	return
}

func VasExpertsDHCPRequest_Set(p *radius.Packet, value VasExpertsDHCPRequest) (err error) {
	a := radius.NewInteger(uint32(value))
	return _VasExperts_SetVendor(p, 37, a)
}

func VasExpertsDHCPRequest_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 37)
}

func VasExpertsDHCPRelayRemoteId_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 38, a)
}

func VasExpertsDHCPRelayRemoteId_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 38, a)
}

func VasExpertsDHCPRelayRemoteId_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsDHCPRelayRemoteId_Lookup(p)
	return
}

func VasExpertsDHCPRelayRemoteId_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsDHCPRelayRemoteId_LookupString(p)
	return
}

func VasExpertsDHCPRelayRemoteId_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 38) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPRelayRemoteId_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 38) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPRelayRemoteId_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsDHCPRelayRemoteId_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsDHCPRelayRemoteId_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 38, a)
}

func VasExpertsDHCPRelayRemoteId_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 38, a)
}

func VasExpertsDHCPRelayRemoteId_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 38)
}

func VasExpertsDHCPRelayCircuitId_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 39, a)
}

func VasExpertsDHCPRelayCircuitId_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 39, a)
}

func VasExpertsDHCPRelayCircuitId_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsDHCPRelayCircuitId_Lookup(p)
	return
}

func VasExpertsDHCPRelayCircuitId_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsDHCPRelayCircuitId_LookupString(p)
	return
}

func VasExpertsDHCPRelayCircuitId_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 39) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPRelayCircuitId_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 39) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPRelayCircuitId_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsDHCPRelayCircuitId_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsDHCPRelayCircuitId_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 39, a)
}

func VasExpertsDHCPRelayCircuitId_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 39, a)
}

func VasExpertsDHCPRelayCircuitId_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 39)
}

func VasExpertsDHCPOption_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 40, a)
}

func VasExpertsDHCPOption_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 40, a)
}

func VasExpertsDHCPOption_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsDHCPOption_Lookup(p)
	return
}

func VasExpertsDHCPOption_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsDHCPOption_LookupString(p)
	return
}

func VasExpertsDHCPOption_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 40) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPOption_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 40) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPOption_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsDHCPOption_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsDHCPOption_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 40, a)
}

func VasExpertsDHCPOption_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 40, a)
}

func VasExpertsDHCPOption_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 40)
}

func VasExpertsDHCPDNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 41, a)
}

func VasExpertsDHCPDNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = VasExpertsDHCPDNS_Lookup(p)
	return
}

func VasExpertsDHCPDNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _VasExperts_GetsVendor(p, 41) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPDNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _VasExperts_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func VasExpertsDHCPDNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 41, a)
}

func VasExpertsDHCPDNS_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 41)
}

func VasExpertsDHCPGateway_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 42, a)
}

func VasExpertsDHCPGateway_Get(p *radius.Packet) (value net.IP) {
	value, _ = VasExpertsDHCPGateway_Lookup(p)
	return
}

func VasExpertsDHCPGateway_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _VasExperts_GetsVendor(p, 42) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPGateway_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _VasExperts_LookupVendor(p, 42)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func VasExpertsDHCPGateway_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 42, a)
}

func VasExpertsDHCPGateway_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 42)
}

func VasExpertsBOOTPSName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 43, a)
}

func VasExpertsBOOTPSName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 43, a)
}

func VasExpertsBOOTPSName_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsBOOTPSName_Lookup(p)
	return
}

func VasExpertsBOOTPSName_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsBOOTPSName_LookupString(p)
	return
}

func VasExpertsBOOTPSName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 43) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsBOOTPSName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 43) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsBOOTPSName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 43)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsBOOTPSName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 43)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsBOOTPSName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 43, a)
}

func VasExpertsBOOTPSName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 43, a)
}

func VasExpertsBOOTPSName_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 43)
}

func VasExpertsBOOTPFile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 44, a)
}

func VasExpertsBOOTPFile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 44, a)
}

func VasExpertsBOOTPFile_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsBOOTPFile_Lookup(p)
	return
}

func VasExpertsBOOTPFile_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsBOOTPFile_LookupString(p)
	return
}

func VasExpertsBOOTPFile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 44) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsBOOTPFile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 44) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsBOOTPFile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsBOOTPFile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsBOOTPFile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 44, a)
}

func VasExpertsBOOTPFile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 44, a)
}

func VasExpertsBOOTPFile_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 44)
}

func VasExpertsDHCPOptionIP_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 45, a)
}

func VasExpertsDHCPOptionIP_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 45, a)
}

func VasExpertsDHCPOptionIP_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsDHCPOptionIP_Lookup(p)
	return
}

func VasExpertsDHCPOptionIP_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsDHCPOptionIP_LookupString(p)
	return
}

func VasExpertsDHCPOptionIP_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 45) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPOptionIP_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 45) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPOptionIP_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsDHCPOptionIP_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsDHCPOptionIP_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 45, a)
}

func VasExpertsDHCPOptionIP_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 45, a)
}

func VasExpertsDHCPOptionIP_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 45)
}

func VasExpertsDHCPOptionNum_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 46, a)
}

func VasExpertsDHCPOptionNum_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 46, a)
}

func VasExpertsDHCPOptionNum_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsDHCPOptionNum_Lookup(p)
	return
}

func VasExpertsDHCPOptionNum_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsDHCPOptionNum_LookupString(p)
	return
}

func VasExpertsDHCPOptionNum_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 46) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPOptionNum_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 46) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPOptionNum_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsDHCPOptionNum_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsDHCPOptionNum_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 46, a)
}

func VasExpertsDHCPOptionNum_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 46, a)
}

func VasExpertsDHCPOptionNum_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 46)
}

func VasExpertsDHCPOptionString_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 47, a)
}

func VasExpertsDHCPOptionString_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 47, a)
}

func VasExpertsDHCPOptionString_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsDHCPOptionString_Lookup(p)
	return
}

func VasExpertsDHCPOptionString_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsDHCPOptionString_LookupString(p)
	return
}

func VasExpertsDHCPOptionString_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 47) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPOptionString_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 47) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPOptionString_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 47)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsDHCPOptionString_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 47)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsDHCPOptionString_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 47, a)
}

func VasExpertsDHCPOptionString_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 47, a)
}

func VasExpertsDHCPOptionString_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 47)
}

func VasExpertsDHCPOptionBin_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 48, a)
}

func VasExpertsDHCPOptionBin_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 48, a)
}

func VasExpertsDHCPOptionBin_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsDHCPOptionBin_Lookup(p)
	return
}

func VasExpertsDHCPOptionBin_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsDHCPOptionBin_LookupString(p)
	return
}

func VasExpertsDHCPOptionBin_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 48) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPOptionBin_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 48) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPOptionBin_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 48)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsDHCPOptionBin_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 48)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsDHCPOptionBin_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 48, a)
}

func VasExpertsDHCPOptionBin_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 48, a)
}

func VasExpertsDHCPOptionBin_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 48)
}

func VasExpertsARPSourceIP_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 60, a)
}

func VasExpertsARPSourceIP_Get(p *radius.Packet) (value net.IP) {
	value, _ = VasExpertsARPSourceIP_Lookup(p)
	return
}

func VasExpertsARPSourceIP_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _VasExperts_GetsVendor(p, 60) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsARPSourceIP_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _VasExperts_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func VasExpertsARPSourceIP_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 60, a)
}

func VasExpertsARPSourceIP_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 60)
}

func VasExpertsARPTargetIP_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 61, a)
}

func VasExpertsARPTargetIP_Get(p *radius.Packet) (value net.IP) {
	value, _ = VasExpertsARPTargetIP_Lookup(p)
	return
}

func VasExpertsARPTargetIP_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _VasExperts_GetsVendor(p, 61) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsARPTargetIP_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _VasExperts_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func VasExpertsARPTargetIP_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 61, a)
}

func VasExpertsARPTargetIP_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 61)
}

type VasExpertsDHCPv6Request uint32

const (
	VasExpertsDHCPv6Request_Value_Solicit VasExpertsDHCPv6Request = 1
	VasExpertsDHCPv6Request_Value_Request VasExpertsDHCPv6Request = 3
	VasExpertsDHCPv6Request_Value_Renew   VasExpertsDHCPv6Request = 5
	VasExpertsDHCPv6Request_Value_Rebind  VasExpertsDHCPv6Request = 6
)

var VasExpertsDHCPv6Request_Strings = map[VasExpertsDHCPv6Request]string{
	VasExpertsDHCPv6Request_Value_Solicit: "Solicit",
	VasExpertsDHCPv6Request_Value_Request: "Request",
	VasExpertsDHCPv6Request_Value_Renew:   "Renew",
	VasExpertsDHCPv6Request_Value_Rebind:  "Rebind",
}

func (a VasExpertsDHCPv6Request) String() string {
	if str, ok := VasExpertsDHCPv6Request_Strings[a]; ok {
		return str
	}
	return "VasExpertsDHCPv6Request(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func VasExpertsDHCPv6Request_Add(p *radius.Packet, value VasExpertsDHCPv6Request) (err error) {
	a := radius.NewInteger(uint32(value))
	return _VasExperts_AddVendor(p, 70, a)
}

func VasExpertsDHCPv6Request_Get(p *radius.Packet) (value VasExpertsDHCPv6Request) {
	value, _ = VasExpertsDHCPv6Request_Lookup(p)
	return
}

func VasExpertsDHCPv6Request_Gets(p *radius.Packet) (values []VasExpertsDHCPv6Request, err error) {
	var i uint32
	for _, attr := range _VasExperts_GetsVendor(p, 70) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, VasExpertsDHCPv6Request(i))
	}
	return
}

func VasExpertsDHCPv6Request_Lookup(p *radius.Packet) (value VasExpertsDHCPv6Request, err error) {
	a, ok := _VasExperts_LookupVendor(p, 70)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = VasExpertsDHCPv6Request(i)
	return
}

func VasExpertsDHCPv6Request_Set(p *radius.Packet, value VasExpertsDHCPv6Request) (err error) {
	a := radius.NewInteger(uint32(value))
	return _VasExperts_SetVendor(p, 70, a)
}

func VasExpertsDHCPv6Request_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 70)
}

func VasExpertsDHCPv6UserClass_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 71, a)
}

func VasExpertsDHCPv6UserClass_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 71, a)
}

func VasExpertsDHCPv6UserClass_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsDHCPv6UserClass_Lookup(p)
	return
}

func VasExpertsDHCPv6UserClass_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsDHCPv6UserClass_LookupString(p)
	return
}

func VasExpertsDHCPv6UserClass_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 71) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPv6UserClass_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 71) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPv6UserClass_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 71)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsDHCPv6UserClass_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 71)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsDHCPv6UserClass_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 71, a)
}

func VasExpertsDHCPv6UserClass_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 71, a)
}

func VasExpertsDHCPv6UserClass_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 71)
}

func VasExpertsDHCPv6VendorClass_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 72, a)
}

func VasExpertsDHCPv6VendorClass_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 72, a)
}

func VasExpertsDHCPv6VendorClass_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsDHCPv6VendorClass_Lookup(p)
	return
}

func VasExpertsDHCPv6VendorClass_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsDHCPv6VendorClass_LookupString(p)
	return
}

func VasExpertsDHCPv6VendorClass_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 72) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPv6VendorClass_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 72) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPv6VendorClass_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 72)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsDHCPv6VendorClass_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 72)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsDHCPv6VendorClass_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 72, a)
}

func VasExpertsDHCPv6VendorClass_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 72, a)
}

func VasExpertsDHCPv6VendorClass_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 72)
}

func VasExpertsDHCPv6RemoteId_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 73, a)
}

func VasExpertsDHCPv6RemoteId_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 73, a)
}

func VasExpertsDHCPv6RemoteId_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsDHCPv6RemoteId_Lookup(p)
	return
}

func VasExpertsDHCPv6RemoteId_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsDHCPv6RemoteId_LookupString(p)
	return
}

func VasExpertsDHCPv6RemoteId_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 73) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPv6RemoteId_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 73) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPv6RemoteId_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsDHCPv6RemoteId_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsDHCPv6RemoteId_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 73, a)
}

func VasExpertsDHCPv6RemoteId_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 73, a)
}

func VasExpertsDHCPv6RemoteId_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 73)
}

func VasExpertsDHCPv6SubsId_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 74, a)
}

func VasExpertsDHCPv6SubsId_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 74, a)
}

func VasExpertsDHCPv6SubsId_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsDHCPv6SubsId_Lookup(p)
	return
}

func VasExpertsDHCPv6SubsId_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsDHCPv6SubsId_LookupString(p)
	return
}

func VasExpertsDHCPv6SubsId_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 74) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPv6SubsId_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 74) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPv6SubsId_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 74)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsDHCPv6SubsId_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 74)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsDHCPv6SubsId_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 74, a)
}

func VasExpertsDHCPv6SubsId_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 74, a)
}

func VasExpertsDHCPv6SubsId_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 74)
}

type VasExpertsDHCPv6Delegated uint32

var VasExpertsDHCPv6Delegated_Strings = map[VasExpertsDHCPv6Delegated]string{}

func (a VasExpertsDHCPv6Delegated) String() string {
	if str, ok := VasExpertsDHCPv6Delegated_Strings[a]; ok {
		return str
	}
	return "VasExpertsDHCPv6Delegated(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func VasExpertsDHCPv6Delegated_Add(p *radius.Packet, value VasExpertsDHCPv6Delegated) (err error) {
	a := radius.NewInteger(uint32(value))
	return _VasExperts_AddVendor(p, 75, a)
}

func VasExpertsDHCPv6Delegated_Get(p *radius.Packet) (value VasExpertsDHCPv6Delegated) {
	value, _ = VasExpertsDHCPv6Delegated_Lookup(p)
	return
}

func VasExpertsDHCPv6Delegated_Gets(p *radius.Packet) (values []VasExpertsDHCPv6Delegated, err error) {
	var i uint32
	for _, attr := range _VasExperts_GetsVendor(p, 75) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, VasExpertsDHCPv6Delegated(i))
	}
	return
}

func VasExpertsDHCPv6Delegated_Lookup(p *radius.Packet) (value VasExpertsDHCPv6Delegated, err error) {
	a, ok := _VasExperts_LookupVendor(p, 75)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = VasExpertsDHCPv6Delegated(i)
	return
}

func VasExpertsDHCPv6Delegated_Set(p *radius.Packet, value VasExpertsDHCPv6Delegated) (err error) {
	a := radius.NewInteger(uint32(value))
	return _VasExperts_SetVendor(p, 75, a)
}

func VasExpertsDHCPv6Delegated_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 75)
}

func VasExpertsDHCPOptionIPv6_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 80, a)
}

func VasExpertsDHCPOptionIPv6_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 80, a)
}

func VasExpertsDHCPOptionIPv6_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsDHCPOptionIPv6_Lookup(p)
	return
}

func VasExpertsDHCPOptionIPv6_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsDHCPOptionIPv6_LookupString(p)
	return
}

func VasExpertsDHCPOptionIPv6_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 80) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPOptionIPv6_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 80) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPOptionIPv6_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 80)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsDHCPOptionIPv6_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 80)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsDHCPOptionIPv6_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 80, a)
}

func VasExpertsDHCPOptionIPv6_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 80, a)
}

func VasExpertsDHCPOptionIPv6_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 80)
}

func VasExpertsDHCPOptionIPv6Prefix_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 81, a)
}

func VasExpertsDHCPOptionIPv6Prefix_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 81, a)
}

func VasExpertsDHCPOptionIPv6Prefix_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsDHCPOptionIPv6Prefix_Lookup(p)
	return
}

func VasExpertsDHCPOptionIPv6Prefix_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsDHCPOptionIPv6Prefix_LookupString(p)
	return
}

func VasExpertsDHCPOptionIPv6Prefix_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 81) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPOptionIPv6Prefix_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 81) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCPOptionIPv6Prefix_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 81)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsDHCPOptionIPv6Prefix_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 81)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsDHCPOptionIPv6Prefix_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 81, a)
}

func VasExpertsDHCPOptionIPv6Prefix_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 81, a)
}

func VasExpertsDHCPOptionIPv6Prefix_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 81)
}

func VasExpertsDHCP6OptionNum_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 82, a)
}

func VasExpertsDHCP6OptionNum_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 82, a)
}

func VasExpertsDHCP6OptionNum_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsDHCP6OptionNum_Lookup(p)
	return
}

func VasExpertsDHCP6OptionNum_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsDHCP6OptionNum_LookupString(p)
	return
}

func VasExpertsDHCP6OptionNum_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 82) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCP6OptionNum_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 82) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCP6OptionNum_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsDHCP6OptionNum_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsDHCP6OptionNum_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 82, a)
}

func VasExpertsDHCP6OptionNum_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 82, a)
}

func VasExpertsDHCP6OptionNum_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 82)
}

func VasExpertsDHCP6OptionString_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 83, a)
}

func VasExpertsDHCP6OptionString_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 83, a)
}

func VasExpertsDHCP6OptionString_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsDHCP6OptionString_Lookup(p)
	return
}

func VasExpertsDHCP6OptionString_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsDHCP6OptionString_LookupString(p)
	return
}

func VasExpertsDHCP6OptionString_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 83) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCP6OptionString_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 83) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCP6OptionString_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 83)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsDHCP6OptionString_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 83)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsDHCP6OptionString_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 83, a)
}

func VasExpertsDHCP6OptionString_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 83, a)
}

func VasExpertsDHCP6OptionString_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 83)
}

func VasExpertsDHCP6OptionBin_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 84, a)
}

func VasExpertsDHCP6OptionBin_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_AddVendor(p, 84, a)
}

func VasExpertsDHCP6OptionBin_Get(p *radius.Packet) (value []byte) {
	value, _ = VasExpertsDHCP6OptionBin_Lookup(p)
	return
}

func VasExpertsDHCP6OptionBin_GetString(p *radius.Packet) (value string) {
	value, _ = VasExpertsDHCP6OptionBin_LookupString(p)
	return
}

func VasExpertsDHCP6OptionBin_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _VasExperts_GetsVendor(p, 84) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCP6OptionBin_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _VasExperts_GetsVendor(p, 84) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func VasExpertsDHCP6OptionBin_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _VasExperts_LookupVendor(p, 84)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func VasExpertsDHCP6OptionBin_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _VasExperts_LookupVendor(p, 84)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func VasExpertsDHCP6OptionBin_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 84, a)
}

func VasExpertsDHCP6OptionBin_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _VasExperts_SetVendor(p, 84, a)
}

func VasExpertsDHCP6OptionBin_Del(p *radius.Packet) {
	_VasExperts_DelVendor(p, 84)
}
