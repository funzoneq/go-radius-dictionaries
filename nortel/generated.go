// Code generated by radius-dict-gen. DO NOT EDIT.

package nortel

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Nortel_VendorID = 562
)

func _Nortel_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Nortel_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Nortel_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Nortel_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Nortel_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Nortel_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Nortel_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Nortel_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Nortel_AddVendor(p, typ, attr)
}

func _Nortel_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Nortel_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func NortelUserRole_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nortel_AddVendor(p, 110, a)
}

func NortelUserRole_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nortel_AddVendor(p, 110, a)
}

func NortelUserRole_Get(p *radius.Packet) (value []byte) {
	value, _ = NortelUserRole_Lookup(p)
	return
}

func NortelUserRole_GetString(p *radius.Packet) (value string) {
	value, _ = NortelUserRole_LookupString(p)
	return
}

func NortelUserRole_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Nortel_GetsVendor(p, 110) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NortelUserRole_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Nortel_GetsVendor(p, 110) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NortelUserRole_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Nortel_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NortelUserRole_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Nortel_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NortelUserRole_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nortel_SetVendor(p, 110, a)
}

func NortelUserRole_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nortel_SetVendor(p, 110, a)
}

func NortelUserRole_Del(p *radius.Packet) {
	_Nortel_DelVendor(p, 110)
}

type NortelPrivilegeLevel uint32

const (
	NortelPrivilegeLevel_Value_VoiceMailAdmin        NortelPrivilegeLevel = 0
	NortelPrivilegeLevel_Value_ContactCenter         NortelPrivilegeLevel = 1
	NortelPrivilegeLevel_Value_SBAInstaller          NortelPrivilegeLevel = 2
	NortelPrivilegeLevel_Value_SBASystemCoord        NortelPrivilegeLevel = 3
	NortelPrivilegeLevel_Value_SBASystemCoordBasic   NortelPrivilegeLevel = 4
	NortelPrivilegeLevel_Value_SBABasic              NortelPrivilegeLevel = 5
	NortelPrivilegeLevel_Value_Security              NortelPrivilegeLevel = 6
	NortelPrivilegeLevel_Value_CTEApp                NortelPrivilegeLevel = 7
	NortelPrivilegeLevel_Value_SBAIPSetRegistration  NortelPrivilegeLevel = 8
	NortelPrivilegeLevel_Value_ApplicationBCMMonitor NortelPrivilegeLevel = 9
	NortelPrivilegeLevel_Value_CDRApp                NortelPrivilegeLevel = 10
	NortelPrivilegeLevel_Value_ModemLogin            NortelPrivilegeLevel = 11
	NortelPrivilegeLevel_Value_GuestLogin            NortelPrivilegeLevel = 12
	NortelPrivilegeLevel_Value_AdminDownload         NortelPrivilegeLevel = 13
	NortelPrivilegeLevel_Value_ExclusiveAccess       NortelPrivilegeLevel = 14
	NortelPrivilegeLevel_Value_Admin                 NortelPrivilegeLevel = 15
	NortelPrivilegeLevel_Value_DataAdmin             NortelPrivilegeLevel = 16
	NortelPrivilegeLevel_Value_RemoteAccess          NortelPrivilegeLevel = 17
	NortelPrivilegeLevel_Value_Guest                 NortelPrivilegeLevel = 18
	NortelPrivilegeLevel_Value_VoiceAdmin            NortelPrivilegeLevel = 19
	NortelPrivilegeLevel_Value_BackupOperator        NortelPrivilegeLevel = 20
	NortelPrivilegeLevel_Value_RemoteMonitoring      NortelPrivilegeLevel = 21
	NortelPrivilegeLevel_Value_SoftwareUpgrade       NortelPrivilegeLevel = 22
	NortelPrivilegeLevel_Value_AlarmViewer           NortelPrivilegeLevel = 24
	NortelPrivilegeLevel_Value_OperationalLogs       NortelPrivilegeLevel = 26
	NortelPrivilegeLevel_Value_DiagnosticLogs        NortelPrivilegeLevel = 27
	NortelPrivilegeLevel_Value_ApplicationIVR        NortelPrivilegeLevel = 28
	NortelPrivilegeLevel_Value_ISDNDialIn            NortelPrivilegeLevel = 30
	NortelPrivilegeLevel_Value_WANDialIn             NortelPrivilegeLevel = 32
	NortelPrivilegeLevel_Value_SystemSerialPort      NortelPrivilegeLevel = 36
)

var NortelPrivilegeLevel_Strings = map[NortelPrivilegeLevel]string{
	NortelPrivilegeLevel_Value_VoiceMailAdmin:        "VoiceMailAdmin",
	NortelPrivilegeLevel_Value_ContactCenter:         "ContactCenter",
	NortelPrivilegeLevel_Value_SBAInstaller:          "SBAInstaller",
	NortelPrivilegeLevel_Value_SBASystemCoord:        "SBASystemCoord",
	NortelPrivilegeLevel_Value_SBASystemCoordBasic:   "SBASystemCoordBasic",
	NortelPrivilegeLevel_Value_SBABasic:              "SBABasic",
	NortelPrivilegeLevel_Value_Security:              "Security",
	NortelPrivilegeLevel_Value_CTEApp:                "CTEApp",
	NortelPrivilegeLevel_Value_SBAIPSetRegistration:  "SBA-IPSetRegistration",
	NortelPrivilegeLevel_Value_ApplicationBCMMonitor: "Application-BCMMonitor",
	NortelPrivilegeLevel_Value_CDRApp:                "CDRApp",
	NortelPrivilegeLevel_Value_ModemLogin:            "ModemLogin",
	NortelPrivilegeLevel_Value_GuestLogin:            "GuestLogin",
	NortelPrivilegeLevel_Value_AdminDownload:         "AdminDownload",
	NortelPrivilegeLevel_Value_ExclusiveAccess:       "ExclusiveAccess",
	NortelPrivilegeLevel_Value_Admin:                 "Admin",
	NortelPrivilegeLevel_Value_DataAdmin:             "DataAdmin",
	NortelPrivilegeLevel_Value_RemoteAccess:          "RemoteAccess",
	NortelPrivilegeLevel_Value_Guest:                 "Guest",
	NortelPrivilegeLevel_Value_VoiceAdmin:            "VoiceAdmin",
	NortelPrivilegeLevel_Value_BackupOperator:        "BackupOperator",
	NortelPrivilegeLevel_Value_RemoteMonitoring:      "RemoteMonitoring",
	NortelPrivilegeLevel_Value_SoftwareUpgrade:       "SoftwareUpgrade",
	NortelPrivilegeLevel_Value_AlarmViewer:           "AlarmViewer",
	NortelPrivilegeLevel_Value_OperationalLogs:       "OperationalLogs",
	NortelPrivilegeLevel_Value_DiagnosticLogs:        "DiagnosticLogs",
	NortelPrivilegeLevel_Value_ApplicationIVR:        "ApplicationIVR",
	NortelPrivilegeLevel_Value_ISDNDialIn:            "ISDN-Dial-in",
	NortelPrivilegeLevel_Value_WANDialIn:             "WAN-Dial-in",
	NortelPrivilegeLevel_Value_SystemSerialPort:      "System-SerialPort",
}

func (a NortelPrivilegeLevel) String() string {
	if str, ok := NortelPrivilegeLevel_Strings[a]; ok {
		return str
	}
	return "NortelPrivilegeLevel(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NortelPrivilegeLevel_Add(p *radius.Packet, value NortelPrivilegeLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Nortel_AddVendor(p, 166, a)
}

func NortelPrivilegeLevel_Get(p *radius.Packet) (value NortelPrivilegeLevel) {
	value, _ = NortelPrivilegeLevel_Lookup(p)
	return
}

func NortelPrivilegeLevel_Gets(p *radius.Packet) (values []NortelPrivilegeLevel, err error) {
	var i uint32
	for _, attr := range _Nortel_GetsVendor(p, 166) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NortelPrivilegeLevel(i))
	}
	return
}

func NortelPrivilegeLevel_Lookup(p *radius.Packet) (value NortelPrivilegeLevel, err error) {
	a, ok := _Nortel_LookupVendor(p, 166)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NortelPrivilegeLevel(i)
	return
}

func NortelPrivilegeLevel_Set(p *radius.Packet, value NortelPrivilegeLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Nortel_SetVendor(p, 166, a)
}

func NortelPrivilegeLevel_Del(p *radius.Packet) {
	_Nortel_DelVendor(p, 166)
}

type PassportCommandScope uint32

var PassportCommandScope_Strings = map[PassportCommandScope]string{}

func (a PassportCommandScope) String() string {
	if str, ok := PassportCommandScope_Strings[a]; ok {
		return str
	}
	return "PassportCommandScope(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PassportCommandScope_Add(p *radius.Packet, value PassportCommandScope) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Nortel_AddVendor(p, 200, a)
}

func PassportCommandScope_Get(p *radius.Packet) (value PassportCommandScope) {
	value, _ = PassportCommandScope_Lookup(p)
	return
}

func PassportCommandScope_Gets(p *radius.Packet) (values []PassportCommandScope, err error) {
	var i uint32
	for _, attr := range _Nortel_GetsVendor(p, 200) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PassportCommandScope(i))
	}
	return
}

func PassportCommandScope_Lookup(p *radius.Packet) (value PassportCommandScope, err error) {
	a, ok := _Nortel_LookupVendor(p, 200)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PassportCommandScope(i)
	return
}

func PassportCommandScope_Set(p *radius.Packet, value PassportCommandScope) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Nortel_SetVendor(p, 200, a)
}

func PassportCommandScope_Del(p *radius.Packet) {
	_Nortel_DelVendor(p, 200)
}

type PassportCommandImpact uint32

var PassportCommandImpact_Strings = map[PassportCommandImpact]string{}

func (a PassportCommandImpact) String() string {
	if str, ok := PassportCommandImpact_Strings[a]; ok {
		return str
	}
	return "PassportCommandImpact(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PassportCommandImpact_Add(p *radius.Packet, value PassportCommandImpact) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Nortel_AddVendor(p, 201, a)
}

func PassportCommandImpact_Get(p *radius.Packet) (value PassportCommandImpact) {
	value, _ = PassportCommandImpact_Lookup(p)
	return
}

func PassportCommandImpact_Gets(p *radius.Packet) (values []PassportCommandImpact, err error) {
	var i uint32
	for _, attr := range _Nortel_GetsVendor(p, 201) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PassportCommandImpact(i))
	}
	return
}

func PassportCommandImpact_Lookup(p *radius.Packet) (value PassportCommandImpact, err error) {
	a, ok := _Nortel_LookupVendor(p, 201)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PassportCommandImpact(i)
	return
}

func PassportCommandImpact_Set(p *radius.Packet, value PassportCommandImpact) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Nortel_SetVendor(p, 201, a)
}

func PassportCommandImpact_Del(p *radius.Packet) {
	_Nortel_DelVendor(p, 201)
}

type PassportCustomerIdentifier uint32

var PassportCustomerIdentifier_Strings = map[PassportCustomerIdentifier]string{}

func (a PassportCustomerIdentifier) String() string {
	if str, ok := PassportCustomerIdentifier_Strings[a]; ok {
		return str
	}
	return "PassportCustomerIdentifier(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PassportCustomerIdentifier_Add(p *radius.Packet, value PassportCustomerIdentifier) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Nortel_AddVendor(p, 202, a)
}

func PassportCustomerIdentifier_Get(p *radius.Packet) (value PassportCustomerIdentifier) {
	value, _ = PassportCustomerIdentifier_Lookup(p)
	return
}

func PassportCustomerIdentifier_Gets(p *radius.Packet) (values []PassportCustomerIdentifier, err error) {
	var i uint32
	for _, attr := range _Nortel_GetsVendor(p, 202) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PassportCustomerIdentifier(i))
	}
	return
}

func PassportCustomerIdentifier_Lookup(p *radius.Packet) (value PassportCustomerIdentifier, err error) {
	a, ok := _Nortel_LookupVendor(p, 202)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PassportCustomerIdentifier(i)
	return
}

func PassportCustomerIdentifier_Set(p *radius.Packet, value PassportCustomerIdentifier) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Nortel_SetVendor(p, 202, a)
}

func PassportCustomerIdentifier_Del(p *radius.Packet) {
	_Nortel_DelVendor(p, 202)
}

type PassportAllowedAccess uint32

var PassportAllowedAccess_Strings = map[PassportAllowedAccess]string{}

func (a PassportAllowedAccess) String() string {
	if str, ok := PassportAllowedAccess_Strings[a]; ok {
		return str
	}
	return "PassportAllowedAccess(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PassportAllowedAccess_Add(p *radius.Packet, value PassportAllowedAccess) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Nortel_AddVendor(p, 203, a)
}

func PassportAllowedAccess_Get(p *radius.Packet) (value PassportAllowedAccess) {
	value, _ = PassportAllowedAccess_Lookup(p)
	return
}

func PassportAllowedAccess_Gets(p *radius.Packet) (values []PassportAllowedAccess, err error) {
	var i uint32
	for _, attr := range _Nortel_GetsVendor(p, 203) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PassportAllowedAccess(i))
	}
	return
}

func PassportAllowedAccess_Lookup(p *radius.Packet) (value PassportAllowedAccess, err error) {
	a, ok := _Nortel_LookupVendor(p, 203)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PassportAllowedAccess(i)
	return
}

func PassportAllowedAccess_Set(p *radius.Packet, value PassportAllowedAccess) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Nortel_SetVendor(p, 203, a)
}

func PassportAllowedAccess_Del(p *radius.Packet) {
	_Nortel_DelVendor(p, 203)
}

type PassportAllowedOutAccess uint32

var PassportAllowedOutAccess_Strings = map[PassportAllowedOutAccess]string{}

func (a PassportAllowedOutAccess) String() string {
	if str, ok := PassportAllowedOutAccess_Strings[a]; ok {
		return str
	}
	return "PassportAllowedOutAccess(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PassportAllowedOutAccess_Add(p *radius.Packet, value PassportAllowedOutAccess) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Nortel_AddVendor(p, 204, a)
}

func PassportAllowedOutAccess_Get(p *radius.Packet) (value PassportAllowedOutAccess) {
	value, _ = PassportAllowedOutAccess_Lookup(p)
	return
}

func PassportAllowedOutAccess_Gets(p *radius.Packet) (values []PassportAllowedOutAccess, err error) {
	var i uint32
	for _, attr := range _Nortel_GetsVendor(p, 204) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PassportAllowedOutAccess(i))
	}
	return
}

func PassportAllowedOutAccess_Lookup(p *radius.Packet) (value PassportAllowedOutAccess, err error) {
	a, ok := _Nortel_LookupVendor(p, 204)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PassportAllowedOutAccess(i)
	return
}

func PassportAllowedOutAccess_Set(p *radius.Packet, value PassportAllowedOutAccess) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Nortel_SetVendor(p, 204, a)
}

func PassportAllowedOutAccess_Del(p *radius.Packet) {
	_Nortel_DelVendor(p, 204)
}

func PassportLoginDirectory_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nortel_AddVendor(p, 205, a)
}

func PassportLoginDirectory_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nortel_AddVendor(p, 205, a)
}

func PassportLoginDirectory_Get(p *radius.Packet) (value []byte) {
	value, _ = PassportLoginDirectory_Lookup(p)
	return
}

func PassportLoginDirectory_GetString(p *radius.Packet) (value string) {
	value, _ = PassportLoginDirectory_LookupString(p)
	return
}

func PassportLoginDirectory_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Nortel_GetsVendor(p, 205) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PassportLoginDirectory_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Nortel_GetsVendor(p, 205) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PassportLoginDirectory_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Nortel_LookupVendor(p, 205)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PassportLoginDirectory_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Nortel_LookupVendor(p, 205)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PassportLoginDirectory_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nortel_SetVendor(p, 205, a)
}

func PassportLoginDirectory_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nortel_SetVendor(p, 205, a)
}

func PassportLoginDirectory_Del(p *radius.Packet) {
	_Nortel_DelVendor(p, 205)
}

type PassportTimeoutProtocol uint32

var PassportTimeoutProtocol_Strings = map[PassportTimeoutProtocol]string{}

func (a PassportTimeoutProtocol) String() string {
	if str, ok := PassportTimeoutProtocol_Strings[a]; ok {
		return str
	}
	return "PassportTimeoutProtocol(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PassportTimeoutProtocol_Add(p *radius.Packet, value PassportTimeoutProtocol) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Nortel_AddVendor(p, 206, a)
}

func PassportTimeoutProtocol_Get(p *radius.Packet) (value PassportTimeoutProtocol) {
	value, _ = PassportTimeoutProtocol_Lookup(p)
	return
}

func PassportTimeoutProtocol_Gets(p *radius.Packet) (values []PassportTimeoutProtocol, err error) {
	var i uint32
	for _, attr := range _Nortel_GetsVendor(p, 206) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PassportTimeoutProtocol(i))
	}
	return
}

func PassportTimeoutProtocol_Lookup(p *radius.Packet) (value PassportTimeoutProtocol, err error) {
	a, ok := _Nortel_LookupVendor(p, 206)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PassportTimeoutProtocol(i)
	return
}

func PassportTimeoutProtocol_Set(p *radius.Packet, value PassportTimeoutProtocol) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Nortel_SetVendor(p, 206, a)
}

func PassportTimeoutProtocol_Del(p *radius.Packet) {
	_Nortel_DelVendor(p, 206)
}

func PassportRole_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nortel_AddVendor(p, 207, a)
}

func PassportRole_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nortel_AddVendor(p, 207, a)
}

func PassportRole_Get(p *radius.Packet) (value []byte) {
	value, _ = PassportRole_Lookup(p)
	return
}

func PassportRole_GetString(p *radius.Packet) (value string) {
	value, _ = PassportRole_LookupString(p)
	return
}

func PassportRole_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Nortel_GetsVendor(p, 207) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PassportRole_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Nortel_GetsVendor(p, 207) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PassportRole_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Nortel_LookupVendor(p, 207)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PassportRole_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Nortel_LookupVendor(p, 207)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PassportRole_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nortel_SetVendor(p, 207, a)
}

func PassportRole_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nortel_SetVendor(p, 207, a)
}

func PassportRole_Del(p *radius.Packet) {
	_Nortel_DelVendor(p, 207)
}
