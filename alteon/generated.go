// Code generated by radius-dict-gen. DO NOT EDIT.

package alteon

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Alteon_VendorID = 1872
)

func _Alteon_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Alteon_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Alteon_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Alteon_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Alteon_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Alteon_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Alteon_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Alteon_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Alteon_AddVendor(p, typ, attr)
}

func _Alteon_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Alteon_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

func AlteonGroupMapping_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alteon_AddVendor(p, 1, a)
}

func AlteonGroupMapping_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alteon_AddVendor(p, 1, a)
}

func AlteonGroupMapping_Get(p *radius.Packet) (value []byte) {
	value, _ = AlteonGroupMapping_Lookup(p)
	return
}

func AlteonGroupMapping_GetString(p *radius.Packet) (value string) {
	value, _ = AlteonGroupMapping_LookupString(p)
	return
}

func AlteonGroupMapping_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alteon_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlteonGroupMapping_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alteon_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlteonGroupMapping_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alteon_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlteonGroupMapping_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alteon_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlteonGroupMapping_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alteon_SetVendor(p, 1, a)
}

func AlteonGroupMapping_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alteon_SetVendor(p, 1, a)
}

func AlteonGroupMapping_Del(p *radius.Packet) {
	_Alteon_DelVendor(p, 1)
}

type AlteonVPNID uint32

var AlteonVPNID_Strings = map[AlteonVPNID]string{}

func (a AlteonVPNID) String() string {
	if str, ok := AlteonVPNID_Strings[a]; ok {
		return str
	}
	return "AlteonVPNID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AlteonVPNID_Add(p *radius.Packet, value AlteonVPNID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alteon_AddVendor(p, 3, a)
}

func AlteonVPNID_Get(p *radius.Packet) (value AlteonVPNID) {
	value, _ = AlteonVPNID_Lookup(p)
	return
}

func AlteonVPNID_Gets(p *radius.Packet) (values []AlteonVPNID, err error) {
	var i uint32
	for _, attr := range _Alteon_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AlteonVPNID(i))
	}
	return
}

func AlteonVPNID_Lookup(p *radius.Packet) (value AlteonVPNID, err error) {
	a, ok := _Alteon_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AlteonVPNID(i)
	return
}

func AlteonVPNID_Set(p *radius.Packet, value AlteonVPNID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alteon_SetVendor(p, 3, a)
}

func AlteonVPNID_Del(p *radius.Packet) {
	_Alteon_DelVendor(p, 3)
}

func AlteonClientIPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alteon_AddVendor(p, 4, a)
}

func AlteonClientIPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = AlteonClientIPAddress_Lookup(p)
	return
}

func AlteonClientIPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Alteon_GetsVendor(p, 4) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlteonClientIPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Alteon_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AlteonClientIPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alteon_SetVendor(p, 4, a)
}

func AlteonClientIPAddress_Del(p *radius.Packet) {
	_Alteon_DelVendor(p, 4)
}

func AlteonClientNetmask_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alteon_AddVendor(p, 5, a)
}

func AlteonClientNetmask_Get(p *radius.Packet) (value net.IP) {
	value, _ = AlteonClientNetmask_Lookup(p)
	return
}

func AlteonClientNetmask_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Alteon_GetsVendor(p, 5) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlteonClientNetmask_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Alteon_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AlteonClientNetmask_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alteon_SetVendor(p, 5, a)
}

func AlteonClientNetmask_Del(p *radius.Packet) {
	_Alteon_DelVendor(p, 5)
}

func AlteonPrimaryNBNSServer_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alteon_AddVendor(p, 6, a)
}

func AlteonPrimaryNBNSServer_Get(p *radius.Packet) (value net.IP) {
	value, _ = AlteonPrimaryNBNSServer_Lookup(p)
	return
}

func AlteonPrimaryNBNSServer_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Alteon_GetsVendor(p, 6) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlteonPrimaryNBNSServer_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Alteon_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AlteonPrimaryNBNSServer_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alteon_SetVendor(p, 6, a)
}

func AlteonPrimaryNBNSServer_Del(p *radius.Packet) {
	_Alteon_DelVendor(p, 6)
}

func AlteonSecondaryNBNSServer_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alteon_AddVendor(p, 7, a)
}

func AlteonSecondaryNBNSServer_Get(p *radius.Packet) (value net.IP) {
	value, _ = AlteonSecondaryNBNSServer_Lookup(p)
	return
}

func AlteonSecondaryNBNSServer_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Alteon_GetsVendor(p, 7) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlteonSecondaryNBNSServer_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Alteon_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AlteonSecondaryNBNSServer_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alteon_SetVendor(p, 7, a)
}

func AlteonSecondaryNBNSServer_Del(p *radius.Packet) {
	_Alteon_DelVendor(p, 7)
}

func AlteonPrimaryDNSServer_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alteon_AddVendor(p, 8, a)
}

func AlteonPrimaryDNSServer_Get(p *radius.Packet) (value net.IP) {
	value, _ = AlteonPrimaryDNSServer_Lookup(p)
	return
}

func AlteonPrimaryDNSServer_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Alteon_GetsVendor(p, 8) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlteonPrimaryDNSServer_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Alteon_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AlteonPrimaryDNSServer_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alteon_SetVendor(p, 8, a)
}

func AlteonPrimaryDNSServer_Del(p *radius.Packet) {
	_Alteon_DelVendor(p, 8)
}

func AlteonSecondaryDNSServer_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alteon_AddVendor(p, 9, a)
}

func AlteonSecondaryDNSServer_Get(p *radius.Packet) (value net.IP) {
	value, _ = AlteonSecondaryDNSServer_Lookup(p)
	return
}

func AlteonSecondaryDNSServer_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Alteon_GetsVendor(p, 9) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlteonSecondaryDNSServer_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Alteon_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AlteonSecondaryDNSServer_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alteon_SetVendor(p, 9, a)
}

func AlteonSecondaryDNSServer_Del(p *radius.Packet) {
	_Alteon_DelVendor(p, 9)
}

func AlteonDomainName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alteon_AddVendor(p, 10, a)
}

func AlteonDomainName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alteon_AddVendor(p, 10, a)
}

func AlteonDomainName_Get(p *radius.Packet) (value []byte) {
	value, _ = AlteonDomainName_Lookup(p)
	return
}

func AlteonDomainName_GetString(p *radius.Packet) (value string) {
	value, _ = AlteonDomainName_LookupString(p)
	return
}

func AlteonDomainName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alteon_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlteonDomainName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alteon_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AlteonDomainName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alteon_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AlteonDomainName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alteon_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AlteonDomainName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alteon_SetVendor(p, 10, a)
}

func AlteonDomainName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alteon_SetVendor(p, 10, a)
}

func AlteonDomainName_Del(p *radius.Packet) {
	_Alteon_DelVendor(p, 10)
}

type AlteonServiceType uint32

const (
	AlteonServiceType_Value_AlteonL4admin  AlteonServiceType = 250
	AlteonServiceType_Value_AlteonSlbadmin AlteonServiceType = 251
	AlteonServiceType_Value_AlteonOper     AlteonServiceType = 252
	AlteonServiceType_Value_AlteonL4oper   AlteonServiceType = 253
	AlteonServiceType_Value_AlteonSlboper  AlteonServiceType = 254
	AlteonServiceType_Value_AlteonUser     AlteonServiceType = 255
)

var AlteonServiceType_Strings = map[AlteonServiceType]string{
	AlteonServiceType_Value_AlteonL4admin:  "Alteon-L4admin",
	AlteonServiceType_Value_AlteonSlbadmin: "Alteon-Slbadmin",
	AlteonServiceType_Value_AlteonOper:     "Alteon-Oper",
	AlteonServiceType_Value_AlteonL4oper:   "Alteon-L4oper",
	AlteonServiceType_Value_AlteonSlboper:  "Alteon-Slboper",
	AlteonServiceType_Value_AlteonUser:     "Alteon-User",
}

func (a AlteonServiceType) String() string {
	if str, ok := AlteonServiceType_Strings[a]; ok {
		return str
	}
	return "AlteonServiceType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AlteonServiceType_Add(p *radius.Packet, value AlteonServiceType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alteon_AddVendor(p, 26, a)
}

func AlteonServiceType_Get(p *radius.Packet) (value AlteonServiceType) {
	value, _ = AlteonServiceType_Lookup(p)
	return
}

func AlteonServiceType_Gets(p *radius.Packet) (values []AlteonServiceType, err error) {
	var i uint32
	for _, attr := range _Alteon_GetsVendor(p, 26) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AlteonServiceType(i))
	}
	return
}

func AlteonServiceType_Lookup(p *radius.Packet) (value AlteonServiceType, err error) {
	a, ok := _Alteon_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AlteonServiceType(i)
	return
}

func AlteonServiceType_Set(p *radius.Packet, value AlteonServiceType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alteon_SetVendor(p, 26, a)
}

func AlteonServiceType_Del(p *radius.Packet) {
	_Alteon_DelVendor(p, 26)
}
