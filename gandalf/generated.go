// Code generated by radius-dict-gen. DO NOT EDIT.

package gandalf

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Gandalf_VendorID = 64
)

func _Gandalf_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Gandalf_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Gandalf_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Gandalf_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Gandalf_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Gandalf_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Gandalf_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Gandalf_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Gandalf_AddVendor(p, typ, attr)
}

func _Gandalf_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Gandalf_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func GandalfRemoteLANName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 0, a)
}

func GandalfRemoteLANName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 0, a)
}

func GandalfRemoteLANName_Get(p *radius.Packet) (value []byte) {
	value, _ = GandalfRemoteLANName_Lookup(p)
	return
}

func GandalfRemoteLANName_GetString(p *radius.Packet) (value string) {
	value, _ = GandalfRemoteLANName_LookupString(p)
	return
}

func GandalfRemoteLANName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Gandalf_GetsVendor(p, 0) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfRemoteLANName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Gandalf_GetsVendor(p, 0) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfRemoteLANName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Gandalf_LookupVendor(p, 0)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func GandalfRemoteLANName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Gandalf_LookupVendor(p, 0)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func GandalfRemoteLANName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 0, a)
}

func GandalfRemoteLANName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 0, a)
}

func GandalfRemoteLANName_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 0)
}

type GandalfOperationalModes uint32

const (
	GandalfOperationalModes_Value_Disabled      GandalfOperationalModes = 1
	GandalfOperationalModes_Value_CalledOnly    GandalfOperationalModes = 2
	GandalfOperationalModes_Value_CallingCalled GandalfOperationalModes = 3
	GandalfOperationalModes_Value_CallingOnly   GandalfOperationalModes = 4
)

var GandalfOperationalModes_Strings = map[GandalfOperationalModes]string{
	GandalfOperationalModes_Value_Disabled:      "Disabled",
	GandalfOperationalModes_Value_CalledOnly:    "Called-Only",
	GandalfOperationalModes_Value_CallingCalled: "Calling-Called",
	GandalfOperationalModes_Value_CallingOnly:   "Calling-Only",
}

func (a GandalfOperationalModes) String() string {
	if str, ok := GandalfOperationalModes_Strings[a]; ok {
		return str
	}
	return "GandalfOperationalModes(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func GandalfOperationalModes_Add(p *radius.Packet, value GandalfOperationalModes) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_AddVendor(p, 1, a)
}

func GandalfOperationalModes_Get(p *radius.Packet) (value GandalfOperationalModes) {
	value, _ = GandalfOperationalModes_Lookup(p)
	return
}

func GandalfOperationalModes_Gets(p *radius.Packet) (values []GandalfOperationalModes, err error) {
	var i uint32
	for _, attr := range _Gandalf_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, GandalfOperationalModes(i))
	}
	return
}

func GandalfOperationalModes_Lookup(p *radius.Packet) (value GandalfOperationalModes, err error) {
	a, ok := _Gandalf_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = GandalfOperationalModes(i)
	return
}

func GandalfOperationalModes_Set(p *radius.Packet, value GandalfOperationalModes) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_SetVendor(p, 1, a)
}

func GandalfOperationalModes_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 1)
}

type GandalfCompressionStatus uint32

const (
	GandalfCompressionStatus_Value_Disabled GandalfCompressionStatus = 1
	GandalfCompressionStatus_Value_Enabled  GandalfCompressionStatus = 2
)

var GandalfCompressionStatus_Strings = map[GandalfCompressionStatus]string{
	GandalfCompressionStatus_Value_Disabled: "Disabled",
	GandalfCompressionStatus_Value_Enabled:  "Enabled",
}

func (a GandalfCompressionStatus) String() string {
	if str, ok := GandalfCompressionStatus_Strings[a]; ok {
		return str
	}
	return "GandalfCompressionStatus(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func GandalfCompressionStatus_Add(p *radius.Packet, value GandalfCompressionStatus) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_AddVendor(p, 2, a)
}

func GandalfCompressionStatus_Get(p *radius.Packet) (value GandalfCompressionStatus) {
	value, _ = GandalfCompressionStatus_Lookup(p)
	return
}

func GandalfCompressionStatus_Gets(p *radius.Packet) (values []GandalfCompressionStatus, err error) {
	var i uint32
	for _, attr := range _Gandalf_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, GandalfCompressionStatus(i))
	}
	return
}

func GandalfCompressionStatus_Lookup(p *radius.Packet) (value GandalfCompressionStatus, err error) {
	a, ok := _Gandalf_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = GandalfCompressionStatus(i)
	return
}

func GandalfCompressionStatus_Set(p *radius.Packet, value GandalfCompressionStatus) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_SetVendor(p, 2, a)
}

func GandalfCompressionStatus_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 2)
}

type GandalfMinOutgoingBearer uint32

const (
	GandalfMinOutgoingBearer_Value_Unrestricted64K GandalfMinOutgoingBearer = 1
	GandalfMinOutgoingBearer_Value_Digital56K      GandalfMinOutgoingBearer = 2
	GandalfMinOutgoingBearer_Value_Three100HzAudio GandalfMinOutgoingBearer = 3
)

var GandalfMinOutgoingBearer_Strings = map[GandalfMinOutgoingBearer]string{
	GandalfMinOutgoingBearer_Value_Unrestricted64K: "Unrestricted-64K",
	GandalfMinOutgoingBearer_Value_Digital56K:      "Digital-56K",
	GandalfMinOutgoingBearer_Value_Three100HzAudio: "3100Hz-Audio",
}

func (a GandalfMinOutgoingBearer) String() string {
	if str, ok := GandalfMinOutgoingBearer_Strings[a]; ok {
		return str
	}
	return "GandalfMinOutgoingBearer(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func GandalfMinOutgoingBearer_Add(p *radius.Packet, value GandalfMinOutgoingBearer) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_AddVendor(p, 3, a)
}

func GandalfMinOutgoingBearer_Get(p *radius.Packet) (value GandalfMinOutgoingBearer) {
	value, _ = GandalfMinOutgoingBearer_Lookup(p)
	return
}

func GandalfMinOutgoingBearer_Gets(p *radius.Packet) (values []GandalfMinOutgoingBearer, err error) {
	var i uint32
	for _, attr := range _Gandalf_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, GandalfMinOutgoingBearer(i))
	}
	return
}

func GandalfMinOutgoingBearer_Lookup(p *radius.Packet) (value GandalfMinOutgoingBearer, err error) {
	a, ok := _Gandalf_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = GandalfMinOutgoingBearer(i)
	return
}

func GandalfMinOutgoingBearer_Set(p *radius.Packet, value GandalfMinOutgoingBearer) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_SetVendor(p, 3, a)
}

func GandalfMinOutgoingBearer_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 3)
}

func GandalfAuthenticationString_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 5, a)
}

func GandalfAuthenticationString_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 5, a)
}

func GandalfAuthenticationString_Get(p *radius.Packet) (value []byte) {
	value, _ = GandalfAuthenticationString_Lookup(p)
	return
}

func GandalfAuthenticationString_GetString(p *radius.Packet) (value string) {
	value, _ = GandalfAuthenticationString_LookupString(p)
	return
}

func GandalfAuthenticationString_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Gandalf_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfAuthenticationString_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Gandalf_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfAuthenticationString_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Gandalf_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func GandalfAuthenticationString_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Gandalf_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func GandalfAuthenticationString_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 5, a)
}

func GandalfAuthenticationString_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 5, a)
}

func GandalfAuthenticationString_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 5)
}

type GandalfPPPAuthentication uint32

const (
	GandalfPPPAuthentication_Value_CHAP                      GandalfPPPAuthentication = 1
	GandalfPPPAuthentication_Value_PAP                       GandalfPPPAuthentication = 2
	GandalfPPPAuthentication_Value_PAPSendingOnIncomingCalls GandalfPPPAuthentication = 3
)

var GandalfPPPAuthentication_Strings = map[GandalfPPPAuthentication]string{
	GandalfPPPAuthentication_Value_CHAP:                      "CHAP",
	GandalfPPPAuthentication_Value_PAP:                       "PAP",
	GandalfPPPAuthentication_Value_PAPSendingOnIncomingCalls: "PAP-Sending-on-Incoming-Calls",
}

func (a GandalfPPPAuthentication) String() string {
	if str, ok := GandalfPPPAuthentication_Strings[a]; ok {
		return str
	}
	return "GandalfPPPAuthentication(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func GandalfPPPAuthentication_Add(p *radius.Packet, value GandalfPPPAuthentication) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_AddVendor(p, 6, a)
}

func GandalfPPPAuthentication_Get(p *radius.Packet) (value GandalfPPPAuthentication) {
	value, _ = GandalfPPPAuthentication_Lookup(p)
	return
}

func GandalfPPPAuthentication_Gets(p *radius.Packet) (values []GandalfPPPAuthentication, err error) {
	var i uint32
	for _, attr := range _Gandalf_GetsVendor(p, 6) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, GandalfPPPAuthentication(i))
	}
	return
}

func GandalfPPPAuthentication_Lookup(p *radius.Packet) (value GandalfPPPAuthentication, err error) {
	a, ok := _Gandalf_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = GandalfPPPAuthentication(i)
	return
}

func GandalfPPPAuthentication_Set(p *radius.Packet, value GandalfPPPAuthentication) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_SetVendor(p, 6, a)
}

func GandalfPPPAuthentication_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 6)
}

type GandalfPPPNCPType uint32

const (
	GandalfPPPNCPType_Value_BCP  GandalfPPPNCPType = 2
	GandalfPPPNCPType_Value_IPCP GandalfPPPNCPType = 3
)

var GandalfPPPNCPType_Strings = map[GandalfPPPNCPType]string{
	GandalfPPPNCPType_Value_BCP:  "BCP",
	GandalfPPPNCPType_Value_IPCP: "IPCP",
}

func (a GandalfPPPNCPType) String() string {
	if str, ok := GandalfPPPNCPType_Strings[a]; ok {
		return str
	}
	return "GandalfPPPNCPType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func GandalfPPPNCPType_Add(p *radius.Packet, value GandalfPPPNCPType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_AddVendor(p, 7, a)
}

func GandalfPPPNCPType_Get(p *radius.Packet) (value GandalfPPPNCPType) {
	value, _ = GandalfPPPNCPType_Lookup(p)
	return
}

func GandalfPPPNCPType_Gets(p *radius.Packet) (values []GandalfPPPNCPType, err error) {
	var i uint32
	for _, attr := range _Gandalf_GetsVendor(p, 7) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, GandalfPPPNCPType(i))
	}
	return
}

func GandalfPPPNCPType_Lookup(p *radius.Packet) (value GandalfPPPNCPType, err error) {
	a, ok := _Gandalf_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = GandalfPPPNCPType(i)
	return
}

func GandalfPPPNCPType_Set(p *radius.Packet, value GandalfPPPNCPType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_SetVendor(p, 7, a)
}

func GandalfPPPNCPType_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 7)
}

type GandalfFwdMulticastIn uint32

const (
	GandalfFwdMulticastIn_Value_Disabled GandalfFwdMulticastIn = 1
	GandalfFwdMulticastIn_Value_Enabled  GandalfFwdMulticastIn = 2
)

var GandalfFwdMulticastIn_Strings = map[GandalfFwdMulticastIn]string{
	GandalfFwdMulticastIn_Value_Disabled: "Disabled",
	GandalfFwdMulticastIn_Value_Enabled:  "Enabled",
}

func (a GandalfFwdMulticastIn) String() string {
	if str, ok := GandalfFwdMulticastIn_Strings[a]; ok {
		return str
	}
	return "GandalfFwdMulticastIn(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func GandalfFwdMulticastIn_Add(p *radius.Packet, value GandalfFwdMulticastIn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_AddVendor(p, 8, a)
}

func GandalfFwdMulticastIn_Get(p *radius.Packet) (value GandalfFwdMulticastIn) {
	value, _ = GandalfFwdMulticastIn_Lookup(p)
	return
}

func GandalfFwdMulticastIn_Gets(p *radius.Packet) (values []GandalfFwdMulticastIn, err error) {
	var i uint32
	for _, attr := range _Gandalf_GetsVendor(p, 8) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, GandalfFwdMulticastIn(i))
	}
	return
}

func GandalfFwdMulticastIn_Lookup(p *radius.Packet) (value GandalfFwdMulticastIn, err error) {
	a, ok := _Gandalf_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = GandalfFwdMulticastIn(i)
	return
}

func GandalfFwdMulticastIn_Set(p *radius.Packet, value GandalfFwdMulticastIn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_SetVendor(p, 8, a)
}

func GandalfFwdMulticastIn_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 8)
}

type GandalfFwdBroadcastIn uint32

const (
	GandalfFwdBroadcastIn_Value_Disabled GandalfFwdBroadcastIn = 1
	GandalfFwdBroadcastIn_Value_Enabled  GandalfFwdBroadcastIn = 2
)

var GandalfFwdBroadcastIn_Strings = map[GandalfFwdBroadcastIn]string{
	GandalfFwdBroadcastIn_Value_Disabled: "Disabled",
	GandalfFwdBroadcastIn_Value_Enabled:  "Enabled",
}

func (a GandalfFwdBroadcastIn) String() string {
	if str, ok := GandalfFwdBroadcastIn_Strings[a]; ok {
		return str
	}
	return "GandalfFwdBroadcastIn(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func GandalfFwdBroadcastIn_Add(p *radius.Packet, value GandalfFwdBroadcastIn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_AddVendor(p, 9, a)
}

func GandalfFwdBroadcastIn_Get(p *radius.Packet) (value GandalfFwdBroadcastIn) {
	value, _ = GandalfFwdBroadcastIn_Lookup(p)
	return
}

func GandalfFwdBroadcastIn_Gets(p *radius.Packet) (values []GandalfFwdBroadcastIn, err error) {
	var i uint32
	for _, attr := range _Gandalf_GetsVendor(p, 9) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, GandalfFwdBroadcastIn(i))
	}
	return
}

func GandalfFwdBroadcastIn_Lookup(p *radius.Packet) (value GandalfFwdBroadcastIn, err error) {
	a, ok := _Gandalf_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = GandalfFwdBroadcastIn(i)
	return
}

func GandalfFwdBroadcastIn_Set(p *radius.Packet, value GandalfFwdBroadcastIn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_SetVendor(p, 9, a)
}

func GandalfFwdBroadcastIn_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 9)
}

type GandalfFwdUnicastIn uint32

const (
	GandalfFwdUnicastIn_Value_Disabled GandalfFwdUnicastIn = 1
	GandalfFwdUnicastIn_Value_Enabled  GandalfFwdUnicastIn = 2
)

var GandalfFwdUnicastIn_Strings = map[GandalfFwdUnicastIn]string{
	GandalfFwdUnicastIn_Value_Disabled: "Disabled",
	GandalfFwdUnicastIn_Value_Enabled:  "Enabled",
}

func (a GandalfFwdUnicastIn) String() string {
	if str, ok := GandalfFwdUnicastIn_Strings[a]; ok {
		return str
	}
	return "GandalfFwdUnicastIn(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func GandalfFwdUnicastIn_Add(p *radius.Packet, value GandalfFwdUnicastIn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_AddVendor(p, 10, a)
}

func GandalfFwdUnicastIn_Get(p *radius.Packet) (value GandalfFwdUnicastIn) {
	value, _ = GandalfFwdUnicastIn_Lookup(p)
	return
}

func GandalfFwdUnicastIn_Gets(p *radius.Packet) (values []GandalfFwdUnicastIn, err error) {
	var i uint32
	for _, attr := range _Gandalf_GetsVendor(p, 10) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, GandalfFwdUnicastIn(i))
	}
	return
}

func GandalfFwdUnicastIn_Lookup(p *radius.Packet) (value GandalfFwdUnicastIn, err error) {
	a, ok := _Gandalf_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = GandalfFwdUnicastIn(i)
	return
}

func GandalfFwdUnicastIn_Set(p *radius.Packet, value GandalfFwdUnicastIn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_SetVendor(p, 10, a)
}

func GandalfFwdUnicastIn_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 10)
}

type GandalfFwdMulticastOut uint32

const (
	GandalfFwdMulticastOut_Value_Disabled GandalfFwdMulticastOut = 1
	GandalfFwdMulticastOut_Value_Enabled  GandalfFwdMulticastOut = 2
)

var GandalfFwdMulticastOut_Strings = map[GandalfFwdMulticastOut]string{
	GandalfFwdMulticastOut_Value_Disabled: "Disabled",
	GandalfFwdMulticastOut_Value_Enabled:  "Enabled",
}

func (a GandalfFwdMulticastOut) String() string {
	if str, ok := GandalfFwdMulticastOut_Strings[a]; ok {
		return str
	}
	return "GandalfFwdMulticastOut(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func GandalfFwdMulticastOut_Add(p *radius.Packet, value GandalfFwdMulticastOut) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_AddVendor(p, 11, a)
}

func GandalfFwdMulticastOut_Get(p *radius.Packet) (value GandalfFwdMulticastOut) {
	value, _ = GandalfFwdMulticastOut_Lookup(p)
	return
}

func GandalfFwdMulticastOut_Gets(p *radius.Packet) (values []GandalfFwdMulticastOut, err error) {
	var i uint32
	for _, attr := range _Gandalf_GetsVendor(p, 11) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, GandalfFwdMulticastOut(i))
	}
	return
}

func GandalfFwdMulticastOut_Lookup(p *radius.Packet) (value GandalfFwdMulticastOut, err error) {
	a, ok := _Gandalf_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = GandalfFwdMulticastOut(i)
	return
}

func GandalfFwdMulticastOut_Set(p *radius.Packet, value GandalfFwdMulticastOut) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_SetVendor(p, 11, a)
}

func GandalfFwdMulticastOut_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 11)
}

type GandalfFwdBroadcastOut uint32

const (
	GandalfFwdBroadcastOut_Value_Disabled GandalfFwdBroadcastOut = 1
	GandalfFwdBroadcastOut_Value_Enabled  GandalfFwdBroadcastOut = 2
)

var GandalfFwdBroadcastOut_Strings = map[GandalfFwdBroadcastOut]string{
	GandalfFwdBroadcastOut_Value_Disabled: "Disabled",
	GandalfFwdBroadcastOut_Value_Enabled:  "Enabled",
}

func (a GandalfFwdBroadcastOut) String() string {
	if str, ok := GandalfFwdBroadcastOut_Strings[a]; ok {
		return str
	}
	return "GandalfFwdBroadcastOut(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func GandalfFwdBroadcastOut_Add(p *radius.Packet, value GandalfFwdBroadcastOut) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_AddVendor(p, 12, a)
}

func GandalfFwdBroadcastOut_Get(p *radius.Packet) (value GandalfFwdBroadcastOut) {
	value, _ = GandalfFwdBroadcastOut_Lookup(p)
	return
}

func GandalfFwdBroadcastOut_Gets(p *radius.Packet) (values []GandalfFwdBroadcastOut, err error) {
	var i uint32
	for _, attr := range _Gandalf_GetsVendor(p, 12) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, GandalfFwdBroadcastOut(i))
	}
	return
}

func GandalfFwdBroadcastOut_Lookup(p *radius.Packet) (value GandalfFwdBroadcastOut, err error) {
	a, ok := _Gandalf_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = GandalfFwdBroadcastOut(i)
	return
}

func GandalfFwdBroadcastOut_Set(p *radius.Packet, value GandalfFwdBroadcastOut) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_SetVendor(p, 12, a)
}

func GandalfFwdBroadcastOut_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 12)
}

type GandalfFwdUnicastOut uint32

const (
	GandalfFwdUnicastOut_Value_Disabled GandalfFwdUnicastOut = 1
	GandalfFwdUnicastOut_Value_Enabled  GandalfFwdUnicastOut = 2
)

var GandalfFwdUnicastOut_Strings = map[GandalfFwdUnicastOut]string{
	GandalfFwdUnicastOut_Value_Disabled: "Disabled",
	GandalfFwdUnicastOut_Value_Enabled:  "Enabled",
}

func (a GandalfFwdUnicastOut) String() string {
	if str, ok := GandalfFwdUnicastOut_Strings[a]; ok {
		return str
	}
	return "GandalfFwdUnicastOut(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func GandalfFwdUnicastOut_Add(p *radius.Packet, value GandalfFwdUnicastOut) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_AddVendor(p, 13, a)
}

func GandalfFwdUnicastOut_Get(p *radius.Packet) (value GandalfFwdUnicastOut) {
	value, _ = GandalfFwdUnicastOut_Lookup(p)
	return
}

func GandalfFwdUnicastOut_Gets(p *radius.Packet) (values []GandalfFwdUnicastOut, err error) {
	var i uint32
	for _, attr := range _Gandalf_GetsVendor(p, 13) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, GandalfFwdUnicastOut(i))
	}
	return
}

func GandalfFwdUnicastOut_Lookup(p *radius.Packet) (value GandalfFwdUnicastOut, err error) {
	a, ok := _Gandalf_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = GandalfFwdUnicastOut(i)
	return
}

func GandalfFwdUnicastOut_Set(p *radius.Packet, value GandalfFwdUnicastOut) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_SetVendor(p, 13, a)
}

func GandalfFwdUnicastOut_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 13)
}

type GandalfAroundTheCorner uint32

var GandalfAroundTheCorner_Strings = map[GandalfAroundTheCorner]string{}

func (a GandalfAroundTheCorner) String() string {
	if str, ok := GandalfAroundTheCorner_Strings[a]; ok {
		return str
	}
	return "GandalfAroundTheCorner(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func GandalfAroundTheCorner_Add(p *radius.Packet, value GandalfAroundTheCorner) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_AddVendor(p, 14, a)
}

func GandalfAroundTheCorner_Get(p *radius.Packet) (value GandalfAroundTheCorner) {
	value, _ = GandalfAroundTheCorner_Lookup(p)
	return
}

func GandalfAroundTheCorner_Gets(p *radius.Packet) (values []GandalfAroundTheCorner, err error) {
	var i uint32
	for _, attr := range _Gandalf_GetsVendor(p, 14) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, GandalfAroundTheCorner(i))
	}
	return
}

func GandalfAroundTheCorner_Lookup(p *radius.Packet) (value GandalfAroundTheCorner, err error) {
	a, ok := _Gandalf_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = GandalfAroundTheCorner(i)
	return
}

func GandalfAroundTheCorner_Set(p *radius.Packet, value GandalfAroundTheCorner) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_SetVendor(p, 14, a)
}

func GandalfAroundTheCorner_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 14)
}

func GandalfChannelGroupName1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 15, a)
}

func GandalfChannelGroupName1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 15, a)
}

func GandalfChannelGroupName1_Get(p *radius.Packet) (value []byte) {
	value, _ = GandalfChannelGroupName1_Lookup(p)
	return
}

func GandalfChannelGroupName1_GetString(p *radius.Packet) (value string) {
	value, _ = GandalfChannelGroupName1_LookupString(p)
	return
}

func GandalfChannelGroupName1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Gandalf_GetsVendor(p, 15) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfChannelGroupName1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Gandalf_GetsVendor(p, 15) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfChannelGroupName1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Gandalf_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func GandalfChannelGroupName1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Gandalf_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func GandalfChannelGroupName1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 15, a)
}

func GandalfChannelGroupName1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 15, a)
}

func GandalfChannelGroupName1_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 15)
}

func GandalfDialPrefixName1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 16, a)
}

func GandalfDialPrefixName1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 16, a)
}

func GandalfDialPrefixName1_Get(p *radius.Packet) (value []byte) {
	value, _ = GandalfDialPrefixName1_Lookup(p)
	return
}

func GandalfDialPrefixName1_GetString(p *radius.Packet) (value string) {
	value, _ = GandalfDialPrefixName1_LookupString(p)
	return
}

func GandalfDialPrefixName1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Gandalf_GetsVendor(p, 16) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfDialPrefixName1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Gandalf_GetsVendor(p, 16) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfDialPrefixName1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Gandalf_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func GandalfDialPrefixName1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Gandalf_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func GandalfDialPrefixName1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 16, a)
}

func GandalfDialPrefixName1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 16, a)
}

func GandalfDialPrefixName1_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 16)
}

func GandalfPhoneNumber1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 17, a)
}

func GandalfPhoneNumber1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 17, a)
}

func GandalfPhoneNumber1_Get(p *radius.Packet) (value []byte) {
	value, _ = GandalfPhoneNumber1_Lookup(p)
	return
}

func GandalfPhoneNumber1_GetString(p *radius.Packet) (value string) {
	value, _ = GandalfPhoneNumber1_LookupString(p)
	return
}

func GandalfPhoneNumber1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Gandalf_GetsVendor(p, 17) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfPhoneNumber1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Gandalf_GetsVendor(p, 17) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfPhoneNumber1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Gandalf_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func GandalfPhoneNumber1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Gandalf_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func GandalfPhoneNumber1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 17, a)
}

func GandalfPhoneNumber1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 17, a)
}

func GandalfPhoneNumber1_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 17)
}

func GandalfCallingLineID1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 18, a)
}

func GandalfCallingLineID1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 18, a)
}

func GandalfCallingLineID1_Get(p *radius.Packet) (value []byte) {
	value, _ = GandalfCallingLineID1_Lookup(p)
	return
}

func GandalfCallingLineID1_GetString(p *radius.Packet) (value string) {
	value, _ = GandalfCallingLineID1_LookupString(p)
	return
}

func GandalfCallingLineID1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Gandalf_GetsVendor(p, 18) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfCallingLineID1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Gandalf_GetsVendor(p, 18) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfCallingLineID1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Gandalf_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func GandalfCallingLineID1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Gandalf_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func GandalfCallingLineID1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 18, a)
}

func GandalfCallingLineID1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 18, a)
}

func GandalfCallingLineID1_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 18)
}

func GandalfChannelGroupName2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 19, a)
}

func GandalfChannelGroupName2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 19, a)
}

func GandalfChannelGroupName2_Get(p *radius.Packet) (value []byte) {
	value, _ = GandalfChannelGroupName2_Lookup(p)
	return
}

func GandalfChannelGroupName2_GetString(p *radius.Packet) (value string) {
	value, _ = GandalfChannelGroupName2_LookupString(p)
	return
}

func GandalfChannelGroupName2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Gandalf_GetsVendor(p, 19) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfChannelGroupName2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Gandalf_GetsVendor(p, 19) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfChannelGroupName2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Gandalf_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func GandalfChannelGroupName2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Gandalf_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func GandalfChannelGroupName2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 19, a)
}

func GandalfChannelGroupName2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 19, a)
}

func GandalfChannelGroupName2_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 19)
}

func GandalfDialPrefixName2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 20, a)
}

func GandalfDialPrefixName2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 20, a)
}

func GandalfDialPrefixName2_Get(p *radius.Packet) (value []byte) {
	value, _ = GandalfDialPrefixName2_Lookup(p)
	return
}

func GandalfDialPrefixName2_GetString(p *radius.Packet) (value string) {
	value, _ = GandalfDialPrefixName2_LookupString(p)
	return
}

func GandalfDialPrefixName2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Gandalf_GetsVendor(p, 20) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfDialPrefixName2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Gandalf_GetsVendor(p, 20) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfDialPrefixName2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Gandalf_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func GandalfDialPrefixName2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Gandalf_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func GandalfDialPrefixName2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 20, a)
}

func GandalfDialPrefixName2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 20, a)
}

func GandalfDialPrefixName2_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 20)
}

func GandalfPhoneNumber2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 21, a)
}

func GandalfPhoneNumber2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 21, a)
}

func GandalfPhoneNumber2_Get(p *radius.Packet) (value []byte) {
	value, _ = GandalfPhoneNumber2_Lookup(p)
	return
}

func GandalfPhoneNumber2_GetString(p *radius.Packet) (value string) {
	value, _ = GandalfPhoneNumber2_LookupString(p)
	return
}

func GandalfPhoneNumber2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Gandalf_GetsVendor(p, 21) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfPhoneNumber2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Gandalf_GetsVendor(p, 21) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfPhoneNumber2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Gandalf_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func GandalfPhoneNumber2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Gandalf_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func GandalfPhoneNumber2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 21, a)
}

func GandalfPhoneNumber2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 21, a)
}

func GandalfPhoneNumber2_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 21)
}

func GandalfCallingLineID2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 22, a)
}

func GandalfCallingLineID2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 22, a)
}

func GandalfCallingLineID2_Get(p *radius.Packet) (value []byte) {
	value, _ = GandalfCallingLineID2_Lookup(p)
	return
}

func GandalfCallingLineID2_GetString(p *radius.Packet) (value string) {
	value, _ = GandalfCallingLineID2_LookupString(p)
	return
}

func GandalfCallingLineID2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Gandalf_GetsVendor(p, 22) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfCallingLineID2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Gandalf_GetsVendor(p, 22) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfCallingLineID2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Gandalf_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func GandalfCallingLineID2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Gandalf_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func GandalfCallingLineID2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 22, a)
}

func GandalfCallingLineID2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 22, a)
}

func GandalfCallingLineID2_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 22)
}

type GandalfIPXSpoofingState uint32

const (
	GandalfIPXSpoofingState_Value_Forward                 GandalfIPXSpoofingState = 1
	GandalfIPXSpoofingState_Value_Spoof                   GandalfIPXSpoofingState = 2
	GandalfIPXSpoofingState_Value_FilterAllOutgoingRIPSAP GandalfIPXSpoofingState = 3
)

var GandalfIPXSpoofingState_Strings = map[GandalfIPXSpoofingState]string{
	GandalfIPXSpoofingState_Value_Forward:                 "Forward",
	GandalfIPXSpoofingState_Value_Spoof:                   "Spoof",
	GandalfIPXSpoofingState_Value_FilterAllOutgoingRIPSAP: "Filter-all-outgoing-RIP-SAP",
}

func (a GandalfIPXSpoofingState) String() string {
	if str, ok := GandalfIPXSpoofingState_Strings[a]; ok {
		return str
	}
	return "GandalfIPXSpoofingState(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func GandalfIPXSpoofingState_Add(p *radius.Packet, value GandalfIPXSpoofingState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_AddVendor(p, 23, a)
}

func GandalfIPXSpoofingState_Get(p *radius.Packet) (value GandalfIPXSpoofingState) {
	value, _ = GandalfIPXSpoofingState_Lookup(p)
	return
}

func GandalfIPXSpoofingState_Gets(p *radius.Packet) (values []GandalfIPXSpoofingState, err error) {
	var i uint32
	for _, attr := range _Gandalf_GetsVendor(p, 23) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, GandalfIPXSpoofingState(i))
	}
	return
}

func GandalfIPXSpoofingState_Lookup(p *radius.Packet) (value GandalfIPXSpoofingState, err error) {
	a, ok := _Gandalf_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = GandalfIPXSpoofingState(i)
	return
}

func GandalfIPXSpoofingState_Set(p *radius.Packet, value GandalfIPXSpoofingState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_SetVendor(p, 23, a)
}

func GandalfIPXSpoofingState_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 23)
}

type GandalfIPXWatchdogSpoof uint32

const (
	GandalfIPXWatchdogSpoof_Value_Disabled GandalfIPXWatchdogSpoof = 1
	GandalfIPXWatchdogSpoof_Value_Enabled  GandalfIPXWatchdogSpoof = 2
)

var GandalfIPXWatchdogSpoof_Strings = map[GandalfIPXWatchdogSpoof]string{
	GandalfIPXWatchdogSpoof_Value_Disabled: "Disabled",
	GandalfIPXWatchdogSpoof_Value_Enabled:  "Enabled",
}

func (a GandalfIPXWatchdogSpoof) String() string {
	if str, ok := GandalfIPXWatchdogSpoof_Strings[a]; ok {
		return str
	}
	return "GandalfIPXWatchdogSpoof(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func GandalfIPXWatchdogSpoof_Add(p *radius.Packet, value GandalfIPXWatchdogSpoof) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_AddVendor(p, 24, a)
}

func GandalfIPXWatchdogSpoof_Get(p *radius.Packet) (value GandalfIPXWatchdogSpoof) {
	value, _ = GandalfIPXWatchdogSpoof_Lookup(p)
	return
}

func GandalfIPXWatchdogSpoof_Gets(p *radius.Packet) (values []GandalfIPXWatchdogSpoof, err error) {
	var i uint32
	for _, attr := range _Gandalf_GetsVendor(p, 24) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, GandalfIPXWatchdogSpoof(i))
	}
	return
}

func GandalfIPXWatchdogSpoof_Lookup(p *radius.Packet) (value GandalfIPXWatchdogSpoof, err error) {
	a, ok := _Gandalf_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = GandalfIPXWatchdogSpoof(i)
	return
}

func GandalfIPXWatchdogSpoof_Set(p *radius.Packet, value GandalfIPXWatchdogSpoof) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_SetVendor(p, 24, a)
}

func GandalfIPXWatchdogSpoof_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 24)
}

func GandalfSAPGroupName1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 25, a)
}

func GandalfSAPGroupName1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 25, a)
}

func GandalfSAPGroupName1_Get(p *radius.Packet) (value []byte) {
	value, _ = GandalfSAPGroupName1_Lookup(p)
	return
}

func GandalfSAPGroupName1_GetString(p *radius.Packet) (value string) {
	value, _ = GandalfSAPGroupName1_LookupString(p)
	return
}

func GandalfSAPGroupName1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Gandalf_GetsVendor(p, 25) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfSAPGroupName1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Gandalf_GetsVendor(p, 25) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfSAPGroupName1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Gandalf_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func GandalfSAPGroupName1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Gandalf_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func GandalfSAPGroupName1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 25, a)
}

func GandalfSAPGroupName1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 25, a)
}

func GandalfSAPGroupName1_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 25)
}

func GandalfSAPGroupName2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 26, a)
}

func GandalfSAPGroupName2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 26, a)
}

func GandalfSAPGroupName2_Get(p *radius.Packet) (value []byte) {
	value, _ = GandalfSAPGroupName2_Lookup(p)
	return
}

func GandalfSAPGroupName2_GetString(p *radius.Packet) (value string) {
	value, _ = GandalfSAPGroupName2_LookupString(p)
	return
}

func GandalfSAPGroupName2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Gandalf_GetsVendor(p, 26) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfSAPGroupName2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Gandalf_GetsVendor(p, 26) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfSAPGroupName2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Gandalf_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func GandalfSAPGroupName2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Gandalf_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func GandalfSAPGroupName2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 26, a)
}

func GandalfSAPGroupName2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 26, a)
}

func GandalfSAPGroupName2_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 26)
}

func GandalfSAPGroupName3_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 27, a)
}

func GandalfSAPGroupName3_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 27, a)
}

func GandalfSAPGroupName3_Get(p *radius.Packet) (value []byte) {
	value, _ = GandalfSAPGroupName3_Lookup(p)
	return
}

func GandalfSAPGroupName3_GetString(p *radius.Packet) (value string) {
	value, _ = GandalfSAPGroupName3_LookupString(p)
	return
}

func GandalfSAPGroupName3_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Gandalf_GetsVendor(p, 27) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfSAPGroupName3_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Gandalf_GetsVendor(p, 27) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfSAPGroupName3_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Gandalf_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func GandalfSAPGroupName3_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Gandalf_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func GandalfSAPGroupName3_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 27, a)
}

func GandalfSAPGroupName3_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 27, a)
}

func GandalfSAPGroupName3_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 27)
}

func GandalfSAPGroupName4_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 28, a)
}

func GandalfSAPGroupName4_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 28, a)
}

func GandalfSAPGroupName4_Get(p *radius.Packet) (value []byte) {
	value, _ = GandalfSAPGroupName4_Lookup(p)
	return
}

func GandalfSAPGroupName4_GetString(p *radius.Packet) (value string) {
	value, _ = GandalfSAPGroupName4_LookupString(p)
	return
}

func GandalfSAPGroupName4_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Gandalf_GetsVendor(p, 28) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfSAPGroupName4_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Gandalf_GetsVendor(p, 28) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfSAPGroupName4_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Gandalf_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func GandalfSAPGroupName4_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Gandalf_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func GandalfSAPGroupName4_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 28, a)
}

func GandalfSAPGroupName4_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 28, a)
}

func GandalfSAPGroupName4_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 28)
}

func GandalfSAPGroupName5_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 29, a)
}

func GandalfSAPGroupName5_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 29, a)
}

func GandalfSAPGroupName5_Get(p *radius.Packet) (value []byte) {
	value, _ = GandalfSAPGroupName5_Lookup(p)
	return
}

func GandalfSAPGroupName5_GetString(p *radius.Packet) (value string) {
	value, _ = GandalfSAPGroupName5_LookupString(p)
	return
}

func GandalfSAPGroupName5_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Gandalf_GetsVendor(p, 29) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfSAPGroupName5_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Gandalf_GetsVendor(p, 29) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfSAPGroupName5_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Gandalf_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func GandalfSAPGroupName5_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Gandalf_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func GandalfSAPGroupName5_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 29, a)
}

func GandalfSAPGroupName5_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 29, a)
}

func GandalfSAPGroupName5_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 29)
}

func GandalfHuntGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 30, a)
}

func GandalfHuntGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_AddVendor(p, 30, a)
}

func GandalfHuntGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = GandalfHuntGroup_Lookup(p)
	return
}

func GandalfHuntGroup_GetString(p *radius.Packet) (value string) {
	value, _ = GandalfHuntGroup_LookupString(p)
	return
}

func GandalfHuntGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Gandalf_GetsVendor(p, 30) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfHuntGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Gandalf_GetsVendor(p, 30) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GandalfHuntGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Gandalf_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func GandalfHuntGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Gandalf_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func GandalfHuntGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 30, a)
}

func GandalfHuntGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Gandalf_SetVendor(p, 30, a)
}

func GandalfHuntGroup_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 30)
}

type GandalfModemMode uint32

const (
	GandalfModemMode_Value_Disabled GandalfModemMode = 1
	GandalfModemMode_Value_Enabled  GandalfModemMode = 2
)

var GandalfModemMode_Strings = map[GandalfModemMode]string{
	GandalfModemMode_Value_Disabled: "Disabled",
	GandalfModemMode_Value_Enabled:  "Enabled",
}

func (a GandalfModemMode) String() string {
	if str, ok := GandalfModemMode_Strings[a]; ok {
		return str
	}
	return "GandalfModemMode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func GandalfModemMode_Add(p *radius.Packet, value GandalfModemMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_AddVendor(p, 31, a)
}

func GandalfModemMode_Get(p *radius.Packet) (value GandalfModemMode) {
	value, _ = GandalfModemMode_Lookup(p)
	return
}

func GandalfModemMode_Gets(p *radius.Packet) (values []GandalfModemMode, err error) {
	var i uint32
	for _, attr := range _Gandalf_GetsVendor(p, 31) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, GandalfModemMode(i))
	}
	return
}

func GandalfModemMode_Lookup(p *radius.Packet) (value GandalfModemMode, err error) {
	a, ok := _Gandalf_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = GandalfModemMode(i)
	return
}

func GandalfModemMode_Set(p *radius.Packet, value GandalfModemMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_SetVendor(p, 31, a)
}

func GandalfModemMode_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 31)
}

type GandalfModemRequired1 uint32

const (
	GandalfModemRequired1_Value_Disabled GandalfModemRequired1 = 1
	GandalfModemRequired1_Value_Enabled  GandalfModemRequired1 = 2
)

var GandalfModemRequired1_Strings = map[GandalfModemRequired1]string{
	GandalfModemRequired1_Value_Disabled: "Disabled",
	GandalfModemRequired1_Value_Enabled:  "Enabled",
}

func (a GandalfModemRequired1) String() string {
	if str, ok := GandalfModemRequired1_Strings[a]; ok {
		return str
	}
	return "GandalfModemRequired1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func GandalfModemRequired1_Add(p *radius.Packet, value GandalfModemRequired1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_AddVendor(p, 32, a)
}

func GandalfModemRequired1_Get(p *radius.Packet) (value GandalfModemRequired1) {
	value, _ = GandalfModemRequired1_Lookup(p)
	return
}

func GandalfModemRequired1_Gets(p *radius.Packet) (values []GandalfModemRequired1, err error) {
	var i uint32
	for _, attr := range _Gandalf_GetsVendor(p, 32) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, GandalfModemRequired1(i))
	}
	return
}

func GandalfModemRequired1_Lookup(p *radius.Packet) (value GandalfModemRequired1, err error) {
	a, ok := _Gandalf_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = GandalfModemRequired1(i)
	return
}

func GandalfModemRequired1_Set(p *radius.Packet, value GandalfModemRequired1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_SetVendor(p, 32, a)
}

func GandalfModemRequired1_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 32)
}

type GandalfModemRequired2 uint32

const (
	GandalfModemRequired2_Value_Disabled GandalfModemRequired2 = 1
	GandalfModemRequired2_Value_Enabled  GandalfModemRequired2 = 2
)

var GandalfModemRequired2_Strings = map[GandalfModemRequired2]string{
	GandalfModemRequired2_Value_Disabled: "Disabled",
	GandalfModemRequired2_Value_Enabled:  "Enabled",
}

func (a GandalfModemRequired2) String() string {
	if str, ok := GandalfModemRequired2_Strings[a]; ok {
		return str
	}
	return "GandalfModemRequired2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func GandalfModemRequired2_Add(p *radius.Packet, value GandalfModemRequired2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_AddVendor(p, 33, a)
}

func GandalfModemRequired2_Get(p *radius.Packet) (value GandalfModemRequired2) {
	value, _ = GandalfModemRequired2_Lookup(p)
	return
}

func GandalfModemRequired2_Gets(p *radius.Packet) (values []GandalfModemRequired2, err error) {
	var i uint32
	for _, attr := range _Gandalf_GetsVendor(p, 33) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, GandalfModemRequired2(i))
	}
	return
}

func GandalfModemRequired2_Lookup(p *radius.Packet) (value GandalfModemRequired2, err error) {
	a, ok := _Gandalf_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = GandalfModemRequired2(i)
	return
}

func GandalfModemRequired2_Set(p *radius.Packet, value GandalfModemRequired2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gandalf_SetVendor(p, 33, a)
}

func GandalfModemRequired2_Del(p *radius.Packet) {
	_Gandalf_DelVendor(p, 33)
}
