// Code generated by radius-dict-gen. DO NOT EDIT.

package acc

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Acc_VendorID = 5
)

func _Acc_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Acc_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Acc_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Acc_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Acc_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Acc_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Acc_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Acc_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Acc_AddVendor(p, typ, attr)
}

func _Acc_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Acc_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

type AccReasonCode uint32

const (
	AccReasonCode_Value_NoReasonNoFailure          AccReasonCode = 0
	AccReasonCode_Value_ResourceShortage           AccReasonCode = 1
	AccReasonCode_Value_SessionAlreadyOpen         AccReasonCode = 2
	AccReasonCode_Value_TooManyRADIUSUsers         AccReasonCode = 3
	AccReasonCode_Value_NoAuthenticationServer     AccReasonCode = 4
	AccReasonCode_Value_NoAuthenticationResponse   AccReasonCode = 5
	AccReasonCode_Value_NoAccountingServer         AccReasonCode = 6
	AccReasonCode_Value_NoAccountingResponse       AccReasonCode = 7
	AccReasonCode_Value_AccessDenied               AccReasonCode = 8
	AccReasonCode_Value_TemporaryBufferShortage    AccReasonCode = 9
	AccReasonCode_Value_ProtocolError              AccReasonCode = 10
	AccReasonCode_Value_InvalidAttribute           AccReasonCode = 11
	AccReasonCode_Value_InvalidServiceType         AccReasonCode = 12
	AccReasonCode_Value_InvalidFramedProtocol      AccReasonCode = 13
	AccReasonCode_Value_InvalidAttributeValue      AccReasonCode = 14
	AccReasonCode_Value_InvalidUserInformation     AccReasonCode = 15
	AccReasonCode_Value_InvalidIPAddress           AccReasonCode = 16
	AccReasonCode_Value_InvalidIntegerSyntax       AccReasonCode = 17
	AccReasonCode_Value_InvalidNASPort             AccReasonCode = 18
	AccReasonCode_Value_RequestedByUser            AccReasonCode = 19
	AccReasonCode_Value_NetworkDisconnect          AccReasonCode = 20
	AccReasonCode_Value_ServiceInterruption        AccReasonCode = 21
	AccReasonCode_Value_PhysicalPortError          AccReasonCode = 22
	AccReasonCode_Value_IdleTimeout                AccReasonCode = 23
	AccReasonCode_Value_SessionTimeout             AccReasonCode = 24
	AccReasonCode_Value_AdministrativeReset        AccReasonCode = 25
	AccReasonCode_Value_NASReloadOrReset           AccReasonCode = 26
	AccReasonCode_Value_NASError                   AccReasonCode = 27
	AccReasonCode_Value_NASRequest                 AccReasonCode = 28
	AccReasonCode_Value_UndefinedReasonGiven       AccReasonCode = 29
	AccReasonCode_Value_ConflictingAttributes      AccReasonCode = 30
	AccReasonCode_Value_PortLimitExceeded          AccReasonCode = 31
	AccReasonCode_Value_FacilityNotAvailable       AccReasonCode = 32
	AccReasonCode_Value_InternalConfigError        AccReasonCode = 33
	AccReasonCode_Value_BadRouteSpecification      AccReasonCode = 34
	AccReasonCode_Value_AccessPartitionBindFailure AccReasonCode = 35
	AccReasonCode_Value_SecurityViolation          AccReasonCode = 36
	AccReasonCode_Value_RequestTypeConflict        AccReasonCode = 37
	AccReasonCode_Value_ConfigurationDisallowed    AccReasonCode = 38
	AccReasonCode_Value_MissingAttribute           AccReasonCode = 39
	AccReasonCode_Value_InvalidRequest             AccReasonCode = 40
	AccReasonCode_Value_MissingParameter           AccReasonCode = 41
	AccReasonCode_Value_InvalidParameter           AccReasonCode = 42
	AccReasonCode_Value_CallClearedWithCause       AccReasonCode = 43
	AccReasonCode_Value_InopportuneConfigRequest   AccReasonCode = 44
	AccReasonCode_Value_InvalidConfigParameter     AccReasonCode = 45
	AccReasonCode_Value_MissingConfigParameter     AccReasonCode = 46
	AccReasonCode_Value_IncompatibleServiceProfile AccReasonCode = 47
	AccReasonCode_Value_AdministrativeReset2       AccReasonCode = 48
	AccReasonCode_Value_AdministrativeReload       AccReasonCode = 49
	AccReasonCode_Value_PortUnneeded               AccReasonCode = 50
	AccReasonCode_Value_PortPreempted              AccReasonCode = 51
	AccReasonCode_Value_PortSuspended              AccReasonCode = 52
	AccReasonCode_Value_ServiceUnavailable         AccReasonCode = 53
	AccReasonCode_Value_Callback                   AccReasonCode = 54
	AccReasonCode_Value_UserError                  AccReasonCode = 55
	AccReasonCode_Value_HostRequest                AccReasonCode = 56
)

var AccReasonCode_Strings = map[AccReasonCode]string{
	AccReasonCode_Value_NoReasonNoFailure:          "No-reason-No-Failure",
	AccReasonCode_Value_ResourceShortage:           "Resource-shortage",
	AccReasonCode_Value_SessionAlreadyOpen:         "Session-already-open",
	AccReasonCode_Value_TooManyRADIUSUsers:         "Too-many-RADIUS-users",
	AccReasonCode_Value_NoAuthenticationServer:     "No-authentication-server",
	AccReasonCode_Value_NoAuthenticationResponse:   "No-authentication-response",
	AccReasonCode_Value_NoAccountingServer:         "No-accounting-server",
	AccReasonCode_Value_NoAccountingResponse:       "No-accounting-response",
	AccReasonCode_Value_AccessDenied:               "Access-Denied",
	AccReasonCode_Value_TemporaryBufferShortage:    "Temporary-buffer-shortage",
	AccReasonCode_Value_ProtocolError:              "Protocol-error",
	AccReasonCode_Value_InvalidAttribute:           "Invalid-attribute",
	AccReasonCode_Value_InvalidServiceType:         "Invalid-service-type",
	AccReasonCode_Value_InvalidFramedProtocol:      "Invalid-framed-protocol",
	AccReasonCode_Value_InvalidAttributeValue:      "Invalid-attribute-value",
	AccReasonCode_Value_InvalidUserInformation:     "Invalid-user-information",
	AccReasonCode_Value_InvalidIPAddress:           "Invalid-IP-address",
	AccReasonCode_Value_InvalidIntegerSyntax:       "Invalid-integer-syntax",
	AccReasonCode_Value_InvalidNASPort:             "Invalid-NAS-port",
	AccReasonCode_Value_RequestedByUser:            "Requested-by-user",
	AccReasonCode_Value_NetworkDisconnect:          "Network-disconnect",
	AccReasonCode_Value_ServiceInterruption:        "Service-interruption",
	AccReasonCode_Value_PhysicalPortError:          "Physical-port-error",
	AccReasonCode_Value_IdleTimeout:                "Idle-timeout",
	AccReasonCode_Value_SessionTimeout:             "Session-timeout",
	AccReasonCode_Value_AdministrativeReset:        "Administrative-reset",
	AccReasonCode_Value_NASReloadOrReset:           "NAS-reload-or-reset",
	AccReasonCode_Value_NASError:                   "NAS-error",
	AccReasonCode_Value_NASRequest:                 "NAS-request",
	AccReasonCode_Value_UndefinedReasonGiven:       "Undefined-reason-given",
	AccReasonCode_Value_ConflictingAttributes:      "Conflicting-attributes",
	AccReasonCode_Value_PortLimitExceeded:          "Port-limit-exceeded",
	AccReasonCode_Value_FacilityNotAvailable:       "Facility-not-available",
	AccReasonCode_Value_InternalConfigError:        "Internal-config-error",
	AccReasonCode_Value_BadRouteSpecification:      "Bad-route-specification",
	AccReasonCode_Value_AccessPartitionBindFailure: "Access-Partition-bind-failure",
	AccReasonCode_Value_SecurityViolation:          "Security-violation",
	AccReasonCode_Value_RequestTypeConflict:        "Request-type-conflict",
	AccReasonCode_Value_ConfigurationDisallowed:    "Configuration-disallowed",
	AccReasonCode_Value_MissingAttribute:           "Missing-attribute",
	AccReasonCode_Value_InvalidRequest:             "Invalid-request",
	AccReasonCode_Value_MissingParameter:           "Missing-parameter",
	AccReasonCode_Value_InvalidParameter:           "Invalid-parameter",
	AccReasonCode_Value_CallClearedWithCause:       "Call-cleared-with-cause",
	AccReasonCode_Value_InopportuneConfigRequest:   "Inopportune-config-request",
	AccReasonCode_Value_InvalidConfigParameter:     "Invalid-config-parameter",
	AccReasonCode_Value_MissingConfigParameter:     "Missing-config-parameter",
	AccReasonCode_Value_IncompatibleServiceProfile: "Incompatible-service-profile",
	AccReasonCode_Value_AdministrativeReset2:       "Administrative-reset-2",
	AccReasonCode_Value_AdministrativeReload:       "Administrative-reload",
	AccReasonCode_Value_PortUnneeded:               "Port-unneeded",
	AccReasonCode_Value_PortPreempted:              "Port-preempted",
	AccReasonCode_Value_PortSuspended:              "Port-suspended",
	AccReasonCode_Value_ServiceUnavailable:         "Service-unavailable",
	AccReasonCode_Value_Callback:                   "Callback",
	AccReasonCode_Value_UserError:                  "User-error",
	AccReasonCode_Value_HostRequest:                "Host-request",
}

func (a AccReasonCode) String() string {
	if str, ok := AccReasonCode_Strings[a]; ok {
		return str
	}
	return "AccReasonCode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccReasonCode_Add(p *radius.Packet, value AccReasonCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 1, a)
}

func AccReasonCode_Get(p *radius.Packet) (value AccReasonCode) {
	value, _ = AccReasonCode_Lookup(p)
	return
}

func AccReasonCode_Gets(p *radius.Packet) (values []AccReasonCode, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccReasonCode(i))
	}
	return
}

func AccReasonCode_Lookup(p *radius.Packet) (value AccReasonCode, err error) {
	a, ok := _Acc_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccReasonCode(i)
	return
}

func AccReasonCode_Set(p *radius.Packet, value AccReasonCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 1, a)
}

func AccReasonCode_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 1)
}

type AccCcpOption uint32

const (
	AccCcpOption_Value_Disabled AccCcpOption = 1
	AccCcpOption_Value_Enabled  AccCcpOption = 2
)

var AccCcpOption_Strings = map[AccCcpOption]string{
	AccCcpOption_Value_Disabled: "Disabled",
	AccCcpOption_Value_Enabled:  "Enabled",
}

func (a AccCcpOption) String() string {
	if str, ok := AccCcpOption_Strings[a]; ok {
		return str
	}
	return "AccCcpOption(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccCcpOption_Add(p *radius.Packet, value AccCcpOption) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 2, a)
}

func AccCcpOption_Get(p *radius.Packet) (value AccCcpOption) {
	value, _ = AccCcpOption_Lookup(p)
	return
}

func AccCcpOption_Gets(p *radius.Packet) (values []AccCcpOption, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccCcpOption(i))
	}
	return
}

func AccCcpOption_Lookup(p *radius.Packet) (value AccCcpOption, err error) {
	a, ok := _Acc_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccCcpOption(i)
	return
}

func AccCcpOption_Set(p *radius.Packet, value AccCcpOption) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 2, a)
}

func AccCcpOption_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 2)
}

type AccInputErrors uint32

var AccInputErrors_Strings = map[AccInputErrors]string{}

func (a AccInputErrors) String() string {
	if str, ok := AccInputErrors_Strings[a]; ok {
		return str
	}
	return "AccInputErrors(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccInputErrors_Add(p *radius.Packet, value AccInputErrors) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 3, a)
}

func AccInputErrors_Get(p *radius.Packet) (value AccInputErrors) {
	value, _ = AccInputErrors_Lookup(p)
	return
}

func AccInputErrors_Gets(p *radius.Packet) (values []AccInputErrors, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccInputErrors(i))
	}
	return
}

func AccInputErrors_Lookup(p *radius.Packet) (value AccInputErrors, err error) {
	a, ok := _Acc_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccInputErrors(i)
	return
}

func AccInputErrors_Set(p *radius.Packet, value AccInputErrors) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 3, a)
}

func AccInputErrors_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 3)
}

type AccOutputErrors uint32

var AccOutputErrors_Strings = map[AccOutputErrors]string{}

func (a AccOutputErrors) String() string {
	if str, ok := AccOutputErrors_Strings[a]; ok {
		return str
	}
	return "AccOutputErrors(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccOutputErrors_Add(p *radius.Packet, value AccOutputErrors) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 4, a)
}

func AccOutputErrors_Get(p *radius.Packet) (value AccOutputErrors) {
	value, _ = AccOutputErrors_Lookup(p)
	return
}

func AccOutputErrors_Gets(p *radius.Packet) (values []AccOutputErrors, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 4) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccOutputErrors(i))
	}
	return
}

func AccOutputErrors_Lookup(p *radius.Packet) (value AccOutputErrors, err error) {
	a, ok := _Acc_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccOutputErrors(i)
	return
}

func AccOutputErrors_Set(p *radius.Packet, value AccOutputErrors) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 4, a)
}

func AccOutputErrors_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 4)
}

func AccAccessPartition_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 5, a)
}

func AccAccessPartition_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 5, a)
}

func AccAccessPartition_Get(p *radius.Packet) (value []byte) {
	value, _ = AccAccessPartition_Lookup(p)
	return
}

func AccAccessPartition_GetString(p *radius.Packet) (value string) {
	value, _ = AccAccessPartition_LookupString(p)
	return
}

func AccAccessPartition_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acc_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccAccessPartition_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acc_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccAccessPartition_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acc_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AccAccessPartition_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acc_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AccAccessPartition_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 5, a)
}

func AccAccessPartition_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 5, a)
}

func AccAccessPartition_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 5)
}

func AccCustomerID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 6, a)
}

func AccCustomerID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 6, a)
}

func AccCustomerID_Get(p *radius.Packet) (value []byte) {
	value, _ = AccCustomerID_Lookup(p)
	return
}

func AccCustomerID_GetString(p *radius.Packet) (value string) {
	value, _ = AccCustomerID_LookupString(p)
	return
}

func AccCustomerID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acc_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccCustomerID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acc_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccCustomerID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acc_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AccCustomerID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acc_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AccCustomerID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 6, a)
}

func AccCustomerID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 6, a)
}

func AccCustomerID_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 6)
}

func AccIPGatewayPri_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 7, a)
}

func AccIPGatewayPri_Get(p *radius.Packet) (value net.IP) {
	value, _ = AccIPGatewayPri_Lookup(p)
	return
}

func AccIPGatewayPri_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acc_GetsVendor(p, 7) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccIPGatewayPri_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acc_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AccIPGatewayPri_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 7, a)
}

func AccIPGatewayPri_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 7)
}

func AccIPGatewaySec_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 8, a)
}

func AccIPGatewaySec_Get(p *radius.Packet) (value net.IP) {
	value, _ = AccIPGatewaySec_Lookup(p)
	return
}

func AccIPGatewaySec_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acc_GetsVendor(p, 8) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccIPGatewaySec_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acc_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AccIPGatewaySec_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 8, a)
}

func AccIPGatewaySec_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 8)
}

type AccRoutePolicy uint32

const (
	AccRoutePolicy_Value_Funnel AccRoutePolicy = 1
	AccRoutePolicy_Value_Direct AccRoutePolicy = 2
)

var AccRoutePolicy_Strings = map[AccRoutePolicy]string{
	AccRoutePolicy_Value_Funnel: "Funnel",
	AccRoutePolicy_Value_Direct: "Direct",
}

func (a AccRoutePolicy) String() string {
	if str, ok := AccRoutePolicy_Strings[a]; ok {
		return str
	}
	return "AccRoutePolicy(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccRoutePolicy_Add(p *radius.Packet, value AccRoutePolicy) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 9, a)
}

func AccRoutePolicy_Get(p *radius.Packet) (value AccRoutePolicy) {
	value, _ = AccRoutePolicy_Lookup(p)
	return
}

func AccRoutePolicy_Gets(p *radius.Packet) (values []AccRoutePolicy, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 9) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccRoutePolicy(i))
	}
	return
}

func AccRoutePolicy_Lookup(p *radius.Packet) (value AccRoutePolicy, err error) {
	a, ok := _Acc_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccRoutePolicy(i)
	return
}

func AccRoutePolicy_Set(p *radius.Packet, value AccRoutePolicy) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 9, a)
}

func AccRoutePolicy_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 9)
}

type AccMLMLXAdminState uint32

const (
	AccMLMLXAdminState_Value_Enabled  AccMLMLXAdminState = 1
	AccMLMLXAdminState_Value_Disabled AccMLMLXAdminState = 2
)

var AccMLMLXAdminState_Strings = map[AccMLMLXAdminState]string{
	AccMLMLXAdminState_Value_Enabled:  "Enabled",
	AccMLMLXAdminState_Value_Disabled: "Disabled",
}

func (a AccMLMLXAdminState) String() string {
	if str, ok := AccMLMLXAdminState_Strings[a]; ok {
		return str
	}
	return "AccMLMLXAdminState(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccMLMLXAdminState_Add(p *radius.Packet, value AccMLMLXAdminState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 10, a)
}

func AccMLMLXAdminState_Get(p *radius.Packet) (value AccMLMLXAdminState) {
	value, _ = AccMLMLXAdminState_Lookup(p)
	return
}

func AccMLMLXAdminState_Gets(p *radius.Packet) (values []AccMLMLXAdminState, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 10) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccMLMLXAdminState(i))
	}
	return
}

func AccMLMLXAdminState_Lookup(p *radius.Packet) (value AccMLMLXAdminState, err error) {
	a, ok := _Acc_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccMLMLXAdminState(i)
	return
}

func AccMLMLXAdminState_Set(p *radius.Packet, value AccMLMLXAdminState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 10, a)
}

func AccMLMLXAdminState_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 10)
}

type AccMLCallThreshold uint32

var AccMLCallThreshold_Strings = map[AccMLCallThreshold]string{}

func (a AccMLCallThreshold) String() string {
	if str, ok := AccMLCallThreshold_Strings[a]; ok {
		return str
	}
	return "AccMLCallThreshold(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccMLCallThreshold_Add(p *radius.Packet, value AccMLCallThreshold) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 11, a)
}

func AccMLCallThreshold_Get(p *radius.Packet) (value AccMLCallThreshold) {
	value, _ = AccMLCallThreshold_Lookup(p)
	return
}

func AccMLCallThreshold_Gets(p *radius.Packet) (values []AccMLCallThreshold, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 11) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccMLCallThreshold(i))
	}
	return
}

func AccMLCallThreshold_Lookup(p *radius.Packet) (value AccMLCallThreshold, err error) {
	a, ok := _Acc_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccMLCallThreshold(i)
	return
}

func AccMLCallThreshold_Set(p *radius.Packet, value AccMLCallThreshold) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 11, a)
}

func AccMLCallThreshold_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 11)
}

type AccMLClearThreshold uint32

var AccMLClearThreshold_Strings = map[AccMLClearThreshold]string{}

func (a AccMLClearThreshold) String() string {
	if str, ok := AccMLClearThreshold_Strings[a]; ok {
		return str
	}
	return "AccMLClearThreshold(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccMLClearThreshold_Add(p *radius.Packet, value AccMLClearThreshold) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 12, a)
}

func AccMLClearThreshold_Get(p *radius.Packet) (value AccMLClearThreshold) {
	value, _ = AccMLClearThreshold_Lookup(p)
	return
}

func AccMLClearThreshold_Gets(p *radius.Packet) (values []AccMLClearThreshold, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 12) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccMLClearThreshold(i))
	}
	return
}

func AccMLClearThreshold_Lookup(p *radius.Packet) (value AccMLClearThreshold, err error) {
	a, ok := _Acc_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccMLClearThreshold(i)
	return
}

func AccMLClearThreshold_Set(p *radius.Packet, value AccMLClearThreshold) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 12, a)
}

func AccMLClearThreshold_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 12)
}

type AccMLDampingFactor uint32

var AccMLDampingFactor_Strings = map[AccMLDampingFactor]string{}

func (a AccMLDampingFactor) String() string {
	if str, ok := AccMLDampingFactor_Strings[a]; ok {
		return str
	}
	return "AccMLDampingFactor(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccMLDampingFactor_Add(p *radius.Packet, value AccMLDampingFactor) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 13, a)
}

func AccMLDampingFactor_Get(p *radius.Packet) (value AccMLDampingFactor) {
	value, _ = AccMLDampingFactor_Lookup(p)
	return
}

func AccMLDampingFactor_Gets(p *radius.Packet) (values []AccMLDampingFactor, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 13) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccMLDampingFactor(i))
	}
	return
}

func AccMLDampingFactor_Lookup(p *radius.Packet) (value AccMLDampingFactor, err error) {
	a, ok := _Acc_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccMLDampingFactor(i)
	return
}

func AccMLDampingFactor_Set(p *radius.Packet, value AccMLDampingFactor) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 13, a)
}

func AccMLDampingFactor_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 13)
}

func AccTunnelSecret_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 14, a)
}

func AccTunnelSecret_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 14, a)
}

func AccTunnelSecret_Get(p *radius.Packet) (value []byte) {
	value, _ = AccTunnelSecret_Lookup(p)
	return
}

func AccTunnelSecret_GetString(p *radius.Packet) (value string) {
	value, _ = AccTunnelSecret_LookupString(p)
	return
}

func AccTunnelSecret_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acc_GetsVendor(p, 14) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccTunnelSecret_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acc_GetsVendor(p, 14) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccTunnelSecret_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acc_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AccTunnelSecret_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acc_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AccTunnelSecret_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 14, a)
}

func AccTunnelSecret_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 14, a)
}

func AccTunnelSecret_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 14)
}

type AccClearingCause uint32

const (
	AccClearingCause_Value_CauseUnspecified             AccClearingCause = 0
	AccClearingCause_Value_UnassignedNumber             AccClearingCause = 1
	AccClearingCause_Value_NoRouteToTransitNetwork      AccClearingCause = 2
	AccClearingCause_Value_NoRouteToDestination         AccClearingCause = 3
	AccClearingCause_Value_ChannelUnacceptable          AccClearingCause = 6
	AccClearingCause_Value_CallAwardedBeingDelivered    AccClearingCause = 7
	AccClearingCause_Value_NormalClearing               AccClearingCause = 16
	AccClearingCause_Value_UserBusy                     AccClearingCause = 17
	AccClearingCause_Value_NoUserResponding             AccClearingCause = 18
	AccClearingCause_Value_UserAlertedNoAnswer          AccClearingCause = 19
	AccClearingCause_Value_CallRejected                 AccClearingCause = 21
	AccClearingCause_Value_NumberChanged                AccClearingCause = 22
	AccClearingCause_Value_NonSelectedUserClearing      AccClearingCause = 26
	AccClearingCause_Value_DestinationOutOfOrder        AccClearingCause = 27
	AccClearingCause_Value_InvalidOrIncompleteNumber    AccClearingCause = 28
	AccClearingCause_Value_FacilityRejected             AccClearingCause = 29
	AccClearingCause_Value_ResponseToStatusInquiry      AccClearingCause = 30
	AccClearingCause_Value_NormalUnspecifiedCause       AccClearingCause = 31
	AccClearingCause_Value_NoCircuitOrChannelAvailable  AccClearingCause = 34
	AccClearingCause_Value_NetworkOutOfOrder            AccClearingCause = 38
	AccClearingCause_Value_TemporaryFailure             AccClearingCause = 41
	AccClearingCause_Value_SwitchingEquipmentCongestion AccClearingCause = 42
	AccClearingCause_Value_AccessInformationDiscarded   AccClearingCause = 43
	AccClearingCause_Value_CircuitOrChannelUnavailable  AccClearingCause = 44
	AccClearingCause_Value_CircuitOrChannedPreempted    AccClearingCause = 45
	AccClearingCause_Value_ResourcesUnavailable         AccClearingCause = 47
	AccClearingCause_Value_QualityOfServiceUnavailable  AccClearingCause = 49
	AccClearingCause_Value_FacilityNotSubscribed        AccClearingCause = 50
	AccClearingCause_Value_OutgoingCallsBarred          AccClearingCause = 52
	AccClearingCause_Value_IncomingCallsBarred          AccClearingCause = 54
	AccClearingCause_Value_BearerCapabilityUnauthorized AccClearingCause = 57
	AccClearingCause_Value_BearerCapabilityNotAvailable AccClearingCause = 58
	AccClearingCause_Value_ServiceNotAvailable          AccClearingCause = 63
	AccClearingCause_Value_BearerCapablityNotImplmented AccClearingCause = 65
	AccClearingCause_Value_ChannelTypeNotImplemented    AccClearingCause = 66
	AccClearingCause_Value_FacilityNotImplemented       AccClearingCause = 69
	AccClearingCause_Value_RestrctedDigtalInfrmtionOnly AccClearingCause = 70
	AccClearingCause_Value_ServiceNotImplemented        AccClearingCause = 79
	AccClearingCause_Value_InvalidCallReference         AccClearingCause = 81
	AccClearingCause_Value_IdentifiedChannelDoesntExist AccClearingCause = 82
	AccClearingCause_Value_CallIdentifyInUse            AccClearingCause = 84
	AccClearingCause_Value_NoCallSuspended              AccClearingCause = 85
	AccClearingCause_Value_SuspendedCallCleared         AccClearingCause = 86
	AccClearingCause_Value_IncompatibleDestination      AccClearingCause = 88
	AccClearingCause_Value_InvalidTransitNetworkSelctin AccClearingCause = 91
	AccClearingCause_Value_InvalidMessage               AccClearingCause = 95
	AccClearingCause_Value_MandtoryInfrmtionElmentMiss  AccClearingCause = 96
	AccClearingCause_Value_MessageNotImplemented        AccClearingCause = 97
	AccClearingCause_Value_InopportuneMessage           AccClearingCause = 98
	AccClearingCause_Value_InfrmtionElemntNotImplmented AccClearingCause = 99
	AccClearingCause_Value_InvlidInfrmtionElementContnt AccClearingCause = 100
	AccClearingCause_Value_MessageIncompatibleWithState AccClearingCause = 101
	AccClearingCause_Value_RecoveryOnTimerExpiration    AccClearingCause = 102
	AccClearingCause_Value_MndtryInfrmtionElmntLngtErr  AccClearingCause = 103
	AccClearingCause_Value_ProtocolError                AccClearingCause = 111
	AccClearingCause_Value_Interworking                 AccClearingCause = 127
)

var AccClearingCause_Strings = map[AccClearingCause]string{
	AccClearingCause_Value_CauseUnspecified:             "Cause-unspecified",
	AccClearingCause_Value_UnassignedNumber:             "Unassigned-number",
	AccClearingCause_Value_NoRouteToTransitNetwork:      "No-route-to-transit-network",
	AccClearingCause_Value_NoRouteToDestination:         "No-route-to-destination",
	AccClearingCause_Value_ChannelUnacceptable:          "Channel-unacceptable",
	AccClearingCause_Value_CallAwardedBeingDelivered:    "Call-awarded-being-delivered",
	AccClearingCause_Value_NormalClearing:               "Normal-clearing",
	AccClearingCause_Value_UserBusy:                     "User-busy",
	AccClearingCause_Value_NoUserResponding:             "No-user-responding",
	AccClearingCause_Value_UserAlertedNoAnswer:          "User-alerted-no-answer",
	AccClearingCause_Value_CallRejected:                 "Call-rejected",
	AccClearingCause_Value_NumberChanged:                "Number-changed",
	AccClearingCause_Value_NonSelectedUserClearing:      "Non-selected-user-clearing",
	AccClearingCause_Value_DestinationOutOfOrder:        "Destination-out-of-order",
	AccClearingCause_Value_InvalidOrIncompleteNumber:    "Invalid-or-incomplete-number",
	AccClearingCause_Value_FacilityRejected:             "Facility-rejected",
	AccClearingCause_Value_ResponseToStatusInquiry:      "Response-to-status-inquiry",
	AccClearingCause_Value_NormalUnspecifiedCause:       "Normal-unspecified-cause",
	AccClearingCause_Value_NoCircuitOrChannelAvailable:  "No-circuit-or-channel-available",
	AccClearingCause_Value_NetworkOutOfOrder:            "Network-out-of-order",
	AccClearingCause_Value_TemporaryFailure:             "Temporary-failure",
	AccClearingCause_Value_SwitchingEquipmentCongestion: "Switching-equipment-congestion",
	AccClearingCause_Value_AccessInformationDiscarded:   "Access-information-discarded",
	AccClearingCause_Value_CircuitOrChannelUnavailable:  "Circuit-or-channel-unavailable",
	AccClearingCause_Value_CircuitOrChannedPreempted:    "Circuit-or-channed-preempted",
	AccClearingCause_Value_ResourcesUnavailable:         "Resources-unavailable",
	AccClearingCause_Value_QualityOfServiceUnavailable:  "Quality-of-service-unavailable",
	AccClearingCause_Value_FacilityNotSubscribed:        "Facility-not-subscribed",
	AccClearingCause_Value_OutgoingCallsBarred:          "Outgoing-calls-barred",
	AccClearingCause_Value_IncomingCallsBarred:          "Incoming-calls-barred",
	AccClearingCause_Value_BearerCapabilityUnauthorized: "Bearer-capability-unauthorized",
	AccClearingCause_Value_BearerCapabilityNotAvailable: "Bearer-capability-not-available",
	AccClearingCause_Value_ServiceNotAvailable:          "Service-not-available",
	AccClearingCause_Value_BearerCapablityNotImplmented: "Bearer-capablity-not-implmented",
	AccClearingCause_Value_ChannelTypeNotImplemented:    "Channel-type-not-implemented",
	AccClearingCause_Value_FacilityNotImplemented:       "Facility-not-implemented",
	AccClearingCause_Value_RestrctedDigtalInfrmtionOnly: "Restrcted-digtal-infrmtion-only",
	AccClearingCause_Value_ServiceNotImplemented:        "Service-not-implemented",
	AccClearingCause_Value_InvalidCallReference:         "Invalid-call-reference",
	AccClearingCause_Value_IdentifiedChannelDoesntExist: "Identified-channel-doesnt-exist",
	AccClearingCause_Value_CallIdentifyInUse:            "Call-identify-in-use",
	AccClearingCause_Value_NoCallSuspended:              "No-call-suspended",
	AccClearingCause_Value_SuspendedCallCleared:         "Suspended-call-cleared",
	AccClearingCause_Value_IncompatibleDestination:      "Incompatible-destination",
	AccClearingCause_Value_InvalidTransitNetworkSelctin: "Invalid-transit-network-selctin",
	AccClearingCause_Value_InvalidMessage:               "Invalid-message",
	AccClearingCause_Value_MandtoryInfrmtionElmentMiss:  "Mandtory-infrmtion-elment-miss",
	AccClearingCause_Value_MessageNotImplemented:        "Message-not-implemented",
	AccClearingCause_Value_InopportuneMessage:           "Inopportune-message",
	AccClearingCause_Value_InfrmtionElemntNotImplmented: "Infrmtion-elemnt-not-implmented",
	AccClearingCause_Value_InvlidInfrmtionElementContnt: "Invlid-infrmtion-element-contnt",
	AccClearingCause_Value_MessageIncompatibleWithState: "Message-incompatible-with-state",
	AccClearingCause_Value_RecoveryOnTimerExpiration:    "Recovery-on-timer-expiration",
	AccClearingCause_Value_MndtryInfrmtionElmntLngtErr:  "Mndtry-infrmtion-elmnt-lngt-err",
	AccClearingCause_Value_ProtocolError:                "Protocol-error",
	AccClearingCause_Value_Interworking:                 "Interworking",
}

func (a AccClearingCause) String() string {
	if str, ok := AccClearingCause_Strings[a]; ok {
		return str
	}
	return "AccClearingCause(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccClearingCause_Add(p *radius.Packet, value AccClearingCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 15, a)
}

func AccClearingCause_Get(p *radius.Packet) (value AccClearingCause) {
	value, _ = AccClearingCause_Lookup(p)
	return
}

func AccClearingCause_Gets(p *radius.Packet) (values []AccClearingCause, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 15) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccClearingCause(i))
	}
	return
}

func AccClearingCause_Lookup(p *radius.Packet) (value AccClearingCause, err error) {
	a, ok := _Acc_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccClearingCause(i)
	return
}

func AccClearingCause_Set(p *radius.Packet, value AccClearingCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 15, a)
}

func AccClearingCause_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 15)
}

type AccClearingLocation uint32

const (
	AccClearingLocation_Value_LocalOrRemoteUser           AccClearingLocation = 0
	AccClearingLocation_Value_PrvteNtworkServingLocalUser AccClearingLocation = 1
	AccClearingLocation_Value_PblicNtworkServingLocalUser AccClearingLocation = 2
	AccClearingLocation_Value_TransitNetwork              AccClearingLocation = 3
	AccClearingLocation_Value_PrvteNtworkServRemoteUser   AccClearingLocation = 4
	AccClearingLocation_Value_PblicNtworkServRemoteUser   AccClearingLocation = 5
	AccClearingLocation_Value_InternationalNetwork        AccClearingLocation = 6
	AccClearingLocation_Value_BeyondInterworkingPoint     AccClearingLocation = 10
)

var AccClearingLocation_Strings = map[AccClearingLocation]string{
	AccClearingLocation_Value_LocalOrRemoteUser:           "Local-or-remote-user",
	AccClearingLocation_Value_PrvteNtworkServingLocalUser: "Prvte-ntwork-serving-local-user",
	AccClearingLocation_Value_PblicNtworkServingLocalUser: "Pblic-ntwork-serving-local-user",
	AccClearingLocation_Value_TransitNetwork:              "Transit-network",
	AccClearingLocation_Value_PrvteNtworkServRemoteUser:   "Prvte-ntwork-serv-remote-user",
	AccClearingLocation_Value_PblicNtworkServRemoteUser:   "Pblic-ntwork-serv-remote-user",
	AccClearingLocation_Value_InternationalNetwork:        "International-network",
	AccClearingLocation_Value_BeyondInterworkingPoint:     "Beyond-interworking-point",
}

func (a AccClearingLocation) String() string {
	if str, ok := AccClearingLocation_Strings[a]; ok {
		return str
	}
	return "AccClearingLocation(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccClearingLocation_Add(p *radius.Packet, value AccClearingLocation) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 16, a)
}

func AccClearingLocation_Get(p *radius.Packet) (value AccClearingLocation) {
	value, _ = AccClearingLocation_Lookup(p)
	return
}

func AccClearingLocation_Gets(p *radius.Packet) (values []AccClearingLocation, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 16) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccClearingLocation(i))
	}
	return
}

func AccClearingLocation_Lookup(p *radius.Packet) (value AccClearingLocation, err error) {
	a, ok := _Acc_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccClearingLocation(i)
	return
}

func AccClearingLocation_Set(p *radius.Packet, value AccClearingLocation) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 16, a)
}

func AccClearingLocation_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 16)
}

func AccServiceProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 17, a)
}

func AccServiceProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 17, a)
}

func AccServiceProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = AccServiceProfile_Lookup(p)
	return
}

func AccServiceProfile_GetString(p *radius.Packet) (value string) {
	value, _ = AccServiceProfile_LookupString(p)
	return
}

func AccServiceProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acc_GetsVendor(p, 17) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccServiceProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acc_GetsVendor(p, 17) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccServiceProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acc_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AccServiceProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acc_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AccServiceProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 17, a)
}

func AccServiceProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 17, a)
}

func AccServiceProfile_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 17)
}

type AccRequestType uint32

const (
	AccRequestType_Value_RingIndication       AccRequestType = 1
	AccRequestType_Value_DialRequest          AccRequestType = 2
	AccRequestType_Value_UserAuthentication   AccRequestType = 3
	AccRequestType_Value_TunnelAuthentication AccRequestType = 4
)

var AccRequestType_Strings = map[AccRequestType]string{
	AccRequestType_Value_RingIndication:       "Ring-Indication",
	AccRequestType_Value_DialRequest:          "Dial-Request",
	AccRequestType_Value_UserAuthentication:   "User-Authentication",
	AccRequestType_Value_TunnelAuthentication: "Tunnel-Authentication",
}

func (a AccRequestType) String() string {
	if str, ok := AccRequestType_Strings[a]; ok {
		return str
	}
	return "AccRequestType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccRequestType_Add(p *radius.Packet, value AccRequestType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 18, a)
}

func AccRequestType_Get(p *radius.Packet) (value AccRequestType) {
	value, _ = AccRequestType_Lookup(p)
	return
}

func AccRequestType_Gets(p *radius.Packet) (values []AccRequestType, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 18) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccRequestType(i))
	}
	return
}

func AccRequestType_Lookup(p *radius.Packet) (value AccRequestType, err error) {
	a, ok := _Acc_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccRequestType(i)
	return
}

func AccRequestType_Set(p *radius.Packet, value AccRequestType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 18, a)
}

func AccRequestType_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 18)
}

type AccBridgingSupport uint32

const (
	AccBridgingSupport_Value_Disabled AccBridgingSupport = 1
	AccBridgingSupport_Value_Enabled  AccBridgingSupport = 2
)

var AccBridgingSupport_Strings = map[AccBridgingSupport]string{
	AccBridgingSupport_Value_Disabled: "Disabled",
	AccBridgingSupport_Value_Enabled:  "Enabled",
}

func (a AccBridgingSupport) String() string {
	if str, ok := AccBridgingSupport_Strings[a]; ok {
		return str
	}
	return "AccBridgingSupport(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccBridgingSupport_Add(p *radius.Packet, value AccBridgingSupport) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 19, a)
}

func AccBridgingSupport_Get(p *radius.Packet) (value AccBridgingSupport) {
	value, _ = AccBridgingSupport_Lookup(p)
	return
}

func AccBridgingSupport_Gets(p *radius.Packet) (values []AccBridgingSupport, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 19) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccBridgingSupport(i))
	}
	return
}

func AccBridgingSupport_Lookup(p *radius.Packet) (value AccBridgingSupport, err error) {
	a, ok := _Acc_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccBridgingSupport(i)
	return
}

func AccBridgingSupport_Set(p *radius.Packet, value AccBridgingSupport) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 19, a)
}

func AccBridgingSupport_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 19)
}

type AccApsmOversubscribed uint32

const (
	AccApsmOversubscribed_Value_False AccApsmOversubscribed = 1
	AccApsmOversubscribed_Value_True  AccApsmOversubscribed = 2
)

var AccApsmOversubscribed_Strings = map[AccApsmOversubscribed]string{
	AccApsmOversubscribed_Value_False: "False",
	AccApsmOversubscribed_Value_True:  "True",
}

func (a AccApsmOversubscribed) String() string {
	if str, ok := AccApsmOversubscribed_Strings[a]; ok {
		return str
	}
	return "AccApsmOversubscribed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccApsmOversubscribed_Add(p *radius.Packet, value AccApsmOversubscribed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 20, a)
}

func AccApsmOversubscribed_Get(p *radius.Packet) (value AccApsmOversubscribed) {
	value, _ = AccApsmOversubscribed_Lookup(p)
	return
}

func AccApsmOversubscribed_Gets(p *radius.Packet) (values []AccApsmOversubscribed, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 20) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccApsmOversubscribed(i))
	}
	return
}

func AccApsmOversubscribed_Lookup(p *radius.Packet) (value AccApsmOversubscribed, err error) {
	a, ok := _Acc_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccApsmOversubscribed(i)
	return
}

func AccApsmOversubscribed_Set(p *radius.Packet, value AccApsmOversubscribed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 20, a)
}

func AccApsmOversubscribed_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 20)
}

type AccAcctOnOffReason uint32

const (
	AccAcctOnOffReason_Value_NASReset            AccAcctOnOffReason = 0
	AccAcctOnOffReason_Value_NASReload           AccAcctOnOffReason = 1
	AccAcctOnOffReason_Value_ConfigurationReset  AccAcctOnOffReason = 2
	AccAcctOnOffReason_Value_ConfigurationReload AccAcctOnOffReason = 3
	AccAcctOnOffReason_Value_Enabled             AccAcctOnOffReason = 4
	AccAcctOnOffReason_Value_Disabled            AccAcctOnOffReason = 5
)

var AccAcctOnOffReason_Strings = map[AccAcctOnOffReason]string{
	AccAcctOnOffReason_Value_NASReset:            "NAS-Reset",
	AccAcctOnOffReason_Value_NASReload:           "NAS-Reload",
	AccAcctOnOffReason_Value_ConfigurationReset:  "Configuration-Reset",
	AccAcctOnOffReason_Value_ConfigurationReload: "Configuration-Reload",
	AccAcctOnOffReason_Value_Enabled:             "Enabled",
	AccAcctOnOffReason_Value_Disabled:            "Disabled",
}

func (a AccAcctOnOffReason) String() string {
	if str, ok := AccAcctOnOffReason_Strings[a]; ok {
		return str
	}
	return "AccAcctOnOffReason(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccAcctOnOffReason_Add(p *radius.Packet, value AccAcctOnOffReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 21, a)
}

func AccAcctOnOffReason_Get(p *radius.Packet) (value AccAcctOnOffReason) {
	value, _ = AccAcctOnOffReason_Lookup(p)
	return
}

func AccAcctOnOffReason_Gets(p *radius.Packet) (values []AccAcctOnOffReason, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 21) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccAcctOnOffReason(i))
	}
	return
}

func AccAcctOnOffReason_Lookup(p *radius.Packet) (value AccAcctOnOffReason, err error) {
	a, ok := _Acc_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccAcctOnOffReason(i)
	return
}

func AccAcctOnOffReason_Set(p *radius.Packet, value AccAcctOnOffReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 21, a)
}

func AccAcctOnOffReason_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 21)
}

type AccTunnelPort uint32

var AccTunnelPort_Strings = map[AccTunnelPort]string{}

func (a AccTunnelPort) String() string {
	if str, ok := AccTunnelPort_Strings[a]; ok {
		return str
	}
	return "AccTunnelPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccTunnelPort_Add(p *radius.Packet, value AccTunnelPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 22, a)
}

func AccTunnelPort_Get(p *radius.Packet) (value AccTunnelPort) {
	value, _ = AccTunnelPort_Lookup(p)
	return
}

func AccTunnelPort_Gets(p *radius.Packet) (values []AccTunnelPort, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 22) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccTunnelPort(i))
	}
	return
}

func AccTunnelPort_Lookup(p *radius.Packet) (value AccTunnelPort, err error) {
	a, ok := _Acc_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccTunnelPort(i)
	return
}

func AccTunnelPort_Set(p *radius.Packet, value AccTunnelPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 22, a)
}

func AccTunnelPort_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 22)
}

func AccDNSServerPri_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 23, a)
}

func AccDNSServerPri_Get(p *radius.Packet) (value net.IP) {
	value, _ = AccDNSServerPri_Lookup(p)
	return
}

func AccDNSServerPri_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acc_GetsVendor(p, 23) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccDNSServerPri_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acc_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AccDNSServerPri_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 23, a)
}

func AccDNSServerPri_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 23)
}

func AccDNSServerSec_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 24, a)
}

func AccDNSServerSec_Get(p *radius.Packet) (value net.IP) {
	value, _ = AccDNSServerSec_Lookup(p)
	return
}

func AccDNSServerSec_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acc_GetsVendor(p, 24) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccDNSServerSec_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acc_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AccDNSServerSec_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 24, a)
}

func AccDNSServerSec_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 24)
}

func AccNbnsServerPri_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 25, a)
}

func AccNbnsServerPri_Get(p *radius.Packet) (value net.IP) {
	value, _ = AccNbnsServerPri_Lookup(p)
	return
}

func AccNbnsServerPri_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acc_GetsVendor(p, 25) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccNbnsServerPri_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acc_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AccNbnsServerPri_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 25, a)
}

func AccNbnsServerPri_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 25)
}

func AccNbnsServerSec_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 26, a)
}

func AccNbnsServerSec_Get(p *radius.Packet) (value net.IP) {
	value, _ = AccNbnsServerSec_Lookup(p)
	return
}

func AccNbnsServerSec_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acc_GetsVendor(p, 26) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccNbnsServerSec_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acc_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AccNbnsServerSec_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 26, a)
}

func AccNbnsServerSec_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 26)
}

type AccDialPortIndex uint32

var AccDialPortIndex_Strings = map[AccDialPortIndex]string{}

func (a AccDialPortIndex) String() string {
	if str, ok := AccDialPortIndex_Strings[a]; ok {
		return str
	}
	return "AccDialPortIndex(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccDialPortIndex_Add(p *radius.Packet, value AccDialPortIndex) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 27, a)
}

func AccDialPortIndex_Get(p *radius.Packet) (value AccDialPortIndex) {
	value, _ = AccDialPortIndex_Lookup(p)
	return
}

func AccDialPortIndex_Gets(p *radius.Packet) (values []AccDialPortIndex, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 27) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccDialPortIndex(i))
	}
	return
}

func AccDialPortIndex_Lookup(p *radius.Packet) (value AccDialPortIndex, err error) {
	a, ok := _Acc_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccDialPortIndex(i)
	return
}

func AccDialPortIndex_Set(p *radius.Packet, value AccDialPortIndex) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 27, a)
}

func AccDialPortIndex_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 27)
}

type AccIPCompression uint32

const (
	AccIPCompression_Value_Disabled AccIPCompression = 1
	AccIPCompression_Value_Enabled  AccIPCompression = 2
)

var AccIPCompression_Strings = map[AccIPCompression]string{
	AccIPCompression_Value_Disabled: "Disabled",
	AccIPCompression_Value_Enabled:  "Enabled",
}

func (a AccIPCompression) String() string {
	if str, ok := AccIPCompression_Strings[a]; ok {
		return str
	}
	return "AccIPCompression(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccIPCompression_Add(p *radius.Packet, value AccIPCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 28, a)
}

func AccIPCompression_Get(p *radius.Packet) (value AccIPCompression) {
	value, _ = AccIPCompression_Lookup(p)
	return
}

func AccIPCompression_Gets(p *radius.Packet) (values []AccIPCompression, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 28) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccIPCompression(i))
	}
	return
}

func AccIPCompression_Lookup(p *radius.Packet) (value AccIPCompression, err error) {
	a, ok := _Acc_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccIPCompression(i)
	return
}

func AccIPCompression_Set(p *radius.Packet, value AccIPCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 28, a)
}

func AccIPCompression_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 28)
}

type AccIpxCompression uint32

const (
	AccIpxCompression_Value_Disabled AccIpxCompression = 1
	AccIpxCompression_Value_Enabled  AccIpxCompression = 2
)

var AccIpxCompression_Strings = map[AccIpxCompression]string{
	AccIpxCompression_Value_Disabled: "Disabled",
	AccIpxCompression_Value_Enabled:  "Enabled",
}

func (a AccIpxCompression) String() string {
	if str, ok := AccIpxCompression_Strings[a]; ok {
		return str
	}
	return "AccIpxCompression(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccIpxCompression_Add(p *radius.Packet, value AccIpxCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 29, a)
}

func AccIpxCompression_Get(p *radius.Packet) (value AccIpxCompression) {
	value, _ = AccIpxCompression_Lookup(p)
	return
}

func AccIpxCompression_Gets(p *radius.Packet) (values []AccIpxCompression, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 29) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccIpxCompression(i))
	}
	return
}

func AccIpxCompression_Lookup(p *radius.Packet) (value AccIpxCompression, err error) {
	a, ok := _Acc_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccIpxCompression(i)
	return
}

func AccIpxCompression_Set(p *radius.Packet, value AccIpxCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 29, a)
}

func AccIpxCompression_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 29)
}

type AccConnectTxSpeed uint32

var AccConnectTxSpeed_Strings = map[AccConnectTxSpeed]string{}

func (a AccConnectTxSpeed) String() string {
	if str, ok := AccConnectTxSpeed_Strings[a]; ok {
		return str
	}
	return "AccConnectTxSpeed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccConnectTxSpeed_Add(p *radius.Packet, value AccConnectTxSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 30, a)
}

func AccConnectTxSpeed_Get(p *radius.Packet) (value AccConnectTxSpeed) {
	value, _ = AccConnectTxSpeed_Lookup(p)
	return
}

func AccConnectTxSpeed_Gets(p *radius.Packet) (values []AccConnectTxSpeed, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 30) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccConnectTxSpeed(i))
	}
	return
}

func AccConnectTxSpeed_Lookup(p *radius.Packet) (value AccConnectTxSpeed, err error) {
	a, ok := _Acc_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccConnectTxSpeed(i)
	return
}

func AccConnectTxSpeed_Set(p *radius.Packet, value AccConnectTxSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 30, a)
}

func AccConnectTxSpeed_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 30)
}

type AccConnectRxSpeed uint32

var AccConnectRxSpeed_Strings = map[AccConnectRxSpeed]string{}

func (a AccConnectRxSpeed) String() string {
	if str, ok := AccConnectRxSpeed_Strings[a]; ok {
		return str
	}
	return "AccConnectRxSpeed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccConnectRxSpeed_Add(p *radius.Packet, value AccConnectRxSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 31, a)
}

func AccConnectRxSpeed_Get(p *radius.Packet) (value AccConnectRxSpeed) {
	value, _ = AccConnectRxSpeed_Lookup(p)
	return
}

func AccConnectRxSpeed_Gets(p *radius.Packet) (values []AccConnectRxSpeed, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 31) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccConnectRxSpeed(i))
	}
	return
}

func AccConnectRxSpeed_Lookup(p *radius.Packet) (value AccConnectRxSpeed, err error) {
	a, ok := _Acc_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccConnectRxSpeed(i)
	return
}

func AccConnectRxSpeed_Set(p *radius.Packet, value AccConnectRxSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 31, a)
}

func AccConnectRxSpeed_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 31)
}

func AccModemModulationType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 32, a)
}

func AccModemModulationType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 32, a)
}

func AccModemModulationType_Get(p *radius.Packet) (value []byte) {
	value, _ = AccModemModulationType_Lookup(p)
	return
}

func AccModemModulationType_GetString(p *radius.Packet) (value string) {
	value, _ = AccModemModulationType_LookupString(p)
	return
}

func AccModemModulationType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acc_GetsVendor(p, 32) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccModemModulationType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acc_GetsVendor(p, 32) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccModemModulationType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acc_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AccModemModulationType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acc_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AccModemModulationType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 32, a)
}

func AccModemModulationType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 32, a)
}

func AccModemModulationType_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 32)
}

func AccModemErrorProtocol_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 33, a)
}

func AccModemErrorProtocol_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 33, a)
}

func AccModemErrorProtocol_Get(p *radius.Packet) (value []byte) {
	value, _ = AccModemErrorProtocol_Lookup(p)
	return
}

func AccModemErrorProtocol_GetString(p *radius.Packet) (value string) {
	value, _ = AccModemErrorProtocol_LookupString(p)
	return
}

func AccModemErrorProtocol_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acc_GetsVendor(p, 33) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccModemErrorProtocol_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acc_GetsVendor(p, 33) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccModemErrorProtocol_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acc_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AccModemErrorProtocol_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acc_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AccModemErrorProtocol_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 33, a)
}

func AccModemErrorProtocol_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 33, a)
}

func AccModemErrorProtocol_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 33)
}

type AccCallbackDelay uint32

var AccCallbackDelay_Strings = map[AccCallbackDelay]string{}

func (a AccCallbackDelay) String() string {
	if str, ok := AccCallbackDelay_Strings[a]; ok {
		return str
	}
	return "AccCallbackDelay(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccCallbackDelay_Add(p *radius.Packet, value AccCallbackDelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 34, a)
}

func AccCallbackDelay_Get(p *radius.Packet) (value AccCallbackDelay) {
	value, _ = AccCallbackDelay_Lookup(p)
	return
}

func AccCallbackDelay_Gets(p *radius.Packet) (values []AccCallbackDelay, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 34) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccCallbackDelay(i))
	}
	return
}

func AccCallbackDelay_Lookup(p *radius.Packet) (value AccCallbackDelay, err error) {
	a, ok := _Acc_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccCallbackDelay(i)
	return
}

func AccCallbackDelay_Set(p *radius.Packet, value AccCallbackDelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 34, a)
}

func AccCallbackDelay_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 34)
}

func AccCallbackNumValid_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 35, a)
}

func AccCallbackNumValid_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 35, a)
}

func AccCallbackNumValid_Get(p *radius.Packet) (value []byte) {
	value, _ = AccCallbackNumValid_Lookup(p)
	return
}

func AccCallbackNumValid_GetString(p *radius.Packet) (value string) {
	value, _ = AccCallbackNumValid_LookupString(p)
	return
}

func AccCallbackNumValid_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acc_GetsVendor(p, 35) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccCallbackNumValid_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acc_GetsVendor(p, 35) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccCallbackNumValid_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acc_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AccCallbackNumValid_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acc_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AccCallbackNumValid_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 35, a)
}

func AccCallbackNumValid_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 35, a)
}

func AccCallbackNumValid_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 35)
}

type AccCallbackMode uint32

const (
	AccCallbackMode_Value_UserAuth          AccCallbackMode = 0
	AccCallbackMode_Value_UserSpecifiedE164 AccCallbackMode = 3
	AccCallbackMode_Value_CBCPCallback      AccCallbackMode = 6
	AccCallbackMode_Value_CLICallback       AccCallbackMode = 7
)

var AccCallbackMode_Strings = map[AccCallbackMode]string{
	AccCallbackMode_Value_UserAuth:          "User-Auth",
	AccCallbackMode_Value_UserSpecifiedE164: "User-Specified-E-164",
	AccCallbackMode_Value_CBCPCallback:      "CBCP-Callback",
	AccCallbackMode_Value_CLICallback:       "CLI-Callback",
}

func (a AccCallbackMode) String() string {
	if str, ok := AccCallbackMode_Strings[a]; ok {
		return str
	}
	return "AccCallbackMode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccCallbackMode_Add(p *radius.Packet, value AccCallbackMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 36, a)
}

func AccCallbackMode_Get(p *radius.Packet) (value AccCallbackMode) {
	value, _ = AccCallbackMode_Lookup(p)
	return
}

func AccCallbackMode_Gets(p *radius.Packet) (values []AccCallbackMode, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 36) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccCallbackMode(i))
	}
	return
}

func AccCallbackMode_Lookup(p *radius.Packet) (value AccCallbackMode, err error) {
	a, ok := _Acc_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccCallbackMode(i)
	return
}

func AccCallbackMode_Set(p *radius.Packet, value AccCallbackMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 36, a)
}

func AccCallbackMode_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 36)
}

type AccCallbackCBCPType uint32

const (
	AccCallbackCBCPType_Value_CBCPNone          AccCallbackCBCPType = 1
	AccCallbackCBCPType_Value_CBCPUserSpecified AccCallbackCBCPType = 2
	AccCallbackCBCPType_Value_CBCPPreSpecified  AccCallbackCBCPType = 3
)

var AccCallbackCBCPType_Strings = map[AccCallbackCBCPType]string{
	AccCallbackCBCPType_Value_CBCPNone:          "CBCP-None",
	AccCallbackCBCPType_Value_CBCPUserSpecified: "CBCP-User-Specified",
	AccCallbackCBCPType_Value_CBCPPreSpecified:  "CBCP-Pre-Specified",
}

func (a AccCallbackCBCPType) String() string {
	if str, ok := AccCallbackCBCPType_Strings[a]; ok {
		return str
	}
	return "AccCallbackCBCPType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccCallbackCBCPType_Add(p *radius.Packet, value AccCallbackCBCPType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 37, a)
}

func AccCallbackCBCPType_Get(p *radius.Packet) (value AccCallbackCBCPType) {
	value, _ = AccCallbackCBCPType_Lookup(p)
	return
}

func AccCallbackCBCPType_Gets(p *radius.Packet) (values []AccCallbackCBCPType, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 37) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccCallbackCBCPType(i))
	}
	return
}

func AccCallbackCBCPType_Lookup(p *radius.Packet) (value AccCallbackCBCPType, err error) {
	a, ok := _Acc_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccCallbackCBCPType(i)
	return
}

func AccCallbackCBCPType_Set(p *radius.Packet, value AccCallbackCBCPType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 37, a)
}

func AccCallbackCBCPType_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 37)
}

type AccDialoutAuthMode uint32

const (
	AccDialoutAuthMode_Value_PAP     AccDialoutAuthMode = 1
	AccDialoutAuthMode_Value_CHAP    AccDialoutAuthMode = 2
	AccDialoutAuthMode_Value_CHAPPAP AccDialoutAuthMode = 3
	AccDialoutAuthMode_Value_NONE    AccDialoutAuthMode = 4
)

var AccDialoutAuthMode_Strings = map[AccDialoutAuthMode]string{
	AccDialoutAuthMode_Value_PAP:     "PAP",
	AccDialoutAuthMode_Value_CHAP:    "CHAP",
	AccDialoutAuthMode_Value_CHAPPAP: "CHAP-PAP",
	AccDialoutAuthMode_Value_NONE:    "NONE",
}

func (a AccDialoutAuthMode) String() string {
	if str, ok := AccDialoutAuthMode_Strings[a]; ok {
		return str
	}
	return "AccDialoutAuthMode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccDialoutAuthMode_Add(p *radius.Packet, value AccDialoutAuthMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 38, a)
}

func AccDialoutAuthMode_Get(p *radius.Packet) (value AccDialoutAuthMode) {
	value, _ = AccDialoutAuthMode_Lookup(p)
	return
}

func AccDialoutAuthMode_Gets(p *radius.Packet) (values []AccDialoutAuthMode, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 38) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccDialoutAuthMode(i))
	}
	return
}

func AccDialoutAuthMode_Lookup(p *radius.Packet) (value AccDialoutAuthMode, err error) {
	a, ok := _Acc_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccDialoutAuthMode(i)
	return
}

func AccDialoutAuthMode_Set(p *radius.Packet, value AccDialoutAuthMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 38, a)
}

func AccDialoutAuthMode_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 38)
}

func AccDialoutAuthPassword_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 39, a)
}

func AccDialoutAuthPassword_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 39, a)
}

func AccDialoutAuthPassword_Get(p *radius.Packet) (value []byte) {
	value, _ = AccDialoutAuthPassword_Lookup(p)
	return
}

func AccDialoutAuthPassword_GetString(p *radius.Packet) (value string) {
	value, _ = AccDialoutAuthPassword_LookupString(p)
	return
}

func AccDialoutAuthPassword_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acc_GetsVendor(p, 39) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccDialoutAuthPassword_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acc_GetsVendor(p, 39) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccDialoutAuthPassword_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acc_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AccDialoutAuthPassword_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acc_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AccDialoutAuthPassword_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 39, a)
}

func AccDialoutAuthPassword_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 39, a)
}

func AccDialoutAuthPassword_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 39)
}

func AccDialoutAuthUsername_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 40, a)
}

func AccDialoutAuthUsername_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 40, a)
}

func AccDialoutAuthUsername_Get(p *radius.Packet) (value []byte) {
	value, _ = AccDialoutAuthUsername_Lookup(p)
	return
}

func AccDialoutAuthUsername_GetString(p *radius.Packet) (value string) {
	value, _ = AccDialoutAuthUsername_LookupString(p)
	return
}

func AccDialoutAuthUsername_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acc_GetsVendor(p, 40) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccDialoutAuthUsername_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acc_GetsVendor(p, 40) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccDialoutAuthUsername_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acc_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AccDialoutAuthUsername_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acc_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AccDialoutAuthUsername_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 40, a)
}

func AccDialoutAuthUsername_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 40, a)
}

func AccDialoutAuthUsername_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 40)
}

type AccAccessCommunity uint32

const (
	AccAccessCommunity_Value_PUBLIC AccAccessCommunity = 1
	AccAccessCommunity_Value_NETMAN AccAccessCommunity = 2
)

var AccAccessCommunity_Strings = map[AccAccessCommunity]string{
	AccAccessCommunity_Value_PUBLIC: "PUBLIC",
	AccAccessCommunity_Value_NETMAN: "NETMAN",
}

func (a AccAccessCommunity) String() string {
	if str, ok := AccAccessCommunity_Strings[a]; ok {
		return str
	}
	return "AccAccessCommunity(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccAccessCommunity_Add(p *radius.Packet, value AccAccessCommunity) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 42, a)
}

func AccAccessCommunity_Get(p *radius.Packet) (value AccAccessCommunity) {
	value, _ = AccAccessCommunity_Lookup(p)
	return
}

func AccAccessCommunity_Gets(p *radius.Packet) (values []AccAccessCommunity, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 42) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccAccessCommunity(i))
	}
	return
}

func AccAccessCommunity_Lookup(p *radius.Packet) (value AccAccessCommunity, err error) {
	a, ok := _Acc_LookupVendor(p, 42)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccAccessCommunity(i)
	return
}

func AccAccessCommunity_Set(p *radius.Packet, value AccAccessCommunity) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 42, a)
}

func AccAccessCommunity_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 42)
}

type AccVpsmRejectCause uint32

const (
	AccVpsmRejectCause_Value_NoAccessPartition           AccVpsmRejectCause = 1
	AccVpsmRejectCause_Value_AccessPartitionDisabled     AccVpsmRejectCause = 2
	AccVpsmRejectCause_Value_PartitionPortlimitExceeded  AccVpsmRejectCause = 3
	AccVpsmRejectCause_Value_LicensePortlimitExceeded    AccVpsmRejectCause = 4
	AccVpsmRejectCause_Value_HomeServerDown              AccVpsmRejectCause = 5
	AccVpsmRejectCause_Value_RejectedByHomeServer        AccVpsmRejectCause = 6
	AccVpsmRejectCause_Value_NASAdministrativelyDisabled AccVpsmRejectCause = 7
)

var AccVpsmRejectCause_Strings = map[AccVpsmRejectCause]string{
	AccVpsmRejectCause_Value_NoAccessPartition:           "No-Access-Partition",
	AccVpsmRejectCause_Value_AccessPartitionDisabled:     "Access-Partition-Disabled",
	AccVpsmRejectCause_Value_PartitionPortlimitExceeded:  "Partition-Portlimit-Exceeded",
	AccVpsmRejectCause_Value_LicensePortlimitExceeded:    "License-Portlimit-Exceeded",
	AccVpsmRejectCause_Value_HomeServerDown:              "Home-Server-Down",
	AccVpsmRejectCause_Value_RejectedByHomeServer:        "Rejected-By-Home-Server",
	AccVpsmRejectCause_Value_NASAdministrativelyDisabled: "NAS-Administratively-Disabled",
}

func (a AccVpsmRejectCause) String() string {
	if str, ok := AccVpsmRejectCause_Strings[a]; ok {
		return str
	}
	return "AccVpsmRejectCause(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccVpsmRejectCause_Add(p *radius.Packet, value AccVpsmRejectCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 43, a)
}

func AccVpsmRejectCause_Get(p *radius.Packet) (value AccVpsmRejectCause) {
	value, _ = AccVpsmRejectCause_Lookup(p)
	return
}

func AccVpsmRejectCause_Gets(p *radius.Packet) (values []AccVpsmRejectCause, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 43) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccVpsmRejectCause(i))
	}
	return
}

func AccVpsmRejectCause_Lookup(p *radius.Packet) (value AccVpsmRejectCause, err error) {
	a, ok := _Acc_LookupVendor(p, 43)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccVpsmRejectCause(i)
	return
}

func AccVpsmRejectCause_Set(p *radius.Packet, value AccVpsmRejectCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 43, a)
}

func AccVpsmRejectCause_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 43)
}

func AccAceToken_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 44, a)
}

func AccAceToken_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 44, a)
}

func AccAceToken_Get(p *radius.Packet) (value []byte) {
	value, _ = AccAceToken_Lookup(p)
	return
}

func AccAceToken_GetString(p *radius.Packet) (value string) {
	value, _ = AccAceToken_LookupString(p)
	return
}

func AccAceToken_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acc_GetsVendor(p, 44) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccAceToken_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acc_GetsVendor(p, 44) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccAceToken_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acc_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AccAceToken_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acc_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AccAceToken_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 44, a)
}

func AccAceToken_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 44, a)
}

func AccAceToken_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 44)
}

type AccAceTokenTTL uint32

var AccAceTokenTTL_Strings = map[AccAceTokenTTL]string{}

func (a AccAceTokenTTL) String() string {
	if str, ok := AccAceTokenTTL_Strings[a]; ok {
		return str
	}
	return "AccAceTokenTTL(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccAceTokenTTL_Add(p *radius.Packet, value AccAceTokenTTL) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 45, a)
}

func AccAceTokenTTL_Get(p *radius.Packet) (value AccAceTokenTTL) {
	value, _ = AccAceTokenTTL_Lookup(p)
	return
}

func AccAceTokenTTL_Gets(p *radius.Packet) (values []AccAceTokenTTL, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 45) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccAceTokenTTL(i))
	}
	return
}

func AccAceTokenTTL_Lookup(p *radius.Packet) (value AccAceTokenTTL, err error) {
	a, ok := _Acc_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccAceTokenTTL(i)
	return
}

func AccAceTokenTTL_Set(p *radius.Packet, value AccAceTokenTTL) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 45, a)
}

func AccAceTokenTTL_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 45)
}

func AccIPPoolName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 46, a)
}

func AccIPPoolName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 46, a)
}

func AccIPPoolName_Get(p *radius.Packet) (value []byte) {
	value, _ = AccIPPoolName_Lookup(p)
	return
}

func AccIPPoolName_GetString(p *radius.Packet) (value string) {
	value, _ = AccIPPoolName_LookupString(p)
	return
}

func AccIPPoolName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acc_GetsVendor(p, 46) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccIPPoolName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acc_GetsVendor(p, 46) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccIPPoolName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acc_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AccIPPoolName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acc_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AccIPPoolName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 46, a)
}

func AccIPPoolName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 46, a)
}

func AccIPPoolName_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 46)
}

type AccIgmpAdminState uint32

const (
	AccIgmpAdminState_Value_Enabled  AccIgmpAdminState = 1
	AccIgmpAdminState_Value_Disabled AccIgmpAdminState = 2
)

var AccIgmpAdminState_Strings = map[AccIgmpAdminState]string{
	AccIgmpAdminState_Value_Enabled:  "Enabled",
	AccIgmpAdminState_Value_Disabled: "Disabled",
}

func (a AccIgmpAdminState) String() string {
	if str, ok := AccIgmpAdminState_Strings[a]; ok {
		return str
	}
	return "AccIgmpAdminState(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccIgmpAdminState_Add(p *radius.Packet, value AccIgmpAdminState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 47, a)
}

func AccIgmpAdminState_Get(p *radius.Packet) (value AccIgmpAdminState) {
	value, _ = AccIgmpAdminState_Lookup(p)
	return
}

func AccIgmpAdminState_Gets(p *radius.Packet) (values []AccIgmpAdminState, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 47) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccIgmpAdminState(i))
	}
	return
}

func AccIgmpAdminState_Lookup(p *radius.Packet) (value AccIgmpAdminState, err error) {
	a, ok := _Acc_LookupVendor(p, 47)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccIgmpAdminState(i)
	return
}

func AccIgmpAdminState_Set(p *radius.Packet, value AccIgmpAdminState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 47, a)
}

func AccIgmpAdminState_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 47)
}

type AccIgmpVersion uint32

const (
	AccIgmpVersion_Value_V1 AccIgmpVersion = 1
	AccIgmpVersion_Value_V2 AccIgmpVersion = 2
)

var AccIgmpVersion_Strings = map[AccIgmpVersion]string{
	AccIgmpVersion_Value_V1: "V1",
	AccIgmpVersion_Value_V2: "V2",
}

func (a AccIgmpVersion) String() string {
	if str, ok := AccIgmpVersion_Strings[a]; ok {
		return str
	}
	return "AccIgmpVersion(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccIgmpVersion_Add(p *radius.Packet, value AccIgmpVersion) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 48, a)
}

func AccIgmpVersion_Get(p *radius.Packet) (value AccIgmpVersion) {
	value, _ = AccIgmpVersion_Lookup(p)
	return
}

func AccIgmpVersion_Gets(p *radius.Packet) (values []AccIgmpVersion, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 48) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccIgmpVersion(i))
	}
	return
}

func AccIgmpVersion_Lookup(p *radius.Packet) (value AccIgmpVersion, err error) {
	a, ok := _Acc_LookupVendor(p, 48)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccIgmpVersion(i)
	return
}

func AccIgmpVersion_Set(p *radius.Packet, value AccIgmpVersion) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 48, a)
}

func AccIgmpVersion_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 48)
}

func AccMNHASecret_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 73, a)
}

func AccMNHASecret_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 73, a)
}

func AccMNHASecret_Get(p *radius.Packet) (value []byte) {
	value, _ = AccMNHASecret_Lookup(p)
	return
}

func AccMNHASecret_GetString(p *radius.Packet) (value string) {
	value, _ = AccMNHASecret_LookupString(p)
	return
}

func AccMNHASecret_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acc_GetsVendor(p, 73) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccMNHASecret_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acc_GetsVendor(p, 73) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccMNHASecret_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acc_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AccMNHASecret_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acc_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AccMNHASecret_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 73, a)
}

func AccMNHASecret_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 73, a)
}

func AccMNHASecret_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 73)
}

func AccLocationID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 98, a)
}

func AccLocationID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_AddVendor(p, 98, a)
}

func AccLocationID_Get(p *radius.Packet) (value []byte) {
	value, _ = AccLocationID_Lookup(p)
	return
}

func AccLocationID_GetString(p *radius.Packet) (value string) {
	value, _ = AccLocationID_LookupString(p)
	return
}

func AccLocationID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acc_GetsVendor(p, 98) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccLocationID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acc_GetsVendor(p, 98) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AccLocationID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acc_LookupVendor(p, 98)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AccLocationID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acc_LookupVendor(p, 98)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AccLocationID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 98, a)
}

func AccLocationID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acc_SetVendor(p, 98, a)
}

func AccLocationID_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 98)
}

type AccCallingStationCategory uint32

var AccCallingStationCategory_Strings = map[AccCallingStationCategory]string{}

func (a AccCallingStationCategory) String() string {
	if str, ok := AccCallingStationCategory_Strings[a]; ok {
		return str
	}
	return "AccCallingStationCategory(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AccCallingStationCategory_Add(p *radius.Packet, value AccCallingStationCategory) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_AddVendor(p, 99, a)
}

func AccCallingStationCategory_Get(p *radius.Packet) (value AccCallingStationCategory) {
	value, _ = AccCallingStationCategory_Lookup(p)
	return
}

func AccCallingStationCategory_Gets(p *radius.Packet) (values []AccCallingStationCategory, err error) {
	var i uint32
	for _, attr := range _Acc_GetsVendor(p, 99) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AccCallingStationCategory(i))
	}
	return
}

func AccCallingStationCategory_Lookup(p *radius.Packet) (value AccCallingStationCategory, err error) {
	a, ok := _Acc_LookupVendor(p, 99)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AccCallingStationCategory(i)
	return
}

func AccCallingStationCategory_Set(p *radius.Packet, value AccCallingStationCategory) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acc_SetVendor(p, 99, a)
}

func AccCallingStationCategory_Del(p *radius.Packet) {
	_Acc_DelVendor(p, 99)
}
