// Code generated by radius-dict-gen. DO NOT EDIT.

package asn

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_ASN_VendorID = 23782
)

func _ASN_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_ASN_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _ASN_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _ASN_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _ASN_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _ASN_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _ASN_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _ASN_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _ASN_AddVendor(p, typ, attr)
}

func _ASN_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _ASN_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func ASNIPPoolName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ASN_AddVendor(p, 1, a)
}

func ASNIPPoolName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ASN_AddVendor(p, 1, a)
}

func ASNIPPoolName_Get(p *radius.Packet) (value []byte) {
	value, _ = ASNIPPoolName_Lookup(p)
	return
}

func ASNIPPoolName_GetString(p *radius.Packet) (value string) {
	value, _ = ASNIPPoolName_LookupString(p)
	return
}

func ASNIPPoolName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ASN_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASNIPPoolName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ASN_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASNIPPoolName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ASN_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASNIPPoolName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ASN_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASNIPPoolName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ASN_SetVendor(p, 1, a)
}

func ASNIPPoolName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ASN_SetVendor(p, 1, a)
}

func ASNIPPoolName_Del(p *radius.Packet) {
	_ASN_DelVendor(p, 1)
}

type ASNKbpsDown uint32

var ASNKbpsDown_Strings = map[ASNKbpsDown]string{}

func (a ASNKbpsDown) String() string {
	if str, ok := ASNKbpsDown_Strings[a]; ok {
		return str
	}
	return "ASNKbpsDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASNKbpsDown_Add(p *radius.Packet, value ASNKbpsDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_AddVendor(p, 100, a)
}

func ASNKbpsDown_Get(p *radius.Packet) (value ASNKbpsDown) {
	value, _ = ASNKbpsDown_Lookup(p)
	return
}

func ASNKbpsDown_Gets(p *radius.Packet) (values []ASNKbpsDown, err error) {
	var i uint32
	for _, attr := range _ASN_GetsVendor(p, 100) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASNKbpsDown(i))
	}
	return
}

func ASNKbpsDown_Lookup(p *radius.Packet) (value ASNKbpsDown, err error) {
	a, ok := _ASN_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASNKbpsDown(i)
	return
}

func ASNKbpsDown_Set(p *radius.Packet, value ASNKbpsDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_SetVendor(p, 100, a)
}

func ASNKbpsDown_Del(p *radius.Packet) {
	_ASN_DelVendor(p, 100)
}

type ASNKbpsDownLocalmedia uint32

var ASNKbpsDownLocalmedia_Strings = map[ASNKbpsDownLocalmedia]string{}

func (a ASNKbpsDownLocalmedia) String() string {
	if str, ok := ASNKbpsDownLocalmedia_Strings[a]; ok {
		return str
	}
	return "ASNKbpsDownLocalmedia(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASNKbpsDownLocalmedia_Add(p *radius.Packet, value ASNKbpsDownLocalmedia) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_AddVendor(p, 112, a)
}

func ASNKbpsDownLocalmedia_Get(p *radius.Packet) (value ASNKbpsDownLocalmedia) {
	value, _ = ASNKbpsDownLocalmedia_Lookup(p)
	return
}

func ASNKbpsDownLocalmedia_Gets(p *radius.Packet) (values []ASNKbpsDownLocalmedia, err error) {
	var i uint32
	for _, attr := range _ASN_GetsVendor(p, 112) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASNKbpsDownLocalmedia(i))
	}
	return
}

func ASNKbpsDownLocalmedia_Lookup(p *radius.Packet) (value ASNKbpsDownLocalmedia, err error) {
	a, ok := _ASN_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASNKbpsDownLocalmedia(i)
	return
}

func ASNKbpsDownLocalmedia_Set(p *radius.Packet, value ASNKbpsDownLocalmedia) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_SetVendor(p, 112, a)
}

func ASNKbpsDownLocalmedia_Del(p *radius.Packet) {
	_ASN_DelVendor(p, 112)
}

type ASNKbpsUp uint32

var ASNKbpsUp_Strings = map[ASNKbpsUp]string{}

func (a ASNKbpsUp) String() string {
	if str, ok := ASNKbpsUp_Strings[a]; ok {
		return str
	}
	return "ASNKbpsUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASNKbpsUp_Add(p *radius.Packet, value ASNKbpsUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_AddVendor(p, 101, a)
}

func ASNKbpsUp_Get(p *radius.Packet) (value ASNKbpsUp) {
	value, _ = ASNKbpsUp_Lookup(p)
	return
}

func ASNKbpsUp_Gets(p *radius.Packet) (values []ASNKbpsUp, err error) {
	var i uint32
	for _, attr := range _ASN_GetsVendor(p, 101) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASNKbpsUp(i))
	}
	return
}

func ASNKbpsUp_Lookup(p *radius.Packet) (value ASNKbpsUp, err error) {
	a, ok := _ASN_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASNKbpsUp(i)
	return
}

func ASNKbpsUp_Set(p *radius.Packet, value ASNKbpsUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_SetVendor(p, 101, a)
}

func ASNKbpsUp_Del(p *radius.Packet) {
	_ASN_DelVendor(p, 101)
}

type ASNPpsDown uint32

var ASNPpsDown_Strings = map[ASNPpsDown]string{}

func (a ASNPpsDown) String() string {
	if str, ok := ASNPpsDown_Strings[a]; ok {
		return str
	}
	return "ASNPpsDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASNPpsDown_Add(p *radius.Packet, value ASNPpsDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_AddVendor(p, 102, a)
}

func ASNPpsDown_Get(p *radius.Packet) (value ASNPpsDown) {
	value, _ = ASNPpsDown_Lookup(p)
	return
}

func ASNPpsDown_Gets(p *radius.Packet) (values []ASNPpsDown, err error) {
	var i uint32
	for _, attr := range _ASN_GetsVendor(p, 102) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASNPpsDown(i))
	}
	return
}

func ASNPpsDown_Lookup(p *radius.Packet) (value ASNPpsDown, err error) {
	a, ok := _ASN_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASNPpsDown(i)
	return
}

func ASNPpsDown_Set(p *radius.Packet, value ASNPpsDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_SetVendor(p, 102, a)
}

func ASNPpsDown_Del(p *radius.Packet) {
	_ASN_DelVendor(p, 102)
}

type ASNPpsUp uint32

var ASNPpsUp_Strings = map[ASNPpsUp]string{}

func (a ASNPpsUp) String() string {
	if str, ok := ASNPpsUp_Strings[a]; ok {
		return str
	}
	return "ASNPpsUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASNPpsUp_Add(p *radius.Packet, value ASNPpsUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_AddVendor(p, 103, a)
}

func ASNPpsUp_Get(p *radius.Packet) (value ASNPpsUp) {
	value, _ = ASNPpsUp_Lookup(p)
	return
}

func ASNPpsUp_Gets(p *radius.Packet) (values []ASNPpsUp, err error) {
	var i uint32
	for _, attr := range _ASN_GetsVendor(p, 103) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASNPpsUp(i))
	}
	return
}

func ASNPpsUp_Lookup(p *radius.Packet) (value ASNPpsUp, err error) {
	a, ok := _ASN_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASNPpsUp(i)
	return
}

func ASNPpsUp_Set(p *radius.Packet, value ASNPpsUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_SetVendor(p, 103, a)
}

func ASNPpsUp_Del(p *radius.Packet) {
	_ASN_DelVendor(p, 103)
}

type ASNTCPConnlimit uint32

var ASNTCPConnlimit_Strings = map[ASNTCPConnlimit]string{}

func (a ASNTCPConnlimit) String() string {
	if str, ok := ASNTCPConnlimit_Strings[a]; ok {
		return str
	}
	return "ASNTCPConnlimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASNTCPConnlimit_Add(p *radius.Packet, value ASNTCPConnlimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_AddVendor(p, 104, a)
}

func ASNTCPConnlimit_Get(p *radius.Packet) (value ASNTCPConnlimit) {
	value, _ = ASNTCPConnlimit_Lookup(p)
	return
}

func ASNTCPConnlimit_Gets(p *radius.Packet) (values []ASNTCPConnlimit, err error) {
	var i uint32
	for _, attr := range _ASN_GetsVendor(p, 104) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASNTCPConnlimit(i))
	}
	return
}

func ASNTCPConnlimit_Lookup(p *radius.Packet) (value ASNTCPConnlimit, err error) {
	a, ok := _ASN_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASNTCPConnlimit(i)
	return
}

func ASNTCPConnlimit_Set(p *radius.Packet, value ASNTCPConnlimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_SetVendor(p, 104, a)
}

func ASNTCPConnlimit_Del(p *radius.Packet) {
	_ASN_DelVendor(p, 104)
}

type ASNFirewallAvailable uint32

const (
	ASNFirewallAvailable_Value_Yes ASNFirewallAvailable = 1
	ASNFirewallAvailable_Value_No  ASNFirewallAvailable = 2
)

var ASNFirewallAvailable_Strings = map[ASNFirewallAvailable]string{
	ASNFirewallAvailable_Value_Yes: "Yes",
	ASNFirewallAvailable_Value_No:  "No",
}

func (a ASNFirewallAvailable) String() string {
	if str, ok := ASNFirewallAvailable_Strings[a]; ok {
		return str
	}
	return "ASNFirewallAvailable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASNFirewallAvailable_Add(p *radius.Packet, value ASNFirewallAvailable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_AddVendor(p, 110, a)
}

func ASNFirewallAvailable_Get(p *radius.Packet) (value ASNFirewallAvailable) {
	value, _ = ASNFirewallAvailable_Lookup(p)
	return
}

func ASNFirewallAvailable_Gets(p *radius.Packet) (values []ASNFirewallAvailable, err error) {
	var i uint32
	for _, attr := range _ASN_GetsVendor(p, 110) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASNFirewallAvailable(i))
	}
	return
}

func ASNFirewallAvailable_Lookup(p *radius.Packet) (value ASNFirewallAvailable, err error) {
	a, ok := _ASN_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASNFirewallAvailable(i)
	return
}

func ASNFirewallAvailable_Set(p *radius.Packet, value ASNFirewallAvailable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_SetVendor(p, 110, a)
}

func ASNFirewallAvailable_Del(p *radius.Packet) {
	_ASN_DelVendor(p, 110)
}

type ASNFirewallState uint32

const (
	ASNFirewallState_Value_Enabled  ASNFirewallState = 1
	ASNFirewallState_Value_Disabled ASNFirewallState = 2
)

var ASNFirewallState_Strings = map[ASNFirewallState]string{
	ASNFirewallState_Value_Enabled:  "Enabled",
	ASNFirewallState_Value_Disabled: "Disabled",
}

func (a ASNFirewallState) String() string {
	if str, ok := ASNFirewallState_Strings[a]; ok {
		return str
	}
	return "ASNFirewallState(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASNFirewallState_Add(p *radius.Packet, value ASNFirewallState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_AddVendor(p, 105, a)
}

func ASNFirewallState_Get(p *radius.Packet) (value ASNFirewallState) {
	value, _ = ASNFirewallState_Lookup(p)
	return
}

func ASNFirewallState_Gets(p *radius.Packet) (values []ASNFirewallState, err error) {
	var i uint32
	for _, attr := range _ASN_GetsVendor(p, 105) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASNFirewallState(i))
	}
	return
}

func ASNFirewallState_Lookup(p *radius.Packet) (value ASNFirewallState, err error) {
	a, ok := _ASN_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASNFirewallState(i)
	return
}

func ASNFirewallState_Set(p *radius.Packet, value ASNFirewallState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_SetVendor(p, 105, a)
}

func ASNFirewallState_Del(p *radius.Packet) {
	_ASN_DelVendor(p, 105)
}

type ASNFirewallBlockPing uint32

const (
	ASNFirewallBlockPing_Value_Enabled  ASNFirewallBlockPing = 1
	ASNFirewallBlockPing_Value_Disabled ASNFirewallBlockPing = 2
)

var ASNFirewallBlockPing_Strings = map[ASNFirewallBlockPing]string{
	ASNFirewallBlockPing_Value_Enabled:  "Enabled",
	ASNFirewallBlockPing_Value_Disabled: "Disabled",
}

func (a ASNFirewallBlockPing) String() string {
	if str, ok := ASNFirewallBlockPing_Strings[a]; ok {
		return str
	}
	return "ASNFirewallBlockPing(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASNFirewallBlockPing_Add(p *radius.Packet, value ASNFirewallBlockPing) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_AddVendor(p, 107, a)
}

func ASNFirewallBlockPing_Get(p *radius.Packet) (value ASNFirewallBlockPing) {
	value, _ = ASNFirewallBlockPing_Lookup(p)
	return
}

func ASNFirewallBlockPing_Gets(p *radius.Packet) (values []ASNFirewallBlockPing, err error) {
	var i uint32
	for _, attr := range _ASN_GetsVendor(p, 107) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASNFirewallBlockPing(i))
	}
	return
}

func ASNFirewallBlockPing_Lookup(p *radius.Packet) (value ASNFirewallBlockPing, err error) {
	a, ok := _ASN_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASNFirewallBlockPing(i)
	return
}

func ASNFirewallBlockPing_Set(p *radius.Packet, value ASNFirewallBlockPing) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_SetVendor(p, 107, a)
}

func ASNFirewallBlockPing_Del(p *radius.Packet) {
	_ASN_DelVendor(p, 107)
}

func ASNFirewallOpen_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ASN_AddVendor(p, 106, a)
}

func ASNFirewallOpen_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ASN_AddVendor(p, 106, a)
}

func ASNFirewallOpen_Get(p *radius.Packet) (value []byte) {
	value, _ = ASNFirewallOpen_Lookup(p)
	return
}

func ASNFirewallOpen_GetString(p *radius.Packet) (value string) {
	value, _ = ASNFirewallOpen_LookupString(p)
	return
}

func ASNFirewallOpen_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ASN_GetsVendor(p, 106) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASNFirewallOpen_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ASN_GetsVendor(p, 106) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASNFirewallOpen_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ASN_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASNFirewallOpen_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ASN_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASNFirewallOpen_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ASN_SetVendor(p, 106, a)
}

func ASNFirewallOpen_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ASN_SetVendor(p, 106, a)
}

func ASNFirewallOpen_Del(p *radius.Packet) {
	_ASN_DelVendor(p, 106)
}

type ASNQoSAvailable uint32

const (
	ASNQoSAvailable_Value_Yes ASNQoSAvailable = 1
	ASNQoSAvailable_Value_No  ASNQoSAvailable = 2
)

var ASNQoSAvailable_Strings = map[ASNQoSAvailable]string{
	ASNQoSAvailable_Value_Yes: "Yes",
	ASNQoSAvailable_Value_No:  "No",
}

func (a ASNQoSAvailable) String() string {
	if str, ok := ASNQoSAvailable_Strings[a]; ok {
		return str
	}
	return "ASNQoSAvailable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASNQoSAvailable_Add(p *radius.Packet, value ASNQoSAvailable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_AddVendor(p, 111, a)
}

func ASNQoSAvailable_Get(p *radius.Packet) (value ASNQoSAvailable) {
	value, _ = ASNQoSAvailable_Lookup(p)
	return
}

func ASNQoSAvailable_Gets(p *radius.Packet) (values []ASNQoSAvailable, err error) {
	var i uint32
	for _, attr := range _ASN_GetsVendor(p, 111) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASNQoSAvailable(i))
	}
	return
}

func ASNQoSAvailable_Lookup(p *radius.Packet) (value ASNQoSAvailable, err error) {
	a, ok := _ASN_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASNQoSAvailable(i)
	return
}

func ASNQoSAvailable_Set(p *radius.Packet, value ASNQoSAvailable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_SetVendor(p, 111, a)
}

func ASNQoSAvailable_Del(p *radius.Packet) {
	_ASN_DelVendor(p, 111)
}

type ASNQoSState uint32

const (
	ASNQoSState_Value_Enabled  ASNQoSState = 1
	ASNQoSState_Value_Disabled ASNQoSState = 2
)

var ASNQoSState_Strings = map[ASNQoSState]string{
	ASNQoSState_Value_Enabled:  "Enabled",
	ASNQoSState_Value_Disabled: "Disabled",
}

func (a ASNQoSState) String() string {
	if str, ok := ASNQoSState_Strings[a]; ok {
		return str
	}
	return "ASNQoSState(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASNQoSState_Add(p *radius.Packet, value ASNQoSState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_AddVendor(p, 108, a)
}

func ASNQoSState_Get(p *radius.Packet) (value ASNQoSState) {
	value, _ = ASNQoSState_Lookup(p)
	return
}

func ASNQoSState_Gets(p *radius.Packet) (values []ASNQoSState, err error) {
	var i uint32
	for _, attr := range _ASN_GetsVendor(p, 108) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASNQoSState(i))
	}
	return
}

func ASNQoSState_Lookup(p *radius.Packet) (value ASNQoSState, err error) {
	a, ok := _ASN_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASNQoSState(i)
	return
}

func ASNQoSState_Set(p *radius.Packet, value ASNQoSState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_SetVendor(p, 108, a)
}

func ASNQoSState_Del(p *radius.Packet) {
	_ASN_DelVendor(p, 108)
}

func ASNIPRedirect_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ASN_AddVendor(p, 109, a)
}

func ASNIPRedirect_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ASN_AddVendor(p, 109, a)
}

func ASNIPRedirect_Get(p *radius.Packet) (value []byte) {
	value, _ = ASNIPRedirect_Lookup(p)
	return
}

func ASNIPRedirect_GetString(p *radius.Packet) (value string) {
	value, _ = ASNIPRedirect_LookupString(p)
	return
}

func ASNIPRedirect_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ASN_GetsVendor(p, 109) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASNIPRedirect_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ASN_GetsVendor(p, 109) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASNIPRedirect_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ASN_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASNIPRedirect_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ASN_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASNIPRedirect_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ASN_SetVendor(p, 109, a)
}

func ASNIPRedirect_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ASN_SetVendor(p, 109, a)
}

func ASNIPRedirect_Del(p *radius.Packet) {
	_ASN_DelVendor(p, 109)
}

type ASNWebfilterMode uint32

const (
	ASNWebfilterMode_Value_Deny  ASNWebfilterMode = 1
	ASNWebfilterMode_Value_Allow ASNWebfilterMode = 2
)

var ASNWebfilterMode_Strings = map[ASNWebfilterMode]string{
	ASNWebfilterMode_Value_Deny:  "Deny",
	ASNWebfilterMode_Value_Allow: "Allow",
}

func (a ASNWebfilterMode) String() string {
	if str, ok := ASNWebfilterMode_Strings[a]; ok {
		return str
	}
	return "ASNWebfilterMode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ASNWebfilterMode_Add(p *radius.Packet, value ASNWebfilterMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_AddVendor(p, 113, a)
}

func ASNWebfilterMode_Get(p *radius.Packet) (value ASNWebfilterMode) {
	value, _ = ASNWebfilterMode_Lookup(p)
	return
}

func ASNWebfilterMode_Gets(p *radius.Packet) (values []ASNWebfilterMode, err error) {
	var i uint32
	for _, attr := range _ASN_GetsVendor(p, 113) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ASNWebfilterMode(i))
	}
	return
}

func ASNWebfilterMode_Lookup(p *radius.Packet) (value ASNWebfilterMode, err error) {
	a, ok := _ASN_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ASNWebfilterMode(i)
	return
}

func ASNWebfilterMode_Set(p *radius.Packet, value ASNWebfilterMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ASN_SetVendor(p, 113, a)
}

func ASNWebfilterMode_Del(p *radius.Packet) {
	_ASN_DelVendor(p, 113)
}

func ASNWebfilterRedirect_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ASN_AddVendor(p, 114, a)
}

func ASNWebfilterRedirect_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ASN_AddVendor(p, 114, a)
}

func ASNWebfilterRedirect_Get(p *radius.Packet) (value []byte) {
	value, _ = ASNWebfilterRedirect_Lookup(p)
	return
}

func ASNWebfilterRedirect_GetString(p *radius.Packet) (value string) {
	value, _ = ASNWebfilterRedirect_LookupString(p)
	return
}

func ASNWebfilterRedirect_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ASN_GetsVendor(p, 114) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASNWebfilterRedirect_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ASN_GetsVendor(p, 114) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASNWebfilterRedirect_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ASN_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASNWebfilterRedirect_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ASN_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASNWebfilterRedirect_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ASN_SetVendor(p, 114, a)
}

func ASNWebfilterRedirect_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ASN_SetVendor(p, 114, a)
}

func ASNWebfilterRedirect_Del(p *radius.Packet) {
	_ASN_DelVendor(p, 114)
}

func ASNWebfilterDestination_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ASN_AddVendor(p, 115, a)
}

func ASNWebfilterDestination_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ASN_AddVendor(p, 115, a)
}

func ASNWebfilterDestination_Get(p *radius.Packet) (value []byte) {
	value, _ = ASNWebfilterDestination_Lookup(p)
	return
}

func ASNWebfilterDestination_GetString(p *radius.Packet) (value string) {
	value, _ = ASNWebfilterDestination_LookupString(p)
	return
}

func ASNWebfilterDestination_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ASN_GetsVendor(p, 115) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASNWebfilterDestination_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ASN_GetsVendor(p, 115) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASNWebfilterDestination_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ASN_LookupVendor(p, 115)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASNWebfilterDestination_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ASN_LookupVendor(p, 115)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASNWebfilterDestination_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ASN_SetVendor(p, 115, a)
}

func ASNWebfilterDestination_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ASN_SetVendor(p, 115, a)
}

func ASNWebfilterDestination_Del(p *radius.Packet) {
	_ASN_DelVendor(p, 115)
}

func ASNWebfilterDomain_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ASN_AddVendor(p, 116, a)
}

func ASNWebfilterDomain_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ASN_AddVendor(p, 116, a)
}

func ASNWebfilterDomain_Get(p *radius.Packet) (value []byte) {
	value, _ = ASNWebfilterDomain_Lookup(p)
	return
}

func ASNWebfilterDomain_GetString(p *radius.Packet) (value string) {
	value, _ = ASNWebfilterDomain_LookupString(p)
	return
}

func ASNWebfilterDomain_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ASN_GetsVendor(p, 116) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASNWebfilterDomain_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ASN_GetsVendor(p, 116) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ASNWebfilterDomain_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ASN_LookupVendor(p, 116)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ASNWebfilterDomain_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ASN_LookupVendor(p, 116)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ASNWebfilterDomain_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ASN_SetVendor(p, 116, a)
}

func ASNWebfilterDomain_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ASN_SetVendor(p, 116, a)
}

func ASNWebfilterDomain_Del(p *radius.Packet) {
	_ASN_DelVendor(p, 116)
}
