// Code generated by radius-dict-gen. DO NOT EDIT.

package patton

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Patton_VendorID = 1768
)

func _Patton_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Patton_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Patton_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Patton_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Patton_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Patton_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Patton_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Patton_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Patton_AddVendor(p, typ, attr)
}

func _Patton_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Patton_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func PattonSetupTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 32, a)
}

func PattonSetupTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 32, a)
}

func PattonSetupTime_Get(p *radius.Packet) (value []byte) {
	value, _ = PattonSetupTime_Lookup(p)
	return
}

func PattonSetupTime_GetString(p *radius.Packet) (value string) {
	value, _ = PattonSetupTime_LookupString(p)
	return
}

func PattonSetupTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Patton_GetsVendor(p, 32) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonSetupTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Patton_GetsVendor(p, 32) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonSetupTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Patton_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PattonSetupTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Patton_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PattonSetupTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 32, a)
}

func PattonSetupTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 32, a)
}

func PattonSetupTime_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 32)
}

func PattonConnectTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 33, a)
}

func PattonConnectTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 33, a)
}

func PattonConnectTime_Get(p *radius.Packet) (value []byte) {
	value, _ = PattonConnectTime_Lookup(p)
	return
}

func PattonConnectTime_GetString(p *radius.Packet) (value string) {
	value, _ = PattonConnectTime_LookupString(p)
	return
}

func PattonConnectTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Patton_GetsVendor(p, 33) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonConnectTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Patton_GetsVendor(p, 33) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonConnectTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Patton_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PattonConnectTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Patton_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PattonConnectTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 33, a)
}

func PattonConnectTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 33, a)
}

func PattonConnectTime_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 33)
}

func PattonDisconnectTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 34, a)
}

func PattonDisconnectTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 34, a)
}

func PattonDisconnectTime_Get(p *radius.Packet) (value []byte) {
	value, _ = PattonDisconnectTime_Lookup(p)
	return
}

func PattonDisconnectTime_GetString(p *radius.Packet) (value string) {
	value, _ = PattonDisconnectTime_LookupString(p)
	return
}

func PattonDisconnectTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Patton_GetsVendor(p, 34) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonDisconnectTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Patton_GetsVendor(p, 34) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonDisconnectTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Patton_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PattonDisconnectTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Patton_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PattonDisconnectTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 34, a)
}

func PattonDisconnectTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 34, a)
}

func PattonDisconnectTime_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 34)
}

type PattonDisconnectCause uint32

const (
	PattonDisconnectCause_Value_ValidCauseCodeNotYetReceived                            PattonDisconnectCause = 0
	PattonDisconnectCause_Value_UnallocatedRunassignedNumber                            PattonDisconnectCause = 1
	PattonDisconnectCause_Value_NoRouteToSpecifiedTransitNetworkWAN                     PattonDisconnectCause = 2
	PattonDisconnectCause_Value_NoRouteToDestination                                    PattonDisconnectCause = 3
	PattonDisconnectCause_Value_SendSpecialInformationTone                              PattonDisconnectCause = 4
	PattonDisconnectCause_Value_MisdialledTrunkPrefix                                   PattonDisconnectCause = 5
	PattonDisconnectCause_Value_ChannelUnacceptable                                     PattonDisconnectCause = 6
	PattonDisconnectCause_Value_CallAwardedAndBeingDeliveredInAnEstablishedChannel      PattonDisconnectCause = 7
	PattonDisconnectCause_Value_Prefix0DialedButNotAllowed                              PattonDisconnectCause = 8
	PattonDisconnectCause_Value_Prefix1DialedButNotAllowed                              PattonDisconnectCause = 9
	PattonDisconnectCause_Value_Prefix1DialedButNotRequired                             PattonDisconnectCause = 10
	PattonDisconnectCause_Value_MoreDigitsReceivedThanAllowedCallIsProceeding           PattonDisconnectCause = 11
	PattonDisconnectCause_Value_NormalCallClearing                                      PattonDisconnectCause = 16
	PattonDisconnectCause_Value_UserBusy                                                PattonDisconnectCause = 17
	PattonDisconnectCause_Value_NoUserResponding                                        PattonDisconnectCause = 18
	PattonDisconnectCause_Value_NoAnswerFromUser                                        PattonDisconnectCause = 19
	PattonDisconnectCause_Value_CallRejected                                            PattonDisconnectCause = 21
	PattonDisconnectCause_Value_NumberChanged                                           PattonDisconnectCause = 22
	PattonDisconnectCause_Value_ReverseChargingRejected                                 PattonDisconnectCause = 23
	PattonDisconnectCause_Value_CallSuspended                                           PattonDisconnectCause = 24
	PattonDisconnectCause_Value_CallResumed                                             PattonDisconnectCause = 25
	PattonDisconnectCause_Value_NonSelectedUserClearing                                 PattonDisconnectCause = 26
	PattonDisconnectCause_Value_DestinationOutOfOrder                                   PattonDisconnectCause = 27
	PattonDisconnectCause_Value_InvalidNumberFormatIncompleteNumber                     PattonDisconnectCause = 28
	PattonDisconnectCause_Value_FacilityRejected                                        PattonDisconnectCause = 29
	PattonDisconnectCause_Value_ResponseToSTATUSENQUIRY                                 PattonDisconnectCause = 30
	PattonDisconnectCause_Value_NormalUnspecified                                       PattonDisconnectCause = 31
	PattonDisconnectCause_Value_CircuitOutOfOrder                                       PattonDisconnectCause = 33
	PattonDisconnectCause_Value_NoCircuitChannelAvailable                               PattonDisconnectCause = 34
	PattonDisconnectCause_Value_DestinationUnattainable                                 PattonDisconnectCause = 35
	PattonDisconnectCause_Value_DegradedService                                         PattonDisconnectCause = 37
	PattonDisconnectCause_Value_NetworkWANOutOfOrder                                    PattonDisconnectCause = 38
	PattonDisconnectCause_Value_TransitDelayRangeCannotBeAchieved                       PattonDisconnectCause = 39
	PattonDisconnectCause_Value_ThroughputRangeCannotBeAchieved                         PattonDisconnectCause = 40
	PattonDisconnectCause_Value_TemporaryFailure                                        PattonDisconnectCause = 41
	PattonDisconnectCause_Value_SwitchingEquipmentCongestion                            PattonDisconnectCause = 42
	PattonDisconnectCause_Value_AccessInformationDiscarded                              PattonDisconnectCause = 43
	PattonDisconnectCause_Value_RequestedCircuitChannelNotAvailable                     PattonDisconnectCause = 44
	PattonDisconnectCause_Value_PreEmpted                                               PattonDisconnectCause = 45
	PattonDisconnectCause_Value_PrecedenceCallBlocked                                   PattonDisconnectCause = 46
	PattonDisconnectCause_Value_ResourceUnavailableUnspecified                          PattonDisconnectCause = 47
	PattonDisconnectCause_Value_QualityOfServiceUnavailable                             PattonDisconnectCause = 49
	PattonDisconnectCause_Value_RequestedFacilityNotSubscribed                          PattonDisconnectCause = 50
	PattonDisconnectCause_Value_ReverseChargingNotAllowed                               PattonDisconnectCause = 51
	PattonDisconnectCause_Value_OutgoingCallsBarred                                     PattonDisconnectCause = 52
	PattonDisconnectCause_Value_OutgoingCallsBarredWithinCUG                            PattonDisconnectCause = 53
	PattonDisconnectCause_Value_IncomingCallsBarred                                     PattonDisconnectCause = 54
	PattonDisconnectCause_Value_IncomingCallsBarredWithinCUG                            PattonDisconnectCause = 55
	PattonDisconnectCause_Value_CallWaitingNotSubscribed                                PattonDisconnectCause = 56
	PattonDisconnectCause_Value_BearerCapabilityNotAuthorized                           PattonDisconnectCause = 57
	PattonDisconnectCause_Value_BearerCapabilityNotPresentlyAvailable                   PattonDisconnectCause = 58
	PattonDisconnectCause_Value_ServiceOrOptionNotAvailableUnspecified                  PattonDisconnectCause = 63
	PattonDisconnectCause_Value_BearerServiceNotImplemented                             PattonDisconnectCause = 65
	PattonDisconnectCause_Value_ChannelTypeNotImplemented                               PattonDisconnectCause = 66
	PattonDisconnectCause_Value_TransitNetworkSelectionNotImplemented                   PattonDisconnectCause = 67
	PattonDisconnectCause_Value_MessageNotImplemented                                   PattonDisconnectCause = 68
	PattonDisconnectCause_Value_RequestedFacilityNotImplemented                         PattonDisconnectCause = 69
	PattonDisconnectCause_Value_OnlyRestrictedDigitalInformationBearerCapabilityIsAvail PattonDisconnectCause = 70
	PattonDisconnectCause_Value_ServiceOrOptionNotImplementedUnspecified                PattonDisconnectCause = 79
	PattonDisconnectCause_Value_InvalidCallReferenceValue                               PattonDisconnectCause = 81
	PattonDisconnectCause_Value_IdentifiedChannelDoesNotExist                           PattonDisconnectCause = 82
	PattonDisconnectCause_Value_ASuspendedCallExistsButThisCallIdentityDoesNot          PattonDisconnectCause = 83
	PattonDisconnectCause_Value_CallIdentityInUse                                       PattonDisconnectCause = 84
	PattonDisconnectCause_Value_NoCallSuspended                                         PattonDisconnectCause = 85
	PattonDisconnectCause_Value_CallHavingTheRequestedCallIdentityHasBeenCleared        PattonDisconnectCause = 86
	PattonDisconnectCause_Value_CalledUserNotMemberOfCUG                                PattonDisconnectCause = 87
	PattonDisconnectCause_Value_IncompatibleDestination                                 PattonDisconnectCause = 88
	PattonDisconnectCause_Value_NonExistentAbbreviatedAddressEntry                      PattonDisconnectCause = 89
	PattonDisconnectCause_Value_DestinationAddressMissingAndDirectCallNotSubscribed     PattonDisconnectCause = 90
	PattonDisconnectCause_Value_InvalidTransitNetworkSelectionNationalUse               PattonDisconnectCause = 91
	PattonDisconnectCause_Value_InvalidFacilityParameter                                PattonDisconnectCause = 92
	PattonDisconnectCause_Value_MandatoryInformationElementIsMissing                    PattonDisconnectCause = 93
	PattonDisconnectCause_Value_InvalidMessageUnspecified                               PattonDisconnectCause = 95
	PattonDisconnectCause_Value_MandatoryInformationElementIsMissing2                   PattonDisconnectCause = 96
	PattonDisconnectCause_Value_MessageTypeNonExistentOrNotImplemented                  PattonDisconnectCause = 97
	PattonDisconnectCause_Value_MessageNotCompatibleWithCallState                       PattonDisconnectCause = 98
	PattonDisconnectCause_Value_InformationElementNonexistantOrNotImplemented           PattonDisconnectCause = 99
	PattonDisconnectCause_Value_InvalidInformationElementContents                       PattonDisconnectCause = 100
	PattonDisconnectCause_Value_MessageNotCompatibleWithCallState2                      PattonDisconnectCause = 101
	PattonDisconnectCause_Value_RecoveryOnTimerExpiry                                   PattonDisconnectCause = 102
	PattonDisconnectCause_Value_ParameterNonExistentOrNotImplementedPassedOn            PattonDisconnectCause = 103
	PattonDisconnectCause_Value_ProtocolErrorUnspecified                                PattonDisconnectCause = 111
	PattonDisconnectCause_Value_InternetworkingUnspecified                              PattonDisconnectCause = 127
)

var PattonDisconnectCause_Strings = map[PattonDisconnectCause]string{
	PattonDisconnectCause_Value_ValidCauseCodeNotYetReceived:                            "Valid-cause-code-not-yet-received",
	PattonDisconnectCause_Value_UnallocatedRunassignedNumber:                            "Unallocated-runassigned-number",
	PattonDisconnectCause_Value_NoRouteToSpecifiedTransitNetworkWAN:                     "No-route-to-specified-transit-network-WAN",
	PattonDisconnectCause_Value_NoRouteToDestination:                                    "No-route-to-destination",
	PattonDisconnectCause_Value_SendSpecialInformationTone:                              "send-special-information-tone",
	PattonDisconnectCause_Value_MisdialledTrunkPrefix:                                   "misdialled-trunk-prefix",
	PattonDisconnectCause_Value_ChannelUnacceptable:                                     "Channel-unacceptable",
	PattonDisconnectCause_Value_CallAwardedAndBeingDeliveredInAnEstablishedChannel:      "Call-awarded-and-being-delivered-in-an-established-channel",
	PattonDisconnectCause_Value_Prefix0DialedButNotAllowed:                              "Prefix-0-dialed-but-not-allowed",
	PattonDisconnectCause_Value_Prefix1DialedButNotAllowed:                              "Prefix-1-dialed-but-not-allowed",
	PattonDisconnectCause_Value_Prefix1DialedButNotRequired:                             "Prefix-1-dialed-but-not-required",
	PattonDisconnectCause_Value_MoreDigitsReceivedThanAllowedCallIsProceeding:           "More-digits-received-than-allowed-call-is-proceeding",
	PattonDisconnectCause_Value_NormalCallClearing:                                      "Normal-call-clearing",
	PattonDisconnectCause_Value_UserBusy:                                                "User-busy",
	PattonDisconnectCause_Value_NoUserResponding:                                        "No-user-responding",
	PattonDisconnectCause_Value_NoAnswerFromUser:                                        "no-answer-from-user",
	PattonDisconnectCause_Value_CallRejected:                                            "Call-rejected",
	PattonDisconnectCause_Value_NumberChanged:                                           "Number-changed",
	PattonDisconnectCause_Value_ReverseChargingRejected:                                 "Reverse-charging-rejected",
	PattonDisconnectCause_Value_CallSuspended:                                           "Call-suspended",
	PattonDisconnectCause_Value_CallResumed:                                             "Call-resumed",
	PattonDisconnectCause_Value_NonSelectedUserClearing:                                 "Non-selected-user-clearing",
	PattonDisconnectCause_Value_DestinationOutOfOrder:                                   "Destination-out-of-order",
	PattonDisconnectCause_Value_InvalidNumberFormatIncompleteNumber:                     "Invalid-number-format-incomplete-number",
	PattonDisconnectCause_Value_FacilityRejected:                                        "Facility-rejected",
	PattonDisconnectCause_Value_ResponseToSTATUSENQUIRY:                                 "Response-to-STATUS-ENQUIRY",
	PattonDisconnectCause_Value_NormalUnspecified:                                       "Normal-unspecified",
	PattonDisconnectCause_Value_CircuitOutOfOrder:                                       "Circuit-out-of-order",
	PattonDisconnectCause_Value_NoCircuitChannelAvailable:                               "No-circuit/channel-available",
	PattonDisconnectCause_Value_DestinationUnattainable:                                 "Destination-unattainable",
	PattonDisconnectCause_Value_DegradedService:                                         "Degraded-service",
	PattonDisconnectCause_Value_NetworkWANOutOfOrder:                                    "Network-WAN-out-of-order",
	PattonDisconnectCause_Value_TransitDelayRangeCannotBeAchieved:                       "Transit-delay-range-cannot-be-achieved",
	PattonDisconnectCause_Value_ThroughputRangeCannotBeAchieved:                         "Throughput-range-cannot-be-achieved",
	PattonDisconnectCause_Value_TemporaryFailure:                                        "Temporary-failure",
	PattonDisconnectCause_Value_SwitchingEquipmentCongestion:                            "Switching-equipment-congestion",
	PattonDisconnectCause_Value_AccessInformationDiscarded:                              "Access-information-discarded",
	PattonDisconnectCause_Value_RequestedCircuitChannelNotAvailable:                     "Requested-circuit-channel-not-available",
	PattonDisconnectCause_Value_PreEmpted:                                               "Pre-empted",
	PattonDisconnectCause_Value_PrecedenceCallBlocked:                                   "Precedence-call-blocked",
	PattonDisconnectCause_Value_ResourceUnavailableUnspecified:                          "Resource-unavailable-unspecified",
	PattonDisconnectCause_Value_QualityOfServiceUnavailable:                             "Quality-of-service-unavailable",
	PattonDisconnectCause_Value_RequestedFacilityNotSubscribed:                          "Requested-facility-not-subscribed",
	PattonDisconnectCause_Value_ReverseChargingNotAllowed:                               "Reverse-charging-not-allowed",
	PattonDisconnectCause_Value_OutgoingCallsBarred:                                     "Outgoing-calls-barred",
	PattonDisconnectCause_Value_OutgoingCallsBarredWithinCUG:                            "Outgoing-calls-barred-within-CUG",
	PattonDisconnectCause_Value_IncomingCallsBarred:                                     "Incoming-calls-barred",
	PattonDisconnectCause_Value_IncomingCallsBarredWithinCUG:                            "Incoming-calls-barred-within-CUG",
	PattonDisconnectCause_Value_CallWaitingNotSubscribed:                                "Call-waiting-not-subscribed",
	PattonDisconnectCause_Value_BearerCapabilityNotAuthorized:                           "Bearer-capability-not-authorized",
	PattonDisconnectCause_Value_BearerCapabilityNotPresentlyAvailable:                   "Bearer-capability-not-presently-available",
	PattonDisconnectCause_Value_ServiceOrOptionNotAvailableUnspecified:                  "Service-or-option-not-available-unspecified",
	PattonDisconnectCause_Value_BearerServiceNotImplemented:                             "Bearer-service-not-implemented",
	PattonDisconnectCause_Value_ChannelTypeNotImplemented:                               "Channel-type-not-implemented",
	PattonDisconnectCause_Value_TransitNetworkSelectionNotImplemented:                   "Transit-network-selection-not-implemented",
	PattonDisconnectCause_Value_MessageNotImplemented:                                   "Message-not-implemented",
	PattonDisconnectCause_Value_RequestedFacilityNotImplemented:                         "Requested-facility-not-implemented",
	PattonDisconnectCause_Value_OnlyRestrictedDigitalInformationBearerCapabilityIsAvail: "Only-restricted-digital-information-bearer-capability-is-avail",
	PattonDisconnectCause_Value_ServiceOrOptionNotImplementedUnspecified:                "Service-or-option-not-implemented-unspecified",
	PattonDisconnectCause_Value_InvalidCallReferenceValue:                               "Invalid-call-reference-value",
	PattonDisconnectCause_Value_IdentifiedChannelDoesNotExist:                           "Identified-channel-does-not-exist",
	PattonDisconnectCause_Value_ASuspendedCallExistsButThisCallIdentityDoesNot:          "A-suspended-call-exists-but-this-call-identity-does-not",
	PattonDisconnectCause_Value_CallIdentityInUse:                                       "Call-identity-in-use",
	PattonDisconnectCause_Value_NoCallSuspended:                                         "No-call-suspended",
	PattonDisconnectCause_Value_CallHavingTheRequestedCallIdentityHasBeenCleared:        "Call-having-the-requested-call-identity-has-been-cleared",
	PattonDisconnectCause_Value_CalledUserNotMemberOfCUG:                                "Called-user-not-member-of-CUG",
	PattonDisconnectCause_Value_IncompatibleDestination:                                 "Incompatible-destination",
	PattonDisconnectCause_Value_NonExistentAbbreviatedAddressEntry:                      "Non-existent-abbreviated-address-entry",
	PattonDisconnectCause_Value_DestinationAddressMissingAndDirectCallNotSubscribed:     "Destination-address-missing-and-direct-call-not-subscribed",
	PattonDisconnectCause_Value_InvalidTransitNetworkSelectionNationalUse:               "Invalid-transit-network-selection-national-use",
	PattonDisconnectCause_Value_InvalidFacilityParameter:                                "Invalid-facility-parameter",
	PattonDisconnectCause_Value_MandatoryInformationElementIsMissing:                    "Mandatory-information-element-is-missing",
	PattonDisconnectCause_Value_InvalidMessageUnspecified:                               "Invalid-message-unspecified",
	PattonDisconnectCause_Value_MandatoryInformationElementIsMissing2:                   "Mandatory-information-element-is-missing-2",
	PattonDisconnectCause_Value_MessageTypeNonExistentOrNotImplemented:                  "Message-type-non-existent-or-not-implemented",
	PattonDisconnectCause_Value_MessageNotCompatibleWithCallState:                       "Message-not-compatible-with-call-state",
	PattonDisconnectCause_Value_InformationElementNonexistantOrNotImplemented:           "information-element-nonexistant-or-not-implemented",
	PattonDisconnectCause_Value_InvalidInformationElementContents:                       "Invalid-information-element-contents",
	PattonDisconnectCause_Value_MessageNotCompatibleWithCallState2:                      "Message-not-compatible-with-call-state-2",
	PattonDisconnectCause_Value_RecoveryOnTimerExpiry:                                   "Recovery-on-timer-expiry",
	PattonDisconnectCause_Value_ParameterNonExistentOrNotImplementedPassedOn:            "parameter-non-existent-or-not-implemented-passed-on",
	PattonDisconnectCause_Value_ProtocolErrorUnspecified:                                "Protocol-error-unspecified",
	PattonDisconnectCause_Value_InternetworkingUnspecified:                              "Internetworking-unspecified",
}

func (a PattonDisconnectCause) String() string {
	if str, ok := PattonDisconnectCause_Strings[a]; ok {
		return str
	}
	return "PattonDisconnectCause(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PattonDisconnectCause_Add(p *radius.Packet, value PattonDisconnectCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_AddVendor(p, 35, a)
}

func PattonDisconnectCause_Get(p *radius.Packet) (value PattonDisconnectCause) {
	value, _ = PattonDisconnectCause_Lookup(p)
	return
}

func PattonDisconnectCause_Gets(p *radius.Packet) (values []PattonDisconnectCause, err error) {
	var i uint32
	for _, attr := range _Patton_GetsVendor(p, 35) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PattonDisconnectCause(i))
	}
	return
}

func PattonDisconnectCause_Lookup(p *radius.Packet) (value PattonDisconnectCause, err error) {
	a, ok := _Patton_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PattonDisconnectCause(i)
	return
}

func PattonDisconnectCause_Set(p *radius.Packet, value PattonDisconnectCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_SetVendor(p, 35, a)
}

func PattonDisconnectCause_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 35)
}

func PattonDisconnectSource_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 36, a)
}

func PattonDisconnectSource_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 36, a)
}

func PattonDisconnectSource_Get(p *radius.Packet) (value []byte) {
	value, _ = PattonDisconnectSource_Lookup(p)
	return
}

func PattonDisconnectSource_GetString(p *radius.Packet) (value string) {
	value, _ = PattonDisconnectSource_LookupString(p)
	return
}

func PattonDisconnectSource_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Patton_GetsVendor(p, 36) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonDisconnectSource_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Patton_GetsVendor(p, 36) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonDisconnectSource_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Patton_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PattonDisconnectSource_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Patton_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PattonDisconnectSource_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 36, a)
}

func PattonDisconnectSource_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 36, a)
}

func PattonDisconnectSource_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 36)
}

func PattonCalledUniqueID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 48, a)
}

func PattonCalledUniqueID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 48, a)
}

func PattonCalledUniqueID_Get(p *radius.Packet) (value []byte) {
	value, _ = PattonCalledUniqueID_Lookup(p)
	return
}

func PattonCalledUniqueID_GetString(p *radius.Packet) (value string) {
	value, _ = PattonCalledUniqueID_LookupString(p)
	return
}

func PattonCalledUniqueID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Patton_GetsVendor(p, 48) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCalledUniqueID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Patton_GetsVendor(p, 48) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCalledUniqueID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Patton_LookupVendor(p, 48)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PattonCalledUniqueID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Patton_LookupVendor(p, 48)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PattonCalledUniqueID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 48, a)
}

func PattonCalledUniqueID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 48, a)
}

func PattonCalledUniqueID_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 48)
}

func PattonCalledIPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 49, a)
}

func PattonCalledIPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = PattonCalledIPAddress_Lookup(p)
	return
}

func PattonCalledIPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Patton_GetsVendor(p, 49) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCalledIPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Patton_LookupVendor(p, 49)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func PattonCalledIPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 49, a)
}

func PattonCalledIPAddress_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 49)
}

func PattonCalledNumberingPlan_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 50, a)
}

func PattonCalledNumberingPlan_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 50, a)
}

func PattonCalledNumberingPlan_Get(p *radius.Packet) (value []byte) {
	value, _ = PattonCalledNumberingPlan_Lookup(p)
	return
}

func PattonCalledNumberingPlan_GetString(p *radius.Packet) (value string) {
	value, _ = PattonCalledNumberingPlan_LookupString(p)
	return
}

func PattonCalledNumberingPlan_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Patton_GetsVendor(p, 50) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCalledNumberingPlan_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Patton_GetsVendor(p, 50) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCalledNumberingPlan_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Patton_LookupVendor(p, 50)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PattonCalledNumberingPlan_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Patton_LookupVendor(p, 50)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PattonCalledNumberingPlan_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 50, a)
}

func PattonCalledNumberingPlan_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 50, a)
}

func PattonCalledNumberingPlan_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 50)
}

func PattonCalledTypeOfNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 51, a)
}

func PattonCalledTypeOfNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 51, a)
}

func PattonCalledTypeOfNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = PattonCalledTypeOfNumber_Lookup(p)
	return
}

func PattonCalledTypeOfNumber_GetString(p *radius.Packet) (value string) {
	value, _ = PattonCalledTypeOfNumber_LookupString(p)
	return
}

func PattonCalledTypeOfNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Patton_GetsVendor(p, 51) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCalledTypeOfNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Patton_GetsVendor(p, 51) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCalledTypeOfNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Patton_LookupVendor(p, 51)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PattonCalledTypeOfNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Patton_LookupVendor(p, 51)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PattonCalledTypeOfNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 51, a)
}

func PattonCalledTypeOfNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 51, a)
}

func PattonCalledTypeOfNumber_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 51)
}

func PattonCalledName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 52, a)
}

func PattonCalledName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 52, a)
}

func PattonCalledName_Get(p *radius.Packet) (value []byte) {
	value, _ = PattonCalledName_Lookup(p)
	return
}

func PattonCalledName_GetString(p *radius.Packet) (value string) {
	value, _ = PattonCalledName_LookupString(p)
	return
}

func PattonCalledName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Patton_GetsVendor(p, 52) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCalledName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Patton_GetsVendor(p, 52) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCalledName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Patton_LookupVendor(p, 52)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PattonCalledName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Patton_LookupVendor(p, 52)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PattonCalledName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 52, a)
}

func PattonCalledName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 52, a)
}

func PattonCalledName_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 52)
}

type PattonCalledRxOctets uint32

var PattonCalledRxOctets_Strings = map[PattonCalledRxOctets]string{}

func (a PattonCalledRxOctets) String() string {
	if str, ok := PattonCalledRxOctets_Strings[a]; ok {
		return str
	}
	return "PattonCalledRxOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PattonCalledRxOctets_Add(p *radius.Packet, value PattonCalledRxOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_AddVendor(p, 64, a)
}

func PattonCalledRxOctets_Get(p *radius.Packet) (value PattonCalledRxOctets) {
	value, _ = PattonCalledRxOctets_Lookup(p)
	return
}

func PattonCalledRxOctets_Gets(p *radius.Packet) (values []PattonCalledRxOctets, err error) {
	var i uint32
	for _, attr := range _Patton_GetsVendor(p, 64) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PattonCalledRxOctets(i))
	}
	return
}

func PattonCalledRxOctets_Lookup(p *radius.Packet) (value PattonCalledRxOctets, err error) {
	a, ok := _Patton_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PattonCalledRxOctets(i)
	return
}

func PattonCalledRxOctets_Set(p *radius.Packet, value PattonCalledRxOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_SetVendor(p, 64, a)
}

func PattonCalledRxOctets_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 64)
}

type PattonCalledTxOctets uint32

var PattonCalledTxOctets_Strings = map[PattonCalledTxOctets]string{}

func (a PattonCalledTxOctets) String() string {
	if str, ok := PattonCalledTxOctets_Strings[a]; ok {
		return str
	}
	return "PattonCalledTxOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PattonCalledTxOctets_Add(p *radius.Packet, value PattonCalledTxOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_AddVendor(p, 65, a)
}

func PattonCalledTxOctets_Get(p *radius.Packet) (value PattonCalledTxOctets) {
	value, _ = PattonCalledTxOctets_Lookup(p)
	return
}

func PattonCalledTxOctets_Gets(p *radius.Packet) (values []PattonCalledTxOctets, err error) {
	var i uint32
	for _, attr := range _Patton_GetsVendor(p, 65) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PattonCalledTxOctets(i))
	}
	return
}

func PattonCalledTxOctets_Lookup(p *radius.Packet) (value PattonCalledTxOctets, err error) {
	a, ok := _Patton_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PattonCalledTxOctets(i)
	return
}

func PattonCalledTxOctets_Set(p *radius.Packet, value PattonCalledTxOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_SetVendor(p, 65, a)
}

func PattonCalledTxOctets_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 65)
}

type PattonCalledRxPackets uint32

var PattonCalledRxPackets_Strings = map[PattonCalledRxPackets]string{}

func (a PattonCalledRxPackets) String() string {
	if str, ok := PattonCalledRxPackets_Strings[a]; ok {
		return str
	}
	return "PattonCalledRxPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PattonCalledRxPackets_Add(p *radius.Packet, value PattonCalledRxPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_AddVendor(p, 66, a)
}

func PattonCalledRxPackets_Get(p *radius.Packet) (value PattonCalledRxPackets) {
	value, _ = PattonCalledRxPackets_Lookup(p)
	return
}

func PattonCalledRxPackets_Gets(p *radius.Packet) (values []PattonCalledRxPackets, err error) {
	var i uint32
	for _, attr := range _Patton_GetsVendor(p, 66) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PattonCalledRxPackets(i))
	}
	return
}

func PattonCalledRxPackets_Lookup(p *radius.Packet) (value PattonCalledRxPackets, err error) {
	a, ok := _Patton_LookupVendor(p, 66)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PattonCalledRxPackets(i)
	return
}

func PattonCalledRxPackets_Set(p *radius.Packet, value PattonCalledRxPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_SetVendor(p, 66, a)
}

func PattonCalledRxPackets_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 66)
}

type PattonCalledTxPackets uint32

var PattonCalledTxPackets_Strings = map[PattonCalledTxPackets]string{}

func (a PattonCalledTxPackets) String() string {
	if str, ok := PattonCalledTxPackets_Strings[a]; ok {
		return str
	}
	return "PattonCalledTxPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PattonCalledTxPackets_Add(p *radius.Packet, value PattonCalledTxPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_AddVendor(p, 67, a)
}

func PattonCalledTxPackets_Get(p *radius.Packet) (value PattonCalledTxPackets) {
	value, _ = PattonCalledTxPackets_Lookup(p)
	return
}

func PattonCalledTxPackets_Gets(p *radius.Packet) (values []PattonCalledTxPackets, err error) {
	var i uint32
	for _, attr := range _Patton_GetsVendor(p, 67) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PattonCalledTxPackets(i))
	}
	return
}

func PattonCalledTxPackets_Lookup(p *radius.Packet) (value PattonCalledTxPackets, err error) {
	a, ok := _Patton_LookupVendor(p, 67)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PattonCalledTxPackets(i)
	return
}

func PattonCalledTxPackets_Set(p *radius.Packet, value PattonCalledTxPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_SetVendor(p, 67, a)
}

func PattonCalledTxPackets_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 67)
}

type PattonCalledRxLostPackets uint32

var PattonCalledRxLostPackets_Strings = map[PattonCalledRxLostPackets]string{}

func (a PattonCalledRxLostPackets) String() string {
	if str, ok := PattonCalledRxLostPackets_Strings[a]; ok {
		return str
	}
	return "PattonCalledRxLostPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PattonCalledRxLostPackets_Add(p *radius.Packet, value PattonCalledRxLostPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_AddVendor(p, 68, a)
}

func PattonCalledRxLostPackets_Get(p *radius.Packet) (value PattonCalledRxLostPackets) {
	value, _ = PattonCalledRxLostPackets_Lookup(p)
	return
}

func PattonCalledRxLostPackets_Gets(p *radius.Packet) (values []PattonCalledRxLostPackets, err error) {
	var i uint32
	for _, attr := range _Patton_GetsVendor(p, 68) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PattonCalledRxLostPackets(i))
	}
	return
}

func PattonCalledRxLostPackets_Lookup(p *radius.Packet) (value PattonCalledRxLostPackets, err error) {
	a, ok := _Patton_LookupVendor(p, 68)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PattonCalledRxLostPackets(i)
	return
}

func PattonCalledRxLostPackets_Set(p *radius.Packet, value PattonCalledRxLostPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_SetVendor(p, 68, a)
}

func PattonCalledRxLostPackets_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 68)
}

type PattonCalledTxLostPackets uint32

var PattonCalledTxLostPackets_Strings = map[PattonCalledTxLostPackets]string{}

func (a PattonCalledTxLostPackets) String() string {
	if str, ok := PattonCalledTxLostPackets_Strings[a]; ok {
		return str
	}
	return "PattonCalledTxLostPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PattonCalledTxLostPackets_Add(p *radius.Packet, value PattonCalledTxLostPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_AddVendor(p, 69, a)
}

func PattonCalledTxLostPackets_Get(p *radius.Packet) (value PattonCalledTxLostPackets) {
	value, _ = PattonCalledTxLostPackets_Lookup(p)
	return
}

func PattonCalledTxLostPackets_Gets(p *radius.Packet) (values []PattonCalledTxLostPackets, err error) {
	var i uint32
	for _, attr := range _Patton_GetsVendor(p, 69) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PattonCalledTxLostPackets(i))
	}
	return
}

func PattonCalledTxLostPackets_Lookup(p *radius.Packet) (value PattonCalledTxLostPackets, err error) {
	a, ok := _Patton_LookupVendor(p, 69)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PattonCalledTxLostPackets(i)
	return
}

func PattonCalledTxLostPackets_Set(p *radius.Packet, value PattonCalledTxLostPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_SetVendor(p, 69, a)
}

func PattonCalledTxLostPackets_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 69)
}

type PattonCalledRxJitter uint32

var PattonCalledRxJitter_Strings = map[PattonCalledRxJitter]string{}

func (a PattonCalledRxJitter) String() string {
	if str, ok := PattonCalledRxJitter_Strings[a]; ok {
		return str
	}
	return "PattonCalledRxJitter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PattonCalledRxJitter_Add(p *radius.Packet, value PattonCalledRxJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_AddVendor(p, 70, a)
}

func PattonCalledRxJitter_Get(p *radius.Packet) (value PattonCalledRxJitter) {
	value, _ = PattonCalledRxJitter_Lookup(p)
	return
}

func PattonCalledRxJitter_Gets(p *radius.Packet) (values []PattonCalledRxJitter, err error) {
	var i uint32
	for _, attr := range _Patton_GetsVendor(p, 70) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PattonCalledRxJitter(i))
	}
	return
}

func PattonCalledRxJitter_Lookup(p *radius.Packet) (value PattonCalledRxJitter, err error) {
	a, ok := _Patton_LookupVendor(p, 70)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PattonCalledRxJitter(i)
	return
}

func PattonCalledRxJitter_Set(p *radius.Packet, value PattonCalledRxJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_SetVendor(p, 70, a)
}

func PattonCalledRxJitter_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 70)
}

type PattonCalledTxJitter uint32

var PattonCalledTxJitter_Strings = map[PattonCalledTxJitter]string{}

func (a PattonCalledTxJitter) String() string {
	if str, ok := PattonCalledTxJitter_Strings[a]; ok {
		return str
	}
	return "PattonCalledTxJitter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PattonCalledTxJitter_Add(p *radius.Packet, value PattonCalledTxJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_AddVendor(p, 71, a)
}

func PattonCalledTxJitter_Get(p *radius.Packet) (value PattonCalledTxJitter) {
	value, _ = PattonCalledTxJitter_Lookup(p)
	return
}

func PattonCalledTxJitter_Gets(p *radius.Packet) (values []PattonCalledTxJitter, err error) {
	var i uint32
	for _, attr := range _Patton_GetsVendor(p, 71) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PattonCalledTxJitter(i))
	}
	return
}

func PattonCalledTxJitter_Lookup(p *radius.Packet) (value PattonCalledTxJitter, err error) {
	a, ok := _Patton_LookupVendor(p, 71)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PattonCalledTxJitter(i)
	return
}

func PattonCalledTxJitter_Set(p *radius.Packet, value PattonCalledTxJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_SetVendor(p, 71, a)
}

func PattonCalledTxJitter_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 71)
}

func PattonCalledCodec_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 72, a)
}

func PattonCalledCodec_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 72, a)
}

func PattonCalledCodec_Get(p *radius.Packet) (value []byte) {
	value, _ = PattonCalledCodec_Lookup(p)
	return
}

func PattonCalledCodec_GetString(p *radius.Packet) (value string) {
	value, _ = PattonCalledCodec_LookupString(p)
	return
}

func PattonCalledCodec_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Patton_GetsVendor(p, 72) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCalledCodec_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Patton_GetsVendor(p, 72) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCalledCodec_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Patton_LookupVendor(p, 72)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PattonCalledCodec_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Patton_LookupVendor(p, 72)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PattonCalledCodec_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 72, a)
}

func PattonCalledCodec_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 72, a)
}

func PattonCalledCodec_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 72)
}

type PattonCalledMOS uint32

var PattonCalledMOS_Strings = map[PattonCalledMOS]string{}

func (a PattonCalledMOS) String() string {
	if str, ok := PattonCalledMOS_Strings[a]; ok {
		return str
	}
	return "PattonCalledMOS(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PattonCalledMOS_Add(p *radius.Packet, value PattonCalledMOS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_AddVendor(p, 77, a)
}

func PattonCalledMOS_Get(p *radius.Packet) (value PattonCalledMOS) {
	value, _ = PattonCalledMOS_Lookup(p)
	return
}

func PattonCalledMOS_Gets(p *radius.Packet) (values []PattonCalledMOS, err error) {
	var i uint32
	for _, attr := range _Patton_GetsVendor(p, 77) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PattonCalledMOS(i))
	}
	return
}

func PattonCalledMOS_Lookup(p *radius.Packet) (value PattonCalledMOS, err error) {
	a, ok := _Patton_LookupVendor(p, 77)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PattonCalledMOS(i)
	return
}

func PattonCalledMOS_Set(p *radius.Packet, value PattonCalledMOS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_SetVendor(p, 77, a)
}

func PattonCalledMOS_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 77)
}

type PattonCalledRoundTripTime uint32

var PattonCalledRoundTripTime_Strings = map[PattonCalledRoundTripTime]string{}

func (a PattonCalledRoundTripTime) String() string {
	if str, ok := PattonCalledRoundTripTime_Strings[a]; ok {
		return str
	}
	return "PattonCalledRoundTripTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PattonCalledRoundTripTime_Add(p *radius.Packet, value PattonCalledRoundTripTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_AddVendor(p, 78, a)
}

func PattonCalledRoundTripTime_Get(p *radius.Packet) (value PattonCalledRoundTripTime) {
	value, _ = PattonCalledRoundTripTime_Lookup(p)
	return
}

func PattonCalledRoundTripTime_Gets(p *radius.Packet) (values []PattonCalledRoundTripTime, err error) {
	var i uint32
	for _, attr := range _Patton_GetsVendor(p, 78) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PattonCalledRoundTripTime(i))
	}
	return
}

func PattonCalledRoundTripTime_Lookup(p *radius.Packet) (value PattonCalledRoundTripTime, err error) {
	a, ok := _Patton_LookupVendor(p, 78)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PattonCalledRoundTripTime(i)
	return
}

func PattonCalledRoundTripTime_Set(p *radius.Packet, value PattonCalledRoundTripTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_SetVendor(p, 78, a)
}

func PattonCalledRoundTripTime_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 78)
}

func PattonCallingUniqueID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 80, a)
}

func PattonCallingUniqueID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 80, a)
}

func PattonCallingUniqueID_Get(p *radius.Packet) (value []byte) {
	value, _ = PattonCallingUniqueID_Lookup(p)
	return
}

func PattonCallingUniqueID_GetString(p *radius.Packet) (value string) {
	value, _ = PattonCallingUniqueID_LookupString(p)
	return
}

func PattonCallingUniqueID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Patton_GetsVendor(p, 80) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCallingUniqueID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Patton_GetsVendor(p, 80) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCallingUniqueID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Patton_LookupVendor(p, 80)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PattonCallingUniqueID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Patton_LookupVendor(p, 80)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PattonCallingUniqueID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 80, a)
}

func PattonCallingUniqueID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 80, a)
}

func PattonCallingUniqueID_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 80)
}

func PattonCallingIPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 81, a)
}

func PattonCallingIPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = PattonCallingIPAddress_Lookup(p)
	return
}

func PattonCallingIPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Patton_GetsVendor(p, 81) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCallingIPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Patton_LookupVendor(p, 81)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func PattonCallingIPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 81, a)
}

func PattonCallingIPAddress_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 81)
}

func PattonCallingNumberingPlan_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 82, a)
}

func PattonCallingNumberingPlan_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 82, a)
}

func PattonCallingNumberingPlan_Get(p *radius.Packet) (value []byte) {
	value, _ = PattonCallingNumberingPlan_Lookup(p)
	return
}

func PattonCallingNumberingPlan_GetString(p *radius.Packet) (value string) {
	value, _ = PattonCallingNumberingPlan_LookupString(p)
	return
}

func PattonCallingNumberingPlan_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Patton_GetsVendor(p, 82) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCallingNumberingPlan_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Patton_GetsVendor(p, 82) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCallingNumberingPlan_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Patton_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PattonCallingNumberingPlan_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Patton_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PattonCallingNumberingPlan_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 82, a)
}

func PattonCallingNumberingPlan_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 82, a)
}

func PattonCallingNumberingPlan_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 82)
}

func PattonCallingTypeOfNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 83, a)
}

func PattonCallingTypeOfNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 83, a)
}

func PattonCallingTypeOfNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = PattonCallingTypeOfNumber_Lookup(p)
	return
}

func PattonCallingTypeOfNumber_GetString(p *radius.Packet) (value string) {
	value, _ = PattonCallingTypeOfNumber_LookupString(p)
	return
}

func PattonCallingTypeOfNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Patton_GetsVendor(p, 83) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCallingTypeOfNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Patton_GetsVendor(p, 83) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCallingTypeOfNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Patton_LookupVendor(p, 83)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PattonCallingTypeOfNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Patton_LookupVendor(p, 83)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PattonCallingTypeOfNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 83, a)
}

func PattonCallingTypeOfNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 83, a)
}

func PattonCallingTypeOfNumber_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 83)
}

func PattonCallingPresentationIndicator_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 88, a)
}

func PattonCallingPresentationIndicator_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 88, a)
}

func PattonCallingPresentationIndicator_Get(p *radius.Packet) (value []byte) {
	value, _ = PattonCallingPresentationIndicator_Lookup(p)
	return
}

func PattonCallingPresentationIndicator_GetString(p *radius.Packet) (value string) {
	value, _ = PattonCallingPresentationIndicator_LookupString(p)
	return
}

func PattonCallingPresentationIndicator_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Patton_GetsVendor(p, 88) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCallingPresentationIndicator_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Patton_GetsVendor(p, 88) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCallingPresentationIndicator_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Patton_LookupVendor(p, 88)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PattonCallingPresentationIndicator_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Patton_LookupVendor(p, 88)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PattonCallingPresentationIndicator_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 88, a)
}

func PattonCallingPresentationIndicator_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 88, a)
}

func PattonCallingPresentationIndicator_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 88)
}

func PattonCallingScreeningIndicator_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 89, a)
}

func PattonCallingScreeningIndicator_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 89, a)
}

func PattonCallingScreeningIndicator_Get(p *radius.Packet) (value []byte) {
	value, _ = PattonCallingScreeningIndicator_Lookup(p)
	return
}

func PattonCallingScreeningIndicator_GetString(p *radius.Packet) (value string) {
	value, _ = PattonCallingScreeningIndicator_LookupString(p)
	return
}

func PattonCallingScreeningIndicator_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Patton_GetsVendor(p, 89) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCallingScreeningIndicator_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Patton_GetsVendor(p, 89) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCallingScreeningIndicator_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Patton_LookupVendor(p, 89)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PattonCallingScreeningIndicator_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Patton_LookupVendor(p, 89)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PattonCallingScreeningIndicator_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 89, a)
}

func PattonCallingScreeningIndicator_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 89, a)
}

func PattonCallingScreeningIndicator_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 89)
}

func PattonCallingName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 84, a)
}

func PattonCallingName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 84, a)
}

func PattonCallingName_Get(p *radius.Packet) (value []byte) {
	value, _ = PattonCallingName_Lookup(p)
	return
}

func PattonCallingName_GetString(p *radius.Packet) (value string) {
	value, _ = PattonCallingName_LookupString(p)
	return
}

func PattonCallingName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Patton_GetsVendor(p, 84) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCallingName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Patton_GetsVendor(p, 84) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCallingName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Patton_LookupVendor(p, 84)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PattonCallingName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Patton_LookupVendor(p, 84)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PattonCallingName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 84, a)
}

func PattonCallingName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 84, a)
}

func PattonCallingName_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 84)
}

type PattonCallingRxOctets uint32

var PattonCallingRxOctets_Strings = map[PattonCallingRxOctets]string{}

func (a PattonCallingRxOctets) String() string {
	if str, ok := PattonCallingRxOctets_Strings[a]; ok {
		return str
	}
	return "PattonCallingRxOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PattonCallingRxOctets_Add(p *radius.Packet, value PattonCallingRxOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_AddVendor(p, 96, a)
}

func PattonCallingRxOctets_Get(p *radius.Packet) (value PattonCallingRxOctets) {
	value, _ = PattonCallingRxOctets_Lookup(p)
	return
}

func PattonCallingRxOctets_Gets(p *radius.Packet) (values []PattonCallingRxOctets, err error) {
	var i uint32
	for _, attr := range _Patton_GetsVendor(p, 96) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PattonCallingRxOctets(i))
	}
	return
}

func PattonCallingRxOctets_Lookup(p *radius.Packet) (value PattonCallingRxOctets, err error) {
	a, ok := _Patton_LookupVendor(p, 96)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PattonCallingRxOctets(i)
	return
}

func PattonCallingRxOctets_Set(p *radius.Packet, value PattonCallingRxOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_SetVendor(p, 96, a)
}

func PattonCallingRxOctets_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 96)
}

type PattonCallingTxOctets uint32

var PattonCallingTxOctets_Strings = map[PattonCallingTxOctets]string{}

func (a PattonCallingTxOctets) String() string {
	if str, ok := PattonCallingTxOctets_Strings[a]; ok {
		return str
	}
	return "PattonCallingTxOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PattonCallingTxOctets_Add(p *radius.Packet, value PattonCallingTxOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_AddVendor(p, 97, a)
}

func PattonCallingTxOctets_Get(p *radius.Packet) (value PattonCallingTxOctets) {
	value, _ = PattonCallingTxOctets_Lookup(p)
	return
}

func PattonCallingTxOctets_Gets(p *radius.Packet) (values []PattonCallingTxOctets, err error) {
	var i uint32
	for _, attr := range _Patton_GetsVendor(p, 97) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PattonCallingTxOctets(i))
	}
	return
}

func PattonCallingTxOctets_Lookup(p *radius.Packet) (value PattonCallingTxOctets, err error) {
	a, ok := _Patton_LookupVendor(p, 97)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PattonCallingTxOctets(i)
	return
}

func PattonCallingTxOctets_Set(p *radius.Packet, value PattonCallingTxOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_SetVendor(p, 97, a)
}

func PattonCallingTxOctets_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 97)
}

type PattonCallingRxPackets uint32

var PattonCallingRxPackets_Strings = map[PattonCallingRxPackets]string{}

func (a PattonCallingRxPackets) String() string {
	if str, ok := PattonCallingRxPackets_Strings[a]; ok {
		return str
	}
	return "PattonCallingRxPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PattonCallingRxPackets_Add(p *radius.Packet, value PattonCallingRxPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_AddVendor(p, 98, a)
}

func PattonCallingRxPackets_Get(p *radius.Packet) (value PattonCallingRxPackets) {
	value, _ = PattonCallingRxPackets_Lookup(p)
	return
}

func PattonCallingRxPackets_Gets(p *radius.Packet) (values []PattonCallingRxPackets, err error) {
	var i uint32
	for _, attr := range _Patton_GetsVendor(p, 98) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PattonCallingRxPackets(i))
	}
	return
}

func PattonCallingRxPackets_Lookup(p *radius.Packet) (value PattonCallingRxPackets, err error) {
	a, ok := _Patton_LookupVendor(p, 98)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PattonCallingRxPackets(i)
	return
}

func PattonCallingRxPackets_Set(p *radius.Packet, value PattonCallingRxPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_SetVendor(p, 98, a)
}

func PattonCallingRxPackets_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 98)
}

type PattonCallingTxPackets uint32

var PattonCallingTxPackets_Strings = map[PattonCallingTxPackets]string{}

func (a PattonCallingTxPackets) String() string {
	if str, ok := PattonCallingTxPackets_Strings[a]; ok {
		return str
	}
	return "PattonCallingTxPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PattonCallingTxPackets_Add(p *radius.Packet, value PattonCallingTxPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_AddVendor(p, 99, a)
}

func PattonCallingTxPackets_Get(p *radius.Packet) (value PattonCallingTxPackets) {
	value, _ = PattonCallingTxPackets_Lookup(p)
	return
}

func PattonCallingTxPackets_Gets(p *radius.Packet) (values []PattonCallingTxPackets, err error) {
	var i uint32
	for _, attr := range _Patton_GetsVendor(p, 99) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PattonCallingTxPackets(i))
	}
	return
}

func PattonCallingTxPackets_Lookup(p *radius.Packet) (value PattonCallingTxPackets, err error) {
	a, ok := _Patton_LookupVendor(p, 99)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PattonCallingTxPackets(i)
	return
}

func PattonCallingTxPackets_Set(p *radius.Packet, value PattonCallingTxPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_SetVendor(p, 99, a)
}

func PattonCallingTxPackets_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 99)
}

type PattonCallingLostTxPackets uint32

var PattonCallingLostTxPackets_Strings = map[PattonCallingLostTxPackets]string{}

func (a PattonCallingLostTxPackets) String() string {
	if str, ok := PattonCallingLostTxPackets_Strings[a]; ok {
		return str
	}
	return "PattonCallingLostTxPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PattonCallingLostTxPackets_Add(p *radius.Packet, value PattonCallingLostTxPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_AddVendor(p, 100, a)
}

func PattonCallingLostTxPackets_Get(p *radius.Packet) (value PattonCallingLostTxPackets) {
	value, _ = PattonCallingLostTxPackets_Lookup(p)
	return
}

func PattonCallingLostTxPackets_Gets(p *radius.Packet) (values []PattonCallingLostTxPackets, err error) {
	var i uint32
	for _, attr := range _Patton_GetsVendor(p, 100) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PattonCallingLostTxPackets(i))
	}
	return
}

func PattonCallingLostTxPackets_Lookup(p *radius.Packet) (value PattonCallingLostTxPackets, err error) {
	a, ok := _Patton_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PattonCallingLostTxPackets(i)
	return
}

func PattonCallingLostTxPackets_Set(p *radius.Packet, value PattonCallingLostTxPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_SetVendor(p, 100, a)
}

func PattonCallingLostTxPackets_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 100)
}

type PattonCallingLostRxPackets uint32

var PattonCallingLostRxPackets_Strings = map[PattonCallingLostRxPackets]string{}

func (a PattonCallingLostRxPackets) String() string {
	if str, ok := PattonCallingLostRxPackets_Strings[a]; ok {
		return str
	}
	return "PattonCallingLostRxPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PattonCallingLostRxPackets_Add(p *radius.Packet, value PattonCallingLostRxPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_AddVendor(p, 101, a)
}

func PattonCallingLostRxPackets_Get(p *radius.Packet) (value PattonCallingLostRxPackets) {
	value, _ = PattonCallingLostRxPackets_Lookup(p)
	return
}

func PattonCallingLostRxPackets_Gets(p *radius.Packet) (values []PattonCallingLostRxPackets, err error) {
	var i uint32
	for _, attr := range _Patton_GetsVendor(p, 101) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PattonCallingLostRxPackets(i))
	}
	return
}

func PattonCallingLostRxPackets_Lookup(p *radius.Packet) (value PattonCallingLostRxPackets, err error) {
	a, ok := _Patton_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PattonCallingLostRxPackets(i)
	return
}

func PattonCallingLostRxPackets_Set(p *radius.Packet, value PattonCallingLostRxPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_SetVendor(p, 101, a)
}

func PattonCallingLostRxPackets_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 101)
}

type PattonCallingRxJitter uint32

var PattonCallingRxJitter_Strings = map[PattonCallingRxJitter]string{}

func (a PattonCallingRxJitter) String() string {
	if str, ok := PattonCallingRxJitter_Strings[a]; ok {
		return str
	}
	return "PattonCallingRxJitter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PattonCallingRxJitter_Add(p *radius.Packet, value PattonCallingRxJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_AddVendor(p, 102, a)
}

func PattonCallingRxJitter_Get(p *radius.Packet) (value PattonCallingRxJitter) {
	value, _ = PattonCallingRxJitter_Lookup(p)
	return
}

func PattonCallingRxJitter_Gets(p *radius.Packet) (values []PattonCallingRxJitter, err error) {
	var i uint32
	for _, attr := range _Patton_GetsVendor(p, 102) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PattonCallingRxJitter(i))
	}
	return
}

func PattonCallingRxJitter_Lookup(p *radius.Packet) (value PattonCallingRxJitter, err error) {
	a, ok := _Patton_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PattonCallingRxJitter(i)
	return
}

func PattonCallingRxJitter_Set(p *radius.Packet, value PattonCallingRxJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_SetVendor(p, 102, a)
}

func PattonCallingRxJitter_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 102)
}

type PattonCallingTxJitter uint32

var PattonCallingTxJitter_Strings = map[PattonCallingTxJitter]string{}

func (a PattonCallingTxJitter) String() string {
	if str, ok := PattonCallingTxJitter_Strings[a]; ok {
		return str
	}
	return "PattonCallingTxJitter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PattonCallingTxJitter_Add(p *radius.Packet, value PattonCallingTxJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_AddVendor(p, 103, a)
}

func PattonCallingTxJitter_Get(p *radius.Packet) (value PattonCallingTxJitter) {
	value, _ = PattonCallingTxJitter_Lookup(p)
	return
}

func PattonCallingTxJitter_Gets(p *radius.Packet) (values []PattonCallingTxJitter, err error) {
	var i uint32
	for _, attr := range _Patton_GetsVendor(p, 103) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PattonCallingTxJitter(i))
	}
	return
}

func PattonCallingTxJitter_Lookup(p *radius.Packet) (value PattonCallingTxJitter, err error) {
	a, ok := _Patton_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PattonCallingTxJitter(i)
	return
}

func PattonCallingTxJitter_Set(p *radius.Packet, value PattonCallingTxJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_SetVendor(p, 103, a)
}

func PattonCallingTxJitter_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 103)
}

func PattonCallingCodec_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 104, a)
}

func PattonCallingCodec_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_AddVendor(p, 104, a)
}

func PattonCallingCodec_Get(p *radius.Packet) (value []byte) {
	value, _ = PattonCallingCodec_Lookup(p)
	return
}

func PattonCallingCodec_GetString(p *radius.Packet) (value string) {
	value, _ = PattonCallingCodec_LookupString(p)
	return
}

func PattonCallingCodec_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Patton_GetsVendor(p, 104) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCallingCodec_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Patton_GetsVendor(p, 104) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PattonCallingCodec_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Patton_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PattonCallingCodec_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Patton_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PattonCallingCodec_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 104, a)
}

func PattonCallingCodec_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Patton_SetVendor(p, 104, a)
}

func PattonCallingCodec_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 104)
}

type PattonCallingMOS uint32

var PattonCallingMOS_Strings = map[PattonCallingMOS]string{}

func (a PattonCallingMOS) String() string {
	if str, ok := PattonCallingMOS_Strings[a]; ok {
		return str
	}
	return "PattonCallingMOS(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PattonCallingMOS_Add(p *radius.Packet, value PattonCallingMOS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_AddVendor(p, 109, a)
}

func PattonCallingMOS_Get(p *radius.Packet) (value PattonCallingMOS) {
	value, _ = PattonCallingMOS_Lookup(p)
	return
}

func PattonCallingMOS_Gets(p *radius.Packet) (values []PattonCallingMOS, err error) {
	var i uint32
	for _, attr := range _Patton_GetsVendor(p, 109) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PattonCallingMOS(i))
	}
	return
}

func PattonCallingMOS_Lookup(p *radius.Packet) (value PattonCallingMOS, err error) {
	a, ok := _Patton_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PattonCallingMOS(i)
	return
}

func PattonCallingMOS_Set(p *radius.Packet, value PattonCallingMOS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_SetVendor(p, 109, a)
}

func PattonCallingMOS_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 109)
}

type PattonCallingRoundTripTime uint32

var PattonCallingRoundTripTime_Strings = map[PattonCallingRoundTripTime]string{}

func (a PattonCallingRoundTripTime) String() string {
	if str, ok := PattonCallingRoundTripTime_Strings[a]; ok {
		return str
	}
	return "PattonCallingRoundTripTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PattonCallingRoundTripTime_Add(p *radius.Packet, value PattonCallingRoundTripTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_AddVendor(p, 110, a)
}

func PattonCallingRoundTripTime_Get(p *radius.Packet) (value PattonCallingRoundTripTime) {
	value, _ = PattonCallingRoundTripTime_Lookup(p)
	return
}

func PattonCallingRoundTripTime_Gets(p *radius.Packet) (values []PattonCallingRoundTripTime, err error) {
	var i uint32
	for _, attr := range _Patton_GetsVendor(p, 110) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PattonCallingRoundTripTime(i))
	}
	return
}

func PattonCallingRoundTripTime_Lookup(p *radius.Packet) (value PattonCallingRoundTripTime, err error) {
	a, ok := _Patton_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PattonCallingRoundTripTime(i)
	return
}

func PattonCallingRoundTripTime_Set(p *radius.Packet, value PattonCallingRoundTripTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Patton_SetVendor(p, 110, a)
}

func PattonCallingRoundTripTime_Del(p *radius.Packet) {
	_Patton_DelVendor(p, 110)
}
