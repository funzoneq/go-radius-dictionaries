// Code generated by radius-dict-gen. DO NOT EDIT.

package tplink

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_TPLink_VendorID = 11863
)

func _TPLink_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_TPLink_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _TPLink_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _TPLink_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _TPLink_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _TPLink_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _TPLink_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _TPLink_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _TPLink_AddVendor(p, typ, attr)
}

func _TPLink_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _TPLink_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

type RecvLimit uint32

var RecvLimit_Strings = map[RecvLimit]string{}

func (a RecvLimit) String() string {
	if str, ok := RecvLimit_Strings[a]; ok {
		return str
	}
	return "RecvLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RecvLimit_Add(p *radius.Packet, value RecvLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _TPLink_AddVendor(p, 1, a)
}

func RecvLimit_Get(p *radius.Packet) (value RecvLimit) {
	value, _ = RecvLimit_Lookup(p)
	return
}

func RecvLimit_Gets(p *radius.Packet) (values []RecvLimit, err error) {
	var i uint32
	for _, attr := range _TPLink_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RecvLimit(i))
	}
	return
}

func RecvLimit_Lookup(p *radius.Packet) (value RecvLimit, err error) {
	a, ok := _TPLink_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RecvLimit(i)
	return
}

func RecvLimit_Set(p *radius.Packet, value RecvLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _TPLink_SetVendor(p, 1, a)
}

func RecvLimit_Del(p *radius.Packet) {
	_TPLink_DelVendor(p, 1)
}

type XmitLimit uint32

var XmitLimit_Strings = map[XmitLimit]string{}

func (a XmitLimit) String() string {
	if str, ok := XmitLimit_Strings[a]; ok {
		return str
	}
	return "XmitLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func XmitLimit_Add(p *radius.Packet, value XmitLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _TPLink_AddVendor(p, 2, a)
}

func XmitLimit_Get(p *radius.Packet) (value XmitLimit) {
	value, _ = XmitLimit_Lookup(p)
	return
}

func XmitLimit_Gets(p *radius.Packet) (values []XmitLimit, err error) {
	var i uint32
	for _, attr := range _TPLink_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, XmitLimit(i))
	}
	return
}

func XmitLimit_Lookup(p *radius.Packet) (value XmitLimit, err error) {
	a, ok := _TPLink_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = XmitLimit(i)
	return
}

func XmitLimit_Set(p *radius.Packet, value XmitLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _TPLink_SetVendor(p, 2, a)
}

func XmitLimit_Del(p *radius.Packet) {
	_TPLink_DelVendor(p, 2)
}

func AuthenticationFindKey_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TPLink_AddVendor(p, 3, a)
}

func AuthenticationFindKey_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TPLink_AddVendor(p, 3, a)
}

func AuthenticationFindKey_Get(p *radius.Packet) (value []byte) {
	value, _ = AuthenticationFindKey_Lookup(p)
	return
}

func AuthenticationFindKey_GetString(p *radius.Packet) (value string) {
	value, _ = AuthenticationFindKey_LookupString(p)
	return
}

func AuthenticationFindKey_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _TPLink_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AuthenticationFindKey_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _TPLink_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AuthenticationFindKey_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _TPLink_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AuthenticationFindKey_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _TPLink_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AuthenticationFindKey_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TPLink_SetVendor(p, 3, a)
}

func AuthenticationFindKey_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TPLink_SetVendor(p, 3, a)
}

func AuthenticationFindKey_Del(p *radius.Packet) {
	_TPLink_DelVendor(p, 3)
}

func AuthenticationFoundKey_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TPLink_AddVendor(p, 4, a)
}

func AuthenticationFoundKey_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TPLink_AddVendor(p, 4, a)
}

func AuthenticationFoundKey_Get(p *radius.Packet) (value []byte) {
	value, _ = AuthenticationFoundKey_Lookup(p)
	return
}

func AuthenticationFoundKey_GetString(p *radius.Packet) (value string) {
	value, _ = AuthenticationFoundKey_LookupString(p)
	return
}

func AuthenticationFoundKey_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _TPLink_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AuthenticationFoundKey_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _TPLink_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AuthenticationFoundKey_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _TPLink_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AuthenticationFoundKey_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _TPLink_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AuthenticationFoundKey_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TPLink_SetVendor(p, 4, a)
}

func AuthenticationFoundKey_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TPLink_SetVendor(p, 4, a)
}

func AuthenticationFoundKey_Del(p *radius.Packet) {
	_TPLink_DelVendor(p, 4)
}

func UserCommand_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TPLink_AddVendor(p, 5, a)
}

func UserCommand_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TPLink_AddVendor(p, 5, a)
}

func UserCommand_Get(p *radius.Packet) (value []byte) {
	value, _ = UserCommand_Lookup(p)
	return
}

func UserCommand_GetString(p *radius.Packet) (value string) {
	value, _ = UserCommand_LookupString(p)
	return
}

func UserCommand_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _TPLink_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserCommand_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _TPLink_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserCommand_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _TPLink_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UserCommand_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _TPLink_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UserCommand_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TPLink_SetVendor(p, 5, a)
}

func UserCommand_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TPLink_SetVendor(p, 5, a)
}

func UserCommand_Del(p *radius.Packet) {
	_TPLink_DelVendor(p, 5)
}

func Site_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TPLink_AddVendor(p, 6, a)
}

func Site_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TPLink_AddVendor(p, 6, a)
}

func Site_Get(p *radius.Packet) (value []byte) {
	value, _ = Site_Lookup(p)
	return
}

func Site_GetString(p *radius.Packet) (value string) {
	value, _ = Site_LookupString(p)
	return
}

func Site_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _TPLink_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func Site_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _TPLink_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func Site_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _TPLink_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func Site_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _TPLink_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func Site_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TPLink_SetVendor(p, 6, a)
}

func Site_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TPLink_SetVendor(p, 6, a)
}

func Site_Del(p *radius.Packet) {
	_TPLink_DelVendor(p, 6)
}

func Omada_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TPLink_AddVendor(p, 7, a)
}

func Omada_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TPLink_AddVendor(p, 7, a)
}

func Omada_Get(p *radius.Packet) (value []byte) {
	value, _ = Omada_Lookup(p)
	return
}

func Omada_GetString(p *radius.Packet) (value string) {
	value, _ = Omada_LookupString(p)
	return
}

func Omada_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _TPLink_GetsVendor(p, 7) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func Omada_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _TPLink_GetsVendor(p, 7) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func Omada_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _TPLink_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func Omada_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _TPLink_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func Omada_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TPLink_SetVendor(p, 7, a)
}

func Omada_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TPLink_SetVendor(p, 7, a)
}

func Omada_Del(p *radius.Packet) {
	_TPLink_DelVendor(p, 7)
}

func RedirectURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TPLink_AddVendor(p, 8, a)
}

func RedirectURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TPLink_AddVendor(p, 8, a)
}

func RedirectURL_Get(p *radius.Packet) (value []byte) {
	value, _ = RedirectURL_Lookup(p)
	return
}

func RedirectURL_GetString(p *radius.Packet) (value string) {
	value, _ = RedirectURL_LookupString(p)
	return
}

func RedirectURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _TPLink_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RedirectURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _TPLink_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RedirectURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _TPLink_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RedirectURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _TPLink_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RedirectURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TPLink_SetVendor(p, 8, a)
}

func RedirectURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TPLink_SetVendor(p, 8, a)
}

func RedirectURL_Del(p *radius.Packet) {
	_TPLink_DelVendor(p, 8)
}

type PortalAccessStatus uint32

var PortalAccessStatus_Strings = map[PortalAccessStatus]string{}

func (a PortalAccessStatus) String() string {
	if str, ok := PortalAccessStatus_Strings[a]; ok {
		return str
	}
	return "PortalAccessStatus(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PortalAccessStatus_Add(p *radius.Packet, value PortalAccessStatus) (err error) {
	a := radius.NewInteger(uint32(value))
	return _TPLink_AddVendor(p, 9, a)
}

func PortalAccessStatus_Get(p *radius.Packet) (value PortalAccessStatus) {
	value, _ = PortalAccessStatus_Lookup(p)
	return
}

func PortalAccessStatus_Gets(p *radius.Packet) (values []PortalAccessStatus, err error) {
	var i uint32
	for _, attr := range _TPLink_GetsVendor(p, 9) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PortalAccessStatus(i))
	}
	return
}

func PortalAccessStatus_Lookup(p *radius.Packet) (value PortalAccessStatus, err error) {
	a, ok := _TPLink_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PortalAccessStatus(i)
	return
}

func PortalAccessStatus_Set(p *radius.Packet, value PortalAccessStatus) (err error) {
	a := radius.NewInteger(uint32(value))
	return _TPLink_SetVendor(p, 9, a)
}

func PortalAccessStatus_Del(p *radius.Packet) {
	_TPLink_DelVendor(p, 9)
}
