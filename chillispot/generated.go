// Code generated by radius-dict-gen. DO NOT EDIT.

package chillispot

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_ChilliSpot_VendorID = 14559
)

func _ChilliSpot_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_ChilliSpot_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _ChilliSpot_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _ChilliSpot_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _ChilliSpot_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _ChilliSpot_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _ChilliSpot_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _ChilliSpot_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _ChilliSpot_AddVendor(p, typ, attr)
}

func _ChilliSpot_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _ChilliSpot_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

type ChilliSpotMaxInputOctets uint32

var ChilliSpotMaxInputOctets_Strings = map[ChilliSpotMaxInputOctets]string{}

func (a ChilliSpotMaxInputOctets) String() string {
	if str, ok := ChilliSpotMaxInputOctets_Strings[a]; ok {
		return str
	}
	return "ChilliSpotMaxInputOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ChilliSpotMaxInputOctets_Add(p *radius.Packet, value ChilliSpotMaxInputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ChilliSpot_AddVendor(p, 1, a)
}

func ChilliSpotMaxInputOctets_Get(p *radius.Packet) (value ChilliSpotMaxInputOctets) {
	value, _ = ChilliSpotMaxInputOctets_Lookup(p)
	return
}

func ChilliSpotMaxInputOctets_Gets(p *radius.Packet) (values []ChilliSpotMaxInputOctets, err error) {
	var i uint32
	for _, attr := range _ChilliSpot_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ChilliSpotMaxInputOctets(i))
	}
	return
}

func ChilliSpotMaxInputOctets_Lookup(p *radius.Packet) (value ChilliSpotMaxInputOctets, err error) {
	a, ok := _ChilliSpot_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ChilliSpotMaxInputOctets(i)
	return
}

func ChilliSpotMaxInputOctets_Set(p *radius.Packet, value ChilliSpotMaxInputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ChilliSpot_SetVendor(p, 1, a)
}

func ChilliSpotMaxInputOctets_Del(p *radius.Packet) {
	_ChilliSpot_DelVendor(p, 1)
}

type ChilliSpotMaxOutputOctets uint32

var ChilliSpotMaxOutputOctets_Strings = map[ChilliSpotMaxOutputOctets]string{}

func (a ChilliSpotMaxOutputOctets) String() string {
	if str, ok := ChilliSpotMaxOutputOctets_Strings[a]; ok {
		return str
	}
	return "ChilliSpotMaxOutputOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ChilliSpotMaxOutputOctets_Add(p *radius.Packet, value ChilliSpotMaxOutputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ChilliSpot_AddVendor(p, 2, a)
}

func ChilliSpotMaxOutputOctets_Get(p *radius.Packet) (value ChilliSpotMaxOutputOctets) {
	value, _ = ChilliSpotMaxOutputOctets_Lookup(p)
	return
}

func ChilliSpotMaxOutputOctets_Gets(p *radius.Packet) (values []ChilliSpotMaxOutputOctets, err error) {
	var i uint32
	for _, attr := range _ChilliSpot_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ChilliSpotMaxOutputOctets(i))
	}
	return
}

func ChilliSpotMaxOutputOctets_Lookup(p *radius.Packet) (value ChilliSpotMaxOutputOctets, err error) {
	a, ok := _ChilliSpot_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ChilliSpotMaxOutputOctets(i)
	return
}

func ChilliSpotMaxOutputOctets_Set(p *radius.Packet, value ChilliSpotMaxOutputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ChilliSpot_SetVendor(p, 2, a)
}

func ChilliSpotMaxOutputOctets_Del(p *radius.Packet) {
	_ChilliSpot_DelVendor(p, 2)
}

type ChilliSpotMaxTotalOctets uint32

var ChilliSpotMaxTotalOctets_Strings = map[ChilliSpotMaxTotalOctets]string{}

func (a ChilliSpotMaxTotalOctets) String() string {
	if str, ok := ChilliSpotMaxTotalOctets_Strings[a]; ok {
		return str
	}
	return "ChilliSpotMaxTotalOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ChilliSpotMaxTotalOctets_Add(p *radius.Packet, value ChilliSpotMaxTotalOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ChilliSpot_AddVendor(p, 3, a)
}

func ChilliSpotMaxTotalOctets_Get(p *radius.Packet) (value ChilliSpotMaxTotalOctets) {
	value, _ = ChilliSpotMaxTotalOctets_Lookup(p)
	return
}

func ChilliSpotMaxTotalOctets_Gets(p *radius.Packet) (values []ChilliSpotMaxTotalOctets, err error) {
	var i uint32
	for _, attr := range _ChilliSpot_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ChilliSpotMaxTotalOctets(i))
	}
	return
}

func ChilliSpotMaxTotalOctets_Lookup(p *radius.Packet) (value ChilliSpotMaxTotalOctets, err error) {
	a, ok := _ChilliSpot_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ChilliSpotMaxTotalOctets(i)
	return
}

func ChilliSpotMaxTotalOctets_Set(p *radius.Packet, value ChilliSpotMaxTotalOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ChilliSpot_SetVendor(p, 3, a)
}

func ChilliSpotMaxTotalOctets_Del(p *radius.Packet) {
	_ChilliSpot_DelVendor(p, 3)
}

type ChilliSpotBandwidthMaxUp uint32

var ChilliSpotBandwidthMaxUp_Strings = map[ChilliSpotBandwidthMaxUp]string{}

func (a ChilliSpotBandwidthMaxUp) String() string {
	if str, ok := ChilliSpotBandwidthMaxUp_Strings[a]; ok {
		return str
	}
	return "ChilliSpotBandwidthMaxUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ChilliSpotBandwidthMaxUp_Add(p *radius.Packet, value ChilliSpotBandwidthMaxUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ChilliSpot_AddVendor(p, 4, a)
}

func ChilliSpotBandwidthMaxUp_Get(p *radius.Packet) (value ChilliSpotBandwidthMaxUp) {
	value, _ = ChilliSpotBandwidthMaxUp_Lookup(p)
	return
}

func ChilliSpotBandwidthMaxUp_Gets(p *radius.Packet) (values []ChilliSpotBandwidthMaxUp, err error) {
	var i uint32
	for _, attr := range _ChilliSpot_GetsVendor(p, 4) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ChilliSpotBandwidthMaxUp(i))
	}
	return
}

func ChilliSpotBandwidthMaxUp_Lookup(p *radius.Packet) (value ChilliSpotBandwidthMaxUp, err error) {
	a, ok := _ChilliSpot_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ChilliSpotBandwidthMaxUp(i)
	return
}

func ChilliSpotBandwidthMaxUp_Set(p *radius.Packet, value ChilliSpotBandwidthMaxUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ChilliSpot_SetVendor(p, 4, a)
}

func ChilliSpotBandwidthMaxUp_Del(p *radius.Packet) {
	_ChilliSpot_DelVendor(p, 4)
}

type ChilliSpotBandwidthMaxDown uint32

var ChilliSpotBandwidthMaxDown_Strings = map[ChilliSpotBandwidthMaxDown]string{}

func (a ChilliSpotBandwidthMaxDown) String() string {
	if str, ok := ChilliSpotBandwidthMaxDown_Strings[a]; ok {
		return str
	}
	return "ChilliSpotBandwidthMaxDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ChilliSpotBandwidthMaxDown_Add(p *radius.Packet, value ChilliSpotBandwidthMaxDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ChilliSpot_AddVendor(p, 5, a)
}

func ChilliSpotBandwidthMaxDown_Get(p *radius.Packet) (value ChilliSpotBandwidthMaxDown) {
	value, _ = ChilliSpotBandwidthMaxDown_Lookup(p)
	return
}

func ChilliSpotBandwidthMaxDown_Gets(p *radius.Packet) (values []ChilliSpotBandwidthMaxDown, err error) {
	var i uint32
	for _, attr := range _ChilliSpot_GetsVendor(p, 5) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ChilliSpotBandwidthMaxDown(i))
	}
	return
}

func ChilliSpotBandwidthMaxDown_Lookup(p *radius.Packet) (value ChilliSpotBandwidthMaxDown, err error) {
	a, ok := _ChilliSpot_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ChilliSpotBandwidthMaxDown(i)
	return
}

func ChilliSpotBandwidthMaxDown_Set(p *radius.Packet, value ChilliSpotBandwidthMaxDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ChilliSpot_SetVendor(p, 5, a)
}

func ChilliSpotBandwidthMaxDown_Del(p *radius.Packet) {
	_ChilliSpot_DelVendor(p, 5)
}

func ChilliSpotConfig_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ChilliSpot_AddVendor(p, 6, a)
}

func ChilliSpotConfig_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ChilliSpot_AddVendor(p, 6, a)
}

func ChilliSpotConfig_Get(p *radius.Packet) (value []byte) {
	value, _ = ChilliSpotConfig_Lookup(p)
	return
}

func ChilliSpotConfig_GetString(p *radius.Packet) (value string) {
	value, _ = ChilliSpotConfig_LookupString(p)
	return
}

func ChilliSpotConfig_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ChilliSpot_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ChilliSpotConfig_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ChilliSpot_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ChilliSpotConfig_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ChilliSpot_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ChilliSpotConfig_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ChilliSpot_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ChilliSpotConfig_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ChilliSpot_SetVendor(p, 6, a)
}

func ChilliSpotConfig_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ChilliSpot_SetVendor(p, 6, a)
}

func ChilliSpotConfig_Del(p *radius.Packet) {
	_ChilliSpot_DelVendor(p, 6)
}

func ChilliSpotLang_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ChilliSpot_AddVendor(p, 7, a)
}

func ChilliSpotLang_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ChilliSpot_AddVendor(p, 7, a)
}

func ChilliSpotLang_Get(p *radius.Packet) (value []byte) {
	value, _ = ChilliSpotLang_Lookup(p)
	return
}

func ChilliSpotLang_GetString(p *radius.Packet) (value string) {
	value, _ = ChilliSpotLang_LookupString(p)
	return
}

func ChilliSpotLang_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ChilliSpot_GetsVendor(p, 7) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ChilliSpotLang_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ChilliSpot_GetsVendor(p, 7) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ChilliSpotLang_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ChilliSpot_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ChilliSpotLang_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ChilliSpot_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ChilliSpotLang_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ChilliSpot_SetVendor(p, 7, a)
}

func ChilliSpotLang_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ChilliSpot_SetVendor(p, 7, a)
}

func ChilliSpotLang_Del(p *radius.Packet) {
	_ChilliSpot_DelVendor(p, 7)
}

func ChilliSpotVersion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ChilliSpot_AddVendor(p, 8, a)
}

func ChilliSpotVersion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ChilliSpot_AddVendor(p, 8, a)
}

func ChilliSpotVersion_Get(p *radius.Packet) (value []byte) {
	value, _ = ChilliSpotVersion_Lookup(p)
	return
}

func ChilliSpotVersion_GetString(p *radius.Packet) (value string) {
	value, _ = ChilliSpotVersion_LookupString(p)
	return
}

func ChilliSpotVersion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ChilliSpot_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ChilliSpotVersion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ChilliSpot_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ChilliSpotVersion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ChilliSpot_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ChilliSpotVersion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ChilliSpot_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ChilliSpotVersion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ChilliSpot_SetVendor(p, 8, a)
}

func ChilliSpotVersion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ChilliSpot_SetVendor(p, 8, a)
}

func ChilliSpotVersion_Del(p *radius.Packet) {
	_ChilliSpot_DelVendor(p, 8)
}

func ChilliSpotOriginalURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ChilliSpot_AddVendor(p, 9, a)
}

func ChilliSpotOriginalURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ChilliSpot_AddVendor(p, 9, a)
}

func ChilliSpotOriginalURL_Get(p *radius.Packet) (value []byte) {
	value, _ = ChilliSpotOriginalURL_Lookup(p)
	return
}

func ChilliSpotOriginalURL_GetString(p *radius.Packet) (value string) {
	value, _ = ChilliSpotOriginalURL_LookupString(p)
	return
}

func ChilliSpotOriginalURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ChilliSpot_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ChilliSpotOriginalURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ChilliSpot_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ChilliSpotOriginalURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ChilliSpot_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ChilliSpotOriginalURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ChilliSpot_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ChilliSpotOriginalURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ChilliSpot_SetVendor(p, 9, a)
}

func ChilliSpotOriginalURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ChilliSpot_SetVendor(p, 9, a)
}

func ChilliSpotOriginalURL_Del(p *radius.Packet) {
	_ChilliSpot_DelVendor(p, 9)
}

func ChilliSpotUAMAllowed_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ChilliSpot_AddVendor(p, 100, a)
}

func ChilliSpotUAMAllowed_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ChilliSpot_AddVendor(p, 100, a)
}

func ChilliSpotUAMAllowed_Get(p *radius.Packet) (value []byte) {
	value, _ = ChilliSpotUAMAllowed_Lookup(p)
	return
}

func ChilliSpotUAMAllowed_GetString(p *radius.Packet) (value string) {
	value, _ = ChilliSpotUAMAllowed_LookupString(p)
	return
}

func ChilliSpotUAMAllowed_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ChilliSpot_GetsVendor(p, 100) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ChilliSpotUAMAllowed_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ChilliSpot_GetsVendor(p, 100) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ChilliSpotUAMAllowed_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ChilliSpot_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ChilliSpotUAMAllowed_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ChilliSpot_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ChilliSpotUAMAllowed_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ChilliSpot_SetVendor(p, 100, a)
}

func ChilliSpotUAMAllowed_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ChilliSpot_SetVendor(p, 100, a)
}

func ChilliSpotUAMAllowed_Del(p *radius.Packet) {
	_ChilliSpot_DelVendor(p, 100)
}

func ChilliSpotMACAllowed_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ChilliSpot_AddVendor(p, 101, a)
}

func ChilliSpotMACAllowed_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ChilliSpot_AddVendor(p, 101, a)
}

func ChilliSpotMACAllowed_Get(p *radius.Packet) (value []byte) {
	value, _ = ChilliSpotMACAllowed_Lookup(p)
	return
}

func ChilliSpotMACAllowed_GetString(p *radius.Packet) (value string) {
	value, _ = ChilliSpotMACAllowed_LookupString(p)
	return
}

func ChilliSpotMACAllowed_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ChilliSpot_GetsVendor(p, 101) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ChilliSpotMACAllowed_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ChilliSpot_GetsVendor(p, 101) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ChilliSpotMACAllowed_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ChilliSpot_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ChilliSpotMACAllowed_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ChilliSpot_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ChilliSpotMACAllowed_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ChilliSpot_SetVendor(p, 101, a)
}

func ChilliSpotMACAllowed_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ChilliSpot_SetVendor(p, 101, a)
}

func ChilliSpotMACAllowed_Del(p *radius.Packet) {
	_ChilliSpot_DelVendor(p, 101)
}

type ChilliSpotInterval uint32

var ChilliSpotInterval_Strings = map[ChilliSpotInterval]string{}

func (a ChilliSpotInterval) String() string {
	if str, ok := ChilliSpotInterval_Strings[a]; ok {
		return str
	}
	return "ChilliSpotInterval(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ChilliSpotInterval_Add(p *radius.Packet, value ChilliSpotInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ChilliSpot_AddVendor(p, 102, a)
}

func ChilliSpotInterval_Get(p *radius.Packet) (value ChilliSpotInterval) {
	value, _ = ChilliSpotInterval_Lookup(p)
	return
}

func ChilliSpotInterval_Gets(p *radius.Packet) (values []ChilliSpotInterval, err error) {
	var i uint32
	for _, attr := range _ChilliSpot_GetsVendor(p, 102) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ChilliSpotInterval(i))
	}
	return
}

func ChilliSpotInterval_Lookup(p *radius.Packet) (value ChilliSpotInterval, err error) {
	a, ok := _ChilliSpot_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ChilliSpotInterval(i)
	return
}

func ChilliSpotInterval_Set(p *radius.Packet, value ChilliSpotInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ChilliSpot_SetVendor(p, 102, a)
}

func ChilliSpotInterval_Del(p *radius.Packet) {
	_ChilliSpot_DelVendor(p, 102)
}
