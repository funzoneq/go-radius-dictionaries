// Code generated by radius-dict-gen. DO NOT EDIT.

package ntua

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_NTUA_VendorID = 969
)

func _NTUA_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_NTUA_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _NTUA_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _NTUA_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _NTUA_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _NTUA_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _NTUA_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _NTUA_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _NTUA_AddVendor(p, typ, attr)
}

func _NTUA_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _NTUA_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

type UserLogonUID uint32

var UserLogonUID_Strings = map[UserLogonUID]string{}

func (a UserLogonUID) String() string {
	if str, ok := UserLogonUID_Strings[a]; ok {
		return str
	}
	return "UserLogonUID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UserLogonUID_Add(p *radius.Packet, value UserLogonUID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NTUA_AddVendor(p, 10, a)
}

func UserLogonUID_Get(p *radius.Packet) (value UserLogonUID) {
	value, _ = UserLogonUID_Lookup(p)
	return
}

func UserLogonUID_Gets(p *radius.Packet) (values []UserLogonUID, err error) {
	var i uint32
	for _, attr := range _NTUA_GetsVendor(p, 10) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UserLogonUID(i))
	}
	return
}

func UserLogonUID_Lookup(p *radius.Packet) (value UserLogonUID, err error) {
	a, ok := _NTUA_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UserLogonUID(i)
	return
}

func UserLogonUID_Set(p *radius.Packet, value UserLogonUID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NTUA_SetVendor(p, 10, a)
}

func UserLogonUID_Del(p *radius.Packet) {
	_NTUA_DelVendor(p, 10)
}

type UserLogonGid uint32

var UserLogonGid_Strings = map[UserLogonGid]string{}

func (a UserLogonGid) String() string {
	if str, ok := UserLogonGid_Strings[a]; ok {
		return str
	}
	return "UserLogonGid(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UserLogonGid_Add(p *radius.Packet, value UserLogonGid) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NTUA_AddVendor(p, 11, a)
}

func UserLogonGid_Get(p *radius.Packet) (value UserLogonGid) {
	value, _ = UserLogonGid_Lookup(p)
	return
}

func UserLogonGid_Gets(p *radius.Packet) (values []UserLogonGid, err error) {
	var i uint32
	for _, attr := range _NTUA_GetsVendor(p, 11) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UserLogonGid(i))
	}
	return
}

func UserLogonGid_Lookup(p *radius.Packet) (value UserLogonGid, err error) {
	a, ok := _NTUA_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UserLogonGid(i)
	return
}

func UserLogonGid_Set(p *radius.Packet, value UserLogonGid) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NTUA_SetVendor(p, 11, a)
}

func UserLogonGid_Del(p *radius.Packet) {
	_NTUA_DelVendor(p, 11)
}

func UserLogonHomeDir_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 12, a)
}

func UserLogonHomeDir_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 12, a)
}

func UserLogonHomeDir_Get(p *radius.Packet) (value []byte) {
	value, _ = UserLogonHomeDir_Lookup(p)
	return
}

func UserLogonHomeDir_GetString(p *radius.Packet) (value string) {
	value, _ = UserLogonHomeDir_LookupString(p)
	return
}

func UserLogonHomeDir_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NTUA_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonHomeDir_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NTUA_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonHomeDir_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NTUA_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UserLogonHomeDir_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NTUA_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UserLogonHomeDir_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 12, a)
}

func UserLogonHomeDir_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 12, a)
}

func UserLogonHomeDir_Del(p *radius.Packet) {
	_NTUA_DelVendor(p, 12)
}

type UserLogonType uint32

const (
	UserLogonType_Value_FTP          UserLogonType = 1
	UserLogonType_Value_WEB          UserLogonType = 2
	UserLogonType_Value_POP          UserLogonType = 3
	UserLogonType_Value_IMAP         UserLogonType = 4
	UserLogonType_Value_WindowsLogon UserLogonType = 5
	UserLogonType_Value_UnixLogon    UserLogonType = 6
	UserLogonType_Value_SMTPAuth     UserLogonType = 7
	UserLogonType_Value_Other        UserLogonType = 200
)

var UserLogonType_Strings = map[UserLogonType]string{
	UserLogonType_Value_FTP:          "FTP",
	UserLogonType_Value_WEB:          "WEB",
	UserLogonType_Value_POP:          "POP",
	UserLogonType_Value_IMAP:         "IMAP",
	UserLogonType_Value_WindowsLogon: "Windows-Logon",
	UserLogonType_Value_UnixLogon:    "Unix-Logon",
	UserLogonType_Value_SMTPAuth:     "SMTP-Auth",
	UserLogonType_Value_Other:        "Other",
}

func (a UserLogonType) String() string {
	if str, ok := UserLogonType_Strings[a]; ok {
		return str
	}
	return "UserLogonType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UserLogonType_Add(p *radius.Packet, value UserLogonType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NTUA_AddVendor(p, 13, a)
}

func UserLogonType_Get(p *radius.Packet) (value UserLogonType) {
	value, _ = UserLogonType_Lookup(p)
	return
}

func UserLogonType_Gets(p *radius.Packet) (values []UserLogonType, err error) {
	var i uint32
	for _, attr := range _NTUA_GetsVendor(p, 13) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UserLogonType(i))
	}
	return
}

func UserLogonType_Lookup(p *radius.Packet) (value UserLogonType, err error) {
	a, ok := _NTUA_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UserLogonType(i)
	return
}

func UserLogonType_Set(p *radius.Packet, value UserLogonType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NTUA_SetVendor(p, 13, a)
}

func UserLogonType_Del(p *radius.Packet) {
	_NTUA_DelVendor(p, 13)
}

type UserLogonQuotaBytes uint32

var UserLogonQuotaBytes_Strings = map[UserLogonQuotaBytes]string{}

func (a UserLogonQuotaBytes) String() string {
	if str, ok := UserLogonQuotaBytes_Strings[a]; ok {
		return str
	}
	return "UserLogonQuotaBytes(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UserLogonQuotaBytes_Add(p *radius.Packet, value UserLogonQuotaBytes) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NTUA_AddVendor(p, 14, a)
}

func UserLogonQuotaBytes_Get(p *radius.Packet) (value UserLogonQuotaBytes) {
	value, _ = UserLogonQuotaBytes_Lookup(p)
	return
}

func UserLogonQuotaBytes_Gets(p *radius.Packet) (values []UserLogonQuotaBytes, err error) {
	var i uint32
	for _, attr := range _NTUA_GetsVendor(p, 14) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UserLogonQuotaBytes(i))
	}
	return
}

func UserLogonQuotaBytes_Lookup(p *radius.Packet) (value UserLogonQuotaBytes, err error) {
	a, ok := _NTUA_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UserLogonQuotaBytes(i)
	return
}

func UserLogonQuotaBytes_Set(p *radius.Packet, value UserLogonQuotaBytes) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NTUA_SetVendor(p, 14, a)
}

func UserLogonQuotaBytes_Del(p *radius.Packet) {
	_NTUA_DelVendor(p, 14)
}

type UserLogonQuotaFiles uint32

var UserLogonQuotaFiles_Strings = map[UserLogonQuotaFiles]string{}

func (a UserLogonQuotaFiles) String() string {
	if str, ok := UserLogonQuotaFiles_Strings[a]; ok {
		return str
	}
	return "UserLogonQuotaFiles(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UserLogonQuotaFiles_Add(p *radius.Packet, value UserLogonQuotaFiles) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NTUA_AddVendor(p, 15, a)
}

func UserLogonQuotaFiles_Get(p *radius.Packet) (value UserLogonQuotaFiles) {
	value, _ = UserLogonQuotaFiles_Lookup(p)
	return
}

func UserLogonQuotaFiles_Gets(p *radius.Packet) (values []UserLogonQuotaFiles, err error) {
	var i uint32
	for _, attr := range _NTUA_GetsVendor(p, 15) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UserLogonQuotaFiles(i))
	}
	return
}

func UserLogonQuotaFiles_Lookup(p *radius.Packet) (value UserLogonQuotaFiles, err error) {
	a, ok := _NTUA_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UserLogonQuotaFiles(i)
	return
}

func UserLogonQuotaFiles_Set(p *radius.Packet, value UserLogonQuotaFiles) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NTUA_SetVendor(p, 15, a)
}

func UserLogonQuotaFiles_Del(p *radius.Packet) {
	_NTUA_DelVendor(p, 15)
}

func UserLogonShell_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 16, a)
}

func UserLogonShell_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 16, a)
}

func UserLogonShell_Get(p *radius.Packet) (value []byte) {
	value, _ = UserLogonShell_Lookup(p)
	return
}

func UserLogonShell_GetString(p *radius.Packet) (value string) {
	value, _ = UserLogonShell_LookupString(p)
	return
}

func UserLogonShell_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NTUA_GetsVendor(p, 16) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonShell_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NTUA_GetsVendor(p, 16) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonShell_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NTUA_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UserLogonShell_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NTUA_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UserLogonShell_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 16, a)
}

func UserLogonShell_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 16, a)
}

func UserLogonShell_Del(p *radius.Packet) {
	_NTUA_DelVendor(p, 16)
}

type UserLogonRestriction uint32

const (
	UserLogonRestriction_Value_AnonymousUser UserLogonRestriction = 1
	UserLogonRestriction_Value_AdminUser     UserLogonRestriction = 2
)

var UserLogonRestriction_Strings = map[UserLogonRestriction]string{
	UserLogonRestriction_Value_AnonymousUser: "Anonymous-User",
	UserLogonRestriction_Value_AdminUser:     "Admin-User",
}

func (a UserLogonRestriction) String() string {
	if str, ok := UserLogonRestriction_Strings[a]; ok {
		return str
	}
	return "UserLogonRestriction(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UserLogonRestriction_Add(p *radius.Packet, value UserLogonRestriction) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NTUA_AddVendor(p, 17, a)
}

func UserLogonRestriction_Get(p *radius.Packet) (value UserLogonRestriction) {
	value, _ = UserLogonRestriction_Lookup(p)
	return
}

func UserLogonRestriction_Gets(p *radius.Packet) (values []UserLogonRestriction, err error) {
	var i uint32
	for _, attr := range _NTUA_GetsVendor(p, 17) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UserLogonRestriction(i))
	}
	return
}

func UserLogonRestriction_Lookup(p *radius.Packet) (value UserLogonRestriction, err error) {
	a, ok := _NTUA_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UserLogonRestriction(i)
	return
}

func UserLogonRestriction_Set(p *radius.Packet, value UserLogonRestriction) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NTUA_SetVendor(p, 17, a)
}

func UserLogonRestriction_Del(p *radius.Packet) {
	_NTUA_DelVendor(p, 17)
}

func UserLogonGroupNames_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 18, a)
}

func UserLogonGroupNames_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 18, a)
}

func UserLogonGroupNames_Get(p *radius.Packet) (value []byte) {
	value, _ = UserLogonGroupNames_Lookup(p)
	return
}

func UserLogonGroupNames_GetString(p *radius.Packet) (value string) {
	value, _ = UserLogonGroupNames_LookupString(p)
	return
}

func UserLogonGroupNames_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NTUA_GetsVendor(p, 18) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonGroupNames_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NTUA_GetsVendor(p, 18) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonGroupNames_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NTUA_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UserLogonGroupNames_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NTUA_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UserLogonGroupNames_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 18, a)
}

func UserLogonGroupNames_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 18, a)
}

func UserLogonGroupNames_Del(p *radius.Packet) {
	_NTUA_DelVendor(p, 18)
}

func UserLogonDriveNames_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 19, a)
}

func UserLogonDriveNames_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 19, a)
}

func UserLogonDriveNames_Get(p *radius.Packet) (value []byte) {
	value, _ = UserLogonDriveNames_Lookup(p)
	return
}

func UserLogonDriveNames_GetString(p *radius.Packet) (value string) {
	value, _ = UserLogonDriveNames_LookupString(p)
	return
}

func UserLogonDriveNames_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NTUA_GetsVendor(p, 19) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonDriveNames_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NTUA_GetsVendor(p, 19) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonDriveNames_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NTUA_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UserLogonDriveNames_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NTUA_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UserLogonDriveNames_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 19, a)
}

func UserLogonDriveNames_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 19, a)
}

func UserLogonDriveNames_Del(p *radius.Packet) {
	_NTUA_DelVendor(p, 19)
}

func UserLogonUserDescription_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 20, a)
}

func UserLogonUserDescription_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 20, a)
}

func UserLogonUserDescription_Get(p *radius.Packet) (value []byte) {
	value, _ = UserLogonUserDescription_Lookup(p)
	return
}

func UserLogonUserDescription_GetString(p *radius.Packet) (value string) {
	value, _ = UserLogonUserDescription_LookupString(p)
	return
}

func UserLogonUserDescription_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NTUA_GetsVendor(p, 20) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonUserDescription_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NTUA_GetsVendor(p, 20) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonUserDescription_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NTUA_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UserLogonUserDescription_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NTUA_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UserLogonUserDescription_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 20, a)
}

func UserLogonUserDescription_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 20, a)
}

func UserLogonUserDescription_Del(p *radius.Packet) {
	_NTUA_DelVendor(p, 20)
}

func UserLogonUserFullName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 21, a)
}

func UserLogonUserFullName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 21, a)
}

func UserLogonUserFullName_Get(p *radius.Packet) (value []byte) {
	value, _ = UserLogonUserFullName_Lookup(p)
	return
}

func UserLogonUserFullName_GetString(p *radius.Packet) (value string) {
	value, _ = UserLogonUserFullName_LookupString(p)
	return
}

func UserLogonUserFullName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NTUA_GetsVendor(p, 21) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonUserFullName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NTUA_GetsVendor(p, 21) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonUserFullName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NTUA_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UserLogonUserFullName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NTUA_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UserLogonUserFullName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 21, a)
}

func UserLogonUserFullName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 21, a)
}

func UserLogonUserFullName_Del(p *radius.Packet) {
	_NTUA_DelVendor(p, 21)
}

func UserLogonUserDomain_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 22, a)
}

func UserLogonUserDomain_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 22, a)
}

func UserLogonUserDomain_Get(p *radius.Packet) (value []byte) {
	value, _ = UserLogonUserDomain_Lookup(p)
	return
}

func UserLogonUserDomain_GetString(p *radius.Packet) (value string) {
	value, _ = UserLogonUserDomain_LookupString(p)
	return
}

func UserLogonUserDomain_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NTUA_GetsVendor(p, 22) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonUserDomain_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NTUA_GetsVendor(p, 22) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonUserDomain_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NTUA_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UserLogonUserDomain_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NTUA_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UserLogonUserDomain_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 22, a)
}

func UserLogonUserDomain_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 22, a)
}

func UserLogonUserDomain_Del(p *radius.Packet) {
	_NTUA_DelVendor(p, 22)
}

func UserLogonLogonTask_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 23, a)
}

func UserLogonLogonTask_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 23, a)
}

func UserLogonLogonTask_Get(p *radius.Packet) (value []byte) {
	value, _ = UserLogonLogonTask_Lookup(p)
	return
}

func UserLogonLogonTask_GetString(p *radius.Packet) (value string) {
	value, _ = UserLogonLogonTask_LookupString(p)
	return
}

func UserLogonLogonTask_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NTUA_GetsVendor(p, 23) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonLogonTask_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NTUA_GetsVendor(p, 23) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonLogonTask_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NTUA_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UserLogonLogonTask_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NTUA_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UserLogonLogonTask_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 23, a)
}

func UserLogonLogonTask_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 23, a)
}

func UserLogonLogonTask_Del(p *radius.Packet) {
	_NTUA_DelVendor(p, 23)
}

func UserLogonLogoffTask_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 24, a)
}

func UserLogonLogoffTask_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 24, a)
}

func UserLogonLogoffTask_Get(p *radius.Packet) (value []byte) {
	value, _ = UserLogonLogoffTask_Lookup(p)
	return
}

func UserLogonLogoffTask_GetString(p *radius.Packet) (value string) {
	value, _ = UserLogonLogoffTask_LookupString(p)
	return
}

func UserLogonLogoffTask_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NTUA_GetsVendor(p, 24) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonLogoffTask_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NTUA_GetsVendor(p, 24) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonLogoffTask_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NTUA_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UserLogonLogoffTask_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NTUA_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UserLogonLogoffTask_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 24, a)
}

func UserLogonLogoffTask_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 24, a)
}

func UserLogonLogoffTask_Del(p *radius.Packet) {
	_NTUA_DelVendor(p, 24)
}

func UserLogonExpiration_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 25, a)
}

func UserLogonExpiration_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 25, a)
}

func UserLogonExpiration_Get(p *radius.Packet) (value []byte) {
	value, _ = UserLogonExpiration_Lookup(p)
	return
}

func UserLogonExpiration_GetString(p *radius.Packet) (value string) {
	value, _ = UserLogonExpiration_LookupString(p)
	return
}

func UserLogonExpiration_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NTUA_GetsVendor(p, 25) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonExpiration_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NTUA_GetsVendor(p, 25) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonExpiration_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NTUA_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UserLogonExpiration_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NTUA_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UserLogonExpiration_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 25, a)
}

func UserLogonExpiration_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 25, a)
}

func UserLogonExpiration_Del(p *radius.Packet) {
	_NTUA_DelVendor(p, 25)
}

func UserLogonUserProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 26, a)
}

func UserLogonUserProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 26, a)
}

func UserLogonUserProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = UserLogonUserProfile_Lookup(p)
	return
}

func UserLogonUserProfile_GetString(p *radius.Packet) (value string) {
	value, _ = UserLogonUserProfile_LookupString(p)
	return
}

func UserLogonUserProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NTUA_GetsVendor(p, 26) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonUserProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NTUA_GetsVendor(p, 26) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonUserProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NTUA_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UserLogonUserProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NTUA_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UserLogonUserProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 26, a)
}

func UserLogonUserProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 26, a)
}

func UserLogonUserProfile_Del(p *radius.Packet) {
	_NTUA_DelVendor(p, 26)
}

func UserLogonAcctTerminateCause_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 50, a)
}

func UserLogonAcctTerminateCause_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_AddVendor(p, 50, a)
}

func UserLogonAcctTerminateCause_Get(p *radius.Packet) (value []byte) {
	value, _ = UserLogonAcctTerminateCause_Lookup(p)
	return
}

func UserLogonAcctTerminateCause_GetString(p *radius.Packet) (value string) {
	value, _ = UserLogonAcctTerminateCause_LookupString(p)
	return
}

func UserLogonAcctTerminateCause_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NTUA_GetsVendor(p, 50) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonAcctTerminateCause_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NTUA_GetsVendor(p, 50) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UserLogonAcctTerminateCause_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NTUA_LookupVendor(p, 50)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UserLogonAcctTerminateCause_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NTUA_LookupVendor(p, 50)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UserLogonAcctTerminateCause_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 50, a)
}

func UserLogonAcctTerminateCause_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NTUA_SetVendor(p, 50, a)
}

func UserLogonAcctTerminateCause_Del(p *radius.Packet) {
	_NTUA_DelVendor(p, 50)
}
