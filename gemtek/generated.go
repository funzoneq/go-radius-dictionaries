// Code generated by radius-dict-gen. DO NOT EDIT.

package gemtek

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Gemtek_VendorID = 10529
)

func _Gemtek_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Gemtek_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Gemtek_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Gemtek_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Gemtek_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Gemtek_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Gemtek_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Gemtek_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Gemtek_AddVendor(p, typ, attr)
}

func _Gemtek_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Gemtek_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

type AcctSessionInputOctets uint32

var AcctSessionInputOctets_Strings = map[AcctSessionInputOctets]string{}

func (a AcctSessionInputOctets) String() string {
	if str, ok := AcctSessionInputOctets_Strings[a]; ok {
		return str
	}
	return "AcctSessionInputOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcctSessionInputOctets_Add(p *radius.Packet, value AcctSessionInputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gemtek_AddVendor(p, 21, a)
}

func AcctSessionInputOctets_Get(p *radius.Packet) (value AcctSessionInputOctets) {
	value, _ = AcctSessionInputOctets_Lookup(p)
	return
}

func AcctSessionInputOctets_Gets(p *radius.Packet) (values []AcctSessionInputOctets, err error) {
	var i uint32
	for _, attr := range _Gemtek_GetsVendor(p, 21) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcctSessionInputOctets(i))
	}
	return
}

func AcctSessionInputOctets_Lookup(p *radius.Packet) (value AcctSessionInputOctets, err error) {
	a, ok := _Gemtek_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcctSessionInputOctets(i)
	return
}

func AcctSessionInputOctets_Set(p *radius.Packet, value AcctSessionInputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gemtek_SetVendor(p, 21, a)
}

func AcctSessionInputOctets_Del(p *radius.Packet) {
	_Gemtek_DelVendor(p, 21)
}

type AcctSessionInputGigawords uint32

var AcctSessionInputGigawords_Strings = map[AcctSessionInputGigawords]string{}

func (a AcctSessionInputGigawords) String() string {
	if str, ok := AcctSessionInputGigawords_Strings[a]; ok {
		return str
	}
	return "AcctSessionInputGigawords(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcctSessionInputGigawords_Add(p *radius.Packet, value AcctSessionInputGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gemtek_AddVendor(p, 22, a)
}

func AcctSessionInputGigawords_Get(p *radius.Packet) (value AcctSessionInputGigawords) {
	value, _ = AcctSessionInputGigawords_Lookup(p)
	return
}

func AcctSessionInputGigawords_Gets(p *radius.Packet) (values []AcctSessionInputGigawords, err error) {
	var i uint32
	for _, attr := range _Gemtek_GetsVendor(p, 22) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcctSessionInputGigawords(i))
	}
	return
}

func AcctSessionInputGigawords_Lookup(p *radius.Packet) (value AcctSessionInputGigawords, err error) {
	a, ok := _Gemtek_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcctSessionInputGigawords(i)
	return
}

func AcctSessionInputGigawords_Set(p *radius.Packet, value AcctSessionInputGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gemtek_SetVendor(p, 22, a)
}

func AcctSessionInputGigawords_Del(p *radius.Packet) {
	_Gemtek_DelVendor(p, 22)
}

type AcctSessionOutputOctets uint32

var AcctSessionOutputOctets_Strings = map[AcctSessionOutputOctets]string{}

func (a AcctSessionOutputOctets) String() string {
	if str, ok := AcctSessionOutputOctets_Strings[a]; ok {
		return str
	}
	return "AcctSessionOutputOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcctSessionOutputOctets_Add(p *radius.Packet, value AcctSessionOutputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gemtek_AddVendor(p, 23, a)
}

func AcctSessionOutputOctets_Get(p *radius.Packet) (value AcctSessionOutputOctets) {
	value, _ = AcctSessionOutputOctets_Lookup(p)
	return
}

func AcctSessionOutputOctets_Gets(p *radius.Packet) (values []AcctSessionOutputOctets, err error) {
	var i uint32
	for _, attr := range _Gemtek_GetsVendor(p, 23) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcctSessionOutputOctets(i))
	}
	return
}

func AcctSessionOutputOctets_Lookup(p *radius.Packet) (value AcctSessionOutputOctets, err error) {
	a, ok := _Gemtek_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcctSessionOutputOctets(i)
	return
}

func AcctSessionOutputOctets_Set(p *radius.Packet, value AcctSessionOutputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gemtek_SetVendor(p, 23, a)
}

func AcctSessionOutputOctets_Del(p *radius.Packet) {
	_Gemtek_DelVendor(p, 23)
}

type AcctSessionOutputGigawords uint32

var AcctSessionOutputGigawords_Strings = map[AcctSessionOutputGigawords]string{}

func (a AcctSessionOutputGigawords) String() string {
	if str, ok := AcctSessionOutputGigawords_Strings[a]; ok {
		return str
	}
	return "AcctSessionOutputGigawords(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcctSessionOutputGigawords_Add(p *radius.Packet, value AcctSessionOutputGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gemtek_AddVendor(p, 24, a)
}

func AcctSessionOutputGigawords_Get(p *radius.Packet) (value AcctSessionOutputGigawords) {
	value, _ = AcctSessionOutputGigawords_Lookup(p)
	return
}

func AcctSessionOutputGigawords_Gets(p *radius.Packet) (values []AcctSessionOutputGigawords, err error) {
	var i uint32
	for _, attr := range _Gemtek_GetsVendor(p, 24) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcctSessionOutputGigawords(i))
	}
	return
}

func AcctSessionOutputGigawords_Lookup(p *radius.Packet) (value AcctSessionOutputGigawords, err error) {
	a, ok := _Gemtek_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcctSessionOutputGigawords(i)
	return
}

func AcctSessionOutputGigawords_Set(p *radius.Packet, value AcctSessionOutputGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gemtek_SetVendor(p, 24, a)
}

func AcctSessionOutputGigawords_Del(p *radius.Packet) {
	_Gemtek_DelVendor(p, 24)
}

type AcctSessionOctets uint32

var AcctSessionOctets_Strings = map[AcctSessionOctets]string{}

func (a AcctSessionOctets) String() string {
	if str, ok := AcctSessionOctets_Strings[a]; ok {
		return str
	}
	return "AcctSessionOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcctSessionOctets_Add(p *radius.Packet, value AcctSessionOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gemtek_AddVendor(p, 25, a)
}

func AcctSessionOctets_Get(p *radius.Packet) (value AcctSessionOctets) {
	value, _ = AcctSessionOctets_Lookup(p)
	return
}

func AcctSessionOctets_Gets(p *radius.Packet) (values []AcctSessionOctets, err error) {
	var i uint32
	for _, attr := range _Gemtek_GetsVendor(p, 25) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcctSessionOctets(i))
	}
	return
}

func AcctSessionOctets_Lookup(p *radius.Packet) (value AcctSessionOctets, err error) {
	a, ok := _Gemtek_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcctSessionOctets(i)
	return
}

func AcctSessionOctets_Set(p *radius.Packet, value AcctSessionOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gemtek_SetVendor(p, 25, a)
}

func AcctSessionOctets_Del(p *radius.Packet) {
	_Gemtek_DelVendor(p, 25)
}

type AcctSessionGigawords uint32

var AcctSessionGigawords_Strings = map[AcctSessionGigawords]string{}

func (a AcctSessionGigawords) String() string {
	if str, ok := AcctSessionGigawords_Strings[a]; ok {
		return str
	}
	return "AcctSessionGigawords(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcctSessionGigawords_Add(p *radius.Packet, value AcctSessionGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gemtek_AddVendor(p, 26, a)
}

func AcctSessionGigawords_Get(p *radius.Packet) (value AcctSessionGigawords) {
	value, _ = AcctSessionGigawords_Lookup(p)
	return
}

func AcctSessionGigawords_Gets(p *radius.Packet) (values []AcctSessionGigawords, err error) {
	var i uint32
	for _, attr := range _Gemtek_GetsVendor(p, 26) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcctSessionGigawords(i))
	}
	return
}

func AcctSessionGigawords_Lookup(p *radius.Packet) (value AcctSessionGigawords, err error) {
	a, ok := _Gemtek_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcctSessionGigawords(i)
	return
}

func AcctSessionGigawords_Set(p *radius.Packet, value AcctSessionGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Gemtek_SetVendor(p, 26, a)
}

func AcctSessionGigawords_Del(p *radius.Packet) {
	_Gemtek_DelVendor(p, 26)
}
