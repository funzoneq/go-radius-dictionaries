// Code generated by radius-dict-gen. DO NOT EDIT.

package altiga

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Altiga_VendorID = 3076
)

func _Altiga_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Altiga_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Altiga_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Altiga_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Altiga_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Altiga_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Altiga_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Altiga_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Altiga_AddVendor(p, typ, attr)
}

func _Altiga_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Altiga_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

func AltigaAccessHoursGU_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 1, a)
}

func AltigaAccessHoursGU_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 1, a)
}

func AltigaAccessHoursGU_Get(p *radius.Packet) (value []byte) {
	value, _ = AltigaAccessHoursGU_Lookup(p)
	return
}

func AltigaAccessHoursGU_GetString(p *radius.Packet) (value string) {
	value, _ = AltigaAccessHoursGU_LookupString(p)
	return
}

func AltigaAccessHoursGU_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Altiga_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaAccessHoursGU_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Altiga_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaAccessHoursGU_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Altiga_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AltigaAccessHoursGU_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Altiga_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AltigaAccessHoursGU_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 1, a)
}

func AltigaAccessHoursGU_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 1, a)
}

func AltigaAccessHoursGU_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 1)
}

type AltigaSimultaneousLoginsGU uint32

var AltigaSimultaneousLoginsGU_Strings = map[AltigaSimultaneousLoginsGU]string{}

func (a AltigaSimultaneousLoginsGU) String() string {
	if str, ok := AltigaSimultaneousLoginsGU_Strings[a]; ok {
		return str
	}
	return "AltigaSimultaneousLoginsGU(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaSimultaneousLoginsGU_Add(p *radius.Packet, value AltigaSimultaneousLoginsGU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 2, a)
}

func AltigaSimultaneousLoginsGU_Get(p *radius.Packet) (value AltigaSimultaneousLoginsGU) {
	value, _ = AltigaSimultaneousLoginsGU_Lookup(p)
	return
}

func AltigaSimultaneousLoginsGU_Gets(p *radius.Packet) (values []AltigaSimultaneousLoginsGU, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaSimultaneousLoginsGU(i))
	}
	return
}

func AltigaSimultaneousLoginsGU_Lookup(p *radius.Packet) (value AltigaSimultaneousLoginsGU, err error) {
	a, ok := _Altiga_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaSimultaneousLoginsGU(i)
	return
}

func AltigaSimultaneousLoginsGU_Set(p *radius.Packet, value AltigaSimultaneousLoginsGU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 2, a)
}

func AltigaSimultaneousLoginsGU_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 2)
}

type AltigaMinPasswordLengthG uint32

var AltigaMinPasswordLengthG_Strings = map[AltigaMinPasswordLengthG]string{}

func (a AltigaMinPasswordLengthG) String() string {
	if str, ok := AltigaMinPasswordLengthG_Strings[a]; ok {
		return str
	}
	return "AltigaMinPasswordLengthG(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaMinPasswordLengthG_Add(p *radius.Packet, value AltigaMinPasswordLengthG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 3, a)
}

func AltigaMinPasswordLengthG_Get(p *radius.Packet) (value AltigaMinPasswordLengthG) {
	value, _ = AltigaMinPasswordLengthG_Lookup(p)
	return
}

func AltigaMinPasswordLengthG_Gets(p *radius.Packet) (values []AltigaMinPasswordLengthG, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaMinPasswordLengthG(i))
	}
	return
}

func AltigaMinPasswordLengthG_Lookup(p *radius.Packet) (value AltigaMinPasswordLengthG, err error) {
	a, ok := _Altiga_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaMinPasswordLengthG(i)
	return
}

func AltigaMinPasswordLengthG_Set(p *radius.Packet, value AltigaMinPasswordLengthG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 3, a)
}

func AltigaMinPasswordLengthG_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 3)
}

type AltigaAllowAlphaOnlyPasswordsG uint32

const (
	AltigaAllowAlphaOnlyPasswordsG_Value_Disallow AltigaAllowAlphaOnlyPasswordsG = 0
	AltigaAllowAlphaOnlyPasswordsG_Value_Allow    AltigaAllowAlphaOnlyPasswordsG = 1
)

var AltigaAllowAlphaOnlyPasswordsG_Strings = map[AltigaAllowAlphaOnlyPasswordsG]string{
	AltigaAllowAlphaOnlyPasswordsG_Value_Disallow: "Disallow",
	AltigaAllowAlphaOnlyPasswordsG_Value_Allow:    "Allow",
}

func (a AltigaAllowAlphaOnlyPasswordsG) String() string {
	if str, ok := AltigaAllowAlphaOnlyPasswordsG_Strings[a]; ok {
		return str
	}
	return "AltigaAllowAlphaOnlyPasswordsG(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaAllowAlphaOnlyPasswordsG_Add(p *radius.Packet, value AltigaAllowAlphaOnlyPasswordsG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 4, a)
}

func AltigaAllowAlphaOnlyPasswordsG_Get(p *radius.Packet) (value AltigaAllowAlphaOnlyPasswordsG) {
	value, _ = AltigaAllowAlphaOnlyPasswordsG_Lookup(p)
	return
}

func AltigaAllowAlphaOnlyPasswordsG_Gets(p *radius.Packet) (values []AltigaAllowAlphaOnlyPasswordsG, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 4) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaAllowAlphaOnlyPasswordsG(i))
	}
	return
}

func AltigaAllowAlphaOnlyPasswordsG_Lookup(p *radius.Packet) (value AltigaAllowAlphaOnlyPasswordsG, err error) {
	a, ok := _Altiga_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaAllowAlphaOnlyPasswordsG(i)
	return
}

func AltigaAllowAlphaOnlyPasswordsG_Set(p *radius.Packet, value AltigaAllowAlphaOnlyPasswordsG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 4, a)
}

func AltigaAllowAlphaOnlyPasswordsG_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 4)
}

func AltigaPrimaryDNSG_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 5, a)
}

func AltigaPrimaryDNSG_Get(p *radius.Packet) (value net.IP) {
	value, _ = AltigaPrimaryDNSG_Lookup(p)
	return
}

func AltigaPrimaryDNSG_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Altiga_GetsVendor(p, 5) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaPrimaryDNSG_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Altiga_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AltigaPrimaryDNSG_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 5, a)
}

func AltigaPrimaryDNSG_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 5)
}

func AltigaSecondaryDNSG_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 6, a)
}

func AltigaSecondaryDNSG_Get(p *radius.Packet) (value net.IP) {
	value, _ = AltigaSecondaryDNSG_Lookup(p)
	return
}

func AltigaSecondaryDNSG_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Altiga_GetsVendor(p, 6) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaSecondaryDNSG_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Altiga_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AltigaSecondaryDNSG_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 6, a)
}

func AltigaSecondaryDNSG_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 6)
}

func AltigaPrimaryWINSG_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 7, a)
}

func AltigaPrimaryWINSG_Get(p *radius.Packet) (value net.IP) {
	value, _ = AltigaPrimaryWINSG_Lookup(p)
	return
}

func AltigaPrimaryWINSG_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Altiga_GetsVendor(p, 7) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaPrimaryWINSG_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Altiga_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AltigaPrimaryWINSG_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 7, a)
}

func AltigaPrimaryWINSG_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 7)
}

func AltigaSecondaryWINSG_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 8, a)
}

func AltigaSecondaryWINSG_Get(p *radius.Packet) (value net.IP) {
	value, _ = AltigaSecondaryWINSG_Lookup(p)
	return
}

func AltigaSecondaryWINSG_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Altiga_GetsVendor(p, 8) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaSecondaryWINSG_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Altiga_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AltigaSecondaryWINSG_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 8, a)
}

func AltigaSecondaryWINSG_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 8)
}

type AltigaSEPCardAssignmentGU uint32

const (
	AltigaSEPCardAssignmentGU_Value_SEP1   AltigaSEPCardAssignmentGU = 1
	AltigaSEPCardAssignmentGU_Value_SEP2   AltigaSEPCardAssignmentGU = 2
	AltigaSEPCardAssignmentGU_Value_SEP3   AltigaSEPCardAssignmentGU = 4
	AltigaSEPCardAssignmentGU_Value_SEP4   AltigaSEPCardAssignmentGU = 8
	AltigaSEPCardAssignmentGU_Value_AnySEP AltigaSEPCardAssignmentGU = 15
)

var AltigaSEPCardAssignmentGU_Strings = map[AltigaSEPCardAssignmentGU]string{
	AltigaSEPCardAssignmentGU_Value_SEP1:   "SEP1",
	AltigaSEPCardAssignmentGU_Value_SEP2:   "SEP2",
	AltigaSEPCardAssignmentGU_Value_SEP3:   "SEP3",
	AltigaSEPCardAssignmentGU_Value_SEP4:   "SEP4",
	AltigaSEPCardAssignmentGU_Value_AnySEP: "Any-SEP",
}

func (a AltigaSEPCardAssignmentGU) String() string {
	if str, ok := AltigaSEPCardAssignmentGU_Strings[a]; ok {
		return str
	}
	return "AltigaSEPCardAssignmentGU(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaSEPCardAssignmentGU_Add(p *radius.Packet, value AltigaSEPCardAssignmentGU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 9, a)
}

func AltigaSEPCardAssignmentGU_Get(p *radius.Packet) (value AltigaSEPCardAssignmentGU) {
	value, _ = AltigaSEPCardAssignmentGU_Lookup(p)
	return
}

func AltigaSEPCardAssignmentGU_Gets(p *radius.Packet) (values []AltigaSEPCardAssignmentGU, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 9) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaSEPCardAssignmentGU(i))
	}
	return
}

func AltigaSEPCardAssignmentGU_Lookup(p *radius.Packet) (value AltigaSEPCardAssignmentGU, err error) {
	a, ok := _Altiga_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaSEPCardAssignmentGU(i)
	return
}

func AltigaSEPCardAssignmentGU_Set(p *radius.Packet, value AltigaSEPCardAssignmentGU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 9, a)
}

func AltigaSEPCardAssignmentGU_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 9)
}

type AltigaPriorityOnSEPGU uint32

const (
	AltigaPriorityOnSEPGU_Value_High    AltigaPriorityOnSEPGU = 1
	AltigaPriorityOnSEPGU_Value_MedHigh AltigaPriorityOnSEPGU = 2
	AltigaPriorityOnSEPGU_Value_Medium  AltigaPriorityOnSEPGU = 3
	AltigaPriorityOnSEPGU_Value_MedLow  AltigaPriorityOnSEPGU = 4
	AltigaPriorityOnSEPGU_Value_Low     AltigaPriorityOnSEPGU = 5
)

var AltigaPriorityOnSEPGU_Strings = map[AltigaPriorityOnSEPGU]string{
	AltigaPriorityOnSEPGU_Value_High:    "High",
	AltigaPriorityOnSEPGU_Value_MedHigh: "Med-High",
	AltigaPriorityOnSEPGU_Value_Medium:  "Medium",
	AltigaPriorityOnSEPGU_Value_MedLow:  "Med-Low",
	AltigaPriorityOnSEPGU_Value_Low:     "Low",
}

func (a AltigaPriorityOnSEPGU) String() string {
	if str, ok := AltigaPriorityOnSEPGU_Strings[a]; ok {
		return str
	}
	return "AltigaPriorityOnSEPGU(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaPriorityOnSEPGU_Add(p *radius.Packet, value AltigaPriorityOnSEPGU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 10, a)
}

func AltigaPriorityOnSEPGU_Get(p *radius.Packet) (value AltigaPriorityOnSEPGU) {
	value, _ = AltigaPriorityOnSEPGU_Lookup(p)
	return
}

func AltigaPriorityOnSEPGU_Gets(p *radius.Packet) (values []AltigaPriorityOnSEPGU, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 10) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaPriorityOnSEPGU(i))
	}
	return
}

func AltigaPriorityOnSEPGU_Lookup(p *radius.Packet) (value AltigaPriorityOnSEPGU, err error) {
	a, ok := _Altiga_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaPriorityOnSEPGU(i)
	return
}

func AltigaPriorityOnSEPGU_Set(p *radius.Packet, value AltigaPriorityOnSEPGU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 10, a)
}

func AltigaPriorityOnSEPGU_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 10)
}

type AltigaTunnelingProtocolsGU uint32

const (
	AltigaTunnelingProtocolsGU_Value_PPTP         AltigaTunnelingProtocolsGU = 1
	AltigaTunnelingProtocolsGU_Value_L2TP         AltigaTunnelingProtocolsGU = 2
	AltigaTunnelingProtocolsGU_Value_IPSec        AltigaTunnelingProtocolsGU = 4
	AltigaTunnelingProtocolsGU_Value_PPTPAndIPSec AltigaTunnelingProtocolsGU = 5
	AltigaTunnelingProtocolsGU_Value_L2TPIPSec    AltigaTunnelingProtocolsGU = 8
	AltigaTunnelingProtocolsGU_Value_All          AltigaTunnelingProtocolsGU = 15
)

var AltigaTunnelingProtocolsGU_Strings = map[AltigaTunnelingProtocolsGU]string{
	AltigaTunnelingProtocolsGU_Value_PPTP:         "PPTP",
	AltigaTunnelingProtocolsGU_Value_L2TP:         "L2TP",
	AltigaTunnelingProtocolsGU_Value_IPSec:        "IPSec",
	AltigaTunnelingProtocolsGU_Value_PPTPAndIPSec: "PPTP-and-IPSec",
	AltigaTunnelingProtocolsGU_Value_L2TPIPSec:    "L2TP/IPSec",
	AltigaTunnelingProtocolsGU_Value_All:          "All",
}

func (a AltigaTunnelingProtocolsGU) String() string {
	if str, ok := AltigaTunnelingProtocolsGU_Strings[a]; ok {
		return str
	}
	return "AltigaTunnelingProtocolsGU(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaTunnelingProtocolsGU_Add(p *radius.Packet, value AltigaTunnelingProtocolsGU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 11, a)
}

func AltigaTunnelingProtocolsGU_Get(p *radius.Packet) (value AltigaTunnelingProtocolsGU) {
	value, _ = AltigaTunnelingProtocolsGU_Lookup(p)
	return
}

func AltigaTunnelingProtocolsGU_Gets(p *radius.Packet) (values []AltigaTunnelingProtocolsGU, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 11) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaTunnelingProtocolsGU(i))
	}
	return
}

func AltigaTunnelingProtocolsGU_Lookup(p *radius.Packet) (value AltigaTunnelingProtocolsGU, err error) {
	a, ok := _Altiga_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaTunnelingProtocolsGU(i)
	return
}

func AltigaTunnelingProtocolsGU_Set(p *radius.Packet, value AltigaTunnelingProtocolsGU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 11, a)
}

func AltigaTunnelingProtocolsGU_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 11)
}

func AltigaIPSecSecAssociationGU_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 12, a)
}

func AltigaIPSecSecAssociationGU_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 12, a)
}

func AltigaIPSecSecAssociationGU_Get(p *radius.Packet) (value []byte) {
	value, _ = AltigaIPSecSecAssociationGU_Lookup(p)
	return
}

func AltigaIPSecSecAssociationGU_GetString(p *radius.Packet) (value string) {
	value, _ = AltigaIPSecSecAssociationGU_LookupString(p)
	return
}

func AltigaIPSecSecAssociationGU_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Altiga_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaIPSecSecAssociationGU_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Altiga_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaIPSecSecAssociationGU_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Altiga_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AltigaIPSecSecAssociationGU_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Altiga_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AltigaIPSecSecAssociationGU_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 12, a)
}

func AltigaIPSecSecAssociationGU_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 12, a)
}

func AltigaIPSecSecAssociationGU_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 12)
}

type AltigaIPSecAuthenticationG uint32

const (
	AltigaIPSecAuthenticationG_Value_None     AltigaIPSecAuthenticationG = 0
	AltigaIPSecAuthenticationG_Value_RADIUS   AltigaIPSecAuthenticationG = 1
	AltigaIPSecAuthenticationG_Value_LDAP     AltigaIPSecAuthenticationG = 2
	AltigaIPSecAuthenticationG_Value_NTDomain AltigaIPSecAuthenticationG = 3
	AltigaIPSecAuthenticationG_Value_SDI      AltigaIPSecAuthenticationG = 4
	AltigaIPSecAuthenticationG_Value_Internal AltigaIPSecAuthenticationG = 5
)

var AltigaIPSecAuthenticationG_Strings = map[AltigaIPSecAuthenticationG]string{
	AltigaIPSecAuthenticationG_Value_None:     "None",
	AltigaIPSecAuthenticationG_Value_RADIUS:   "RADIUS",
	AltigaIPSecAuthenticationG_Value_LDAP:     "LDAP",
	AltigaIPSecAuthenticationG_Value_NTDomain: "NTDomain",
	AltigaIPSecAuthenticationG_Value_SDI:      "SDI",
	AltigaIPSecAuthenticationG_Value_Internal: "Internal",
}

func (a AltigaIPSecAuthenticationG) String() string {
	if str, ok := AltigaIPSecAuthenticationG_Strings[a]; ok {
		return str
	}
	return "AltigaIPSecAuthenticationG(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaIPSecAuthenticationG_Add(p *radius.Packet, value AltigaIPSecAuthenticationG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 13, a)
}

func AltigaIPSecAuthenticationG_Get(p *radius.Packet) (value AltigaIPSecAuthenticationG) {
	value, _ = AltigaIPSecAuthenticationG_Lookup(p)
	return
}

func AltigaIPSecAuthenticationG_Gets(p *radius.Packet) (values []AltigaIPSecAuthenticationG, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 13) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaIPSecAuthenticationG(i))
	}
	return
}

func AltigaIPSecAuthenticationG_Lookup(p *radius.Packet) (value AltigaIPSecAuthenticationG, err error) {
	a, ok := _Altiga_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaIPSecAuthenticationG(i)
	return
}

func AltigaIPSecAuthenticationG_Set(p *radius.Packet, value AltigaIPSecAuthenticationG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 13, a)
}

func AltigaIPSecAuthenticationG_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 13)
}

func AltigaIPSecBannerG_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 15, a)
}

func AltigaIPSecBannerG_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 15, a)
}

func AltigaIPSecBannerG_Get(p *radius.Packet) (value []byte) {
	value, _ = AltigaIPSecBannerG_Lookup(p)
	return
}

func AltigaIPSecBannerG_GetString(p *radius.Packet) (value string) {
	value, _ = AltigaIPSecBannerG_LookupString(p)
	return
}

func AltigaIPSecBannerG_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Altiga_GetsVendor(p, 15) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaIPSecBannerG_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Altiga_GetsVendor(p, 15) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaIPSecBannerG_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Altiga_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AltigaIPSecBannerG_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Altiga_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AltigaIPSecBannerG_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 15, a)
}

func AltigaIPSecBannerG_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 15, a)
}

func AltigaIPSecBannerG_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 15)
}

type AltigaIPSecAllowPasswdStoreGU uint32

const (
	AltigaIPSecAllowPasswdStoreGU_Value_Disallow AltigaIPSecAllowPasswdStoreGU = 0
	AltigaIPSecAllowPasswdStoreGU_Value_Allow    AltigaIPSecAllowPasswdStoreGU = 1
)

var AltigaIPSecAllowPasswdStoreGU_Strings = map[AltigaIPSecAllowPasswdStoreGU]string{
	AltigaIPSecAllowPasswdStoreGU_Value_Disallow: "Disallow",
	AltigaIPSecAllowPasswdStoreGU_Value_Allow:    "Allow",
}

func (a AltigaIPSecAllowPasswdStoreGU) String() string {
	if str, ok := AltigaIPSecAllowPasswdStoreGU_Strings[a]; ok {
		return str
	}
	return "AltigaIPSecAllowPasswdStoreGU(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaIPSecAllowPasswdStoreGU_Add(p *radius.Packet, value AltigaIPSecAllowPasswdStoreGU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 16, a)
}

func AltigaIPSecAllowPasswdStoreGU_Get(p *radius.Packet) (value AltigaIPSecAllowPasswdStoreGU) {
	value, _ = AltigaIPSecAllowPasswdStoreGU_Lookup(p)
	return
}

func AltigaIPSecAllowPasswdStoreGU_Gets(p *radius.Packet) (values []AltigaIPSecAllowPasswdStoreGU, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 16) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaIPSecAllowPasswdStoreGU(i))
	}
	return
}

func AltigaIPSecAllowPasswdStoreGU_Lookup(p *radius.Packet) (value AltigaIPSecAllowPasswdStoreGU, err error) {
	a, ok := _Altiga_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaIPSecAllowPasswdStoreGU(i)
	return
}

func AltigaIPSecAllowPasswdStoreGU_Set(p *radius.Packet, value AltigaIPSecAllowPasswdStoreGU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 16, a)
}

func AltigaIPSecAllowPasswdStoreGU_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 16)
}

type AltigaUseClientAddressGU uint32

const (
	AltigaUseClientAddressGU_Value_Disallow AltigaUseClientAddressGU = 0
	AltigaUseClientAddressGU_Value_Allow    AltigaUseClientAddressGU = 1
)

var AltigaUseClientAddressGU_Strings = map[AltigaUseClientAddressGU]string{
	AltigaUseClientAddressGU_Value_Disallow: "Disallow",
	AltigaUseClientAddressGU_Value_Allow:    "Allow",
}

func (a AltigaUseClientAddressGU) String() string {
	if str, ok := AltigaUseClientAddressGU_Strings[a]; ok {
		return str
	}
	return "AltigaUseClientAddressGU(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaUseClientAddressGU_Add(p *radius.Packet, value AltigaUseClientAddressGU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 17, a)
}

func AltigaUseClientAddressGU_Get(p *radius.Packet) (value AltigaUseClientAddressGU) {
	value, _ = AltigaUseClientAddressGU_Lookup(p)
	return
}

func AltigaUseClientAddressGU_Gets(p *radius.Packet) (values []AltigaUseClientAddressGU, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 17) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaUseClientAddressGU(i))
	}
	return
}

func AltigaUseClientAddressGU_Lookup(p *radius.Packet) (value AltigaUseClientAddressGU, err error) {
	a, ok := _Altiga_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaUseClientAddressGU(i)
	return
}

func AltigaUseClientAddressGU_Set(p *radius.Packet, value AltigaUseClientAddressGU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 17, a)
}

func AltigaUseClientAddressGU_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 17)
}

type AltigaPPTPMinAuthenticationGU uint32

const (
	AltigaPPTPMinAuthenticationGU_Value_PAP      AltigaPPTPMinAuthenticationGU = 1
	AltigaPPTPMinAuthenticationGU_Value_CHAP     AltigaPPTPMinAuthenticationGU = 2
	AltigaPPTPMinAuthenticationGU_Value_EAPMD5   AltigaPPTPMinAuthenticationGU = 4
	AltigaPPTPMinAuthenticationGU_Value_EAPGTC   AltigaPPTPMinAuthenticationGU = 8
	AltigaPPTPMinAuthenticationGU_Value_EAPTLS   AltigaPPTPMinAuthenticationGU = 16
	AltigaPPTPMinAuthenticationGU_Value_MSCHAPv1 AltigaPPTPMinAuthenticationGU = 32
	AltigaPPTPMinAuthenticationGU_Value_MSCHAPv2 AltigaPPTPMinAuthenticationGU = 64
	AltigaPPTPMinAuthenticationGU_Value_Default  AltigaPPTPMinAuthenticationGU = 102
)

var AltigaPPTPMinAuthenticationGU_Strings = map[AltigaPPTPMinAuthenticationGU]string{
	AltigaPPTPMinAuthenticationGU_Value_PAP:      "PAP",
	AltigaPPTPMinAuthenticationGU_Value_CHAP:     "CHAP",
	AltigaPPTPMinAuthenticationGU_Value_EAPMD5:   "EAP-MD5",
	AltigaPPTPMinAuthenticationGU_Value_EAPGTC:   "EAP-GTC",
	AltigaPPTPMinAuthenticationGU_Value_EAPTLS:   "EAP-TLS",
	AltigaPPTPMinAuthenticationGU_Value_MSCHAPv1: "MSCHAPv1",
	AltigaPPTPMinAuthenticationGU_Value_MSCHAPv2: "MSCHAPv2",
	AltigaPPTPMinAuthenticationGU_Value_Default:  "Default",
}

func (a AltigaPPTPMinAuthenticationGU) String() string {
	if str, ok := AltigaPPTPMinAuthenticationGU_Strings[a]; ok {
		return str
	}
	return "AltigaPPTPMinAuthenticationGU(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaPPTPMinAuthenticationGU_Add(p *radius.Packet, value AltigaPPTPMinAuthenticationGU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 18, a)
}

func AltigaPPTPMinAuthenticationGU_Get(p *radius.Packet) (value AltigaPPTPMinAuthenticationGU) {
	value, _ = AltigaPPTPMinAuthenticationGU_Lookup(p)
	return
}

func AltigaPPTPMinAuthenticationGU_Gets(p *radius.Packet) (values []AltigaPPTPMinAuthenticationGU, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 18) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaPPTPMinAuthenticationGU(i))
	}
	return
}

func AltigaPPTPMinAuthenticationGU_Lookup(p *radius.Packet) (value AltigaPPTPMinAuthenticationGU, err error) {
	a, ok := _Altiga_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaPPTPMinAuthenticationGU(i)
	return
}

func AltigaPPTPMinAuthenticationGU_Set(p *radius.Packet, value AltigaPPTPMinAuthenticationGU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 18, a)
}

func AltigaPPTPMinAuthenticationGU_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 18)
}

type AltigaL2TPMinAuthenticationGU uint32

const (
	AltigaL2TPMinAuthenticationGU_Value_PAP      AltigaL2TPMinAuthenticationGU = 1
	AltigaL2TPMinAuthenticationGU_Value_CHAP     AltigaL2TPMinAuthenticationGU = 2
	AltigaL2TPMinAuthenticationGU_Value_EAPMD5   AltigaL2TPMinAuthenticationGU = 4
	AltigaL2TPMinAuthenticationGU_Value_EAPGTC   AltigaL2TPMinAuthenticationGU = 8
	AltigaL2TPMinAuthenticationGU_Value_EAPTLS   AltigaL2TPMinAuthenticationGU = 16
	AltigaL2TPMinAuthenticationGU_Value_MSCHAPv1 AltigaL2TPMinAuthenticationGU = 32
	AltigaL2TPMinAuthenticationGU_Value_MSCHAPv2 AltigaL2TPMinAuthenticationGU = 64
	AltigaL2TPMinAuthenticationGU_Value_Default  AltigaL2TPMinAuthenticationGU = 102
)

var AltigaL2TPMinAuthenticationGU_Strings = map[AltigaL2TPMinAuthenticationGU]string{
	AltigaL2TPMinAuthenticationGU_Value_PAP:      "PAP",
	AltigaL2TPMinAuthenticationGU_Value_CHAP:     "CHAP",
	AltigaL2TPMinAuthenticationGU_Value_EAPMD5:   "EAP-MD5",
	AltigaL2TPMinAuthenticationGU_Value_EAPGTC:   "EAP-GTC",
	AltigaL2TPMinAuthenticationGU_Value_EAPTLS:   "EAP-TLS",
	AltigaL2TPMinAuthenticationGU_Value_MSCHAPv1: "MSCHAPv1",
	AltigaL2TPMinAuthenticationGU_Value_MSCHAPv2: "MSCHAPv2",
	AltigaL2TPMinAuthenticationGU_Value_Default:  "Default",
}

func (a AltigaL2TPMinAuthenticationGU) String() string {
	if str, ok := AltigaL2TPMinAuthenticationGU_Strings[a]; ok {
		return str
	}
	return "AltigaL2TPMinAuthenticationGU(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaL2TPMinAuthenticationGU_Add(p *radius.Packet, value AltigaL2TPMinAuthenticationGU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 19, a)
}

func AltigaL2TPMinAuthenticationGU_Get(p *radius.Packet) (value AltigaL2TPMinAuthenticationGU) {
	value, _ = AltigaL2TPMinAuthenticationGU_Lookup(p)
	return
}

func AltigaL2TPMinAuthenticationGU_Gets(p *radius.Packet) (values []AltigaL2TPMinAuthenticationGU, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 19) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaL2TPMinAuthenticationGU(i))
	}
	return
}

func AltigaL2TPMinAuthenticationGU_Lookup(p *radius.Packet) (value AltigaL2TPMinAuthenticationGU, err error) {
	a, ok := _Altiga_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaL2TPMinAuthenticationGU(i)
	return
}

func AltigaL2TPMinAuthenticationGU_Set(p *radius.Packet, value AltigaL2TPMinAuthenticationGU) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 19, a)
}

func AltigaL2TPMinAuthenticationGU_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 19)
}

type AltigaPPTPEncryptionG uint32

const (
	AltigaPPTPEncryptionG_Value_PPTP40bit              AltigaPPTPEncryptionG = 2
	AltigaPPTPEncryptionG_Value_PPTP40EncryptionReq    AltigaPPTPEncryptionG = 3
	AltigaPPTPEncryptionG_Value_PPTP128                AltigaPPTPEncryptionG = 4
	AltigaPPTPEncryptionG_Value_PPTP128EncryptionReq   AltigaPPTPEncryptionG = 5
	AltigaPPTPEncryptionG_Value_PPTP40Or128            AltigaPPTPEncryptionG = 6
	AltigaPPTPEncryptionG_Value_PPTP40Or128EncryReq    AltigaPPTPEncryptionG = 7
	AltigaPPTPEncryptionG_Value_PPTP40StatelessReq     AltigaPPTPEncryptionG = 10
	AltigaPPTPEncryptionG_Value_PPTP40EncStatelessReq  AltigaPPTPEncryptionG = 11
	AltigaPPTPEncryptionG_Value_PPTP128StatelessReq    AltigaPPTPEncryptionG = 12
	AltigaPPTPEncryptionG_Value_PPTP128EncStatelessReq AltigaPPTPEncryptionG = 13
	AltigaPPTPEncryptionG_Value_PPTP40128StatelessReq  AltigaPPTPEncryptionG = 14
	AltigaPPTPEncryptionG_Value_PPTP40128EncStatlsReq  AltigaPPTPEncryptionG = 15
)

var AltigaPPTPEncryptionG_Strings = map[AltigaPPTPEncryptionG]string{
	AltigaPPTPEncryptionG_Value_PPTP40bit:              "PPTP-40bit",
	AltigaPPTPEncryptionG_Value_PPTP40EncryptionReq:    "PPTP-40-Encryption-Req",
	AltigaPPTPEncryptionG_Value_PPTP128:                "PPTP-128",
	AltigaPPTPEncryptionG_Value_PPTP128EncryptionReq:   "PPTP-128-Encryption-Req",
	AltigaPPTPEncryptionG_Value_PPTP40Or128:            "PPTP-40-or-128",
	AltigaPPTPEncryptionG_Value_PPTP40Or128EncryReq:    "PPTP-40-or-128-Encry-Req",
	AltigaPPTPEncryptionG_Value_PPTP40StatelessReq:     "PPTP-40-Stateless-Req",
	AltigaPPTPEncryptionG_Value_PPTP40EncStatelessReq:  "PPTP-40-Enc/Stateless-Req",
	AltigaPPTPEncryptionG_Value_PPTP128StatelessReq:    "PPTP-128-Stateless-Req",
	AltigaPPTPEncryptionG_Value_PPTP128EncStatelessReq: "PPTP-128-Enc/Stateless-Req",
	AltigaPPTPEncryptionG_Value_PPTP40128StatelessReq:  "PPTP-40/128-Stateless-Req",
	AltigaPPTPEncryptionG_Value_PPTP40128EncStatlsReq:  "PPTP-40/128-Enc/Statls-Req",
}

func (a AltigaPPTPEncryptionG) String() string {
	if str, ok := AltigaPPTPEncryptionG_Strings[a]; ok {
		return str
	}
	return "AltigaPPTPEncryptionG(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaPPTPEncryptionG_Add(p *radius.Packet, value AltigaPPTPEncryptionG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 20, a)
}

func AltigaPPTPEncryptionG_Get(p *radius.Packet) (value AltigaPPTPEncryptionG) {
	value, _ = AltigaPPTPEncryptionG_Lookup(p)
	return
}

func AltigaPPTPEncryptionG_Gets(p *radius.Packet) (values []AltigaPPTPEncryptionG, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 20) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaPPTPEncryptionG(i))
	}
	return
}

func AltigaPPTPEncryptionG_Lookup(p *radius.Packet) (value AltigaPPTPEncryptionG, err error) {
	a, ok := _Altiga_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaPPTPEncryptionG(i)
	return
}

func AltigaPPTPEncryptionG_Set(p *radius.Packet, value AltigaPPTPEncryptionG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 20, a)
}

func AltigaPPTPEncryptionG_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 20)
}

type AltigaL2TPEncryptionG uint32

const (
	AltigaL2TPEncryptionG_Value_L2TP40bit              AltigaL2TPEncryptionG = 2
	AltigaL2TPEncryptionG_Value_L2TP40EncryptionReq    AltigaL2TPEncryptionG = 3
	AltigaL2TPEncryptionG_Value_L2TP128                AltigaL2TPEncryptionG = 4
	AltigaL2TPEncryptionG_Value_L2TP128EncryptionReq   AltigaL2TPEncryptionG = 5
	AltigaL2TPEncryptionG_Value_L2TP40Or128            AltigaL2TPEncryptionG = 6
	AltigaL2TPEncryptionG_Value_L2TP40Or128EncryReq    AltigaL2TPEncryptionG = 7
	AltigaL2TPEncryptionG_Value_L2TP40StatelessReq     AltigaL2TPEncryptionG = 10
	AltigaL2TPEncryptionG_Value_L2TP40EncStatelessReq  AltigaL2TPEncryptionG = 11
	AltigaL2TPEncryptionG_Value_L2TP128StatelessReq    AltigaL2TPEncryptionG = 12
	AltigaL2TPEncryptionG_Value_L2TP128EncStatelessReq AltigaL2TPEncryptionG = 13
	AltigaL2TPEncryptionG_Value_L2TP40128StatelessReq  AltigaL2TPEncryptionG = 14
	AltigaL2TPEncryptionG_Value_L2TP40128EncStatlsReq  AltigaL2TPEncryptionG = 15
)

var AltigaL2TPEncryptionG_Strings = map[AltigaL2TPEncryptionG]string{
	AltigaL2TPEncryptionG_Value_L2TP40bit:              "L2TP-40bit",
	AltigaL2TPEncryptionG_Value_L2TP40EncryptionReq:    "L2TP-40-Encryption-Req",
	AltigaL2TPEncryptionG_Value_L2TP128:                "L2TP-128",
	AltigaL2TPEncryptionG_Value_L2TP128EncryptionReq:   "L2TP-128-Encryption-Req",
	AltigaL2TPEncryptionG_Value_L2TP40Or128:            "L2TP-40-or-128",
	AltigaL2TPEncryptionG_Value_L2TP40Or128EncryReq:    "L2TP-40-or-128-Encry-Req",
	AltigaL2TPEncryptionG_Value_L2TP40StatelessReq:     "L2TP-40-Stateless-Req",
	AltigaL2TPEncryptionG_Value_L2TP40EncStatelessReq:  "L2TP-40-Enc/Stateless-Req",
	AltigaL2TPEncryptionG_Value_L2TP128StatelessReq:    "L2TP-128-Stateless-Req",
	AltigaL2TPEncryptionG_Value_L2TP128EncStatelessReq: "L2TP-128-Enc/Stateless-Req",
	AltigaL2TPEncryptionG_Value_L2TP40128StatelessReq:  "L2TP-40/128-Stateless-Req",
	AltigaL2TPEncryptionG_Value_L2TP40128EncStatlsReq:  "L2TP-40/128-Enc/Statls-Req",
}

func (a AltigaL2TPEncryptionG) String() string {
	if str, ok := AltigaL2TPEncryptionG_Strings[a]; ok {
		return str
	}
	return "AltigaL2TPEncryptionG(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaL2TPEncryptionG_Add(p *radius.Packet, value AltigaL2TPEncryptionG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 21, a)
}

func AltigaL2TPEncryptionG_Get(p *radius.Packet) (value AltigaL2TPEncryptionG) {
	value, _ = AltigaL2TPEncryptionG_Lookup(p)
	return
}

func AltigaL2TPEncryptionG_Gets(p *radius.Packet) (values []AltigaL2TPEncryptionG, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 21) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaL2TPEncryptionG(i))
	}
	return
}

func AltigaL2TPEncryptionG_Lookup(p *radius.Packet) (value AltigaL2TPEncryptionG, err error) {
	a, ok := _Altiga_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaL2TPEncryptionG(i)
	return
}

func AltigaL2TPEncryptionG_Set(p *radius.Packet, value AltigaL2TPEncryptionG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 21, a)
}

func AltigaL2TPEncryptionG_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 21)
}

type AltigaArgumentAuthenticationServerType uint32

const (
	AltigaArgumentAuthenticationServerType_Value_RADIUS   AltigaArgumentAuthenticationServerType = 1
	AltigaArgumentAuthenticationServerType_Value_LDAP     AltigaArgumentAuthenticationServerType = 2
	AltigaArgumentAuthenticationServerType_Value_NT       AltigaArgumentAuthenticationServerType = 3
	AltigaArgumentAuthenticationServerType_Value_SDI      AltigaArgumentAuthenticationServerType = 4
	AltigaArgumentAuthenticationServerType_Value_Internal AltigaArgumentAuthenticationServerType = 5
)

var AltigaArgumentAuthenticationServerType_Strings = map[AltigaArgumentAuthenticationServerType]string{
	AltigaArgumentAuthenticationServerType_Value_RADIUS:   "RADIUS",
	AltigaArgumentAuthenticationServerType_Value_LDAP:     "LDAP",
	AltigaArgumentAuthenticationServerType_Value_NT:       "NT",
	AltigaArgumentAuthenticationServerType_Value_SDI:      "SDI",
	AltigaArgumentAuthenticationServerType_Value_Internal: "Internal",
}

func (a AltigaArgumentAuthenticationServerType) String() string {
	if str, ok := AltigaArgumentAuthenticationServerType_Strings[a]; ok {
		return str
	}
	return "AltigaArgumentAuthenticationServerType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaArgumentAuthenticationServerType_Add(p *radius.Packet, value AltigaArgumentAuthenticationServerType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 22, a)
}

func AltigaArgumentAuthenticationServerType_Get(p *radius.Packet) (value AltigaArgumentAuthenticationServerType) {
	value, _ = AltigaArgumentAuthenticationServerType_Lookup(p)
	return
}

func AltigaArgumentAuthenticationServerType_Gets(p *radius.Packet) (values []AltigaArgumentAuthenticationServerType, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 22) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaArgumentAuthenticationServerType(i))
	}
	return
}

func AltigaArgumentAuthenticationServerType_Lookup(p *radius.Packet) (value AltigaArgumentAuthenticationServerType, err error) {
	a, ok := _Altiga_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaArgumentAuthenticationServerType(i)
	return
}

func AltigaArgumentAuthenticationServerType_Set(p *radius.Packet, value AltigaArgumentAuthenticationServerType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 22, a)
}

func AltigaArgumentAuthenticationServerType_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 22)
}

type AltigaIPSecL2LKeepalivesG uint32

const (
	AltigaIPSecL2LKeepalivesG_Value_OFF AltigaIPSecL2LKeepalivesG = 0
	AltigaIPSecL2LKeepalivesG_Value_ON  AltigaIPSecL2LKeepalivesG = 1
)

var AltigaIPSecL2LKeepalivesG_Strings = map[AltigaIPSecL2LKeepalivesG]string{
	AltigaIPSecL2LKeepalivesG_Value_OFF: "OFF",
	AltigaIPSecL2LKeepalivesG_Value_ON:  "ON",
}

func (a AltigaIPSecL2LKeepalivesG) String() string {
	if str, ok := AltigaIPSecL2LKeepalivesG_Strings[a]; ok {
		return str
	}
	return "AltigaIPSecL2LKeepalivesG(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaIPSecL2LKeepalivesG_Add(p *radius.Packet, value AltigaIPSecL2LKeepalivesG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 25, a)
}

func AltigaIPSecL2LKeepalivesG_Get(p *radius.Packet) (value AltigaIPSecL2LKeepalivesG) {
	value, _ = AltigaIPSecL2LKeepalivesG_Lookup(p)
	return
}

func AltigaIPSecL2LKeepalivesG_Gets(p *radius.Packet) (values []AltigaIPSecL2LKeepalivesG, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 25) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaIPSecL2LKeepalivesG(i))
	}
	return
}

func AltigaIPSecL2LKeepalivesG_Lookup(p *radius.Packet) (value AltigaIPSecL2LKeepalivesG, err error) {
	a, ok := _Altiga_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaIPSecL2LKeepalivesG(i)
	return
}

func AltigaIPSecL2LKeepalivesG_Set(p *radius.Packet, value AltigaIPSecL2LKeepalivesG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 25, a)
}

func AltigaIPSecL2LKeepalivesG_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 25)
}

type AltigaArgumentIPSecGroupName uint32

var AltigaArgumentIPSecGroupName_Strings = map[AltigaArgumentIPSecGroupName]string{}

func (a AltigaArgumentIPSecGroupName) String() string {
	if str, ok := AltigaArgumentIPSecGroupName_Strings[a]; ok {
		return str
	}
	return "AltigaArgumentIPSecGroupName(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaArgumentIPSecGroupName_Add(p *radius.Packet, value AltigaArgumentIPSecGroupName) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 26, a)
}

func AltigaArgumentIPSecGroupName_Get(p *radius.Packet) (value AltigaArgumentIPSecGroupName) {
	value, _ = AltigaArgumentIPSecGroupName_Lookup(p)
	return
}

func AltigaArgumentIPSecGroupName_Gets(p *radius.Packet) (values []AltigaArgumentIPSecGroupName, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 26) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaArgumentIPSecGroupName(i))
	}
	return
}

func AltigaArgumentIPSecGroupName_Lookup(p *radius.Packet) (value AltigaArgumentIPSecGroupName, err error) {
	a, ok := _Altiga_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaArgumentIPSecGroupName(i)
	return
}

func AltigaArgumentIPSecGroupName_Set(p *radius.Packet, value AltigaArgumentIPSecGroupName) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 26, a)
}

func AltigaArgumentIPSecGroupName_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 26)
}

func AltigaIPSecSplitTunnelListG_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 27, a)
}

func AltigaIPSecSplitTunnelListG_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 27, a)
}

func AltigaIPSecSplitTunnelListG_Get(p *radius.Packet) (value []byte) {
	value, _ = AltigaIPSecSplitTunnelListG_Lookup(p)
	return
}

func AltigaIPSecSplitTunnelListG_GetString(p *radius.Packet) (value string) {
	value, _ = AltigaIPSecSplitTunnelListG_LookupString(p)
	return
}

func AltigaIPSecSplitTunnelListG_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Altiga_GetsVendor(p, 27) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaIPSecSplitTunnelListG_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Altiga_GetsVendor(p, 27) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaIPSecSplitTunnelListG_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Altiga_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AltigaIPSecSplitTunnelListG_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Altiga_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AltigaIPSecSplitTunnelListG_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 27, a)
}

func AltigaIPSecSplitTunnelListG_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 27, a)
}

func AltigaIPSecSplitTunnelListG_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 27)
}

func AltigaIPSecDefaultDomainG_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 28, a)
}

func AltigaIPSecDefaultDomainG_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 28, a)
}

func AltigaIPSecDefaultDomainG_Get(p *radius.Packet) (value []byte) {
	value, _ = AltigaIPSecDefaultDomainG_Lookup(p)
	return
}

func AltigaIPSecDefaultDomainG_GetString(p *radius.Packet) (value string) {
	value, _ = AltigaIPSecDefaultDomainG_LookupString(p)
	return
}

func AltigaIPSecDefaultDomainG_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Altiga_GetsVendor(p, 28) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaIPSecDefaultDomainG_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Altiga_GetsVendor(p, 28) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaIPSecDefaultDomainG_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Altiga_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AltigaIPSecDefaultDomainG_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Altiga_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AltigaIPSecDefaultDomainG_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 28, a)
}

func AltigaIPSecDefaultDomainG_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 28, a)
}

func AltigaIPSecDefaultDomainG_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 28)
}

func AltigaIPSecSecondaryDomainsG_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 29, a)
}

func AltigaIPSecSecondaryDomainsG_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 29, a)
}

func AltigaIPSecSecondaryDomainsG_Get(p *radius.Packet) (value []byte) {
	value, _ = AltigaIPSecSecondaryDomainsG_Lookup(p)
	return
}

func AltigaIPSecSecondaryDomainsG_GetString(p *radius.Packet) (value string) {
	value, _ = AltigaIPSecSecondaryDomainsG_LookupString(p)
	return
}

func AltigaIPSecSecondaryDomainsG_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Altiga_GetsVendor(p, 29) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaIPSecSecondaryDomainsG_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Altiga_GetsVendor(p, 29) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaIPSecSecondaryDomainsG_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Altiga_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AltigaIPSecSecondaryDomainsG_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Altiga_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AltigaIPSecSecondaryDomainsG_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 29, a)
}

func AltigaIPSecSecondaryDomainsG_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 29, a)
}

func AltigaIPSecSecondaryDomainsG_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 29)
}

type AltigaIPSecTunnelTypeG uint32

const (
	AltigaIPSecTunnelTypeG_Value_LANToLAN     AltigaIPSecTunnelTypeG = 1
	AltigaIPSecTunnelTypeG_Value_RemoteAccess AltigaIPSecTunnelTypeG = 2
)

var AltigaIPSecTunnelTypeG_Strings = map[AltigaIPSecTunnelTypeG]string{
	AltigaIPSecTunnelTypeG_Value_LANToLAN:     "LAN-to-LAN",
	AltigaIPSecTunnelTypeG_Value_RemoteAccess: "Remote-Access",
}

func (a AltigaIPSecTunnelTypeG) String() string {
	if str, ok := AltigaIPSecTunnelTypeG_Strings[a]; ok {
		return str
	}
	return "AltigaIPSecTunnelTypeG(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaIPSecTunnelTypeG_Add(p *radius.Packet, value AltigaIPSecTunnelTypeG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 30, a)
}

func AltigaIPSecTunnelTypeG_Get(p *radius.Packet) (value AltigaIPSecTunnelTypeG) {
	value, _ = AltigaIPSecTunnelTypeG_Lookup(p)
	return
}

func AltigaIPSecTunnelTypeG_Gets(p *radius.Packet) (values []AltigaIPSecTunnelTypeG, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 30) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaIPSecTunnelTypeG(i))
	}
	return
}

func AltigaIPSecTunnelTypeG_Lookup(p *radius.Packet) (value AltigaIPSecTunnelTypeG, err error) {
	a, ok := _Altiga_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaIPSecTunnelTypeG(i)
	return
}

func AltigaIPSecTunnelTypeG_Set(p *radius.Packet, value AltigaIPSecTunnelTypeG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 30, a)
}

func AltigaIPSecTunnelTypeG_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 30)
}

type AltigaIPSecModeConfigG uint32

const (
	AltigaIPSecModeConfigG_Value_OFF AltigaIPSecModeConfigG = 0
	AltigaIPSecModeConfigG_Value_ON  AltigaIPSecModeConfigG = 1
)

var AltigaIPSecModeConfigG_Strings = map[AltigaIPSecModeConfigG]string{
	AltigaIPSecModeConfigG_Value_OFF: "OFF",
	AltigaIPSecModeConfigG_Value_ON:  "ON",
}

func (a AltigaIPSecModeConfigG) String() string {
	if str, ok := AltigaIPSecModeConfigG_Strings[a]; ok {
		return str
	}
	return "AltigaIPSecModeConfigG(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaIPSecModeConfigG_Add(p *radius.Packet, value AltigaIPSecModeConfigG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 31, a)
}

func AltigaIPSecModeConfigG_Get(p *radius.Packet) (value AltigaIPSecModeConfigG) {
	value, _ = AltigaIPSecModeConfigG_Lookup(p)
	return
}

func AltigaIPSecModeConfigG_Gets(p *radius.Packet) (values []AltigaIPSecModeConfigG, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 31) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaIPSecModeConfigG(i))
	}
	return
}

func AltigaIPSecModeConfigG_Lookup(p *radius.Packet) (value AltigaIPSecModeConfigG, err error) {
	a, ok := _Altiga_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaIPSecModeConfigG(i)
	return
}

func AltigaIPSecModeConfigG_Set(p *radius.Packet, value AltigaIPSecModeConfigG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 31, a)
}

func AltigaIPSecModeConfigG_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 31)
}

type AltigaArgumentAuthenticationServerPriority uint32

var AltigaArgumentAuthenticationServerPriority_Strings = map[AltigaArgumentAuthenticationServerPriority]string{}

func (a AltigaArgumentAuthenticationServerPriority) String() string {
	if str, ok := AltigaArgumentAuthenticationServerPriority_Strings[a]; ok {
		return str
	}
	return "AltigaArgumentAuthenticationServerPriority(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaArgumentAuthenticationServerPriority_Add(p *radius.Packet, value AltigaArgumentAuthenticationServerPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 32, a)
}

func AltigaArgumentAuthenticationServerPriority_Get(p *radius.Packet) (value AltigaArgumentAuthenticationServerPriority) {
	value, _ = AltigaArgumentAuthenticationServerPriority_Lookup(p)
	return
}

func AltigaArgumentAuthenticationServerPriority_Gets(p *radius.Packet) (values []AltigaArgumentAuthenticationServerPriority, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 32) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaArgumentAuthenticationServerPriority(i))
	}
	return
}

func AltigaArgumentAuthenticationServerPriority_Lookup(p *radius.Packet) (value AltigaArgumentAuthenticationServerPriority, err error) {
	a, ok := _Altiga_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaArgumentAuthenticationServerPriority(i)
	return
}

func AltigaArgumentAuthenticationServerPriority_Set(p *radius.Packet, value AltigaArgumentAuthenticationServerPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 32, a)
}

func AltigaArgumentAuthenticationServerPriority_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 32)
}

type AltigaIPSecUserGroupLockG uint32

const (
	AltigaIPSecUserGroupLockG_Value_OFF AltigaIPSecUserGroupLockG = 0
	AltigaIPSecUserGroupLockG_Value_ON  AltigaIPSecUserGroupLockG = 1
)

var AltigaIPSecUserGroupLockG_Strings = map[AltigaIPSecUserGroupLockG]string{
	AltigaIPSecUserGroupLockG_Value_OFF: "OFF",
	AltigaIPSecUserGroupLockG_Value_ON:  "ON",
}

func (a AltigaIPSecUserGroupLockG) String() string {
	if str, ok := AltigaIPSecUserGroupLockG_Strings[a]; ok {
		return str
	}
	return "AltigaIPSecUserGroupLockG(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaIPSecUserGroupLockG_Add(p *radius.Packet, value AltigaIPSecUserGroupLockG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 33, a)
}

func AltigaIPSecUserGroupLockG_Get(p *radius.Packet) (value AltigaIPSecUserGroupLockG) {
	value, _ = AltigaIPSecUserGroupLockG_Lookup(p)
	return
}

func AltigaIPSecUserGroupLockG_Gets(p *radius.Packet) (values []AltigaIPSecUserGroupLockG, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 33) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaIPSecUserGroupLockG(i))
	}
	return
}

func AltigaIPSecUserGroupLockG_Lookup(p *radius.Packet) (value AltigaIPSecUserGroupLockG, err error) {
	a, ok := _Altiga_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaIPSecUserGroupLockG(i)
	return
}

func AltigaIPSecUserGroupLockG_Set(p *radius.Packet, value AltigaIPSecUserGroupLockG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 33, a)
}

func AltigaIPSecUserGroupLockG_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 33)
}

type AltigaIPSecOverNATG uint32

const (
	AltigaIPSecOverNATG_Value_OFF AltigaIPSecOverNATG = 0
	AltigaIPSecOverNATG_Value_ON  AltigaIPSecOverNATG = 1
)

var AltigaIPSecOverNATG_Strings = map[AltigaIPSecOverNATG]string{
	AltigaIPSecOverNATG_Value_OFF: "OFF",
	AltigaIPSecOverNATG_Value_ON:  "ON",
}

func (a AltigaIPSecOverNATG) String() string {
	if str, ok := AltigaIPSecOverNATG_Strings[a]; ok {
		return str
	}
	return "AltigaIPSecOverNATG(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaIPSecOverNATG_Add(p *radius.Packet, value AltigaIPSecOverNATG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 34, a)
}

func AltigaIPSecOverNATG_Get(p *radius.Packet) (value AltigaIPSecOverNATG) {
	value, _ = AltigaIPSecOverNATG_Lookup(p)
	return
}

func AltigaIPSecOverNATG_Gets(p *radius.Packet) (values []AltigaIPSecOverNATG, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 34) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaIPSecOverNATG(i))
	}
	return
}

func AltigaIPSecOverNATG_Lookup(p *radius.Packet) (value AltigaIPSecOverNATG, err error) {
	a, ok := _Altiga_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaIPSecOverNATG(i)
	return
}

func AltigaIPSecOverNATG_Set(p *radius.Packet, value AltigaIPSecOverNATG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 34, a)
}

func AltigaIPSecOverNATG_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 34)
}

type AltigaIPSecOverNATPortNumG uint32

var AltigaIPSecOverNATPortNumG_Strings = map[AltigaIPSecOverNATPortNumG]string{}

func (a AltigaIPSecOverNATPortNumG) String() string {
	if str, ok := AltigaIPSecOverNATPortNumG_Strings[a]; ok {
		return str
	}
	return "AltigaIPSecOverNATPortNumG(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaIPSecOverNATPortNumG_Add(p *radius.Packet, value AltigaIPSecOverNATPortNumG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 35, a)
}

func AltigaIPSecOverNATPortNumG_Get(p *radius.Packet) (value AltigaIPSecOverNATPortNumG) {
	value, _ = AltigaIPSecOverNATPortNumG_Lookup(p)
	return
}

func AltigaIPSecOverNATPortNumG_Gets(p *radius.Packet) (values []AltigaIPSecOverNATPortNumG, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 35) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaIPSecOverNATPortNumG(i))
	}
	return
}

func AltigaIPSecOverNATPortNumG_Lookup(p *radius.Packet) (value AltigaIPSecOverNATPortNumG, err error) {
	a, ok := _Altiga_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaIPSecOverNATPortNumG(i)
	return
}

func AltigaIPSecOverNATPortNumG_Set(p *radius.Packet, value AltigaIPSecOverNATPortNumG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 35, a)
}

func AltigaIPSecOverNATPortNumG_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 35)
}

func AltigaPartitioningPrimaryDHCP_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 128, a)
}

func AltigaPartitioningPrimaryDHCP_Get(p *radius.Packet) (value net.IP) {
	value, _ = AltigaPartitioningPrimaryDHCP_Lookup(p)
	return
}

func AltigaPartitioningPrimaryDHCP_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Altiga_GetsVendor(p, 128) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaPartitioningPrimaryDHCP_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Altiga_LookupVendor(p, 128)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AltigaPartitioningPrimaryDHCP_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 128, a)
}

func AltigaPartitioningPrimaryDHCP_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 128)
}

func AltigaPartitioningSecondaryDHCP_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 129, a)
}

func AltigaPartitioningSecondaryDHCP_Get(p *radius.Packet) (value net.IP) {
	value, _ = AltigaPartitioningSecondaryDHCP_Lookup(p)
	return
}

func AltigaPartitioningSecondaryDHCP_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Altiga_GetsVendor(p, 129) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaPartitioningSecondaryDHCP_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Altiga_LookupVendor(p, 129)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AltigaPartitioningSecondaryDHCP_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 129, a)
}

func AltigaPartitioningSecondaryDHCP_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 129)
}

func AltigaPartitioningPremiseRout_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 131, a)
}

func AltigaPartitioningPremiseRout_Get(p *radius.Packet) (value net.IP) {
	value, _ = AltigaPartitioningPremiseRout_Lookup(p)
	return
}

func AltigaPartitioningPremiseRout_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Altiga_GetsVendor(p, 131) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaPartitioningPremiseRout_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Altiga_LookupVendor(p, 131)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AltigaPartitioningPremiseRout_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 131, a)
}

func AltigaPartitioningPremiseRout_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 131)
}

func AltigaPartitioningPartitionMaxSessions_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 132, a)
}

func AltigaPartitioningPartitionMaxSessions_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 132, a)
}

func AltigaPartitioningPartitionMaxSessions_Get(p *radius.Packet) (value []byte) {
	value, _ = AltigaPartitioningPartitionMaxSessions_Lookup(p)
	return
}

func AltigaPartitioningPartitionMaxSessions_GetString(p *radius.Packet) (value string) {
	value, _ = AltigaPartitioningPartitionMaxSessions_LookupString(p)
	return
}

func AltigaPartitioningPartitionMaxSessions_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Altiga_GetsVendor(p, 132) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaPartitioningPartitionMaxSessions_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Altiga_GetsVendor(p, 132) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaPartitioningPartitionMaxSessions_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Altiga_LookupVendor(p, 132)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AltigaPartitioningPartitionMaxSessions_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Altiga_LookupVendor(p, 132)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AltigaPartitioningPartitionMaxSessions_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 132, a)
}

func AltigaPartitioningPartitionMaxSessions_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 132, a)
}

func AltigaPartitioningPartitionMaxSessions_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 132)
}

func AltigaPartitioningMobileIPKey_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 133, a)
}

func AltigaPartitioningMobileIPKey_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 133, a)
}

func AltigaPartitioningMobileIPKey_Get(p *radius.Packet) (value []byte) {
	value, _ = AltigaPartitioningMobileIPKey_Lookup(p)
	return
}

func AltigaPartitioningMobileIPKey_GetString(p *radius.Packet) (value string) {
	value, _ = AltigaPartitioningMobileIPKey_LookupString(p)
	return
}

func AltigaPartitioningMobileIPKey_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Altiga_GetsVendor(p, 133) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaPartitioningMobileIPKey_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Altiga_GetsVendor(p, 133) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaPartitioningMobileIPKey_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Altiga_LookupVendor(p, 133)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AltigaPartitioningMobileIPKey_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Altiga_LookupVendor(p, 133)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AltigaPartitioningMobileIPKey_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 133, a)
}

func AltigaPartitioningMobileIPKey_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 133, a)
}

func AltigaPartitioningMobileIPKey_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 133)
}

func AltigaPartitioningMobileIPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 134, a)
}

func AltigaPartitioningMobileIPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = AltigaPartitioningMobileIPAddress_Lookup(p)
	return
}

func AltigaPartitioningMobileIPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Altiga_GetsVendor(p, 134) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaPartitioningMobileIPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Altiga_LookupVendor(p, 134)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AltigaPartitioningMobileIPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 134, a)
}

func AltigaPartitioningMobileIPAddress_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 134)
}

func AltigaPartitioningMobileIPSPI_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 135, a)
}

func AltigaPartitioningMobileIPSPI_Get(p *radius.Packet) (value net.IP) {
	value, _ = AltigaPartitioningMobileIPSPI_Lookup(p)
	return
}

func AltigaPartitioningMobileIPSPI_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Altiga_GetsVendor(p, 135) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaPartitioningMobileIPSPI_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Altiga_LookupVendor(p, 135)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AltigaPartitioningMobileIPSPI_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 135, a)
}

func AltigaPartitioningMobileIPSPI_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 135)
}

type AltigaPartitioningStripRealm uint32

const (
	AltigaPartitioningStripRealm_Value_OFF AltigaPartitioningStripRealm = 0
	AltigaPartitioningStripRealm_Value_ON  AltigaPartitioningStripRealm = 1
)

var AltigaPartitioningStripRealm_Strings = map[AltigaPartitioningStripRealm]string{
	AltigaPartitioningStripRealm_Value_OFF: "OFF",
	AltigaPartitioningStripRealm_Value_ON:  "ON",
}

func (a AltigaPartitioningStripRealm) String() string {
	if str, ok := AltigaPartitioningStripRealm_Strings[a]; ok {
		return str
	}
	return "AltigaPartitioningStripRealm(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaPartitioningStripRealm_Add(p *radius.Packet, value AltigaPartitioningStripRealm) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 136, a)
}

func AltigaPartitioningStripRealm_Get(p *radius.Packet) (value AltigaPartitioningStripRealm) {
	value, _ = AltigaPartitioningStripRealm_Lookup(p)
	return
}

func AltigaPartitioningStripRealm_Gets(p *radius.Packet) (values []AltigaPartitioningStripRealm, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 136) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaPartitioningStripRealm(i))
	}
	return
}

func AltigaPartitioningStripRealm_Lookup(p *radius.Packet) (value AltigaPartitioningStripRealm, err error) {
	a, ok := _Altiga_LookupVendor(p, 136)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaPartitioningStripRealm(i)
	return
}

func AltigaPartitioningStripRealm_Set(p *radius.Packet, value AltigaPartitioningStripRealm) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 136, a)
}

func AltigaPartitioningStripRealm_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 136)
}

type AltigaPartitioningGroup uint32

var AltigaPartitioningGroup_Strings = map[AltigaPartitioningGroup]string{}

func (a AltigaPartitioningGroup) String() string {
	if str, ok := AltigaPartitioningGroup_Strings[a]; ok {
		return str
	}
	return "AltigaPartitioningGroup(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AltigaPartitioningGroup_Add(p *radius.Packet, value AltigaPartitioningGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_AddVendor(p, 137, a)
}

func AltigaPartitioningGroup_Get(p *radius.Packet) (value AltigaPartitioningGroup) {
	value, _ = AltigaPartitioningGroup_Lookup(p)
	return
}

func AltigaPartitioningGroup_Gets(p *radius.Packet) (values []AltigaPartitioningGroup, err error) {
	var i uint32
	for _, attr := range _Altiga_GetsVendor(p, 137) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AltigaPartitioningGroup(i))
	}
	return
}

func AltigaPartitioningGroup_Lookup(p *radius.Packet) (value AltigaPartitioningGroup, err error) {
	a, ok := _Altiga_LookupVendor(p, 137)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AltigaPartitioningGroup(i)
	return
}

func AltigaPartitioningGroup_Set(p *radius.Packet, value AltigaPartitioningGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Altiga_SetVendor(p, 137, a)
}

func AltigaPartitioningGroup_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 137)
}

func AltigaGroupName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 250, a)
}

func AltigaGroupName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Altiga_AddVendor(p, 250, a)
}

func AltigaGroupName_Get(p *radius.Packet) (value []byte) {
	value, _ = AltigaGroupName_Lookup(p)
	return
}

func AltigaGroupName_GetString(p *radius.Packet) (value string) {
	value, _ = AltigaGroupName_LookupString(p)
	return
}

func AltigaGroupName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Altiga_GetsVendor(p, 250) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaGroupName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Altiga_GetsVendor(p, 250) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AltigaGroupName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Altiga_LookupVendor(p, 250)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AltigaGroupName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Altiga_LookupVendor(p, 250)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AltigaGroupName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 250, a)
}

func AltigaGroupName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Altiga_SetVendor(p, 250, a)
}

func AltigaGroupName_Del(p *radius.Packet) {
	_Altiga_DelVendor(p, 250)
}
