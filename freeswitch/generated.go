// Code generated by radius-dict-gen. DO NOT EDIT.

package freeswitch

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Freeswitch_VendorID = 27880
)

func _Freeswitch_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Freeswitch_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Freeswitch_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Freeswitch_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Freeswitch_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Freeswitch_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Freeswitch_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Freeswitch_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Freeswitch_AddVendor(p, typ, attr)
}

func _Freeswitch_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Freeswitch_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func FreeswitchAVPair_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 1, a)
}

func FreeswitchAVPair_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 1, a)
}

func FreeswitchAVPair_Get(p *radius.Packet) (value []byte) {
	value, _ = FreeswitchAVPair_Lookup(p)
	return
}

func FreeswitchAVPair_GetString(p *radius.Packet) (value string) {
	value, _ = FreeswitchAVPair_LookupString(p)
	return
}

func FreeswitchAVPair_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Freeswitch_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchAVPair_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Freeswitch_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchAVPair_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FreeswitchAVPair_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FreeswitchAVPair_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 1, a)
}

func FreeswitchAVPair_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 1, a)
}

func FreeswitchAVPair_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 1)
}

func FreeswitchCLID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 2, a)
}

func FreeswitchCLID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 2, a)
}

func FreeswitchCLID_Get(p *radius.Packet) (value []byte) {
	value, _ = FreeswitchCLID_Lookup(p)
	return
}

func FreeswitchCLID_GetString(p *radius.Packet) (value string) {
	value, _ = FreeswitchCLID_LookupString(p)
	return
}

func FreeswitchCLID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Freeswitch_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchCLID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Freeswitch_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchCLID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FreeswitchCLID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FreeswitchCLID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 2, a)
}

func FreeswitchCLID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 2, a)
}

func FreeswitchCLID_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 2)
}

func FreeswitchDialplan_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 3, a)
}

func FreeswitchDialplan_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 3, a)
}

func FreeswitchDialplan_Get(p *radius.Packet) (value []byte) {
	value, _ = FreeswitchDialplan_Lookup(p)
	return
}

func FreeswitchDialplan_GetString(p *radius.Packet) (value string) {
	value, _ = FreeswitchDialplan_LookupString(p)
	return
}

func FreeswitchDialplan_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Freeswitch_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchDialplan_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Freeswitch_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchDialplan_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FreeswitchDialplan_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FreeswitchDialplan_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 3, a)
}

func FreeswitchDialplan_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 3, a)
}

func FreeswitchDialplan_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 3)
}

func FreeswitchSrc_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 4, a)
}

func FreeswitchSrc_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 4, a)
}

func FreeswitchSrc_Get(p *radius.Packet) (value []byte) {
	value, _ = FreeswitchSrc_Lookup(p)
	return
}

func FreeswitchSrc_GetString(p *radius.Packet) (value string) {
	value, _ = FreeswitchSrc_LookupString(p)
	return
}

func FreeswitchSrc_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Freeswitch_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchSrc_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Freeswitch_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchSrc_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FreeswitchSrc_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FreeswitchSrc_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 4, a)
}

func FreeswitchSrc_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 4, a)
}

func FreeswitchSrc_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 4)
}

func FreeswitchDst_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 5, a)
}

func FreeswitchDst_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 5, a)
}

func FreeswitchDst_Get(p *radius.Packet) (value []byte) {
	value, _ = FreeswitchDst_Lookup(p)
	return
}

func FreeswitchDst_GetString(p *radius.Packet) (value string) {
	value, _ = FreeswitchDst_LookupString(p)
	return
}

func FreeswitchDst_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Freeswitch_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchDst_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Freeswitch_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchDst_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FreeswitchDst_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FreeswitchDst_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 5, a)
}

func FreeswitchDst_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 5, a)
}

func FreeswitchDst_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 5)
}

func FreeswitchSrcChannel_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 6, a)
}

func FreeswitchSrcChannel_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 6, a)
}

func FreeswitchSrcChannel_Get(p *radius.Packet) (value []byte) {
	value, _ = FreeswitchSrcChannel_Lookup(p)
	return
}

func FreeswitchSrcChannel_GetString(p *radius.Packet) (value string) {
	value, _ = FreeswitchSrcChannel_LookupString(p)
	return
}

func FreeswitchSrcChannel_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Freeswitch_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchSrcChannel_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Freeswitch_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchSrcChannel_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FreeswitchSrcChannel_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FreeswitchSrcChannel_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 6, a)
}

func FreeswitchSrcChannel_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 6, a)
}

func FreeswitchSrcChannel_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 6)
}

func FreeswitchDstChannel_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 7, a)
}

func FreeswitchDstChannel_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 7, a)
}

func FreeswitchDstChannel_Get(p *radius.Packet) (value []byte) {
	value, _ = FreeswitchDstChannel_Lookup(p)
	return
}

func FreeswitchDstChannel_GetString(p *radius.Packet) (value string) {
	value, _ = FreeswitchDstChannel_LookupString(p)
	return
}

func FreeswitchDstChannel_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Freeswitch_GetsVendor(p, 7) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchDstChannel_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Freeswitch_GetsVendor(p, 7) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchDstChannel_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FreeswitchDstChannel_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FreeswitchDstChannel_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 7, a)
}

func FreeswitchDstChannel_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 7, a)
}

func FreeswitchDstChannel_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 7)
}

func FreeswitchAni_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 8, a)
}

func FreeswitchAni_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 8, a)
}

func FreeswitchAni_Get(p *radius.Packet) (value []byte) {
	value, _ = FreeswitchAni_Lookup(p)
	return
}

func FreeswitchAni_GetString(p *radius.Packet) (value string) {
	value, _ = FreeswitchAni_LookupString(p)
	return
}

func FreeswitchAni_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Freeswitch_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchAni_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Freeswitch_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchAni_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FreeswitchAni_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FreeswitchAni_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 8, a)
}

func FreeswitchAni_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 8, a)
}

func FreeswitchAni_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 8)
}

func FreeswitchAniii_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 9, a)
}

func FreeswitchAniii_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 9, a)
}

func FreeswitchAniii_Get(p *radius.Packet) (value []byte) {
	value, _ = FreeswitchAniii_Lookup(p)
	return
}

func FreeswitchAniii_GetString(p *radius.Packet) (value string) {
	value, _ = FreeswitchAniii_LookupString(p)
	return
}

func FreeswitchAniii_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Freeswitch_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchAniii_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Freeswitch_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchAniii_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FreeswitchAniii_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FreeswitchAniii_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 9, a)
}

func FreeswitchAniii_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 9, a)
}

func FreeswitchAniii_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 9)
}

func FreeswitchLastapp_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 10, a)
}

func FreeswitchLastapp_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 10, a)
}

func FreeswitchLastapp_Get(p *radius.Packet) (value []byte) {
	value, _ = FreeswitchLastapp_Lookup(p)
	return
}

func FreeswitchLastapp_GetString(p *radius.Packet) (value string) {
	value, _ = FreeswitchLastapp_LookupString(p)
	return
}

func FreeswitchLastapp_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Freeswitch_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchLastapp_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Freeswitch_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchLastapp_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FreeswitchLastapp_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FreeswitchLastapp_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 10, a)
}

func FreeswitchLastapp_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 10, a)
}

func FreeswitchLastapp_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 10)
}

func FreeswitchLastdata_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 11, a)
}

func FreeswitchLastdata_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 11, a)
}

func FreeswitchLastdata_Get(p *radius.Packet) (value []byte) {
	value, _ = FreeswitchLastdata_Lookup(p)
	return
}

func FreeswitchLastdata_GetString(p *radius.Packet) (value string) {
	value, _ = FreeswitchLastdata_LookupString(p)
	return
}

func FreeswitchLastdata_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Freeswitch_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchLastdata_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Freeswitch_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchLastdata_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FreeswitchLastdata_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FreeswitchLastdata_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 11, a)
}

func FreeswitchLastdata_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 11, a)
}

func FreeswitchLastdata_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 11)
}

func FreeswitchDisposition_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 12, a)
}

func FreeswitchDisposition_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 12, a)
}

func FreeswitchDisposition_Get(p *radius.Packet) (value []byte) {
	value, _ = FreeswitchDisposition_Lookup(p)
	return
}

func FreeswitchDisposition_GetString(p *radius.Packet) (value string) {
	value, _ = FreeswitchDisposition_LookupString(p)
	return
}

func FreeswitchDisposition_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Freeswitch_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchDisposition_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Freeswitch_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchDisposition_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FreeswitchDisposition_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FreeswitchDisposition_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 12, a)
}

func FreeswitchDisposition_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 12, a)
}

func FreeswitchDisposition_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 12)
}

type FreeswitchHangupcause uint32

const (
	FreeswitchHangupcause_Value_None                      FreeswitchHangupcause = 0
	FreeswitchHangupcause_Value_UnallocatedNumber         FreeswitchHangupcause = 1
	FreeswitchHangupcause_Value_NoRouteTransitNet         FreeswitchHangupcause = 2
	FreeswitchHangupcause_Value_NoRouteDestination        FreeswitchHangupcause = 3
	FreeswitchHangupcause_Value_ChannelUnacceptable       FreeswitchHangupcause = 6
	FreeswitchHangupcause_Value_CallAwardedDelivery       FreeswitchHangupcause = 7
	FreeswitchHangupcause_Value_NormalClearing            FreeswitchHangupcause = 16
	FreeswitchHangupcause_Value_UserBusy                  FreeswitchHangupcause = 17
	FreeswitchHangupcause_Value_NoUserResponse            FreeswitchHangupcause = 18
	FreeswitchHangupcause_Value_NoAnswer                  FreeswitchHangupcause = 19
	FreeswitchHangupcause_Value_SubscriberAbsent          FreeswitchHangupcause = 20
	FreeswitchHangupcause_Value_CallRejected              FreeswitchHangupcause = 21
	FreeswitchHangupcause_Value_NumberChanged             FreeswitchHangupcause = 22
	FreeswitchHangupcause_Value_RedirectoToNewDestination FreeswitchHangupcause = 23
	FreeswitchHangupcause_Value_ExchangeRoutingError      FreeswitchHangupcause = 25
	FreeswitchHangupcause_Value_DestinationOutOfOrder     FreeswitchHangupcause = 27
	FreeswitchHangupcause_Value_InvalidNumberFormat       FreeswitchHangupcause = 28
	FreeswitchHangupcause_Value_FacilityRejected          FreeswitchHangupcause = 29
	FreeswitchHangupcause_Value_ResponseToStatusEnquiry   FreeswitchHangupcause = 30
	FreeswitchHangupcause_Value_NormalUnspecified         FreeswitchHangupcause = 31
	FreeswitchHangupcause_Value_NormalCircuitCongestion   FreeswitchHangupcause = 34
	FreeswitchHangupcause_Value_NetworkOutOfOrder         FreeswitchHangupcause = 38
	FreeswitchHangupcause_Value_NormalTemporaryFailure    FreeswitchHangupcause = 41
	FreeswitchHangupcause_Value_SwitchCongestion          FreeswitchHangupcause = 42
	FreeswitchHangupcause_Value_AccessInfoDiscarded       FreeswitchHangupcause = 43
	FreeswitchHangupcause_Value_RequestedChanUnavail      FreeswitchHangupcause = 44
	FreeswitchHangupcause_Value_PreEmpted                 FreeswitchHangupcause = 45
	FreeswitchHangupcause_Value_FacilityNotSubscribed     FreeswitchHangupcause = 50
	FreeswitchHangupcause_Value_OutgoingCallBarred        FreeswitchHangupcause = 52
	FreeswitchHangupcause_Value_IncomingCallBarred        FreeswitchHangupcause = 54
	FreeswitchHangupcause_Value_BearercapabilityNotauth   FreeswitchHangupcause = 57
	FreeswitchHangupcause_Value_BearercapabilityNotavail  FreeswitchHangupcause = 58
	FreeswitchHangupcause_Value_ServiceUnavailable        FreeswitchHangupcause = 63
	FreeswitchHangupcause_Value_BearercapabilityNotimpl   FreeswitchHangupcause = 65
	FreeswitchHangupcause_Value_ChanNotImplemented        FreeswitchHangupcause = 66
	FreeswitchHangupcause_Value_FacilityNotImplemented    FreeswitchHangupcause = 69
	FreeswitchHangupcause_Value_ServiceNotImplemented     FreeswitchHangupcause = 79
	FreeswitchHangupcause_Value_InvalidCallReference      FreeswitchHangupcause = 81
	FreeswitchHangupcause_Value_IncompatibleDestination   FreeswitchHangupcause = 88
	FreeswitchHangupcause_Value_InvalidMsgUnspecified     FreeswitchHangupcause = 95
	FreeswitchHangupcause_Value_MandatoryIEMissing        FreeswitchHangupcause = 96
	FreeswitchHangupcause_Value_MessageTypeNonexist       FreeswitchHangupcause = 97
	FreeswitchHangupcause_Value_WrongMessage              FreeswitchHangupcause = 98
	FreeswitchHangupcause_Value_IENonexist                FreeswitchHangupcause = 99
	FreeswitchHangupcause_Value_InvalidIEContents         FreeswitchHangupcause = 100
	FreeswitchHangupcause_Value_WrongCallState            FreeswitchHangupcause = 101
	FreeswitchHangupcause_Value_RecoveryOnTimerExpire     FreeswitchHangupcause = 102
	FreeswitchHangupcause_Value_MandatoryIELengthError    FreeswitchHangupcause = 103
	FreeswitchHangupcause_Value_ProtocolError             FreeswitchHangupcause = 111
	FreeswitchHangupcause_Value_Interworking              FreeswitchHangupcause = 127
	FreeswitchHangupcause_Value_Success                   FreeswitchHangupcause = 142
	FreeswitchHangupcause_Value_OriginatorCancel          FreeswitchHangupcause = 487
	FreeswitchHangupcause_Value_Crash                     FreeswitchHangupcause = 500
	FreeswitchHangupcause_Value_SystemShutdown            FreeswitchHangupcause = 501
	FreeswitchHangupcause_Value_LoseRace                  FreeswitchHangupcause = 502
	FreeswitchHangupcause_Value_ManagerRequest            FreeswitchHangupcause = 503
	FreeswitchHangupcause_Value_BlindTransfer             FreeswitchHangupcause = 600
	FreeswitchHangupcause_Value_AttendedTransfer          FreeswitchHangupcause = 601
	FreeswitchHangupcause_Value_AllottedTimeout           FreeswitchHangupcause = 602
	FreeswitchHangupcause_Value_UserChallenge             FreeswitchHangupcause = 603
	FreeswitchHangupcause_Value_MediaTimeout              FreeswitchHangupcause = 604
	FreeswitchHangupcause_Value_PickedOff                 FreeswitchHangupcause = 605
	FreeswitchHangupcause_Value_UserNotRegistered         FreeswitchHangupcause = 606
)

var FreeswitchHangupcause_Strings = map[FreeswitchHangupcause]string{
	FreeswitchHangupcause_Value_None:                      "None",
	FreeswitchHangupcause_Value_UnallocatedNumber:         "Unallocated-Number",
	FreeswitchHangupcause_Value_NoRouteTransitNet:         "No-Route-Transit-Net",
	FreeswitchHangupcause_Value_NoRouteDestination:        "No-Route-Destination",
	FreeswitchHangupcause_Value_ChannelUnacceptable:       "Channel-Unacceptable",
	FreeswitchHangupcause_Value_CallAwardedDelivery:       "Call-Awarded-Delivery",
	FreeswitchHangupcause_Value_NormalClearing:            "Normal-Clearing",
	FreeswitchHangupcause_Value_UserBusy:                  "User-Busy",
	FreeswitchHangupcause_Value_NoUserResponse:            "No-User-Response",
	FreeswitchHangupcause_Value_NoAnswer:                  "No-Answer",
	FreeswitchHangupcause_Value_SubscriberAbsent:          "Subscriber-Absent",
	FreeswitchHangupcause_Value_CallRejected:              "Call-Rejected",
	FreeswitchHangupcause_Value_NumberChanged:             "Number-Changed",
	FreeswitchHangupcause_Value_RedirectoToNewDestination: "Redirecto-To-New-Destination",
	FreeswitchHangupcause_Value_ExchangeRoutingError:      "Exchange-Routing-Error",
	FreeswitchHangupcause_Value_DestinationOutOfOrder:     "Destination-Out-Of-Order",
	FreeswitchHangupcause_Value_InvalidNumberFormat:       "Invalid-Number-Format",
	FreeswitchHangupcause_Value_FacilityRejected:          "Facility-Rejected",
	FreeswitchHangupcause_Value_ResponseToStatusEnquiry:   "Response-To-Status-Enquiry",
	FreeswitchHangupcause_Value_NormalUnspecified:         "Normal-Unspecified",
	FreeswitchHangupcause_Value_NormalCircuitCongestion:   "Normal-Circuit-Congestion",
	FreeswitchHangupcause_Value_NetworkOutOfOrder:         "Network-Out-Of-Order",
	FreeswitchHangupcause_Value_NormalTemporaryFailure:    "Normal-Temporary-Failure",
	FreeswitchHangupcause_Value_SwitchCongestion:          "Switch-Congestion",
	FreeswitchHangupcause_Value_AccessInfoDiscarded:       "Access-Info-Discarded",
	FreeswitchHangupcause_Value_RequestedChanUnavail:      "Requested-Chan-Unavail",
	FreeswitchHangupcause_Value_PreEmpted:                 "Pre-Empted",
	FreeswitchHangupcause_Value_FacilityNotSubscribed:     "Facility-Not-Subscribed",
	FreeswitchHangupcause_Value_OutgoingCallBarred:        "Outgoing-Call-Barred",
	FreeswitchHangupcause_Value_IncomingCallBarred:        "Incoming-Call-Barred",
	FreeswitchHangupcause_Value_BearercapabilityNotauth:   "Bearercapability-Notauth",
	FreeswitchHangupcause_Value_BearercapabilityNotavail:  "Bearercapability-Notavail",
	FreeswitchHangupcause_Value_ServiceUnavailable:        "Service-Unavailable",
	FreeswitchHangupcause_Value_BearercapabilityNotimpl:   "Bearercapability-Notimpl",
	FreeswitchHangupcause_Value_ChanNotImplemented:        "Chan-Not-Implemented",
	FreeswitchHangupcause_Value_FacilityNotImplemented:    "Facility-Not-Implemented",
	FreeswitchHangupcause_Value_ServiceNotImplemented:     "Service-Not-Implemented",
	FreeswitchHangupcause_Value_InvalidCallReference:      "Invalid-Call-Reference",
	FreeswitchHangupcause_Value_IncompatibleDestination:   "Incompatible-Destination",
	FreeswitchHangupcause_Value_InvalidMsgUnspecified:     "Invalid-Msg-Unspecified",
	FreeswitchHangupcause_Value_MandatoryIEMissing:        "Mandatory-IE-Missing",
	FreeswitchHangupcause_Value_MessageTypeNonexist:       "Message-Type-Nonexist",
	FreeswitchHangupcause_Value_WrongMessage:              "Wrong-Message",
	FreeswitchHangupcause_Value_IENonexist:                "IE-Nonexist",
	FreeswitchHangupcause_Value_InvalidIEContents:         "Invalid-IE-Contents",
	FreeswitchHangupcause_Value_WrongCallState:            "Wrong-Call-State",
	FreeswitchHangupcause_Value_RecoveryOnTimerExpire:     "Recovery-On-Timer-Expire",
	FreeswitchHangupcause_Value_MandatoryIELengthError:    "Mandatory-IE-Length-Error",
	FreeswitchHangupcause_Value_ProtocolError:             "Protocol-Error",
	FreeswitchHangupcause_Value_Interworking:              "Interworking",
	FreeswitchHangupcause_Value_Success:                   "Success",
	FreeswitchHangupcause_Value_OriginatorCancel:          "Originator-Cancel",
	FreeswitchHangupcause_Value_Crash:                     "Crash",
	FreeswitchHangupcause_Value_SystemShutdown:            "System-Shutdown",
	FreeswitchHangupcause_Value_LoseRace:                  "Lose-Race",
	FreeswitchHangupcause_Value_ManagerRequest:            "Manager-Request",
	FreeswitchHangupcause_Value_BlindTransfer:             "Blind-Transfer",
	FreeswitchHangupcause_Value_AttendedTransfer:          "Attended-Transfer",
	FreeswitchHangupcause_Value_AllottedTimeout:           "Allotted-Timeout",
	FreeswitchHangupcause_Value_UserChallenge:             "User-Challenge",
	FreeswitchHangupcause_Value_MediaTimeout:              "Media-Timeout",
	FreeswitchHangupcause_Value_PickedOff:                 "Picked-Off",
	FreeswitchHangupcause_Value_UserNotRegistered:         "User-Not-Registered",
}

func (a FreeswitchHangupcause) String() string {
	if str, ok := FreeswitchHangupcause_Strings[a]; ok {
		return str
	}
	return "FreeswitchHangupcause(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func FreeswitchHangupcause_Add(p *radius.Packet, value FreeswitchHangupcause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Freeswitch_AddVendor(p, 13, a)
}

func FreeswitchHangupcause_Get(p *radius.Packet) (value FreeswitchHangupcause) {
	value, _ = FreeswitchHangupcause_Lookup(p)
	return
}

func FreeswitchHangupcause_Gets(p *radius.Packet) (values []FreeswitchHangupcause, err error) {
	var i uint32
	for _, attr := range _Freeswitch_GetsVendor(p, 13) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, FreeswitchHangupcause(i))
	}
	return
}

func FreeswitchHangupcause_Lookup(p *radius.Packet) (value FreeswitchHangupcause, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = FreeswitchHangupcause(i)
	return
}

func FreeswitchHangupcause_Set(p *radius.Packet, value FreeswitchHangupcause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Freeswitch_SetVendor(p, 13, a)
}

func FreeswitchHangupcause_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 13)
}

type FreeswitchBillusec uint32

var FreeswitchBillusec_Strings = map[FreeswitchBillusec]string{}

func (a FreeswitchBillusec) String() string {
	if str, ok := FreeswitchBillusec_Strings[a]; ok {
		return str
	}
	return "FreeswitchBillusec(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func FreeswitchBillusec_Add(p *radius.Packet, value FreeswitchBillusec) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Freeswitch_AddVendor(p, 15, a)
}

func FreeswitchBillusec_Get(p *radius.Packet) (value FreeswitchBillusec) {
	value, _ = FreeswitchBillusec_Lookup(p)
	return
}

func FreeswitchBillusec_Gets(p *radius.Packet) (values []FreeswitchBillusec, err error) {
	var i uint32
	for _, attr := range _Freeswitch_GetsVendor(p, 15) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, FreeswitchBillusec(i))
	}
	return
}

func FreeswitchBillusec_Lookup(p *radius.Packet) (value FreeswitchBillusec, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = FreeswitchBillusec(i)
	return
}

func FreeswitchBillusec_Set(p *radius.Packet, value FreeswitchBillusec) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Freeswitch_SetVendor(p, 15, a)
}

func FreeswitchBillusec_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 15)
}

type FreeswitchAMAFlags uint32

var FreeswitchAMAFlags_Strings = map[FreeswitchAMAFlags]string{}

func (a FreeswitchAMAFlags) String() string {
	if str, ok := FreeswitchAMAFlags_Strings[a]; ok {
		return str
	}
	return "FreeswitchAMAFlags(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func FreeswitchAMAFlags_Add(p *radius.Packet, value FreeswitchAMAFlags) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Freeswitch_AddVendor(p, 16, a)
}

func FreeswitchAMAFlags_Get(p *radius.Packet) (value FreeswitchAMAFlags) {
	value, _ = FreeswitchAMAFlags_Lookup(p)
	return
}

func FreeswitchAMAFlags_Gets(p *radius.Packet) (values []FreeswitchAMAFlags, err error) {
	var i uint32
	for _, attr := range _Freeswitch_GetsVendor(p, 16) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, FreeswitchAMAFlags(i))
	}
	return
}

func FreeswitchAMAFlags_Lookup(p *radius.Packet) (value FreeswitchAMAFlags, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = FreeswitchAMAFlags(i)
	return
}

func FreeswitchAMAFlags_Set(p *radius.Packet, value FreeswitchAMAFlags) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Freeswitch_SetVendor(p, 16, a)
}

func FreeswitchAMAFlags_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 16)
}

func FreeswitchRDNIS_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 17, a)
}

func FreeswitchRDNIS_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 17, a)
}

func FreeswitchRDNIS_Get(p *radius.Packet) (value []byte) {
	value, _ = FreeswitchRDNIS_Lookup(p)
	return
}

func FreeswitchRDNIS_GetString(p *radius.Packet) (value string) {
	value, _ = FreeswitchRDNIS_LookupString(p)
	return
}

func FreeswitchRDNIS_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Freeswitch_GetsVendor(p, 17) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchRDNIS_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Freeswitch_GetsVendor(p, 17) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchRDNIS_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FreeswitchRDNIS_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FreeswitchRDNIS_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 17, a)
}

func FreeswitchRDNIS_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 17, a)
}

func FreeswitchRDNIS_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 17)
}

func FreeswitchContext_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 18, a)
}

func FreeswitchContext_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 18, a)
}

func FreeswitchContext_Get(p *radius.Packet) (value []byte) {
	value, _ = FreeswitchContext_Lookup(p)
	return
}

func FreeswitchContext_GetString(p *radius.Packet) (value string) {
	value, _ = FreeswitchContext_LookupString(p)
	return
}

func FreeswitchContext_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Freeswitch_GetsVendor(p, 18) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchContext_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Freeswitch_GetsVendor(p, 18) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchContext_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FreeswitchContext_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FreeswitchContext_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 18, a)
}

func FreeswitchContext_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 18, a)
}

func FreeswitchContext_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 18)
}

func FreeswitchSource_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 19, a)
}

func FreeswitchSource_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 19, a)
}

func FreeswitchSource_Get(p *radius.Packet) (value []byte) {
	value, _ = FreeswitchSource_Lookup(p)
	return
}

func FreeswitchSource_GetString(p *radius.Packet) (value string) {
	value, _ = FreeswitchSource_LookupString(p)
	return
}

func FreeswitchSource_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Freeswitch_GetsVendor(p, 19) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchSource_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Freeswitch_GetsVendor(p, 19) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchSource_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FreeswitchSource_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FreeswitchSource_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 19, a)
}

func FreeswitchSource_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 19, a)
}

func FreeswitchSource_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 19)
}

func FreeswitchCallstartdate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 20, a)
}

func FreeswitchCallstartdate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 20, a)
}

func FreeswitchCallstartdate_Get(p *radius.Packet) (value []byte) {
	value, _ = FreeswitchCallstartdate_Lookup(p)
	return
}

func FreeswitchCallstartdate_GetString(p *radius.Packet) (value string) {
	value, _ = FreeswitchCallstartdate_LookupString(p)
	return
}

func FreeswitchCallstartdate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Freeswitch_GetsVendor(p, 20) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchCallstartdate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Freeswitch_GetsVendor(p, 20) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchCallstartdate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FreeswitchCallstartdate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FreeswitchCallstartdate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 20, a)
}

func FreeswitchCallstartdate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 20, a)
}

func FreeswitchCallstartdate_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 20)
}

func FreeswitchCallanswerdate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 21, a)
}

func FreeswitchCallanswerdate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 21, a)
}

func FreeswitchCallanswerdate_Get(p *radius.Packet) (value []byte) {
	value, _ = FreeswitchCallanswerdate_Lookup(p)
	return
}

func FreeswitchCallanswerdate_GetString(p *radius.Packet) (value string) {
	value, _ = FreeswitchCallanswerdate_LookupString(p)
	return
}

func FreeswitchCallanswerdate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Freeswitch_GetsVendor(p, 21) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchCallanswerdate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Freeswitch_GetsVendor(p, 21) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchCallanswerdate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FreeswitchCallanswerdate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FreeswitchCallanswerdate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 21, a)
}

func FreeswitchCallanswerdate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 21, a)
}

func FreeswitchCallanswerdate_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 21)
}

func FreeswitchCalltransferdate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 22, a)
}

func FreeswitchCalltransferdate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 22, a)
}

func FreeswitchCalltransferdate_Get(p *radius.Packet) (value []byte) {
	value, _ = FreeswitchCalltransferdate_Lookup(p)
	return
}

func FreeswitchCalltransferdate_GetString(p *radius.Packet) (value string) {
	value, _ = FreeswitchCalltransferdate_LookupString(p)
	return
}

func FreeswitchCalltransferdate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Freeswitch_GetsVendor(p, 22) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchCalltransferdate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Freeswitch_GetsVendor(p, 22) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchCalltransferdate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FreeswitchCalltransferdate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FreeswitchCalltransferdate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 22, a)
}

func FreeswitchCalltransferdate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 22, a)
}

func FreeswitchCalltransferdate_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 22)
}

func FreeswitchCallenddate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 23, a)
}

func FreeswitchCallenddate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 23, a)
}

func FreeswitchCallenddate_Get(p *radius.Packet) (value []byte) {
	value, _ = FreeswitchCallenddate_Lookup(p)
	return
}

func FreeswitchCallenddate_GetString(p *radius.Packet) (value string) {
	value, _ = FreeswitchCallenddate_LookupString(p)
	return
}

func FreeswitchCallenddate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Freeswitch_GetsVendor(p, 23) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchCallenddate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Freeswitch_GetsVendor(p, 23) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchCallenddate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FreeswitchCallenddate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FreeswitchCallenddate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 23, a)
}

func FreeswitchCallenddate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 23, a)
}

func FreeswitchCallenddate_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 23)
}

func FreeswitchSignalbond_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 24, a)
}

func FreeswitchSignalbond_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_AddVendor(p, 24, a)
}

func FreeswitchSignalbond_Get(p *radius.Packet) (value []byte) {
	value, _ = FreeswitchSignalbond_Lookup(p)
	return
}

func FreeswitchSignalbond_GetString(p *radius.Packet) (value string) {
	value, _ = FreeswitchSignalbond_LookupString(p)
	return
}

func FreeswitchSignalbond_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Freeswitch_GetsVendor(p, 24) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchSignalbond_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Freeswitch_GetsVendor(p, 24) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FreeswitchSignalbond_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FreeswitchSignalbond_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Freeswitch_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FreeswitchSignalbond_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 24, a)
}

func FreeswitchSignalbond_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Freeswitch_SetVendor(p, 24, a)
}

func FreeswitchSignalbond_Del(p *radius.Packet) {
	_Freeswitch_DelVendor(p, 24)
}
