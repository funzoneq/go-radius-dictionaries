// Code generated by radius-dict-gen. DO NOT EDIT.

package dlink

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Dlink_VendorID = 171
)

func _Dlink_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Dlink_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Dlink_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Dlink_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Dlink_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Dlink_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Dlink_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Dlink_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Dlink_AddVendor(p, typ, attr)
}

func _Dlink_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Dlink_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

type DlinkUserLevel uint32

const (
	DlinkUserLevel_Value_UserLegacy  DlinkUserLevel = 1
	DlinkUserLevel_Value_User        DlinkUserLevel = 3
	DlinkUserLevel_Value_Operator    DlinkUserLevel = 4
	DlinkUserLevel_Value_Admin       DlinkUserLevel = 5
	DlinkUserLevel_Value_PowerUser   DlinkUserLevel = 6
	DlinkUserLevel_Value_AdminLegacy DlinkUserLevel = 15
)

var DlinkUserLevel_Strings = map[DlinkUserLevel]string{
	DlinkUserLevel_Value_UserLegacy:  "User-Legacy",
	DlinkUserLevel_Value_User:        "User",
	DlinkUserLevel_Value_Operator:    "Operator",
	DlinkUserLevel_Value_Admin:       "Admin",
	DlinkUserLevel_Value_PowerUser:   "Power-User",
	DlinkUserLevel_Value_AdminLegacy: "Admin-Legacy",
}

func (a DlinkUserLevel) String() string {
	if str, ok := DlinkUserLevel_Strings[a]; ok {
		return str
	}
	return "DlinkUserLevel(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DlinkUserLevel_Add(p *radius.Packet, value DlinkUserLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Dlink_AddVendor(p, 1, a)
}

func DlinkUserLevel_Get(p *radius.Packet) (value DlinkUserLevel) {
	value, _ = DlinkUserLevel_Lookup(p)
	return
}

func DlinkUserLevel_Gets(p *radius.Packet) (values []DlinkUserLevel, err error) {
	var i uint32
	for _, attr := range _Dlink_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DlinkUserLevel(i))
	}
	return
}

func DlinkUserLevel_Lookup(p *radius.Packet) (value DlinkUserLevel, err error) {
	a, ok := _Dlink_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DlinkUserLevel(i)
	return
}

func DlinkUserLevel_Set(p *radius.Packet, value DlinkUserLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Dlink_SetVendor(p, 1, a)
}

func DlinkUserLevel_Del(p *radius.Packet) {
	_Dlink_DelVendor(p, 1)
}

type DlinkIngressBandwidthAssignment uint32

var DlinkIngressBandwidthAssignment_Strings = map[DlinkIngressBandwidthAssignment]string{}

func (a DlinkIngressBandwidthAssignment) String() string {
	if str, ok := DlinkIngressBandwidthAssignment_Strings[a]; ok {
		return str
	}
	return "DlinkIngressBandwidthAssignment(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DlinkIngressBandwidthAssignment_Add(p *radius.Packet, value DlinkIngressBandwidthAssignment) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Dlink_AddVendor(p, 2, a)
}

func DlinkIngressBandwidthAssignment_Get(p *radius.Packet) (value DlinkIngressBandwidthAssignment) {
	value, _ = DlinkIngressBandwidthAssignment_Lookup(p)
	return
}

func DlinkIngressBandwidthAssignment_Gets(p *radius.Packet) (values []DlinkIngressBandwidthAssignment, err error) {
	var i uint32
	for _, attr := range _Dlink_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DlinkIngressBandwidthAssignment(i))
	}
	return
}

func DlinkIngressBandwidthAssignment_Lookup(p *radius.Packet) (value DlinkIngressBandwidthAssignment, err error) {
	a, ok := _Dlink_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DlinkIngressBandwidthAssignment(i)
	return
}

func DlinkIngressBandwidthAssignment_Set(p *radius.Packet, value DlinkIngressBandwidthAssignment) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Dlink_SetVendor(p, 2, a)
}

func DlinkIngressBandwidthAssignment_Del(p *radius.Packet) {
	_Dlink_DelVendor(p, 2)
}

type DlinkEgressBandwidthAssignment uint32

var DlinkEgressBandwidthAssignment_Strings = map[DlinkEgressBandwidthAssignment]string{}

func (a DlinkEgressBandwidthAssignment) String() string {
	if str, ok := DlinkEgressBandwidthAssignment_Strings[a]; ok {
		return str
	}
	return "DlinkEgressBandwidthAssignment(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func DlinkEgressBandwidthAssignment_Add(p *radius.Packet, value DlinkEgressBandwidthAssignment) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Dlink_AddVendor(p, 3, a)
}

func DlinkEgressBandwidthAssignment_Get(p *radius.Packet) (value DlinkEgressBandwidthAssignment) {
	value, _ = DlinkEgressBandwidthAssignment_Lookup(p)
	return
}

func DlinkEgressBandwidthAssignment_Gets(p *radius.Packet) (values []DlinkEgressBandwidthAssignment, err error) {
	var i uint32
	for _, attr := range _Dlink_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, DlinkEgressBandwidthAssignment(i))
	}
	return
}

func DlinkEgressBandwidthAssignment_Lookup(p *radius.Packet) (value DlinkEgressBandwidthAssignment, err error) {
	a, ok := _Dlink_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = DlinkEgressBandwidthAssignment(i)
	return
}

func DlinkEgressBandwidthAssignment_Set(p *radius.Packet, value DlinkEgressBandwidthAssignment) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Dlink_SetVendor(p, 3, a)
}

func DlinkEgressBandwidthAssignment_Del(p *radius.Packet) {
	_Dlink_DelVendor(p, 3)
}

type Dlink1pPriority uint32

var Dlink1pPriority_Strings = map[Dlink1pPriority]string{}

func (a Dlink1pPriority) String() string {
	if str, ok := Dlink1pPriority_Strings[a]; ok {
		return str
	}
	return "Dlink1pPriority(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func Dlink1pPriority_Add(p *radius.Packet, value Dlink1pPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Dlink_AddVendor(p, 4, a)
}

func Dlink1pPriority_Get(p *radius.Packet) (value Dlink1pPriority) {
	value, _ = Dlink1pPriority_Lookup(p)
	return
}

func Dlink1pPriority_Gets(p *radius.Packet) (values []Dlink1pPriority, err error) {
	var i uint32
	for _, attr := range _Dlink_GetsVendor(p, 4) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, Dlink1pPriority(i))
	}
	return
}

func Dlink1pPriority_Lookup(p *radius.Packet) (value Dlink1pPriority, err error) {
	a, ok := _Dlink_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = Dlink1pPriority(i)
	return
}

func Dlink1pPriority_Set(p *radius.Packet, value Dlink1pPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Dlink_SetVendor(p, 4, a)
}

func Dlink1pPriority_Del(p *radius.Packet) {
	_Dlink_DelVendor(p, 4)
}

func DlinkVLANName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Dlink_AddVendor(p, 10, a)
}

func DlinkVLANName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Dlink_AddVendor(p, 10, a)
}

func DlinkVLANName_Get(p *radius.Packet) (value []byte) {
	value, _ = DlinkVLANName_Lookup(p)
	return
}

func DlinkVLANName_GetString(p *radius.Packet) (value string) {
	value, _ = DlinkVLANName_LookupString(p)
	return
}

func DlinkVLANName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Dlink_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DlinkVLANName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Dlink_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DlinkVLANName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Dlink_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DlinkVLANName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Dlink_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DlinkVLANName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Dlink_SetVendor(p, 10, a)
}

func DlinkVLANName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Dlink_SetVendor(p, 10, a)
}

func DlinkVLANName_Del(p *radius.Packet) {
	_Dlink_DelVendor(p, 10)
}

func DlinkVLANID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Dlink_AddVendor(p, 11, a)
}

func DlinkVLANID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Dlink_AddVendor(p, 11, a)
}

func DlinkVLANID_Get(p *radius.Packet) (value []byte) {
	value, _ = DlinkVLANID_Lookup(p)
	return
}

func DlinkVLANID_GetString(p *radius.Packet) (value string) {
	value, _ = DlinkVLANID_LookupString(p)
	return
}

func DlinkVLANID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Dlink_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DlinkVLANID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Dlink_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DlinkVLANID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Dlink_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DlinkVLANID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Dlink_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DlinkVLANID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Dlink_SetVendor(p, 11, a)
}

func DlinkVLANID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Dlink_SetVendor(p, 11, a)
}

func DlinkVLANID_Del(p *radius.Packet) {
	_Dlink_DelVendor(p, 11)
}

func DlinkACLProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Dlink_AddVendor(p, 12, a)
}

func DlinkACLProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Dlink_AddVendor(p, 12, a)
}

func DlinkACLProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = DlinkACLProfile_Lookup(p)
	return
}

func DlinkACLProfile_GetString(p *radius.Packet) (value string) {
	value, _ = DlinkACLProfile_LookupString(p)
	return
}

func DlinkACLProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Dlink_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DlinkACLProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Dlink_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DlinkACLProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Dlink_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DlinkACLProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Dlink_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DlinkACLProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Dlink_SetVendor(p, 12, a)
}

func DlinkACLProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Dlink_SetVendor(p, 12, a)
}

func DlinkACLProfile_Del(p *radius.Packet) {
	_Dlink_DelVendor(p, 12)
}

func DlinkACLRule_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Dlink_AddVendor(p, 13, a)
}

func DlinkACLRule_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Dlink_AddVendor(p, 13, a)
}

func DlinkACLRule_Get(p *radius.Packet) (value []byte) {
	value, _ = DlinkACLRule_Lookup(p)
	return
}

func DlinkACLRule_GetString(p *radius.Packet) (value string) {
	value, _ = DlinkACLRule_LookupString(p)
	return
}

func DlinkACLRule_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Dlink_GetsVendor(p, 13) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DlinkACLRule_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Dlink_GetsVendor(p, 13) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DlinkACLRule_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Dlink_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DlinkACLRule_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Dlink_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DlinkACLRule_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Dlink_SetVendor(p, 13, a)
}

func DlinkACLRule_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Dlink_SetVendor(p, 13, a)
}

func DlinkACLRule_Del(p *radius.Packet) {
	_Dlink_DelVendor(p, 13)
}

func DlinkACLScript_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Dlink_AddVendor(p, 14, a)
}

func DlinkACLScript_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Dlink_AddVendor(p, 14, a)
}

func DlinkACLScript_Get(p *radius.Packet) (value []byte) {
	value, _ = DlinkACLScript_Lookup(p)
	return
}

func DlinkACLScript_GetString(p *radius.Packet) (value string) {
	value, _ = DlinkACLScript_LookupString(p)
	return
}

func DlinkACLScript_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Dlink_GetsVendor(p, 14) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DlinkACLScript_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Dlink_GetsVendor(p, 14) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DlinkACLScript_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Dlink_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DlinkACLScript_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Dlink_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DlinkACLScript_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Dlink_SetVendor(p, 14, a)
}

func DlinkACLScript_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Dlink_SetVendor(p, 14, a)
}

func DlinkACLScript_Del(p *radius.Packet) {
	_Dlink_DelVendor(p, 14)
}
