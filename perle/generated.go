// Code generated by radius-dict-gen. DO NOT EDIT.

package perle

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Perle_VendorID = 1966
)

func _Perle_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Perle_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Perle_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Perle_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Perle_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Perle_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Perle_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Perle_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Perle_AddVendor(p, typ, attr)
}

func _Perle_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Perle_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

type PerleClusteredPortAccess uint32

const (
	PerleClusteredPortAccess_Value_Disabled PerleClusteredPortAccess = 0
	PerleClusteredPortAccess_Value_Enabled  PerleClusteredPortAccess = 1
)

var PerleClusteredPortAccess_Strings = map[PerleClusteredPortAccess]string{
	PerleClusteredPortAccess_Value_Disabled: "Disabled",
	PerleClusteredPortAccess_Value_Enabled:  "Enabled",
}

func (a PerleClusteredPortAccess) String() string {
	if str, ok := PerleClusteredPortAccess_Strings[a]; ok {
		return str
	}
	return "PerleClusteredPortAccess(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleClusteredPortAccess_Add(p *radius.Packet, value PerleClusteredPortAccess) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 99, a)
}

func PerleClusteredPortAccess_Get(p *radius.Packet) (value PerleClusteredPortAccess) {
	value, _ = PerleClusteredPortAccess_Lookup(p)
	return
}

func PerleClusteredPortAccess_Gets(p *radius.Packet) (values []PerleClusteredPortAccess, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 99) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleClusteredPortAccess(i))
	}
	return
}

func PerleClusteredPortAccess_Lookup(p *radius.Packet) (value PerleClusteredPortAccess, err error) {
	a, ok := _Perle_LookupVendor(p, 99)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleClusteredPortAccess(i)
	return
}

func PerleClusteredPortAccess_Set(p *radius.Packet, value PerleClusteredPortAccess) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 99, a)
}

func PerleClusteredPortAccess_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 99)
}

type PerleUserLevel uint32

const (
	PerleUserLevel_Value_Admin      PerleUserLevel = 1
	PerleUserLevel_Value_Normal     PerleUserLevel = 2
	PerleUserLevel_Value_Restricted PerleUserLevel = 3
	PerleUserLevel_Value_Menu       PerleUserLevel = 4
)

var PerleUserLevel_Strings = map[PerleUserLevel]string{
	PerleUserLevel_Value_Admin:      "Admin",
	PerleUserLevel_Value_Normal:     "Normal",
	PerleUserLevel_Value_Restricted: "Restricted",
	PerleUserLevel_Value_Menu:       "Menu",
}

func (a PerleUserLevel) String() string {
	if str, ok := PerleUserLevel_Strings[a]; ok {
		return str
	}
	return "PerleUserLevel(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleUserLevel_Add(p *radius.Packet, value PerleUserLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 100, a)
}

func PerleUserLevel_Get(p *radius.Packet) (value PerleUserLevel) {
	value, _ = PerleUserLevel_Lookup(p)
	return
}

func PerleUserLevel_Gets(p *radius.Packet) (values []PerleUserLevel, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 100) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleUserLevel(i))
	}
	return
}

func PerleUserLevel_Lookup(p *radius.Packet) (value PerleUserLevel, err error) {
	a, ok := _Perle_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleUserLevel(i)
	return
}

func PerleUserLevel_Set(p *radius.Packet, value PerleUserLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 100, a)
}

func PerleUserLevel_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 100)
}

type PerleLineAccessPort1 uint32

const (
	PerleLineAccessPort1_Value_Disabled             PerleLineAccessPort1 = 0
	PerleLineAccessPort1_Value_ReadWrite            PerleLineAccessPort1 = 1
	PerleLineAccessPort1_Value_ReadInput            PerleLineAccessPort1 = 2
	PerleLineAccessPort1_Value_ReadInputWrite       PerleLineAccessPort1 = 3
	PerleLineAccessPort1_Value_ReadOutput           PerleLineAccessPort1 = 4
	PerleLineAccessPort1_Value_ReadOutputWrite      PerleLineAccessPort1 = 5
	PerleLineAccessPort1_Value_ReadOutputInput      PerleLineAccessPort1 = 6
	PerleLineAccessPort1_Value_ReadOutputInputWrite PerleLineAccessPort1 = 7
)

var PerleLineAccessPort1_Strings = map[PerleLineAccessPort1]string{
	PerleLineAccessPort1_Value_Disabled:             "Disabled",
	PerleLineAccessPort1_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort1_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort1_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort1_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort1_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort1_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort1_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort1) String() string {
	if str, ok := PerleLineAccessPort1_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort1_Add(p *radius.Packet, value PerleLineAccessPort1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 101, a)
}

func PerleLineAccessPort1_Get(p *radius.Packet) (value PerleLineAccessPort1) {
	value, _ = PerleLineAccessPort1_Lookup(p)
	return
}

func PerleLineAccessPort1_Gets(p *radius.Packet) (values []PerleLineAccessPort1, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 101) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort1(i))
	}
	return
}

func PerleLineAccessPort1_Lookup(p *radius.Packet) (value PerleLineAccessPort1, err error) {
	a, ok := _Perle_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort1(i)
	return
}

func PerleLineAccessPort1_Set(p *radius.Packet, value PerleLineAccessPort1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 101, a)
}

func PerleLineAccessPort1_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 101)
}

type PerleLineAccessPort2 uint32

const (
	PerleLineAccessPort2_Value_Disabled             PerleLineAccessPort2 = 0
	PerleLineAccessPort2_Value_ReadWrite            PerleLineAccessPort2 = 1
	PerleLineAccessPort2_Value_ReadInput            PerleLineAccessPort2 = 2
	PerleLineAccessPort2_Value_ReadInputWrite       PerleLineAccessPort2 = 3
	PerleLineAccessPort2_Value_ReadOutput           PerleLineAccessPort2 = 4
	PerleLineAccessPort2_Value_ReadOutputWrite      PerleLineAccessPort2 = 5
	PerleLineAccessPort2_Value_ReadOutputInput      PerleLineAccessPort2 = 6
	PerleLineAccessPort2_Value_ReadOutputInputWrite PerleLineAccessPort2 = 7
)

var PerleLineAccessPort2_Strings = map[PerleLineAccessPort2]string{
	PerleLineAccessPort2_Value_Disabled:             "Disabled",
	PerleLineAccessPort2_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort2_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort2_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort2_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort2_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort2_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort2_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort2) String() string {
	if str, ok := PerleLineAccessPort2_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort2_Add(p *radius.Packet, value PerleLineAccessPort2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 102, a)
}

func PerleLineAccessPort2_Get(p *radius.Packet) (value PerleLineAccessPort2) {
	value, _ = PerleLineAccessPort2_Lookup(p)
	return
}

func PerleLineAccessPort2_Gets(p *radius.Packet) (values []PerleLineAccessPort2, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 102) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort2(i))
	}
	return
}

func PerleLineAccessPort2_Lookup(p *radius.Packet) (value PerleLineAccessPort2, err error) {
	a, ok := _Perle_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort2(i)
	return
}

func PerleLineAccessPort2_Set(p *radius.Packet, value PerleLineAccessPort2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 102, a)
}

func PerleLineAccessPort2_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 102)
}

type PerleLineAccessPort3 uint32

const (
	PerleLineAccessPort3_Value_Disabled             PerleLineAccessPort3 = 0
	PerleLineAccessPort3_Value_ReadWrite            PerleLineAccessPort3 = 1
	PerleLineAccessPort3_Value_ReadInput            PerleLineAccessPort3 = 2
	PerleLineAccessPort3_Value_ReadInputWrite       PerleLineAccessPort3 = 3
	PerleLineAccessPort3_Value_ReadOutput           PerleLineAccessPort3 = 4
	PerleLineAccessPort3_Value_ReadOutputWrite      PerleLineAccessPort3 = 5
	PerleLineAccessPort3_Value_ReadOutputInput      PerleLineAccessPort3 = 6
	PerleLineAccessPort3_Value_ReadOutputInputWrite PerleLineAccessPort3 = 7
)

var PerleLineAccessPort3_Strings = map[PerleLineAccessPort3]string{
	PerleLineAccessPort3_Value_Disabled:             "Disabled",
	PerleLineAccessPort3_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort3_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort3_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort3_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort3_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort3_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort3_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort3) String() string {
	if str, ok := PerleLineAccessPort3_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort3(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort3_Add(p *radius.Packet, value PerleLineAccessPort3) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 103, a)
}

func PerleLineAccessPort3_Get(p *radius.Packet) (value PerleLineAccessPort3) {
	value, _ = PerleLineAccessPort3_Lookup(p)
	return
}

func PerleLineAccessPort3_Gets(p *radius.Packet) (values []PerleLineAccessPort3, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 103) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort3(i))
	}
	return
}

func PerleLineAccessPort3_Lookup(p *radius.Packet) (value PerleLineAccessPort3, err error) {
	a, ok := _Perle_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort3(i)
	return
}

func PerleLineAccessPort3_Set(p *radius.Packet, value PerleLineAccessPort3) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 103, a)
}

func PerleLineAccessPort3_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 103)
}

type PerleLineAccessPort4 uint32

const (
	PerleLineAccessPort4_Value_Disabled             PerleLineAccessPort4 = 0
	PerleLineAccessPort4_Value_ReadWrite            PerleLineAccessPort4 = 1
	PerleLineAccessPort4_Value_ReadInput            PerleLineAccessPort4 = 2
	PerleLineAccessPort4_Value_ReadInputWrite       PerleLineAccessPort4 = 3
	PerleLineAccessPort4_Value_ReadOutput           PerleLineAccessPort4 = 4
	PerleLineAccessPort4_Value_ReadOutputWrite      PerleLineAccessPort4 = 5
	PerleLineAccessPort4_Value_ReadOutputInput      PerleLineAccessPort4 = 6
	PerleLineAccessPort4_Value_ReadOutputInputWrite PerleLineAccessPort4 = 7
)

var PerleLineAccessPort4_Strings = map[PerleLineAccessPort4]string{
	PerleLineAccessPort4_Value_Disabled:             "Disabled",
	PerleLineAccessPort4_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort4_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort4_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort4_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort4_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort4_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort4_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort4) String() string {
	if str, ok := PerleLineAccessPort4_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort4(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort4_Add(p *radius.Packet, value PerleLineAccessPort4) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 104, a)
}

func PerleLineAccessPort4_Get(p *radius.Packet) (value PerleLineAccessPort4) {
	value, _ = PerleLineAccessPort4_Lookup(p)
	return
}

func PerleLineAccessPort4_Gets(p *radius.Packet) (values []PerleLineAccessPort4, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 104) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort4(i))
	}
	return
}

func PerleLineAccessPort4_Lookup(p *radius.Packet) (value PerleLineAccessPort4, err error) {
	a, ok := _Perle_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort4(i)
	return
}

func PerleLineAccessPort4_Set(p *radius.Packet, value PerleLineAccessPort4) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 104, a)
}

func PerleLineAccessPort4_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 104)
}

type PerleLineAccessPort5 uint32

const (
	PerleLineAccessPort5_Value_Disabled             PerleLineAccessPort5 = 0
	PerleLineAccessPort5_Value_ReadWrite            PerleLineAccessPort5 = 1
	PerleLineAccessPort5_Value_ReadInput            PerleLineAccessPort5 = 2
	PerleLineAccessPort5_Value_ReadInputWrite       PerleLineAccessPort5 = 3
	PerleLineAccessPort5_Value_ReadOutput           PerleLineAccessPort5 = 4
	PerleLineAccessPort5_Value_ReadOutputWrite      PerleLineAccessPort5 = 5
	PerleLineAccessPort5_Value_ReadOutputInput      PerleLineAccessPort5 = 6
	PerleLineAccessPort5_Value_ReadOutputInputWrite PerleLineAccessPort5 = 7
)

var PerleLineAccessPort5_Strings = map[PerleLineAccessPort5]string{
	PerleLineAccessPort5_Value_Disabled:             "Disabled",
	PerleLineAccessPort5_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort5_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort5_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort5_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort5_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort5_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort5_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort5) String() string {
	if str, ok := PerleLineAccessPort5_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort5(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort5_Add(p *radius.Packet, value PerleLineAccessPort5) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 105, a)
}

func PerleLineAccessPort5_Get(p *radius.Packet) (value PerleLineAccessPort5) {
	value, _ = PerleLineAccessPort5_Lookup(p)
	return
}

func PerleLineAccessPort5_Gets(p *radius.Packet) (values []PerleLineAccessPort5, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 105) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort5(i))
	}
	return
}

func PerleLineAccessPort5_Lookup(p *radius.Packet) (value PerleLineAccessPort5, err error) {
	a, ok := _Perle_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort5(i)
	return
}

func PerleLineAccessPort5_Set(p *radius.Packet, value PerleLineAccessPort5) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 105, a)
}

func PerleLineAccessPort5_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 105)
}

type PerleLineAccessPort6 uint32

const (
	PerleLineAccessPort6_Value_Disabled             PerleLineAccessPort6 = 0
	PerleLineAccessPort6_Value_ReadWrite            PerleLineAccessPort6 = 1
	PerleLineAccessPort6_Value_ReadInput            PerleLineAccessPort6 = 2
	PerleLineAccessPort6_Value_ReadInputWrite       PerleLineAccessPort6 = 3
	PerleLineAccessPort6_Value_ReadOutput           PerleLineAccessPort6 = 4
	PerleLineAccessPort6_Value_ReadOutputWrite      PerleLineAccessPort6 = 5
	PerleLineAccessPort6_Value_ReadOutputInput      PerleLineAccessPort6 = 6
	PerleLineAccessPort6_Value_ReadOutputInputWrite PerleLineAccessPort6 = 7
)

var PerleLineAccessPort6_Strings = map[PerleLineAccessPort6]string{
	PerleLineAccessPort6_Value_Disabled:             "Disabled",
	PerleLineAccessPort6_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort6_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort6_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort6_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort6_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort6_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort6_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort6) String() string {
	if str, ok := PerleLineAccessPort6_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort6(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort6_Add(p *radius.Packet, value PerleLineAccessPort6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 106, a)
}

func PerleLineAccessPort6_Get(p *radius.Packet) (value PerleLineAccessPort6) {
	value, _ = PerleLineAccessPort6_Lookup(p)
	return
}

func PerleLineAccessPort6_Gets(p *radius.Packet) (values []PerleLineAccessPort6, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 106) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort6(i))
	}
	return
}

func PerleLineAccessPort6_Lookup(p *radius.Packet) (value PerleLineAccessPort6, err error) {
	a, ok := _Perle_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort6(i)
	return
}

func PerleLineAccessPort6_Set(p *radius.Packet, value PerleLineAccessPort6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 106, a)
}

func PerleLineAccessPort6_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 106)
}

type PerleLineAccessPort7 uint32

const (
	PerleLineAccessPort7_Value_Disabled             PerleLineAccessPort7 = 0
	PerleLineAccessPort7_Value_ReadWrite            PerleLineAccessPort7 = 1
	PerleLineAccessPort7_Value_ReadInput            PerleLineAccessPort7 = 2
	PerleLineAccessPort7_Value_ReadInputWrite       PerleLineAccessPort7 = 3
	PerleLineAccessPort7_Value_ReadOutput           PerleLineAccessPort7 = 4
	PerleLineAccessPort7_Value_ReadOutputWrite      PerleLineAccessPort7 = 5
	PerleLineAccessPort7_Value_ReadOutputInput      PerleLineAccessPort7 = 6
	PerleLineAccessPort7_Value_ReadOutputInputWrite PerleLineAccessPort7 = 7
)

var PerleLineAccessPort7_Strings = map[PerleLineAccessPort7]string{
	PerleLineAccessPort7_Value_Disabled:             "Disabled",
	PerleLineAccessPort7_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort7_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort7_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort7_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort7_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort7_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort7_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort7) String() string {
	if str, ok := PerleLineAccessPort7_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort7(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort7_Add(p *radius.Packet, value PerleLineAccessPort7) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 107, a)
}

func PerleLineAccessPort7_Get(p *radius.Packet) (value PerleLineAccessPort7) {
	value, _ = PerleLineAccessPort7_Lookup(p)
	return
}

func PerleLineAccessPort7_Gets(p *radius.Packet) (values []PerleLineAccessPort7, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 107) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort7(i))
	}
	return
}

func PerleLineAccessPort7_Lookup(p *radius.Packet) (value PerleLineAccessPort7, err error) {
	a, ok := _Perle_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort7(i)
	return
}

func PerleLineAccessPort7_Set(p *radius.Packet, value PerleLineAccessPort7) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 107, a)
}

func PerleLineAccessPort7_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 107)
}

type PerleLineAccessPort8 uint32

const (
	PerleLineAccessPort8_Value_Disabled             PerleLineAccessPort8 = 0
	PerleLineAccessPort8_Value_ReadWrite            PerleLineAccessPort8 = 1
	PerleLineAccessPort8_Value_ReadInput            PerleLineAccessPort8 = 2
	PerleLineAccessPort8_Value_ReadInputWrite       PerleLineAccessPort8 = 3
	PerleLineAccessPort8_Value_ReadOutput           PerleLineAccessPort8 = 4
	PerleLineAccessPort8_Value_ReadOutputWrite      PerleLineAccessPort8 = 5
	PerleLineAccessPort8_Value_ReadOutputInput      PerleLineAccessPort8 = 6
	PerleLineAccessPort8_Value_ReadOutputInputWrite PerleLineAccessPort8 = 7
)

var PerleLineAccessPort8_Strings = map[PerleLineAccessPort8]string{
	PerleLineAccessPort8_Value_Disabled:             "Disabled",
	PerleLineAccessPort8_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort8_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort8_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort8_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort8_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort8_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort8_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort8) String() string {
	if str, ok := PerleLineAccessPort8_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort8(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort8_Add(p *radius.Packet, value PerleLineAccessPort8) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 108, a)
}

func PerleLineAccessPort8_Get(p *radius.Packet) (value PerleLineAccessPort8) {
	value, _ = PerleLineAccessPort8_Lookup(p)
	return
}

func PerleLineAccessPort8_Gets(p *radius.Packet) (values []PerleLineAccessPort8, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 108) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort8(i))
	}
	return
}

func PerleLineAccessPort8_Lookup(p *radius.Packet) (value PerleLineAccessPort8, err error) {
	a, ok := _Perle_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort8(i)
	return
}

func PerleLineAccessPort8_Set(p *radius.Packet, value PerleLineAccessPort8) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 108, a)
}

func PerleLineAccessPort8_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 108)
}

type PerleLineAccessPort9 uint32

const (
	PerleLineAccessPort9_Value_Disabled             PerleLineAccessPort9 = 0
	PerleLineAccessPort9_Value_ReadWrite            PerleLineAccessPort9 = 1
	PerleLineAccessPort9_Value_ReadInput            PerleLineAccessPort9 = 2
	PerleLineAccessPort9_Value_ReadInputWrite       PerleLineAccessPort9 = 3
	PerleLineAccessPort9_Value_ReadOutput           PerleLineAccessPort9 = 4
	PerleLineAccessPort9_Value_ReadOutputWrite      PerleLineAccessPort9 = 5
	PerleLineAccessPort9_Value_ReadOutputInput      PerleLineAccessPort9 = 6
	PerleLineAccessPort9_Value_ReadOutputInputWrite PerleLineAccessPort9 = 7
)

var PerleLineAccessPort9_Strings = map[PerleLineAccessPort9]string{
	PerleLineAccessPort9_Value_Disabled:             "Disabled",
	PerleLineAccessPort9_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort9_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort9_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort9_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort9_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort9_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort9_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort9) String() string {
	if str, ok := PerleLineAccessPort9_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort9(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort9_Add(p *radius.Packet, value PerleLineAccessPort9) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 109, a)
}

func PerleLineAccessPort9_Get(p *radius.Packet) (value PerleLineAccessPort9) {
	value, _ = PerleLineAccessPort9_Lookup(p)
	return
}

func PerleLineAccessPort9_Gets(p *radius.Packet) (values []PerleLineAccessPort9, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 109) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort9(i))
	}
	return
}

func PerleLineAccessPort9_Lookup(p *radius.Packet) (value PerleLineAccessPort9, err error) {
	a, ok := _Perle_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort9(i)
	return
}

func PerleLineAccessPort9_Set(p *radius.Packet, value PerleLineAccessPort9) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 109, a)
}

func PerleLineAccessPort9_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 109)
}

type PerleLineAccessPort10 uint32

const (
	PerleLineAccessPort10_Value_Disabled             PerleLineAccessPort10 = 0
	PerleLineAccessPort10_Value_ReadWrite            PerleLineAccessPort10 = 1
	PerleLineAccessPort10_Value_ReadInput            PerleLineAccessPort10 = 2
	PerleLineAccessPort10_Value_ReadInputWrite       PerleLineAccessPort10 = 3
	PerleLineAccessPort10_Value_ReadOutput           PerleLineAccessPort10 = 4
	PerleLineAccessPort10_Value_ReadOutputWrite      PerleLineAccessPort10 = 5
	PerleLineAccessPort10_Value_ReadOutputInput      PerleLineAccessPort10 = 6
	PerleLineAccessPort10_Value_ReadOutputInputWrite PerleLineAccessPort10 = 7
)

var PerleLineAccessPort10_Strings = map[PerleLineAccessPort10]string{
	PerleLineAccessPort10_Value_Disabled:             "Disabled",
	PerleLineAccessPort10_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort10_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort10_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort10_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort10_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort10_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort10_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort10) String() string {
	if str, ok := PerleLineAccessPort10_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort10(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort10_Add(p *radius.Packet, value PerleLineAccessPort10) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 110, a)
}

func PerleLineAccessPort10_Get(p *radius.Packet) (value PerleLineAccessPort10) {
	value, _ = PerleLineAccessPort10_Lookup(p)
	return
}

func PerleLineAccessPort10_Gets(p *radius.Packet) (values []PerleLineAccessPort10, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 110) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort10(i))
	}
	return
}

func PerleLineAccessPort10_Lookup(p *radius.Packet) (value PerleLineAccessPort10, err error) {
	a, ok := _Perle_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort10(i)
	return
}

func PerleLineAccessPort10_Set(p *radius.Packet, value PerleLineAccessPort10) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 110, a)
}

func PerleLineAccessPort10_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 110)
}

type PerleLineAccessPort11 uint32

const (
	PerleLineAccessPort11_Value_Disabled             PerleLineAccessPort11 = 0
	PerleLineAccessPort11_Value_ReadWrite            PerleLineAccessPort11 = 1
	PerleLineAccessPort11_Value_ReadInput            PerleLineAccessPort11 = 2
	PerleLineAccessPort11_Value_ReadInputWrite       PerleLineAccessPort11 = 3
	PerleLineAccessPort11_Value_ReadOutput           PerleLineAccessPort11 = 4
	PerleLineAccessPort11_Value_ReadOutputWrite      PerleLineAccessPort11 = 5
	PerleLineAccessPort11_Value_ReadOutputInput      PerleLineAccessPort11 = 6
	PerleLineAccessPort11_Value_ReadOutputInputWrite PerleLineAccessPort11 = 7
)

var PerleLineAccessPort11_Strings = map[PerleLineAccessPort11]string{
	PerleLineAccessPort11_Value_Disabled:             "Disabled",
	PerleLineAccessPort11_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort11_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort11_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort11_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort11_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort11_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort11_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort11) String() string {
	if str, ok := PerleLineAccessPort11_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort11(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort11_Add(p *radius.Packet, value PerleLineAccessPort11) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 111, a)
}

func PerleLineAccessPort11_Get(p *radius.Packet) (value PerleLineAccessPort11) {
	value, _ = PerleLineAccessPort11_Lookup(p)
	return
}

func PerleLineAccessPort11_Gets(p *radius.Packet) (values []PerleLineAccessPort11, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 111) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort11(i))
	}
	return
}

func PerleLineAccessPort11_Lookup(p *radius.Packet) (value PerleLineAccessPort11, err error) {
	a, ok := _Perle_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort11(i)
	return
}

func PerleLineAccessPort11_Set(p *radius.Packet, value PerleLineAccessPort11) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 111, a)
}

func PerleLineAccessPort11_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 111)
}

type PerleLineAccessPort12 uint32

const (
	PerleLineAccessPort12_Value_Disabled             PerleLineAccessPort12 = 0
	PerleLineAccessPort12_Value_ReadWrite            PerleLineAccessPort12 = 1
	PerleLineAccessPort12_Value_ReadInput            PerleLineAccessPort12 = 2
	PerleLineAccessPort12_Value_ReadInputWrite       PerleLineAccessPort12 = 3
	PerleLineAccessPort12_Value_ReadOutput           PerleLineAccessPort12 = 4
	PerleLineAccessPort12_Value_ReadOutputWrite      PerleLineAccessPort12 = 5
	PerleLineAccessPort12_Value_ReadOutputInput      PerleLineAccessPort12 = 6
	PerleLineAccessPort12_Value_ReadOutputInputWrite PerleLineAccessPort12 = 7
)

var PerleLineAccessPort12_Strings = map[PerleLineAccessPort12]string{
	PerleLineAccessPort12_Value_Disabled:             "Disabled",
	PerleLineAccessPort12_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort12_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort12_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort12_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort12_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort12_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort12_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort12) String() string {
	if str, ok := PerleLineAccessPort12_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort12(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort12_Add(p *radius.Packet, value PerleLineAccessPort12) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 112, a)
}

func PerleLineAccessPort12_Get(p *radius.Packet) (value PerleLineAccessPort12) {
	value, _ = PerleLineAccessPort12_Lookup(p)
	return
}

func PerleLineAccessPort12_Gets(p *radius.Packet) (values []PerleLineAccessPort12, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 112) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort12(i))
	}
	return
}

func PerleLineAccessPort12_Lookup(p *radius.Packet) (value PerleLineAccessPort12, err error) {
	a, ok := _Perle_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort12(i)
	return
}

func PerleLineAccessPort12_Set(p *radius.Packet, value PerleLineAccessPort12) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 112, a)
}

func PerleLineAccessPort12_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 112)
}

type PerleLineAccessPort13 uint32

const (
	PerleLineAccessPort13_Value_Disabled             PerleLineAccessPort13 = 0
	PerleLineAccessPort13_Value_ReadWrite            PerleLineAccessPort13 = 1
	PerleLineAccessPort13_Value_ReadInput            PerleLineAccessPort13 = 2
	PerleLineAccessPort13_Value_ReadInputWrite       PerleLineAccessPort13 = 3
	PerleLineAccessPort13_Value_ReadOutput           PerleLineAccessPort13 = 4
	PerleLineAccessPort13_Value_ReadOutputWrite      PerleLineAccessPort13 = 5
	PerleLineAccessPort13_Value_ReadOutputInput      PerleLineAccessPort13 = 6
	PerleLineAccessPort13_Value_ReadOutputInputWrite PerleLineAccessPort13 = 7
)

var PerleLineAccessPort13_Strings = map[PerleLineAccessPort13]string{
	PerleLineAccessPort13_Value_Disabled:             "Disabled",
	PerleLineAccessPort13_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort13_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort13_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort13_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort13_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort13_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort13_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort13) String() string {
	if str, ok := PerleLineAccessPort13_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort13(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort13_Add(p *radius.Packet, value PerleLineAccessPort13) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 113, a)
}

func PerleLineAccessPort13_Get(p *radius.Packet) (value PerleLineAccessPort13) {
	value, _ = PerleLineAccessPort13_Lookup(p)
	return
}

func PerleLineAccessPort13_Gets(p *radius.Packet) (values []PerleLineAccessPort13, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 113) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort13(i))
	}
	return
}

func PerleLineAccessPort13_Lookup(p *radius.Packet) (value PerleLineAccessPort13, err error) {
	a, ok := _Perle_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort13(i)
	return
}

func PerleLineAccessPort13_Set(p *radius.Packet, value PerleLineAccessPort13) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 113, a)
}

func PerleLineAccessPort13_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 113)
}

type PerleLineAccessPort14 uint32

const (
	PerleLineAccessPort14_Value_Disabled             PerleLineAccessPort14 = 0
	PerleLineAccessPort14_Value_ReadWrite            PerleLineAccessPort14 = 1
	PerleLineAccessPort14_Value_ReadInput            PerleLineAccessPort14 = 2
	PerleLineAccessPort14_Value_ReadInputWrite       PerleLineAccessPort14 = 3
	PerleLineAccessPort14_Value_ReadOutput           PerleLineAccessPort14 = 4
	PerleLineAccessPort14_Value_ReadOutputWrite      PerleLineAccessPort14 = 5
	PerleLineAccessPort14_Value_ReadOutputInput      PerleLineAccessPort14 = 6
	PerleLineAccessPort14_Value_ReadOutputInputWrite PerleLineAccessPort14 = 7
)

var PerleLineAccessPort14_Strings = map[PerleLineAccessPort14]string{
	PerleLineAccessPort14_Value_Disabled:             "Disabled",
	PerleLineAccessPort14_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort14_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort14_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort14_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort14_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort14_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort14_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort14) String() string {
	if str, ok := PerleLineAccessPort14_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort14(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort14_Add(p *radius.Packet, value PerleLineAccessPort14) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 114, a)
}

func PerleLineAccessPort14_Get(p *radius.Packet) (value PerleLineAccessPort14) {
	value, _ = PerleLineAccessPort14_Lookup(p)
	return
}

func PerleLineAccessPort14_Gets(p *radius.Packet) (values []PerleLineAccessPort14, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 114) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort14(i))
	}
	return
}

func PerleLineAccessPort14_Lookup(p *radius.Packet) (value PerleLineAccessPort14, err error) {
	a, ok := _Perle_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort14(i)
	return
}

func PerleLineAccessPort14_Set(p *radius.Packet, value PerleLineAccessPort14) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 114, a)
}

func PerleLineAccessPort14_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 114)
}

type PerleLineAccessPort15 uint32

const (
	PerleLineAccessPort15_Value_Disabled             PerleLineAccessPort15 = 0
	PerleLineAccessPort15_Value_ReadWrite            PerleLineAccessPort15 = 1
	PerleLineAccessPort15_Value_ReadInput            PerleLineAccessPort15 = 2
	PerleLineAccessPort15_Value_ReadInputWrite       PerleLineAccessPort15 = 3
	PerleLineAccessPort15_Value_ReadOutput           PerleLineAccessPort15 = 4
	PerleLineAccessPort15_Value_ReadOutputWrite      PerleLineAccessPort15 = 5
	PerleLineAccessPort15_Value_ReadOutputInput      PerleLineAccessPort15 = 6
	PerleLineAccessPort15_Value_ReadOutputInputWrite PerleLineAccessPort15 = 7
)

var PerleLineAccessPort15_Strings = map[PerleLineAccessPort15]string{
	PerleLineAccessPort15_Value_Disabled:             "Disabled",
	PerleLineAccessPort15_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort15_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort15_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort15_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort15_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort15_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort15_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort15) String() string {
	if str, ok := PerleLineAccessPort15_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort15(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort15_Add(p *radius.Packet, value PerleLineAccessPort15) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 115, a)
}

func PerleLineAccessPort15_Get(p *radius.Packet) (value PerleLineAccessPort15) {
	value, _ = PerleLineAccessPort15_Lookup(p)
	return
}

func PerleLineAccessPort15_Gets(p *radius.Packet) (values []PerleLineAccessPort15, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 115) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort15(i))
	}
	return
}

func PerleLineAccessPort15_Lookup(p *radius.Packet) (value PerleLineAccessPort15, err error) {
	a, ok := _Perle_LookupVendor(p, 115)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort15(i)
	return
}

func PerleLineAccessPort15_Set(p *radius.Packet, value PerleLineAccessPort15) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 115, a)
}

func PerleLineAccessPort15_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 115)
}

type PerleLineAccessPort16 uint32

const (
	PerleLineAccessPort16_Value_Disabled             PerleLineAccessPort16 = 0
	PerleLineAccessPort16_Value_ReadWrite            PerleLineAccessPort16 = 1
	PerleLineAccessPort16_Value_ReadInput            PerleLineAccessPort16 = 2
	PerleLineAccessPort16_Value_ReadInputWrite       PerleLineAccessPort16 = 3
	PerleLineAccessPort16_Value_ReadOutput           PerleLineAccessPort16 = 4
	PerleLineAccessPort16_Value_ReadOutputWrite      PerleLineAccessPort16 = 5
	PerleLineAccessPort16_Value_ReadOutputInput      PerleLineAccessPort16 = 6
	PerleLineAccessPort16_Value_ReadOutputInputWrite PerleLineAccessPort16 = 7
)

var PerleLineAccessPort16_Strings = map[PerleLineAccessPort16]string{
	PerleLineAccessPort16_Value_Disabled:             "Disabled",
	PerleLineAccessPort16_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort16_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort16_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort16_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort16_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort16_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort16_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort16) String() string {
	if str, ok := PerleLineAccessPort16_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort16(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort16_Add(p *radius.Packet, value PerleLineAccessPort16) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 116, a)
}

func PerleLineAccessPort16_Get(p *radius.Packet) (value PerleLineAccessPort16) {
	value, _ = PerleLineAccessPort16_Lookup(p)
	return
}

func PerleLineAccessPort16_Gets(p *radius.Packet) (values []PerleLineAccessPort16, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 116) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort16(i))
	}
	return
}

func PerleLineAccessPort16_Lookup(p *radius.Packet) (value PerleLineAccessPort16, err error) {
	a, ok := _Perle_LookupVendor(p, 116)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort16(i)
	return
}

func PerleLineAccessPort16_Set(p *radius.Packet, value PerleLineAccessPort16) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 116, a)
}

func PerleLineAccessPort16_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 116)
}

type PerleLineAccessPort17 uint32

const (
	PerleLineAccessPort17_Value_Disabled             PerleLineAccessPort17 = 0
	PerleLineAccessPort17_Value_ReadWrite            PerleLineAccessPort17 = 1
	PerleLineAccessPort17_Value_ReadInput            PerleLineAccessPort17 = 2
	PerleLineAccessPort17_Value_ReadInputWrite       PerleLineAccessPort17 = 3
	PerleLineAccessPort17_Value_ReadOutput           PerleLineAccessPort17 = 4
	PerleLineAccessPort17_Value_ReadOutputWrite      PerleLineAccessPort17 = 5
	PerleLineAccessPort17_Value_ReadOutputInput      PerleLineAccessPort17 = 6
	PerleLineAccessPort17_Value_ReadOutputInputWrite PerleLineAccessPort17 = 7
)

var PerleLineAccessPort17_Strings = map[PerleLineAccessPort17]string{
	PerleLineAccessPort17_Value_Disabled:             "Disabled",
	PerleLineAccessPort17_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort17_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort17_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort17_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort17_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort17_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort17_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort17) String() string {
	if str, ok := PerleLineAccessPort17_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort17(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort17_Add(p *radius.Packet, value PerleLineAccessPort17) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 117, a)
}

func PerleLineAccessPort17_Get(p *radius.Packet) (value PerleLineAccessPort17) {
	value, _ = PerleLineAccessPort17_Lookup(p)
	return
}

func PerleLineAccessPort17_Gets(p *radius.Packet) (values []PerleLineAccessPort17, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 117) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort17(i))
	}
	return
}

func PerleLineAccessPort17_Lookup(p *radius.Packet) (value PerleLineAccessPort17, err error) {
	a, ok := _Perle_LookupVendor(p, 117)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort17(i)
	return
}

func PerleLineAccessPort17_Set(p *radius.Packet, value PerleLineAccessPort17) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 117, a)
}

func PerleLineAccessPort17_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 117)
}

type PerleLineAccessPort18 uint32

const (
	PerleLineAccessPort18_Value_Disabled             PerleLineAccessPort18 = 0
	PerleLineAccessPort18_Value_ReadWrite            PerleLineAccessPort18 = 1
	PerleLineAccessPort18_Value_ReadInput            PerleLineAccessPort18 = 2
	PerleLineAccessPort18_Value_ReadInputWrite       PerleLineAccessPort18 = 3
	PerleLineAccessPort18_Value_ReadOutput           PerleLineAccessPort18 = 4
	PerleLineAccessPort18_Value_ReadOutputWrite      PerleLineAccessPort18 = 5
	PerleLineAccessPort18_Value_ReadOutputInput      PerleLineAccessPort18 = 6
	PerleLineAccessPort18_Value_ReadOutputInputWrite PerleLineAccessPort18 = 7
)

var PerleLineAccessPort18_Strings = map[PerleLineAccessPort18]string{
	PerleLineAccessPort18_Value_Disabled:             "Disabled",
	PerleLineAccessPort18_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort18_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort18_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort18_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort18_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort18_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort18_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort18) String() string {
	if str, ok := PerleLineAccessPort18_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort18(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort18_Add(p *radius.Packet, value PerleLineAccessPort18) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 118, a)
}

func PerleLineAccessPort18_Get(p *radius.Packet) (value PerleLineAccessPort18) {
	value, _ = PerleLineAccessPort18_Lookup(p)
	return
}

func PerleLineAccessPort18_Gets(p *radius.Packet) (values []PerleLineAccessPort18, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 118) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort18(i))
	}
	return
}

func PerleLineAccessPort18_Lookup(p *radius.Packet) (value PerleLineAccessPort18, err error) {
	a, ok := _Perle_LookupVendor(p, 118)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort18(i)
	return
}

func PerleLineAccessPort18_Set(p *radius.Packet, value PerleLineAccessPort18) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 118, a)
}

func PerleLineAccessPort18_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 118)
}

type PerleLineAccessPort19 uint32

const (
	PerleLineAccessPort19_Value_Disabled             PerleLineAccessPort19 = 0
	PerleLineAccessPort19_Value_ReadWrite            PerleLineAccessPort19 = 1
	PerleLineAccessPort19_Value_ReadInput            PerleLineAccessPort19 = 2
	PerleLineAccessPort19_Value_ReadInputWrite       PerleLineAccessPort19 = 3
	PerleLineAccessPort19_Value_ReadOutput           PerleLineAccessPort19 = 4
	PerleLineAccessPort19_Value_ReadOutputWrite      PerleLineAccessPort19 = 5
	PerleLineAccessPort19_Value_ReadOutputInput      PerleLineAccessPort19 = 6
	PerleLineAccessPort19_Value_ReadOutputInputWrite PerleLineAccessPort19 = 7
)

var PerleLineAccessPort19_Strings = map[PerleLineAccessPort19]string{
	PerleLineAccessPort19_Value_Disabled:             "Disabled",
	PerleLineAccessPort19_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort19_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort19_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort19_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort19_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort19_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort19_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort19) String() string {
	if str, ok := PerleLineAccessPort19_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort19(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort19_Add(p *radius.Packet, value PerleLineAccessPort19) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 119, a)
}

func PerleLineAccessPort19_Get(p *radius.Packet) (value PerleLineAccessPort19) {
	value, _ = PerleLineAccessPort19_Lookup(p)
	return
}

func PerleLineAccessPort19_Gets(p *radius.Packet) (values []PerleLineAccessPort19, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 119) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort19(i))
	}
	return
}

func PerleLineAccessPort19_Lookup(p *radius.Packet) (value PerleLineAccessPort19, err error) {
	a, ok := _Perle_LookupVendor(p, 119)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort19(i)
	return
}

func PerleLineAccessPort19_Set(p *radius.Packet, value PerleLineAccessPort19) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 119, a)
}

func PerleLineAccessPort19_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 119)
}

type PerleLineAccessPort20 uint32

const (
	PerleLineAccessPort20_Value_Disabled             PerleLineAccessPort20 = 0
	PerleLineAccessPort20_Value_ReadWrite            PerleLineAccessPort20 = 1
	PerleLineAccessPort20_Value_ReadInput            PerleLineAccessPort20 = 2
	PerleLineAccessPort20_Value_ReadInputWrite       PerleLineAccessPort20 = 3
	PerleLineAccessPort20_Value_ReadOutput           PerleLineAccessPort20 = 4
	PerleLineAccessPort20_Value_ReadOutputWrite      PerleLineAccessPort20 = 5
	PerleLineAccessPort20_Value_ReadOutputInput      PerleLineAccessPort20 = 6
	PerleLineAccessPort20_Value_ReadOutputInputWrite PerleLineAccessPort20 = 7
)

var PerleLineAccessPort20_Strings = map[PerleLineAccessPort20]string{
	PerleLineAccessPort20_Value_Disabled:             "Disabled",
	PerleLineAccessPort20_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort20_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort20_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort20_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort20_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort20_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort20_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort20) String() string {
	if str, ok := PerleLineAccessPort20_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort20(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort20_Add(p *radius.Packet, value PerleLineAccessPort20) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 120, a)
}

func PerleLineAccessPort20_Get(p *radius.Packet) (value PerleLineAccessPort20) {
	value, _ = PerleLineAccessPort20_Lookup(p)
	return
}

func PerleLineAccessPort20_Gets(p *radius.Packet) (values []PerleLineAccessPort20, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 120) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort20(i))
	}
	return
}

func PerleLineAccessPort20_Lookup(p *radius.Packet) (value PerleLineAccessPort20, err error) {
	a, ok := _Perle_LookupVendor(p, 120)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort20(i)
	return
}

func PerleLineAccessPort20_Set(p *radius.Packet, value PerleLineAccessPort20) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 120, a)
}

func PerleLineAccessPort20_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 120)
}

type PerleLineAccessPort21 uint32

const (
	PerleLineAccessPort21_Value_Disabled             PerleLineAccessPort21 = 0
	PerleLineAccessPort21_Value_ReadWrite            PerleLineAccessPort21 = 1
	PerleLineAccessPort21_Value_ReadInput            PerleLineAccessPort21 = 2
	PerleLineAccessPort21_Value_ReadInputWrite       PerleLineAccessPort21 = 3
	PerleLineAccessPort21_Value_ReadOutput           PerleLineAccessPort21 = 4
	PerleLineAccessPort21_Value_ReadOutputWrite      PerleLineAccessPort21 = 5
	PerleLineAccessPort21_Value_ReadOutputInput      PerleLineAccessPort21 = 6
	PerleLineAccessPort21_Value_ReadOutputInputWrite PerleLineAccessPort21 = 7
)

var PerleLineAccessPort21_Strings = map[PerleLineAccessPort21]string{
	PerleLineAccessPort21_Value_Disabled:             "Disabled",
	PerleLineAccessPort21_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort21_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort21_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort21_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort21_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort21_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort21_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort21) String() string {
	if str, ok := PerleLineAccessPort21_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort21(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort21_Add(p *radius.Packet, value PerleLineAccessPort21) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 121, a)
}

func PerleLineAccessPort21_Get(p *radius.Packet) (value PerleLineAccessPort21) {
	value, _ = PerleLineAccessPort21_Lookup(p)
	return
}

func PerleLineAccessPort21_Gets(p *radius.Packet) (values []PerleLineAccessPort21, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 121) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort21(i))
	}
	return
}

func PerleLineAccessPort21_Lookup(p *radius.Packet) (value PerleLineAccessPort21, err error) {
	a, ok := _Perle_LookupVendor(p, 121)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort21(i)
	return
}

func PerleLineAccessPort21_Set(p *radius.Packet, value PerleLineAccessPort21) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 121, a)
}

func PerleLineAccessPort21_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 121)
}

type PerleLineAccessPort22 uint32

const (
	PerleLineAccessPort22_Value_Disabled             PerleLineAccessPort22 = 0
	PerleLineAccessPort22_Value_ReadWrite            PerleLineAccessPort22 = 1
	PerleLineAccessPort22_Value_ReadInput            PerleLineAccessPort22 = 2
	PerleLineAccessPort22_Value_ReadInputWrite       PerleLineAccessPort22 = 3
	PerleLineAccessPort22_Value_ReadOutput           PerleLineAccessPort22 = 4
	PerleLineAccessPort22_Value_ReadOutputWrite      PerleLineAccessPort22 = 5
	PerleLineAccessPort22_Value_ReadOutputInput      PerleLineAccessPort22 = 6
	PerleLineAccessPort22_Value_ReadOutputInputWrite PerleLineAccessPort22 = 7
)

var PerleLineAccessPort22_Strings = map[PerleLineAccessPort22]string{
	PerleLineAccessPort22_Value_Disabled:             "Disabled",
	PerleLineAccessPort22_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort22_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort22_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort22_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort22_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort22_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort22_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort22) String() string {
	if str, ok := PerleLineAccessPort22_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort22(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort22_Add(p *radius.Packet, value PerleLineAccessPort22) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 122, a)
}

func PerleLineAccessPort22_Get(p *radius.Packet) (value PerleLineAccessPort22) {
	value, _ = PerleLineAccessPort22_Lookup(p)
	return
}

func PerleLineAccessPort22_Gets(p *radius.Packet) (values []PerleLineAccessPort22, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 122) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort22(i))
	}
	return
}

func PerleLineAccessPort22_Lookup(p *radius.Packet) (value PerleLineAccessPort22, err error) {
	a, ok := _Perle_LookupVendor(p, 122)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort22(i)
	return
}

func PerleLineAccessPort22_Set(p *radius.Packet, value PerleLineAccessPort22) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 122, a)
}

func PerleLineAccessPort22_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 122)
}

type PerleLineAccessPort23 uint32

const (
	PerleLineAccessPort23_Value_Disabled             PerleLineAccessPort23 = 0
	PerleLineAccessPort23_Value_ReadWrite            PerleLineAccessPort23 = 1
	PerleLineAccessPort23_Value_ReadInput            PerleLineAccessPort23 = 2
	PerleLineAccessPort23_Value_ReadInputWrite       PerleLineAccessPort23 = 3
	PerleLineAccessPort23_Value_ReadOutput           PerleLineAccessPort23 = 4
	PerleLineAccessPort23_Value_ReadOutputWrite      PerleLineAccessPort23 = 5
	PerleLineAccessPort23_Value_ReadOutputInput      PerleLineAccessPort23 = 6
	PerleLineAccessPort23_Value_ReadOutputInputWrite PerleLineAccessPort23 = 7
)

var PerleLineAccessPort23_Strings = map[PerleLineAccessPort23]string{
	PerleLineAccessPort23_Value_Disabled:             "Disabled",
	PerleLineAccessPort23_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort23_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort23_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort23_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort23_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort23_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort23_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort23) String() string {
	if str, ok := PerleLineAccessPort23_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort23(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort23_Add(p *radius.Packet, value PerleLineAccessPort23) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 123, a)
}

func PerleLineAccessPort23_Get(p *radius.Packet) (value PerleLineAccessPort23) {
	value, _ = PerleLineAccessPort23_Lookup(p)
	return
}

func PerleLineAccessPort23_Gets(p *radius.Packet) (values []PerleLineAccessPort23, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 123) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort23(i))
	}
	return
}

func PerleLineAccessPort23_Lookup(p *radius.Packet) (value PerleLineAccessPort23, err error) {
	a, ok := _Perle_LookupVendor(p, 123)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort23(i)
	return
}

func PerleLineAccessPort23_Set(p *radius.Packet, value PerleLineAccessPort23) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 123, a)
}

func PerleLineAccessPort23_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 123)
}

type PerleLineAccessPort24 uint32

const (
	PerleLineAccessPort24_Value_Disabled             PerleLineAccessPort24 = 0
	PerleLineAccessPort24_Value_ReadWrite            PerleLineAccessPort24 = 1
	PerleLineAccessPort24_Value_ReadInput            PerleLineAccessPort24 = 2
	PerleLineAccessPort24_Value_ReadInputWrite       PerleLineAccessPort24 = 3
	PerleLineAccessPort24_Value_ReadOutput           PerleLineAccessPort24 = 4
	PerleLineAccessPort24_Value_ReadOutputWrite      PerleLineAccessPort24 = 5
	PerleLineAccessPort24_Value_ReadOutputInput      PerleLineAccessPort24 = 6
	PerleLineAccessPort24_Value_ReadOutputInputWrite PerleLineAccessPort24 = 7
)

var PerleLineAccessPort24_Strings = map[PerleLineAccessPort24]string{
	PerleLineAccessPort24_Value_Disabled:             "Disabled",
	PerleLineAccessPort24_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort24_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort24_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort24_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort24_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort24_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort24_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort24) String() string {
	if str, ok := PerleLineAccessPort24_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort24(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort24_Add(p *radius.Packet, value PerleLineAccessPort24) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 124, a)
}

func PerleLineAccessPort24_Get(p *radius.Packet) (value PerleLineAccessPort24) {
	value, _ = PerleLineAccessPort24_Lookup(p)
	return
}

func PerleLineAccessPort24_Gets(p *radius.Packet) (values []PerleLineAccessPort24, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 124) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort24(i))
	}
	return
}

func PerleLineAccessPort24_Lookup(p *radius.Packet) (value PerleLineAccessPort24, err error) {
	a, ok := _Perle_LookupVendor(p, 124)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort24(i)
	return
}

func PerleLineAccessPort24_Set(p *radius.Packet, value PerleLineAccessPort24) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 124, a)
}

func PerleLineAccessPort24_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 124)
}

type PerleLineAccessPort25 uint32

const (
	PerleLineAccessPort25_Value_Disabled             PerleLineAccessPort25 = 0
	PerleLineAccessPort25_Value_ReadWrite            PerleLineAccessPort25 = 1
	PerleLineAccessPort25_Value_ReadInput            PerleLineAccessPort25 = 2
	PerleLineAccessPort25_Value_ReadInputWrite       PerleLineAccessPort25 = 3
	PerleLineAccessPort25_Value_ReadOutput           PerleLineAccessPort25 = 4
	PerleLineAccessPort25_Value_ReadOutputWrite      PerleLineAccessPort25 = 5
	PerleLineAccessPort25_Value_ReadOutputInput      PerleLineAccessPort25 = 6
	PerleLineAccessPort25_Value_ReadOutputInputWrite PerleLineAccessPort25 = 7
)

var PerleLineAccessPort25_Strings = map[PerleLineAccessPort25]string{
	PerleLineAccessPort25_Value_Disabled:             "Disabled",
	PerleLineAccessPort25_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort25_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort25_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort25_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort25_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort25_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort25_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort25) String() string {
	if str, ok := PerleLineAccessPort25_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort25(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort25_Add(p *radius.Packet, value PerleLineAccessPort25) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 125, a)
}

func PerleLineAccessPort25_Get(p *radius.Packet) (value PerleLineAccessPort25) {
	value, _ = PerleLineAccessPort25_Lookup(p)
	return
}

func PerleLineAccessPort25_Gets(p *radius.Packet) (values []PerleLineAccessPort25, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 125) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort25(i))
	}
	return
}

func PerleLineAccessPort25_Lookup(p *radius.Packet) (value PerleLineAccessPort25, err error) {
	a, ok := _Perle_LookupVendor(p, 125)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort25(i)
	return
}

func PerleLineAccessPort25_Set(p *radius.Packet, value PerleLineAccessPort25) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 125, a)
}

func PerleLineAccessPort25_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 125)
}

type PerleLineAccessPort26 uint32

const (
	PerleLineAccessPort26_Value_Disabled             PerleLineAccessPort26 = 0
	PerleLineAccessPort26_Value_ReadWrite            PerleLineAccessPort26 = 1
	PerleLineAccessPort26_Value_ReadInput            PerleLineAccessPort26 = 2
	PerleLineAccessPort26_Value_ReadInputWrite       PerleLineAccessPort26 = 3
	PerleLineAccessPort26_Value_ReadOutput           PerleLineAccessPort26 = 4
	PerleLineAccessPort26_Value_ReadOutputWrite      PerleLineAccessPort26 = 5
	PerleLineAccessPort26_Value_ReadOutputInput      PerleLineAccessPort26 = 6
	PerleLineAccessPort26_Value_ReadOutputInputWrite PerleLineAccessPort26 = 7
)

var PerleLineAccessPort26_Strings = map[PerleLineAccessPort26]string{
	PerleLineAccessPort26_Value_Disabled:             "Disabled",
	PerleLineAccessPort26_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort26_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort26_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort26_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort26_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort26_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort26_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort26) String() string {
	if str, ok := PerleLineAccessPort26_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort26(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort26_Add(p *radius.Packet, value PerleLineAccessPort26) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 126, a)
}

func PerleLineAccessPort26_Get(p *radius.Packet) (value PerleLineAccessPort26) {
	value, _ = PerleLineAccessPort26_Lookup(p)
	return
}

func PerleLineAccessPort26_Gets(p *radius.Packet) (values []PerleLineAccessPort26, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 126) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort26(i))
	}
	return
}

func PerleLineAccessPort26_Lookup(p *radius.Packet) (value PerleLineAccessPort26, err error) {
	a, ok := _Perle_LookupVendor(p, 126)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort26(i)
	return
}

func PerleLineAccessPort26_Set(p *radius.Packet, value PerleLineAccessPort26) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 126, a)
}

func PerleLineAccessPort26_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 126)
}

type PerleLineAccessPort27 uint32

const (
	PerleLineAccessPort27_Value_Disabled             PerleLineAccessPort27 = 0
	PerleLineAccessPort27_Value_ReadWrite            PerleLineAccessPort27 = 1
	PerleLineAccessPort27_Value_ReadInput            PerleLineAccessPort27 = 2
	PerleLineAccessPort27_Value_ReadInputWrite       PerleLineAccessPort27 = 3
	PerleLineAccessPort27_Value_ReadOutput           PerleLineAccessPort27 = 4
	PerleLineAccessPort27_Value_ReadOutputWrite      PerleLineAccessPort27 = 5
	PerleLineAccessPort27_Value_ReadOutputInput      PerleLineAccessPort27 = 6
	PerleLineAccessPort27_Value_ReadOutputInputWrite PerleLineAccessPort27 = 7
)

var PerleLineAccessPort27_Strings = map[PerleLineAccessPort27]string{
	PerleLineAccessPort27_Value_Disabled:             "Disabled",
	PerleLineAccessPort27_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort27_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort27_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort27_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort27_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort27_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort27_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort27) String() string {
	if str, ok := PerleLineAccessPort27_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort27(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort27_Add(p *radius.Packet, value PerleLineAccessPort27) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 127, a)
}

func PerleLineAccessPort27_Get(p *radius.Packet) (value PerleLineAccessPort27) {
	value, _ = PerleLineAccessPort27_Lookup(p)
	return
}

func PerleLineAccessPort27_Gets(p *radius.Packet) (values []PerleLineAccessPort27, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 127) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort27(i))
	}
	return
}

func PerleLineAccessPort27_Lookup(p *radius.Packet) (value PerleLineAccessPort27, err error) {
	a, ok := _Perle_LookupVendor(p, 127)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort27(i)
	return
}

func PerleLineAccessPort27_Set(p *radius.Packet, value PerleLineAccessPort27) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 127, a)
}

func PerleLineAccessPort27_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 127)
}

type PerleLineAccessPort28 uint32

const (
	PerleLineAccessPort28_Value_Disabled             PerleLineAccessPort28 = 0
	PerleLineAccessPort28_Value_ReadWrite            PerleLineAccessPort28 = 1
	PerleLineAccessPort28_Value_ReadInput            PerleLineAccessPort28 = 2
	PerleLineAccessPort28_Value_ReadInputWrite       PerleLineAccessPort28 = 3
	PerleLineAccessPort28_Value_ReadOutput           PerleLineAccessPort28 = 4
	PerleLineAccessPort28_Value_ReadOutputWrite      PerleLineAccessPort28 = 5
	PerleLineAccessPort28_Value_ReadOutputInput      PerleLineAccessPort28 = 6
	PerleLineAccessPort28_Value_ReadOutputInputWrite PerleLineAccessPort28 = 7
)

var PerleLineAccessPort28_Strings = map[PerleLineAccessPort28]string{
	PerleLineAccessPort28_Value_Disabled:             "Disabled",
	PerleLineAccessPort28_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort28_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort28_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort28_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort28_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort28_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort28_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort28) String() string {
	if str, ok := PerleLineAccessPort28_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort28(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort28_Add(p *radius.Packet, value PerleLineAccessPort28) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 128, a)
}

func PerleLineAccessPort28_Get(p *radius.Packet) (value PerleLineAccessPort28) {
	value, _ = PerleLineAccessPort28_Lookup(p)
	return
}

func PerleLineAccessPort28_Gets(p *radius.Packet) (values []PerleLineAccessPort28, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 128) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort28(i))
	}
	return
}

func PerleLineAccessPort28_Lookup(p *radius.Packet) (value PerleLineAccessPort28, err error) {
	a, ok := _Perle_LookupVendor(p, 128)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort28(i)
	return
}

func PerleLineAccessPort28_Set(p *radius.Packet, value PerleLineAccessPort28) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 128, a)
}

func PerleLineAccessPort28_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 128)
}

type PerleLineAccessPort29 uint32

const (
	PerleLineAccessPort29_Value_Disabled             PerleLineAccessPort29 = 0
	PerleLineAccessPort29_Value_ReadWrite            PerleLineAccessPort29 = 1
	PerleLineAccessPort29_Value_ReadInput            PerleLineAccessPort29 = 2
	PerleLineAccessPort29_Value_ReadInputWrite       PerleLineAccessPort29 = 3
	PerleLineAccessPort29_Value_ReadOutput           PerleLineAccessPort29 = 4
	PerleLineAccessPort29_Value_ReadOutputWrite      PerleLineAccessPort29 = 5
	PerleLineAccessPort29_Value_ReadOutputInput      PerleLineAccessPort29 = 6
	PerleLineAccessPort29_Value_ReadOutputInputWrite PerleLineAccessPort29 = 7
)

var PerleLineAccessPort29_Strings = map[PerleLineAccessPort29]string{
	PerleLineAccessPort29_Value_Disabled:             "Disabled",
	PerleLineAccessPort29_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort29_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort29_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort29_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort29_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort29_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort29_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort29) String() string {
	if str, ok := PerleLineAccessPort29_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort29(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort29_Add(p *radius.Packet, value PerleLineAccessPort29) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 129, a)
}

func PerleLineAccessPort29_Get(p *radius.Packet) (value PerleLineAccessPort29) {
	value, _ = PerleLineAccessPort29_Lookup(p)
	return
}

func PerleLineAccessPort29_Gets(p *radius.Packet) (values []PerleLineAccessPort29, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 129) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort29(i))
	}
	return
}

func PerleLineAccessPort29_Lookup(p *radius.Packet) (value PerleLineAccessPort29, err error) {
	a, ok := _Perle_LookupVendor(p, 129)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort29(i)
	return
}

func PerleLineAccessPort29_Set(p *radius.Packet, value PerleLineAccessPort29) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 129, a)
}

func PerleLineAccessPort29_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 129)
}

type PerleLineAccessPort30 uint32

const (
	PerleLineAccessPort30_Value_Disabled             PerleLineAccessPort30 = 0
	PerleLineAccessPort30_Value_ReadWrite            PerleLineAccessPort30 = 1
	PerleLineAccessPort30_Value_ReadInput            PerleLineAccessPort30 = 2
	PerleLineAccessPort30_Value_ReadInputWrite       PerleLineAccessPort30 = 3
	PerleLineAccessPort30_Value_ReadOutput           PerleLineAccessPort30 = 4
	PerleLineAccessPort30_Value_ReadOutputWrite      PerleLineAccessPort30 = 5
	PerleLineAccessPort30_Value_ReadOutputInput      PerleLineAccessPort30 = 6
	PerleLineAccessPort30_Value_ReadOutputInputWrite PerleLineAccessPort30 = 7
)

var PerleLineAccessPort30_Strings = map[PerleLineAccessPort30]string{
	PerleLineAccessPort30_Value_Disabled:             "Disabled",
	PerleLineAccessPort30_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort30_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort30_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort30_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort30_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort30_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort30_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort30) String() string {
	if str, ok := PerleLineAccessPort30_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort30(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort30_Add(p *radius.Packet, value PerleLineAccessPort30) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 130, a)
}

func PerleLineAccessPort30_Get(p *radius.Packet) (value PerleLineAccessPort30) {
	value, _ = PerleLineAccessPort30_Lookup(p)
	return
}

func PerleLineAccessPort30_Gets(p *radius.Packet) (values []PerleLineAccessPort30, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 130) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort30(i))
	}
	return
}

func PerleLineAccessPort30_Lookup(p *radius.Packet) (value PerleLineAccessPort30, err error) {
	a, ok := _Perle_LookupVendor(p, 130)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort30(i)
	return
}

func PerleLineAccessPort30_Set(p *radius.Packet, value PerleLineAccessPort30) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 130, a)
}

func PerleLineAccessPort30_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 130)
}

type PerleLineAccessPort31 uint32

const (
	PerleLineAccessPort31_Value_Disabled             PerleLineAccessPort31 = 0
	PerleLineAccessPort31_Value_ReadWrite            PerleLineAccessPort31 = 1
	PerleLineAccessPort31_Value_ReadInput            PerleLineAccessPort31 = 2
	PerleLineAccessPort31_Value_ReadInputWrite       PerleLineAccessPort31 = 3
	PerleLineAccessPort31_Value_ReadOutput           PerleLineAccessPort31 = 4
	PerleLineAccessPort31_Value_ReadOutputWrite      PerleLineAccessPort31 = 5
	PerleLineAccessPort31_Value_ReadOutputInput      PerleLineAccessPort31 = 6
	PerleLineAccessPort31_Value_ReadOutputInputWrite PerleLineAccessPort31 = 7
)

var PerleLineAccessPort31_Strings = map[PerleLineAccessPort31]string{
	PerleLineAccessPort31_Value_Disabled:             "Disabled",
	PerleLineAccessPort31_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort31_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort31_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort31_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort31_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort31_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort31_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort31) String() string {
	if str, ok := PerleLineAccessPort31_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort31(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort31_Add(p *radius.Packet, value PerleLineAccessPort31) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 131, a)
}

func PerleLineAccessPort31_Get(p *radius.Packet) (value PerleLineAccessPort31) {
	value, _ = PerleLineAccessPort31_Lookup(p)
	return
}

func PerleLineAccessPort31_Gets(p *radius.Packet) (values []PerleLineAccessPort31, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 131) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort31(i))
	}
	return
}

func PerleLineAccessPort31_Lookup(p *radius.Packet) (value PerleLineAccessPort31, err error) {
	a, ok := _Perle_LookupVendor(p, 131)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort31(i)
	return
}

func PerleLineAccessPort31_Set(p *radius.Packet, value PerleLineAccessPort31) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 131, a)
}

func PerleLineAccessPort31_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 131)
}

type PerleLineAccessPort32 uint32

const (
	PerleLineAccessPort32_Value_Disabled             PerleLineAccessPort32 = 0
	PerleLineAccessPort32_Value_ReadWrite            PerleLineAccessPort32 = 1
	PerleLineAccessPort32_Value_ReadInput            PerleLineAccessPort32 = 2
	PerleLineAccessPort32_Value_ReadInputWrite       PerleLineAccessPort32 = 3
	PerleLineAccessPort32_Value_ReadOutput           PerleLineAccessPort32 = 4
	PerleLineAccessPort32_Value_ReadOutputWrite      PerleLineAccessPort32 = 5
	PerleLineAccessPort32_Value_ReadOutputInput      PerleLineAccessPort32 = 6
	PerleLineAccessPort32_Value_ReadOutputInputWrite PerleLineAccessPort32 = 7
)

var PerleLineAccessPort32_Strings = map[PerleLineAccessPort32]string{
	PerleLineAccessPort32_Value_Disabled:             "Disabled",
	PerleLineAccessPort32_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort32_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort32_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort32_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort32_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort32_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort32_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort32) String() string {
	if str, ok := PerleLineAccessPort32_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort32(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort32_Add(p *radius.Packet, value PerleLineAccessPort32) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 132, a)
}

func PerleLineAccessPort32_Get(p *radius.Packet) (value PerleLineAccessPort32) {
	value, _ = PerleLineAccessPort32_Lookup(p)
	return
}

func PerleLineAccessPort32_Gets(p *radius.Packet) (values []PerleLineAccessPort32, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 132) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort32(i))
	}
	return
}

func PerleLineAccessPort32_Lookup(p *radius.Packet) (value PerleLineAccessPort32, err error) {
	a, ok := _Perle_LookupVendor(p, 132)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort32(i)
	return
}

func PerleLineAccessPort32_Set(p *radius.Packet, value PerleLineAccessPort32) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 132, a)
}

func PerleLineAccessPort32_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 132)
}

type PerleLineAccessPort33 uint32

const (
	PerleLineAccessPort33_Value_Disabled             PerleLineAccessPort33 = 0
	PerleLineAccessPort33_Value_ReadWrite            PerleLineAccessPort33 = 1
	PerleLineAccessPort33_Value_ReadInput            PerleLineAccessPort33 = 2
	PerleLineAccessPort33_Value_ReadInputWrite       PerleLineAccessPort33 = 3
	PerleLineAccessPort33_Value_ReadOutput           PerleLineAccessPort33 = 4
	PerleLineAccessPort33_Value_ReadOutputWrite      PerleLineAccessPort33 = 5
	PerleLineAccessPort33_Value_ReadOutputInput      PerleLineAccessPort33 = 6
	PerleLineAccessPort33_Value_ReadOutputInputWrite PerleLineAccessPort33 = 7
)

var PerleLineAccessPort33_Strings = map[PerleLineAccessPort33]string{
	PerleLineAccessPort33_Value_Disabled:             "Disabled",
	PerleLineAccessPort33_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort33_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort33_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort33_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort33_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort33_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort33_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort33) String() string {
	if str, ok := PerleLineAccessPort33_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort33(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort33_Add(p *radius.Packet, value PerleLineAccessPort33) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 133, a)
}

func PerleLineAccessPort33_Get(p *radius.Packet) (value PerleLineAccessPort33) {
	value, _ = PerleLineAccessPort33_Lookup(p)
	return
}

func PerleLineAccessPort33_Gets(p *radius.Packet) (values []PerleLineAccessPort33, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 133) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort33(i))
	}
	return
}

func PerleLineAccessPort33_Lookup(p *radius.Packet) (value PerleLineAccessPort33, err error) {
	a, ok := _Perle_LookupVendor(p, 133)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort33(i)
	return
}

func PerleLineAccessPort33_Set(p *radius.Packet, value PerleLineAccessPort33) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 133, a)
}

func PerleLineAccessPort33_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 133)
}

type PerleLineAccessPort34 uint32

const (
	PerleLineAccessPort34_Value_Disabled             PerleLineAccessPort34 = 0
	PerleLineAccessPort34_Value_ReadWrite            PerleLineAccessPort34 = 1
	PerleLineAccessPort34_Value_ReadInput            PerleLineAccessPort34 = 2
	PerleLineAccessPort34_Value_ReadInputWrite       PerleLineAccessPort34 = 3
	PerleLineAccessPort34_Value_ReadOutput           PerleLineAccessPort34 = 4
	PerleLineAccessPort34_Value_ReadOutputWrite      PerleLineAccessPort34 = 5
	PerleLineAccessPort34_Value_ReadOutputInput      PerleLineAccessPort34 = 6
	PerleLineAccessPort34_Value_ReadOutputInputWrite PerleLineAccessPort34 = 7
)

var PerleLineAccessPort34_Strings = map[PerleLineAccessPort34]string{
	PerleLineAccessPort34_Value_Disabled:             "Disabled",
	PerleLineAccessPort34_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort34_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort34_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort34_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort34_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort34_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort34_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort34) String() string {
	if str, ok := PerleLineAccessPort34_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort34(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort34_Add(p *radius.Packet, value PerleLineAccessPort34) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 134, a)
}

func PerleLineAccessPort34_Get(p *radius.Packet) (value PerleLineAccessPort34) {
	value, _ = PerleLineAccessPort34_Lookup(p)
	return
}

func PerleLineAccessPort34_Gets(p *radius.Packet) (values []PerleLineAccessPort34, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 134) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort34(i))
	}
	return
}

func PerleLineAccessPort34_Lookup(p *radius.Packet) (value PerleLineAccessPort34, err error) {
	a, ok := _Perle_LookupVendor(p, 134)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort34(i)
	return
}

func PerleLineAccessPort34_Set(p *radius.Packet, value PerleLineAccessPort34) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 134, a)
}

func PerleLineAccessPort34_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 134)
}

type PerleLineAccessPort35 uint32

const (
	PerleLineAccessPort35_Value_Disabled             PerleLineAccessPort35 = 0
	PerleLineAccessPort35_Value_ReadWrite            PerleLineAccessPort35 = 1
	PerleLineAccessPort35_Value_ReadInput            PerleLineAccessPort35 = 2
	PerleLineAccessPort35_Value_ReadInputWrite       PerleLineAccessPort35 = 3
	PerleLineAccessPort35_Value_ReadOutput           PerleLineAccessPort35 = 4
	PerleLineAccessPort35_Value_ReadOutputWrite      PerleLineAccessPort35 = 5
	PerleLineAccessPort35_Value_ReadOutputInput      PerleLineAccessPort35 = 6
	PerleLineAccessPort35_Value_ReadOutputInputWrite PerleLineAccessPort35 = 7
)

var PerleLineAccessPort35_Strings = map[PerleLineAccessPort35]string{
	PerleLineAccessPort35_Value_Disabled:             "Disabled",
	PerleLineAccessPort35_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort35_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort35_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort35_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort35_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort35_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort35_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort35) String() string {
	if str, ok := PerleLineAccessPort35_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort35(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort35_Add(p *radius.Packet, value PerleLineAccessPort35) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 135, a)
}

func PerleLineAccessPort35_Get(p *radius.Packet) (value PerleLineAccessPort35) {
	value, _ = PerleLineAccessPort35_Lookup(p)
	return
}

func PerleLineAccessPort35_Gets(p *radius.Packet) (values []PerleLineAccessPort35, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 135) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort35(i))
	}
	return
}

func PerleLineAccessPort35_Lookup(p *radius.Packet) (value PerleLineAccessPort35, err error) {
	a, ok := _Perle_LookupVendor(p, 135)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort35(i)
	return
}

func PerleLineAccessPort35_Set(p *radius.Packet, value PerleLineAccessPort35) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 135, a)
}

func PerleLineAccessPort35_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 135)
}

type PerleLineAccessPort36 uint32

const (
	PerleLineAccessPort36_Value_Disabled             PerleLineAccessPort36 = 0
	PerleLineAccessPort36_Value_ReadWrite            PerleLineAccessPort36 = 1
	PerleLineAccessPort36_Value_ReadInput            PerleLineAccessPort36 = 2
	PerleLineAccessPort36_Value_ReadInputWrite       PerleLineAccessPort36 = 3
	PerleLineAccessPort36_Value_ReadOutput           PerleLineAccessPort36 = 4
	PerleLineAccessPort36_Value_ReadOutputWrite      PerleLineAccessPort36 = 5
	PerleLineAccessPort36_Value_ReadOutputInput      PerleLineAccessPort36 = 6
	PerleLineAccessPort36_Value_ReadOutputInputWrite PerleLineAccessPort36 = 7
)

var PerleLineAccessPort36_Strings = map[PerleLineAccessPort36]string{
	PerleLineAccessPort36_Value_Disabled:             "Disabled",
	PerleLineAccessPort36_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort36_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort36_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort36_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort36_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort36_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort36_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort36) String() string {
	if str, ok := PerleLineAccessPort36_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort36(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort36_Add(p *radius.Packet, value PerleLineAccessPort36) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 136, a)
}

func PerleLineAccessPort36_Get(p *radius.Packet) (value PerleLineAccessPort36) {
	value, _ = PerleLineAccessPort36_Lookup(p)
	return
}

func PerleLineAccessPort36_Gets(p *radius.Packet) (values []PerleLineAccessPort36, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 136) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort36(i))
	}
	return
}

func PerleLineAccessPort36_Lookup(p *radius.Packet) (value PerleLineAccessPort36, err error) {
	a, ok := _Perle_LookupVendor(p, 136)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort36(i)
	return
}

func PerleLineAccessPort36_Set(p *radius.Packet, value PerleLineAccessPort36) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 136, a)
}

func PerleLineAccessPort36_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 136)
}

type PerleLineAccessPort37 uint32

const (
	PerleLineAccessPort37_Value_Disabled             PerleLineAccessPort37 = 0
	PerleLineAccessPort37_Value_ReadWrite            PerleLineAccessPort37 = 1
	PerleLineAccessPort37_Value_ReadInput            PerleLineAccessPort37 = 2
	PerleLineAccessPort37_Value_ReadInputWrite       PerleLineAccessPort37 = 3
	PerleLineAccessPort37_Value_ReadOutput           PerleLineAccessPort37 = 4
	PerleLineAccessPort37_Value_ReadOutputWrite      PerleLineAccessPort37 = 5
	PerleLineAccessPort37_Value_ReadOutputInput      PerleLineAccessPort37 = 6
	PerleLineAccessPort37_Value_ReadOutputInputWrite PerleLineAccessPort37 = 7
)

var PerleLineAccessPort37_Strings = map[PerleLineAccessPort37]string{
	PerleLineAccessPort37_Value_Disabled:             "Disabled",
	PerleLineAccessPort37_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort37_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort37_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort37_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort37_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort37_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort37_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort37) String() string {
	if str, ok := PerleLineAccessPort37_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort37(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort37_Add(p *radius.Packet, value PerleLineAccessPort37) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 137, a)
}

func PerleLineAccessPort37_Get(p *radius.Packet) (value PerleLineAccessPort37) {
	value, _ = PerleLineAccessPort37_Lookup(p)
	return
}

func PerleLineAccessPort37_Gets(p *radius.Packet) (values []PerleLineAccessPort37, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 137) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort37(i))
	}
	return
}

func PerleLineAccessPort37_Lookup(p *radius.Packet) (value PerleLineAccessPort37, err error) {
	a, ok := _Perle_LookupVendor(p, 137)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort37(i)
	return
}

func PerleLineAccessPort37_Set(p *radius.Packet, value PerleLineAccessPort37) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 137, a)
}

func PerleLineAccessPort37_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 137)
}

type PerleLineAccessPort38 uint32

const (
	PerleLineAccessPort38_Value_Disabled             PerleLineAccessPort38 = 0
	PerleLineAccessPort38_Value_ReadWrite            PerleLineAccessPort38 = 1
	PerleLineAccessPort38_Value_ReadInput            PerleLineAccessPort38 = 2
	PerleLineAccessPort38_Value_ReadInputWrite       PerleLineAccessPort38 = 3
	PerleLineAccessPort38_Value_ReadOutput           PerleLineAccessPort38 = 4
	PerleLineAccessPort38_Value_ReadOutputWrite      PerleLineAccessPort38 = 5
	PerleLineAccessPort38_Value_ReadOutputInput      PerleLineAccessPort38 = 6
	PerleLineAccessPort38_Value_ReadOutputInputWrite PerleLineAccessPort38 = 7
)

var PerleLineAccessPort38_Strings = map[PerleLineAccessPort38]string{
	PerleLineAccessPort38_Value_Disabled:             "Disabled",
	PerleLineAccessPort38_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort38_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort38_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort38_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort38_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort38_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort38_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort38) String() string {
	if str, ok := PerleLineAccessPort38_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort38(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort38_Add(p *radius.Packet, value PerleLineAccessPort38) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 138, a)
}

func PerleLineAccessPort38_Get(p *radius.Packet) (value PerleLineAccessPort38) {
	value, _ = PerleLineAccessPort38_Lookup(p)
	return
}

func PerleLineAccessPort38_Gets(p *radius.Packet) (values []PerleLineAccessPort38, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 138) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort38(i))
	}
	return
}

func PerleLineAccessPort38_Lookup(p *radius.Packet) (value PerleLineAccessPort38, err error) {
	a, ok := _Perle_LookupVendor(p, 138)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort38(i)
	return
}

func PerleLineAccessPort38_Set(p *radius.Packet, value PerleLineAccessPort38) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 138, a)
}

func PerleLineAccessPort38_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 138)
}

type PerleLineAccessPort39 uint32

const (
	PerleLineAccessPort39_Value_Disabled             PerleLineAccessPort39 = 0
	PerleLineAccessPort39_Value_ReadWrite            PerleLineAccessPort39 = 1
	PerleLineAccessPort39_Value_ReadInput            PerleLineAccessPort39 = 2
	PerleLineAccessPort39_Value_ReadInputWrite       PerleLineAccessPort39 = 3
	PerleLineAccessPort39_Value_ReadOutput           PerleLineAccessPort39 = 4
	PerleLineAccessPort39_Value_ReadOutputWrite      PerleLineAccessPort39 = 5
	PerleLineAccessPort39_Value_ReadOutputInput      PerleLineAccessPort39 = 6
	PerleLineAccessPort39_Value_ReadOutputInputWrite PerleLineAccessPort39 = 7
)

var PerleLineAccessPort39_Strings = map[PerleLineAccessPort39]string{
	PerleLineAccessPort39_Value_Disabled:             "Disabled",
	PerleLineAccessPort39_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort39_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort39_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort39_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort39_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort39_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort39_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort39) String() string {
	if str, ok := PerleLineAccessPort39_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort39(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort39_Add(p *radius.Packet, value PerleLineAccessPort39) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 139, a)
}

func PerleLineAccessPort39_Get(p *radius.Packet) (value PerleLineAccessPort39) {
	value, _ = PerleLineAccessPort39_Lookup(p)
	return
}

func PerleLineAccessPort39_Gets(p *radius.Packet) (values []PerleLineAccessPort39, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 139) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort39(i))
	}
	return
}

func PerleLineAccessPort39_Lookup(p *radius.Packet) (value PerleLineAccessPort39, err error) {
	a, ok := _Perle_LookupVendor(p, 139)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort39(i)
	return
}

func PerleLineAccessPort39_Set(p *radius.Packet, value PerleLineAccessPort39) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 139, a)
}

func PerleLineAccessPort39_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 139)
}

type PerleLineAccessPort40 uint32

const (
	PerleLineAccessPort40_Value_Disabled             PerleLineAccessPort40 = 0
	PerleLineAccessPort40_Value_ReadWrite            PerleLineAccessPort40 = 1
	PerleLineAccessPort40_Value_ReadInput            PerleLineAccessPort40 = 2
	PerleLineAccessPort40_Value_ReadInputWrite       PerleLineAccessPort40 = 3
	PerleLineAccessPort40_Value_ReadOutput           PerleLineAccessPort40 = 4
	PerleLineAccessPort40_Value_ReadOutputWrite      PerleLineAccessPort40 = 5
	PerleLineAccessPort40_Value_ReadOutputInput      PerleLineAccessPort40 = 6
	PerleLineAccessPort40_Value_ReadOutputInputWrite PerleLineAccessPort40 = 7
)

var PerleLineAccessPort40_Strings = map[PerleLineAccessPort40]string{
	PerleLineAccessPort40_Value_Disabled:             "Disabled",
	PerleLineAccessPort40_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort40_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort40_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort40_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort40_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort40_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort40_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort40) String() string {
	if str, ok := PerleLineAccessPort40_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort40(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort40_Add(p *radius.Packet, value PerleLineAccessPort40) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 140, a)
}

func PerleLineAccessPort40_Get(p *radius.Packet) (value PerleLineAccessPort40) {
	value, _ = PerleLineAccessPort40_Lookup(p)
	return
}

func PerleLineAccessPort40_Gets(p *radius.Packet) (values []PerleLineAccessPort40, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 140) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort40(i))
	}
	return
}

func PerleLineAccessPort40_Lookup(p *radius.Packet) (value PerleLineAccessPort40, err error) {
	a, ok := _Perle_LookupVendor(p, 140)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort40(i)
	return
}

func PerleLineAccessPort40_Set(p *radius.Packet, value PerleLineAccessPort40) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 140, a)
}

func PerleLineAccessPort40_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 140)
}

type PerleLineAccessPort41 uint32

const (
	PerleLineAccessPort41_Value_Disabled             PerleLineAccessPort41 = 0
	PerleLineAccessPort41_Value_ReadWrite            PerleLineAccessPort41 = 1
	PerleLineAccessPort41_Value_ReadInput            PerleLineAccessPort41 = 2
	PerleLineAccessPort41_Value_ReadInputWrite       PerleLineAccessPort41 = 3
	PerleLineAccessPort41_Value_ReadOutput           PerleLineAccessPort41 = 4
	PerleLineAccessPort41_Value_ReadOutputWrite      PerleLineAccessPort41 = 5
	PerleLineAccessPort41_Value_ReadOutputInput      PerleLineAccessPort41 = 6
	PerleLineAccessPort41_Value_ReadOutputInputWrite PerleLineAccessPort41 = 7
)

var PerleLineAccessPort41_Strings = map[PerleLineAccessPort41]string{
	PerleLineAccessPort41_Value_Disabled:             "Disabled",
	PerleLineAccessPort41_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort41_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort41_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort41_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort41_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort41_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort41_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort41) String() string {
	if str, ok := PerleLineAccessPort41_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort41(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort41_Add(p *radius.Packet, value PerleLineAccessPort41) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 141, a)
}

func PerleLineAccessPort41_Get(p *radius.Packet) (value PerleLineAccessPort41) {
	value, _ = PerleLineAccessPort41_Lookup(p)
	return
}

func PerleLineAccessPort41_Gets(p *radius.Packet) (values []PerleLineAccessPort41, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 141) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort41(i))
	}
	return
}

func PerleLineAccessPort41_Lookup(p *radius.Packet) (value PerleLineAccessPort41, err error) {
	a, ok := _Perle_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort41(i)
	return
}

func PerleLineAccessPort41_Set(p *radius.Packet, value PerleLineAccessPort41) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 141, a)
}

func PerleLineAccessPort41_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 141)
}

type PerleLineAccessPort42 uint32

const (
	PerleLineAccessPort42_Value_Disabled             PerleLineAccessPort42 = 0
	PerleLineAccessPort42_Value_ReadWrite            PerleLineAccessPort42 = 1
	PerleLineAccessPort42_Value_ReadInput            PerleLineAccessPort42 = 2
	PerleLineAccessPort42_Value_ReadInputWrite       PerleLineAccessPort42 = 3
	PerleLineAccessPort42_Value_ReadOutput           PerleLineAccessPort42 = 4
	PerleLineAccessPort42_Value_ReadOutputWrite      PerleLineAccessPort42 = 5
	PerleLineAccessPort42_Value_ReadOutputInput      PerleLineAccessPort42 = 6
	PerleLineAccessPort42_Value_ReadOutputInputWrite PerleLineAccessPort42 = 7
)

var PerleLineAccessPort42_Strings = map[PerleLineAccessPort42]string{
	PerleLineAccessPort42_Value_Disabled:             "Disabled",
	PerleLineAccessPort42_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort42_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort42_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort42_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort42_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort42_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort42_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort42) String() string {
	if str, ok := PerleLineAccessPort42_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort42(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort42_Add(p *radius.Packet, value PerleLineAccessPort42) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 142, a)
}

func PerleLineAccessPort42_Get(p *radius.Packet) (value PerleLineAccessPort42) {
	value, _ = PerleLineAccessPort42_Lookup(p)
	return
}

func PerleLineAccessPort42_Gets(p *radius.Packet) (values []PerleLineAccessPort42, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 142) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort42(i))
	}
	return
}

func PerleLineAccessPort42_Lookup(p *radius.Packet) (value PerleLineAccessPort42, err error) {
	a, ok := _Perle_LookupVendor(p, 142)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort42(i)
	return
}

func PerleLineAccessPort42_Set(p *radius.Packet, value PerleLineAccessPort42) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 142, a)
}

func PerleLineAccessPort42_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 142)
}

type PerleLineAccessPort43 uint32

const (
	PerleLineAccessPort43_Value_Disabled             PerleLineAccessPort43 = 0
	PerleLineAccessPort43_Value_ReadWrite            PerleLineAccessPort43 = 1
	PerleLineAccessPort43_Value_ReadInput            PerleLineAccessPort43 = 2
	PerleLineAccessPort43_Value_ReadInputWrite       PerleLineAccessPort43 = 3
	PerleLineAccessPort43_Value_ReadOutput           PerleLineAccessPort43 = 4
	PerleLineAccessPort43_Value_ReadOutputWrite      PerleLineAccessPort43 = 5
	PerleLineAccessPort43_Value_ReadOutputInput      PerleLineAccessPort43 = 6
	PerleLineAccessPort43_Value_ReadOutputInputWrite PerleLineAccessPort43 = 7
)

var PerleLineAccessPort43_Strings = map[PerleLineAccessPort43]string{
	PerleLineAccessPort43_Value_Disabled:             "Disabled",
	PerleLineAccessPort43_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort43_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort43_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort43_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort43_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort43_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort43_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort43) String() string {
	if str, ok := PerleLineAccessPort43_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort43(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort43_Add(p *radius.Packet, value PerleLineAccessPort43) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 143, a)
}

func PerleLineAccessPort43_Get(p *radius.Packet) (value PerleLineAccessPort43) {
	value, _ = PerleLineAccessPort43_Lookup(p)
	return
}

func PerleLineAccessPort43_Gets(p *radius.Packet) (values []PerleLineAccessPort43, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 143) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort43(i))
	}
	return
}

func PerleLineAccessPort43_Lookup(p *radius.Packet) (value PerleLineAccessPort43, err error) {
	a, ok := _Perle_LookupVendor(p, 143)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort43(i)
	return
}

func PerleLineAccessPort43_Set(p *radius.Packet, value PerleLineAccessPort43) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 143, a)
}

func PerleLineAccessPort43_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 143)
}

type PerleLineAccessPort44 uint32

const (
	PerleLineAccessPort44_Value_Disabled             PerleLineAccessPort44 = 0
	PerleLineAccessPort44_Value_ReadWrite            PerleLineAccessPort44 = 1
	PerleLineAccessPort44_Value_ReadInput            PerleLineAccessPort44 = 2
	PerleLineAccessPort44_Value_ReadInputWrite       PerleLineAccessPort44 = 3
	PerleLineAccessPort44_Value_ReadOutput           PerleLineAccessPort44 = 4
	PerleLineAccessPort44_Value_ReadOutputWrite      PerleLineAccessPort44 = 5
	PerleLineAccessPort44_Value_ReadOutputInput      PerleLineAccessPort44 = 6
	PerleLineAccessPort44_Value_ReadOutputInputWrite PerleLineAccessPort44 = 7
)

var PerleLineAccessPort44_Strings = map[PerleLineAccessPort44]string{
	PerleLineAccessPort44_Value_Disabled:             "Disabled",
	PerleLineAccessPort44_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort44_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort44_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort44_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort44_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort44_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort44_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort44) String() string {
	if str, ok := PerleLineAccessPort44_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort44(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort44_Add(p *radius.Packet, value PerleLineAccessPort44) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 144, a)
}

func PerleLineAccessPort44_Get(p *radius.Packet) (value PerleLineAccessPort44) {
	value, _ = PerleLineAccessPort44_Lookup(p)
	return
}

func PerleLineAccessPort44_Gets(p *radius.Packet) (values []PerleLineAccessPort44, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 144) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort44(i))
	}
	return
}

func PerleLineAccessPort44_Lookup(p *radius.Packet) (value PerleLineAccessPort44, err error) {
	a, ok := _Perle_LookupVendor(p, 144)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort44(i)
	return
}

func PerleLineAccessPort44_Set(p *radius.Packet, value PerleLineAccessPort44) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 144, a)
}

func PerleLineAccessPort44_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 144)
}

type PerleLineAccessPort45 uint32

const (
	PerleLineAccessPort45_Value_Disabled             PerleLineAccessPort45 = 0
	PerleLineAccessPort45_Value_ReadWrite            PerleLineAccessPort45 = 1
	PerleLineAccessPort45_Value_ReadInput            PerleLineAccessPort45 = 2
	PerleLineAccessPort45_Value_ReadInputWrite       PerleLineAccessPort45 = 3
	PerleLineAccessPort45_Value_ReadOutput           PerleLineAccessPort45 = 4
	PerleLineAccessPort45_Value_ReadOutputWrite      PerleLineAccessPort45 = 5
	PerleLineAccessPort45_Value_ReadOutputInput      PerleLineAccessPort45 = 6
	PerleLineAccessPort45_Value_ReadOutputInputWrite PerleLineAccessPort45 = 7
)

var PerleLineAccessPort45_Strings = map[PerleLineAccessPort45]string{
	PerleLineAccessPort45_Value_Disabled:             "Disabled",
	PerleLineAccessPort45_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort45_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort45_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort45_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort45_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort45_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort45_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort45) String() string {
	if str, ok := PerleLineAccessPort45_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort45(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort45_Add(p *radius.Packet, value PerleLineAccessPort45) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 145, a)
}

func PerleLineAccessPort45_Get(p *radius.Packet) (value PerleLineAccessPort45) {
	value, _ = PerleLineAccessPort45_Lookup(p)
	return
}

func PerleLineAccessPort45_Gets(p *radius.Packet) (values []PerleLineAccessPort45, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 145) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort45(i))
	}
	return
}

func PerleLineAccessPort45_Lookup(p *radius.Packet) (value PerleLineAccessPort45, err error) {
	a, ok := _Perle_LookupVendor(p, 145)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort45(i)
	return
}

func PerleLineAccessPort45_Set(p *radius.Packet, value PerleLineAccessPort45) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 145, a)
}

func PerleLineAccessPort45_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 145)
}

type PerleLineAccessPort46 uint32

const (
	PerleLineAccessPort46_Value_Disabled             PerleLineAccessPort46 = 0
	PerleLineAccessPort46_Value_ReadWrite            PerleLineAccessPort46 = 1
	PerleLineAccessPort46_Value_ReadInput            PerleLineAccessPort46 = 2
	PerleLineAccessPort46_Value_ReadInputWrite       PerleLineAccessPort46 = 3
	PerleLineAccessPort46_Value_ReadOutput           PerleLineAccessPort46 = 4
	PerleLineAccessPort46_Value_ReadOutputWrite      PerleLineAccessPort46 = 5
	PerleLineAccessPort46_Value_ReadOutputInput      PerleLineAccessPort46 = 6
	PerleLineAccessPort46_Value_ReadOutputInputWrite PerleLineAccessPort46 = 7
)

var PerleLineAccessPort46_Strings = map[PerleLineAccessPort46]string{
	PerleLineAccessPort46_Value_Disabled:             "Disabled",
	PerleLineAccessPort46_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort46_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort46_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort46_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort46_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort46_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort46_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort46) String() string {
	if str, ok := PerleLineAccessPort46_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort46(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort46_Add(p *radius.Packet, value PerleLineAccessPort46) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 146, a)
}

func PerleLineAccessPort46_Get(p *radius.Packet) (value PerleLineAccessPort46) {
	value, _ = PerleLineAccessPort46_Lookup(p)
	return
}

func PerleLineAccessPort46_Gets(p *radius.Packet) (values []PerleLineAccessPort46, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 146) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort46(i))
	}
	return
}

func PerleLineAccessPort46_Lookup(p *radius.Packet) (value PerleLineAccessPort46, err error) {
	a, ok := _Perle_LookupVendor(p, 146)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort46(i)
	return
}

func PerleLineAccessPort46_Set(p *radius.Packet, value PerleLineAccessPort46) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 146, a)
}

func PerleLineAccessPort46_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 146)
}

type PerleLineAccessPort47 uint32

const (
	PerleLineAccessPort47_Value_Disabled             PerleLineAccessPort47 = 0
	PerleLineAccessPort47_Value_ReadWrite            PerleLineAccessPort47 = 1
	PerleLineAccessPort47_Value_ReadInput            PerleLineAccessPort47 = 2
	PerleLineAccessPort47_Value_ReadInputWrite       PerleLineAccessPort47 = 3
	PerleLineAccessPort47_Value_ReadOutput           PerleLineAccessPort47 = 4
	PerleLineAccessPort47_Value_ReadOutputWrite      PerleLineAccessPort47 = 5
	PerleLineAccessPort47_Value_ReadOutputInput      PerleLineAccessPort47 = 6
	PerleLineAccessPort47_Value_ReadOutputInputWrite PerleLineAccessPort47 = 7
)

var PerleLineAccessPort47_Strings = map[PerleLineAccessPort47]string{
	PerleLineAccessPort47_Value_Disabled:             "Disabled",
	PerleLineAccessPort47_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort47_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort47_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort47_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort47_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort47_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort47_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort47) String() string {
	if str, ok := PerleLineAccessPort47_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort47(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort47_Add(p *radius.Packet, value PerleLineAccessPort47) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 147, a)
}

func PerleLineAccessPort47_Get(p *radius.Packet) (value PerleLineAccessPort47) {
	value, _ = PerleLineAccessPort47_Lookup(p)
	return
}

func PerleLineAccessPort47_Gets(p *radius.Packet) (values []PerleLineAccessPort47, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 147) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort47(i))
	}
	return
}

func PerleLineAccessPort47_Lookup(p *radius.Packet) (value PerleLineAccessPort47, err error) {
	a, ok := _Perle_LookupVendor(p, 147)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort47(i)
	return
}

func PerleLineAccessPort47_Set(p *radius.Packet, value PerleLineAccessPort47) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 147, a)
}

func PerleLineAccessPort47_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 147)
}

type PerleLineAccessPort48 uint32

const (
	PerleLineAccessPort48_Value_Disabled             PerleLineAccessPort48 = 0
	PerleLineAccessPort48_Value_ReadWrite            PerleLineAccessPort48 = 1
	PerleLineAccessPort48_Value_ReadInput            PerleLineAccessPort48 = 2
	PerleLineAccessPort48_Value_ReadInputWrite       PerleLineAccessPort48 = 3
	PerleLineAccessPort48_Value_ReadOutput           PerleLineAccessPort48 = 4
	PerleLineAccessPort48_Value_ReadOutputWrite      PerleLineAccessPort48 = 5
	PerleLineAccessPort48_Value_ReadOutputInput      PerleLineAccessPort48 = 6
	PerleLineAccessPort48_Value_ReadOutputInputWrite PerleLineAccessPort48 = 7
)

var PerleLineAccessPort48_Strings = map[PerleLineAccessPort48]string{
	PerleLineAccessPort48_Value_Disabled:             "Disabled",
	PerleLineAccessPort48_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort48_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort48_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort48_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort48_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort48_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort48_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort48) String() string {
	if str, ok := PerleLineAccessPort48_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort48(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort48_Add(p *radius.Packet, value PerleLineAccessPort48) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 148, a)
}

func PerleLineAccessPort48_Get(p *radius.Packet) (value PerleLineAccessPort48) {
	value, _ = PerleLineAccessPort48_Lookup(p)
	return
}

func PerleLineAccessPort48_Gets(p *radius.Packet) (values []PerleLineAccessPort48, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 148) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort48(i))
	}
	return
}

func PerleLineAccessPort48_Lookup(p *radius.Packet) (value PerleLineAccessPort48, err error) {
	a, ok := _Perle_LookupVendor(p, 148)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort48(i)
	return
}

func PerleLineAccessPort48_Set(p *radius.Packet, value PerleLineAccessPort48) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 148, a)
}

func PerleLineAccessPort48_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 148)
}

type PerleLineAccessPort49 uint32

const (
	PerleLineAccessPort49_Value_Disabled             PerleLineAccessPort49 = 0
	PerleLineAccessPort49_Value_ReadWrite            PerleLineAccessPort49 = 1
	PerleLineAccessPort49_Value_ReadInput            PerleLineAccessPort49 = 2
	PerleLineAccessPort49_Value_ReadInputWrite       PerleLineAccessPort49 = 3
	PerleLineAccessPort49_Value_ReadOutput           PerleLineAccessPort49 = 4
	PerleLineAccessPort49_Value_ReadOutputWrite      PerleLineAccessPort49 = 5
	PerleLineAccessPort49_Value_ReadOutputInput      PerleLineAccessPort49 = 6
	PerleLineAccessPort49_Value_ReadOutputInputWrite PerleLineAccessPort49 = 7
)

var PerleLineAccessPort49_Strings = map[PerleLineAccessPort49]string{
	PerleLineAccessPort49_Value_Disabled:             "Disabled",
	PerleLineAccessPort49_Value_ReadWrite:            "Read-Write",
	PerleLineAccessPort49_Value_ReadInput:            "Read-Input",
	PerleLineAccessPort49_Value_ReadInputWrite:       "Read-Input-Write",
	PerleLineAccessPort49_Value_ReadOutput:           "Read-Output",
	PerleLineAccessPort49_Value_ReadOutputWrite:      "Read-Output-Write",
	PerleLineAccessPort49_Value_ReadOutputInput:      "Read-Output-Input",
	PerleLineAccessPort49_Value_ReadOutputInputWrite: "Read-Output-Input-Write",
}

func (a PerleLineAccessPort49) String() string {
	if str, ok := PerleLineAccessPort49_Strings[a]; ok {
		return str
	}
	return "PerleLineAccessPort49(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func PerleLineAccessPort49_Add(p *radius.Packet, value PerleLineAccessPort49) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_AddVendor(p, 149, a)
}

func PerleLineAccessPort49_Get(p *radius.Packet) (value PerleLineAccessPort49) {
	value, _ = PerleLineAccessPort49_Lookup(p)
	return
}

func PerleLineAccessPort49_Gets(p *radius.Packet) (values []PerleLineAccessPort49, err error) {
	var i uint32
	for _, attr := range _Perle_GetsVendor(p, 149) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, PerleLineAccessPort49(i))
	}
	return
}

func PerleLineAccessPort49_Lookup(p *radius.Packet) (value PerleLineAccessPort49, err error) {
	a, ok := _Perle_LookupVendor(p, 149)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = PerleLineAccessPort49(i)
	return
}

func PerleLineAccessPort49_Set(p *radius.Packet, value PerleLineAccessPort49) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Perle_SetVendor(p, 149, a)
}

func PerleLineAccessPort49_Del(p *radius.Packet) {
	_Perle_DelVendor(p, 149)
}
