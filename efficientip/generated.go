// Code generated by radius-dict-gen. DO NOT EDIT.

package efficientip

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_EfficientIP_VendorID = 2440
)

func _EfficientIP_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_EfficientIP_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _EfficientIP_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _EfficientIP_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _EfficientIP_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _EfficientIP_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _EfficientIP_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _EfficientIP_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _EfficientIP_AddVendor(p, typ, attr)
}

func _EfficientIP_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _EfficientIP_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

type EfficientIPVersion uint32

var EfficientIPVersion_Strings = map[EfficientIPVersion]string{}

func (a EfficientIPVersion) String() string {
	if str, ok := EfficientIPVersion_Strings[a]; ok {
		return str
	}
	return "EfficientIPVersion(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EfficientIPVersion_Add(p *radius.Packet, value EfficientIPVersion) (err error) {
	a := radius.NewInteger(uint32(value))
	return _EfficientIP_AddVendor(p, 1, a)
}

func EfficientIPVersion_Get(p *radius.Packet) (value EfficientIPVersion) {
	value, _ = EfficientIPVersion_Lookup(p)
	return
}

func EfficientIPVersion_Gets(p *radius.Packet) (values []EfficientIPVersion, err error) {
	var i uint32
	for _, attr := range _EfficientIP_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EfficientIPVersion(i))
	}
	return
}

func EfficientIPVersion_Lookup(p *radius.Packet) (value EfficientIPVersion, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EfficientIPVersion(i)
	return
}

func EfficientIPVersion_Set(p *radius.Packet, value EfficientIPVersion) (err error) {
	a := radius.NewInteger(uint32(value))
	return _EfficientIP_SetVendor(p, 1, a)
}

func EfficientIPVersion_Del(p *radius.Packet) {
	_EfficientIP_DelVendor(p, 1)
}

type EfficientIPServiceClass uint32

var EfficientIPServiceClass_Strings = map[EfficientIPServiceClass]string{}

func (a EfficientIPServiceClass) String() string {
	if str, ok := EfficientIPServiceClass_Strings[a]; ok {
		return str
	}
	return "EfficientIPServiceClass(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EfficientIPServiceClass_Add(p *radius.Packet, value EfficientIPServiceClass) (err error) {
	a := radius.NewInteger(uint32(value))
	return _EfficientIP_AddVendor(p, 2, a)
}

func EfficientIPServiceClass_Get(p *radius.Packet) (value EfficientIPServiceClass) {
	value, _ = EfficientIPServiceClass_Lookup(p)
	return
}

func EfficientIPServiceClass_Gets(p *radius.Packet) (values []EfficientIPServiceClass, err error) {
	var i uint32
	for _, attr := range _EfficientIP_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EfficientIPServiceClass(i))
	}
	return
}

func EfficientIPServiceClass_Lookup(p *radius.Packet) (value EfficientIPServiceClass, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EfficientIPServiceClass(i)
	return
}

func EfficientIPServiceClass_Set(p *radius.Packet, value EfficientIPServiceClass) (err error) {
	a := radius.NewInteger(uint32(value))
	return _EfficientIP_SetVendor(p, 2, a)
}

func EfficientIPServiceClass_Del(p *radius.Packet) {
	_EfficientIP_DelVendor(p, 2)
}

type EfficientIPIdentityType uint32

var EfficientIPIdentityType_Strings = map[EfficientIPIdentityType]string{}

func (a EfficientIPIdentityType) String() string {
	if str, ok := EfficientIPIdentityType_Strings[a]; ok {
		return str
	}
	return "EfficientIPIdentityType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EfficientIPIdentityType_Add(p *radius.Packet, value EfficientIPIdentityType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _EfficientIP_AddVendor(p, 3, a)
}

func EfficientIPIdentityType_Get(p *radius.Packet) (value EfficientIPIdentityType) {
	value, _ = EfficientIPIdentityType_Lookup(p)
	return
}

func EfficientIPIdentityType_Gets(p *radius.Packet) (values []EfficientIPIdentityType, err error) {
	var i uint32
	for _, attr := range _EfficientIP_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EfficientIPIdentityType(i))
	}
	return
}

func EfficientIPIdentityType_Lookup(p *radius.Packet) (value EfficientIPIdentityType, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EfficientIPIdentityType(i)
	return
}

func EfficientIPIdentityType_Set(p *radius.Packet, value EfficientIPIdentityType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _EfficientIP_SetVendor(p, 3, a)
}

func EfficientIPIdentityType_Del(p *radius.Packet) {
	_EfficientIP_DelVendor(p, 3)
}

func EfficientIPFirstName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _EfficientIP_AddVendor(p, 16, a)
}

func EfficientIPFirstName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _EfficientIP_AddVendor(p, 16, a)
}

func EfficientIPFirstName_Get(p *radius.Packet) (value []byte) {
	value, _ = EfficientIPFirstName_Lookup(p)
	return
}

func EfficientIPFirstName_GetString(p *radius.Packet) (value string) {
	value, _ = EfficientIPFirstName_LookupString(p)
	return
}

func EfficientIPFirstName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _EfficientIP_GetsVendor(p, 16) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EfficientIPFirstName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _EfficientIP_GetsVendor(p, 16) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EfficientIPFirstName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EfficientIPFirstName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EfficientIPFirstName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _EfficientIP_SetVendor(p, 16, a)
}

func EfficientIPFirstName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _EfficientIP_SetVendor(p, 16, a)
}

func EfficientIPFirstName_Del(p *radius.Packet) {
	_EfficientIP_DelVendor(p, 16)
}

func EfficientIPLastName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _EfficientIP_AddVendor(p, 17, a)
}

func EfficientIPLastName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _EfficientIP_AddVendor(p, 17, a)
}

func EfficientIPLastName_Get(p *radius.Packet) (value []byte) {
	value, _ = EfficientIPLastName_Lookup(p)
	return
}

func EfficientIPLastName_GetString(p *radius.Packet) (value string) {
	value, _ = EfficientIPLastName_LookupString(p)
	return
}

func EfficientIPLastName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _EfficientIP_GetsVendor(p, 17) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EfficientIPLastName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _EfficientIP_GetsVendor(p, 17) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EfficientIPLastName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EfficientIPLastName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EfficientIPLastName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _EfficientIP_SetVendor(p, 17, a)
}

func EfficientIPLastName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _EfficientIP_SetVendor(p, 17, a)
}

func EfficientIPLastName_Del(p *radius.Packet) {
	_EfficientIP_DelVendor(p, 17)
}

func EfficientIPPseudonym_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _EfficientIP_AddVendor(p, 18, a)
}

func EfficientIPPseudonym_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _EfficientIP_AddVendor(p, 18, a)
}

func EfficientIPPseudonym_Get(p *radius.Packet) (value []byte) {
	value, _ = EfficientIPPseudonym_Lookup(p)
	return
}

func EfficientIPPseudonym_GetString(p *radius.Packet) (value string) {
	value, _ = EfficientIPPseudonym_LookupString(p)
	return
}

func EfficientIPPseudonym_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _EfficientIP_GetsVendor(p, 18) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EfficientIPPseudonym_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _EfficientIP_GetsVendor(p, 18) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EfficientIPPseudonym_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EfficientIPPseudonym_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EfficientIPPseudonym_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _EfficientIP_SetVendor(p, 18, a)
}

func EfficientIPPseudonym_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _EfficientIP_SetVendor(p, 18, a)
}

func EfficientIPPseudonym_Del(p *radius.Packet) {
	_EfficientIP_DelVendor(p, 18)
}

func EfficientIPIPHost_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _EfficientIP_AddVendor(p, 19, a)
}

func EfficientIPIPHost_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _EfficientIP_AddVendor(p, 19, a)
}

func EfficientIPIPHost_Get(p *radius.Packet) (value []byte) {
	value, _ = EfficientIPIPHost_Lookup(p)
	return
}

func EfficientIPIPHost_GetString(p *radius.Packet) (value string) {
	value, _ = EfficientIPIPHost_LookupString(p)
	return
}

func EfficientIPIPHost_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _EfficientIP_GetsVendor(p, 19) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EfficientIPIPHost_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _EfficientIP_GetsVendor(p, 19) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EfficientIPIPHost_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EfficientIPIPHost_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EfficientIPIPHost_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _EfficientIP_SetVendor(p, 19, a)
}

func EfficientIPIPHost_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _EfficientIP_SetVendor(p, 19, a)
}

func EfficientIPIPHost_Del(p *radius.Packet) {
	_EfficientIP_DelVendor(p, 19)
}

func EfficientIPEmail_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _EfficientIP_AddVendor(p, 20, a)
}

func EfficientIPEmail_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _EfficientIP_AddVendor(p, 20, a)
}

func EfficientIPEmail_Get(p *radius.Packet) (value []byte) {
	value, _ = EfficientIPEmail_Lookup(p)
	return
}

func EfficientIPEmail_GetString(p *radius.Packet) (value string) {
	value, _ = EfficientIPEmail_LookupString(p)
	return
}

func EfficientIPEmail_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _EfficientIP_GetsVendor(p, 20) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EfficientIPEmail_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _EfficientIP_GetsVendor(p, 20) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EfficientIPEmail_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EfficientIPEmail_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EfficientIPEmail_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _EfficientIP_SetVendor(p, 20, a)
}

func EfficientIPEmail_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _EfficientIP_SetVendor(p, 20, a)
}

func EfficientIPEmail_Del(p *radius.Packet) {
	_EfficientIP_DelVendor(p, 20)
}

func EfficientIPFirstLoginPath_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _EfficientIP_AddVendor(p, 32, a)
}

func EfficientIPFirstLoginPath_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _EfficientIP_AddVendor(p, 32, a)
}

func EfficientIPFirstLoginPath_Get(p *radius.Packet) (value []byte) {
	value, _ = EfficientIPFirstLoginPath_Lookup(p)
	return
}

func EfficientIPFirstLoginPath_GetString(p *radius.Packet) (value string) {
	value, _ = EfficientIPFirstLoginPath_LookupString(p)
	return
}

func EfficientIPFirstLoginPath_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _EfficientIP_GetsVendor(p, 32) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EfficientIPFirstLoginPath_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _EfficientIP_GetsVendor(p, 32) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EfficientIPFirstLoginPath_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EfficientIPFirstLoginPath_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EfficientIPFirstLoginPath_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _EfficientIP_SetVendor(p, 32, a)
}

func EfficientIPFirstLoginPath_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _EfficientIP_SetVendor(p, 32, a)
}

func EfficientIPFirstLoginPath_Del(p *radius.Packet) {
	_EfficientIP_DelVendor(p, 32)
}

func EfficientIPMaintainerGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _EfficientIP_AddVendor(p, 33, a)
}

func EfficientIPMaintainerGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _EfficientIP_AddVendor(p, 33, a)
}

func EfficientIPMaintainerGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = EfficientIPMaintainerGroup_Lookup(p)
	return
}

func EfficientIPMaintainerGroup_GetString(p *radius.Packet) (value string) {
	value, _ = EfficientIPMaintainerGroup_LookupString(p)
	return
}

func EfficientIPMaintainerGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _EfficientIP_GetsVendor(p, 33) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EfficientIPMaintainerGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _EfficientIP_GetsVendor(p, 33) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EfficientIPMaintainerGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EfficientIPMaintainerGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EfficientIPMaintainerGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _EfficientIP_SetVendor(p, 33, a)
}

func EfficientIPMaintainerGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _EfficientIP_SetVendor(p, 33, a)
}

func EfficientIPMaintainerGroup_Del(p *radius.Packet) {
	_EfficientIP_DelVendor(p, 33)
}

func EfficientIPGroups_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _EfficientIP_AddVendor(p, 34, a)
}

func EfficientIPGroups_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _EfficientIP_AddVendor(p, 34, a)
}

func EfficientIPGroups_Get(p *radius.Packet) (value []byte) {
	value, _ = EfficientIPGroups_Lookup(p)
	return
}

func EfficientIPGroups_GetString(p *radius.Packet) (value string) {
	value, _ = EfficientIPGroups_LookupString(p)
	return
}

func EfficientIPGroups_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _EfficientIP_GetsVendor(p, 34) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EfficientIPGroups_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _EfficientIP_GetsVendor(p, 34) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EfficientIPGroups_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EfficientIPGroups_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EfficientIPGroups_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _EfficientIP_SetVendor(p, 34, a)
}

func EfficientIPGroups_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _EfficientIP_SetVendor(p, 34, a)
}

func EfficientIPGroups_Del(p *radius.Packet) {
	_EfficientIP_DelVendor(p, 34)
}

func EfficientIPAdminGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _EfficientIP_AddVendor(p, 35, a)
}

func EfficientIPAdminGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _EfficientIP_AddVendor(p, 35, a)
}

func EfficientIPAdminGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = EfficientIPAdminGroup_Lookup(p)
	return
}

func EfficientIPAdminGroup_GetString(p *radius.Packet) (value string) {
	value, _ = EfficientIPAdminGroup_LookupString(p)
	return
}

func EfficientIPAdminGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _EfficientIP_GetsVendor(p, 35) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EfficientIPAdminGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _EfficientIP_GetsVendor(p, 35) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EfficientIPAdminGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EfficientIPAdminGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EfficientIPAdminGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _EfficientIP_SetVendor(p, 35, a)
}

func EfficientIPAdminGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _EfficientIP_SetVendor(p, 35, a)
}

func EfficientIPAdminGroup_Del(p *radius.Packet) {
	_EfficientIP_DelVendor(p, 35)
}

func EfficientIPExtraBlob_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _EfficientIP_AddVendor(p, 64, a)
}

func EfficientIPExtraBlob_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _EfficientIP_AddVendor(p, 64, a)
}

func EfficientIPExtraBlob_Get(p *radius.Packet) (value []byte) {
	value, _ = EfficientIPExtraBlob_Lookup(p)
	return
}

func EfficientIPExtraBlob_GetString(p *radius.Packet) (value string) {
	value, _ = EfficientIPExtraBlob_LookupString(p)
	return
}

func EfficientIPExtraBlob_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _EfficientIP_GetsVendor(p, 64) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EfficientIPExtraBlob_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _EfficientIP_GetsVendor(p, 64) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EfficientIPExtraBlob_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EfficientIPExtraBlob_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _EfficientIP_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EfficientIPExtraBlob_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _EfficientIP_SetVendor(p, 64, a)
}

func EfficientIPExtraBlob_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _EfficientIP_SetVendor(p, 64, a)
}

func EfficientIPExtraBlob_Del(p *radius.Packet) {
	_EfficientIP_DelVendor(p, 64)
}
