// Code generated by radius-dict-gen. DO NOT EDIT.

package motorola

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Motorola_VendorID = 161
)

func _Motorola_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Motorola_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Motorola_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Motorola_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Motorola_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Motorola_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Motorola_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Motorola_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Motorola_AddVendor(p, typ, attr)
}

func _Motorola_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Motorola_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

type MotorolaCanopyLPULCIR uint32

var MotorolaCanopyLPULCIR_Strings = map[MotorolaCanopyLPULCIR]string{}

func (a MotorolaCanopyLPULCIR) String() string {
	if str, ok := MotorolaCanopyLPULCIR_Strings[a]; ok {
		return str
	}
	return "MotorolaCanopyLPULCIR(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MotorolaCanopyLPULCIR_Add(p *radius.Packet, value MotorolaCanopyLPULCIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_AddVendor(p, 1, a)
}

func MotorolaCanopyLPULCIR_Get(p *radius.Packet) (value MotorolaCanopyLPULCIR) {
	value, _ = MotorolaCanopyLPULCIR_Lookup(p)
	return
}

func MotorolaCanopyLPULCIR_Gets(p *radius.Packet) (values []MotorolaCanopyLPULCIR, err error) {
	var i uint32
	for _, attr := range _Motorola_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MotorolaCanopyLPULCIR(i))
	}
	return
}

func MotorolaCanopyLPULCIR_Lookup(p *radius.Packet) (value MotorolaCanopyLPULCIR, err error) {
	a, ok := _Motorola_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MotorolaCanopyLPULCIR(i)
	return
}

func MotorolaCanopyLPULCIR_Set(p *radius.Packet, value MotorolaCanopyLPULCIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_SetVendor(p, 1, a)
}

func MotorolaCanopyLPULCIR_Del(p *radius.Packet) {
	_Motorola_DelVendor(p, 1)
}

type MotorolaCanopyLPDLCIR uint32

var MotorolaCanopyLPDLCIR_Strings = map[MotorolaCanopyLPDLCIR]string{}

func (a MotorolaCanopyLPDLCIR) String() string {
	if str, ok := MotorolaCanopyLPDLCIR_Strings[a]; ok {
		return str
	}
	return "MotorolaCanopyLPDLCIR(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MotorolaCanopyLPDLCIR_Add(p *radius.Packet, value MotorolaCanopyLPDLCIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_AddVendor(p, 2, a)
}

func MotorolaCanopyLPDLCIR_Get(p *radius.Packet) (value MotorolaCanopyLPDLCIR) {
	value, _ = MotorolaCanopyLPDLCIR_Lookup(p)
	return
}

func MotorolaCanopyLPDLCIR_Gets(p *radius.Packet) (values []MotorolaCanopyLPDLCIR, err error) {
	var i uint32
	for _, attr := range _Motorola_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MotorolaCanopyLPDLCIR(i))
	}
	return
}

func MotorolaCanopyLPDLCIR_Lookup(p *radius.Packet) (value MotorolaCanopyLPDLCIR, err error) {
	a, ok := _Motorola_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MotorolaCanopyLPDLCIR(i)
	return
}

func MotorolaCanopyLPDLCIR_Set(p *radius.Packet, value MotorolaCanopyLPDLCIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_SetVendor(p, 2, a)
}

func MotorolaCanopyLPDLCIR_Del(p *radius.Packet) {
	_Motorola_DelVendor(p, 2)
}

type MotorolaCanopyHPULCIR uint32

var MotorolaCanopyHPULCIR_Strings = map[MotorolaCanopyHPULCIR]string{}

func (a MotorolaCanopyHPULCIR) String() string {
	if str, ok := MotorolaCanopyHPULCIR_Strings[a]; ok {
		return str
	}
	return "MotorolaCanopyHPULCIR(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MotorolaCanopyHPULCIR_Add(p *radius.Packet, value MotorolaCanopyHPULCIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_AddVendor(p, 3, a)
}

func MotorolaCanopyHPULCIR_Get(p *radius.Packet) (value MotorolaCanopyHPULCIR) {
	value, _ = MotorolaCanopyHPULCIR_Lookup(p)
	return
}

func MotorolaCanopyHPULCIR_Gets(p *radius.Packet) (values []MotorolaCanopyHPULCIR, err error) {
	var i uint32
	for _, attr := range _Motorola_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MotorolaCanopyHPULCIR(i))
	}
	return
}

func MotorolaCanopyHPULCIR_Lookup(p *radius.Packet) (value MotorolaCanopyHPULCIR, err error) {
	a, ok := _Motorola_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MotorolaCanopyHPULCIR(i)
	return
}

func MotorolaCanopyHPULCIR_Set(p *radius.Packet, value MotorolaCanopyHPULCIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_SetVendor(p, 3, a)
}

func MotorolaCanopyHPULCIR_Del(p *radius.Packet) {
	_Motorola_DelVendor(p, 3)
}

type MotorolaCanopyHPDLCIR uint32

var MotorolaCanopyHPDLCIR_Strings = map[MotorolaCanopyHPDLCIR]string{}

func (a MotorolaCanopyHPDLCIR) String() string {
	if str, ok := MotorolaCanopyHPDLCIR_Strings[a]; ok {
		return str
	}
	return "MotorolaCanopyHPDLCIR(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MotorolaCanopyHPDLCIR_Add(p *radius.Packet, value MotorolaCanopyHPDLCIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_AddVendor(p, 4, a)
}

func MotorolaCanopyHPDLCIR_Get(p *radius.Packet) (value MotorolaCanopyHPDLCIR) {
	value, _ = MotorolaCanopyHPDLCIR_Lookup(p)
	return
}

func MotorolaCanopyHPDLCIR_Gets(p *radius.Packet) (values []MotorolaCanopyHPDLCIR, err error) {
	var i uint32
	for _, attr := range _Motorola_GetsVendor(p, 4) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MotorolaCanopyHPDLCIR(i))
	}
	return
}

func MotorolaCanopyHPDLCIR_Lookup(p *radius.Packet) (value MotorolaCanopyHPDLCIR, err error) {
	a, ok := _Motorola_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MotorolaCanopyHPDLCIR(i)
	return
}

func MotorolaCanopyHPDLCIR_Set(p *radius.Packet, value MotorolaCanopyHPDLCIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_SetVendor(p, 4, a)
}

func MotorolaCanopyHPDLCIR_Del(p *radius.Packet) {
	_Motorola_DelVendor(p, 4)
}

type MotorolaCanopyHPENABLE uint32

const (
	MotorolaCanopyHPENABLE_Value_Disable MotorolaCanopyHPENABLE = 0
	MotorolaCanopyHPENABLE_Value_Enable  MotorolaCanopyHPENABLE = 1
)

var MotorolaCanopyHPENABLE_Strings = map[MotorolaCanopyHPENABLE]string{
	MotorolaCanopyHPENABLE_Value_Disable: "Disable",
	MotorolaCanopyHPENABLE_Value_Enable:  "Enable",
}

func (a MotorolaCanopyHPENABLE) String() string {
	if str, ok := MotorolaCanopyHPENABLE_Strings[a]; ok {
		return str
	}
	return "MotorolaCanopyHPENABLE(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MotorolaCanopyHPENABLE_Add(p *radius.Packet, value MotorolaCanopyHPENABLE) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_AddVendor(p, 5, a)
}

func MotorolaCanopyHPENABLE_Get(p *radius.Packet) (value MotorolaCanopyHPENABLE) {
	value, _ = MotorolaCanopyHPENABLE_Lookup(p)
	return
}

func MotorolaCanopyHPENABLE_Gets(p *radius.Packet) (values []MotorolaCanopyHPENABLE, err error) {
	var i uint32
	for _, attr := range _Motorola_GetsVendor(p, 5) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MotorolaCanopyHPENABLE(i))
	}
	return
}

func MotorolaCanopyHPENABLE_Lookup(p *radius.Packet) (value MotorolaCanopyHPENABLE, err error) {
	a, ok := _Motorola_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MotorolaCanopyHPENABLE(i)
	return
}

func MotorolaCanopyHPENABLE_Set(p *radius.Packet, value MotorolaCanopyHPENABLE) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_SetVendor(p, 5, a)
}

func MotorolaCanopyHPENABLE_Del(p *radius.Packet) {
	_Motorola_DelVendor(p, 5)
}

type MotorolaCanopyULBR uint32

var MotorolaCanopyULBR_Strings = map[MotorolaCanopyULBR]string{}

func (a MotorolaCanopyULBR) String() string {
	if str, ok := MotorolaCanopyULBR_Strings[a]; ok {
		return str
	}
	return "MotorolaCanopyULBR(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MotorolaCanopyULBR_Add(p *radius.Packet, value MotorolaCanopyULBR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_AddVendor(p, 6, a)
}

func MotorolaCanopyULBR_Get(p *radius.Packet) (value MotorolaCanopyULBR) {
	value, _ = MotorolaCanopyULBR_Lookup(p)
	return
}

func MotorolaCanopyULBR_Gets(p *radius.Packet) (values []MotorolaCanopyULBR, err error) {
	var i uint32
	for _, attr := range _Motorola_GetsVendor(p, 6) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MotorolaCanopyULBR(i))
	}
	return
}

func MotorolaCanopyULBR_Lookup(p *radius.Packet) (value MotorolaCanopyULBR, err error) {
	a, ok := _Motorola_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MotorolaCanopyULBR(i)
	return
}

func MotorolaCanopyULBR_Set(p *radius.Packet, value MotorolaCanopyULBR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_SetVendor(p, 6, a)
}

func MotorolaCanopyULBR_Del(p *radius.Packet) {
	_Motorola_DelVendor(p, 6)
}

type MotorolaCanopyULBL uint32

var MotorolaCanopyULBL_Strings = map[MotorolaCanopyULBL]string{}

func (a MotorolaCanopyULBL) String() string {
	if str, ok := MotorolaCanopyULBL_Strings[a]; ok {
		return str
	}
	return "MotorolaCanopyULBL(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MotorolaCanopyULBL_Add(p *radius.Packet, value MotorolaCanopyULBL) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_AddVendor(p, 7, a)
}

func MotorolaCanopyULBL_Get(p *radius.Packet) (value MotorolaCanopyULBL) {
	value, _ = MotorolaCanopyULBL_Lookup(p)
	return
}

func MotorolaCanopyULBL_Gets(p *radius.Packet) (values []MotorolaCanopyULBL, err error) {
	var i uint32
	for _, attr := range _Motorola_GetsVendor(p, 7) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MotorolaCanopyULBL(i))
	}
	return
}

func MotorolaCanopyULBL_Lookup(p *radius.Packet) (value MotorolaCanopyULBL, err error) {
	a, ok := _Motorola_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MotorolaCanopyULBL(i)
	return
}

func MotorolaCanopyULBL_Set(p *radius.Packet, value MotorolaCanopyULBL) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_SetVendor(p, 7, a)
}

func MotorolaCanopyULBL_Del(p *radius.Packet) {
	_Motorola_DelVendor(p, 7)
}

type MotorolaCanopyDLBR uint32

var MotorolaCanopyDLBR_Strings = map[MotorolaCanopyDLBR]string{}

func (a MotorolaCanopyDLBR) String() string {
	if str, ok := MotorolaCanopyDLBR_Strings[a]; ok {
		return str
	}
	return "MotorolaCanopyDLBR(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MotorolaCanopyDLBR_Add(p *radius.Packet, value MotorolaCanopyDLBR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_AddVendor(p, 8, a)
}

func MotorolaCanopyDLBR_Get(p *radius.Packet) (value MotorolaCanopyDLBR) {
	value, _ = MotorolaCanopyDLBR_Lookup(p)
	return
}

func MotorolaCanopyDLBR_Gets(p *radius.Packet) (values []MotorolaCanopyDLBR, err error) {
	var i uint32
	for _, attr := range _Motorola_GetsVendor(p, 8) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MotorolaCanopyDLBR(i))
	}
	return
}

func MotorolaCanopyDLBR_Lookup(p *radius.Packet) (value MotorolaCanopyDLBR, err error) {
	a, ok := _Motorola_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MotorolaCanopyDLBR(i)
	return
}

func MotorolaCanopyDLBR_Set(p *radius.Packet, value MotorolaCanopyDLBR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_SetVendor(p, 8, a)
}

func MotorolaCanopyDLBR_Del(p *radius.Packet) {
	_Motorola_DelVendor(p, 8)
}

type MotorolaCanopyDLBL uint32

var MotorolaCanopyDLBL_Strings = map[MotorolaCanopyDLBL]string{}

func (a MotorolaCanopyDLBL) String() string {
	if str, ok := MotorolaCanopyDLBL_Strings[a]; ok {
		return str
	}
	return "MotorolaCanopyDLBL(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MotorolaCanopyDLBL_Add(p *radius.Packet, value MotorolaCanopyDLBL) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_AddVendor(p, 9, a)
}

func MotorolaCanopyDLBL_Get(p *radius.Packet) (value MotorolaCanopyDLBL) {
	value, _ = MotorolaCanopyDLBL_Lookup(p)
	return
}

func MotorolaCanopyDLBL_Gets(p *radius.Packet) (values []MotorolaCanopyDLBL, err error) {
	var i uint32
	for _, attr := range _Motorola_GetsVendor(p, 9) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MotorolaCanopyDLBL(i))
	}
	return
}

func MotorolaCanopyDLBL_Lookup(p *radius.Packet) (value MotorolaCanopyDLBL, err error) {
	a, ok := _Motorola_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MotorolaCanopyDLBL(i)
	return
}

func MotorolaCanopyDLBL_Set(p *radius.Packet, value MotorolaCanopyDLBL) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_SetVendor(p, 9, a)
}

func MotorolaCanopyDLBL_Del(p *radius.Packet) {
	_Motorola_DelVendor(p, 9)
}

type MotorolaCanopyVLLEARNEN uint32

const (
	MotorolaCanopyVLLEARNEN_Value_Disable MotorolaCanopyVLLEARNEN = 0
	MotorolaCanopyVLLEARNEN_Value_Enable  MotorolaCanopyVLLEARNEN = 1
)

var MotorolaCanopyVLLEARNEN_Strings = map[MotorolaCanopyVLLEARNEN]string{
	MotorolaCanopyVLLEARNEN_Value_Disable: "Disable",
	MotorolaCanopyVLLEARNEN_Value_Enable:  "Enable",
}

func (a MotorolaCanopyVLLEARNEN) String() string {
	if str, ok := MotorolaCanopyVLLEARNEN_Strings[a]; ok {
		return str
	}
	return "MotorolaCanopyVLLEARNEN(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MotorolaCanopyVLLEARNEN_Add(p *radius.Packet, value MotorolaCanopyVLLEARNEN) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_AddVendor(p, 14, a)
}

func MotorolaCanopyVLLEARNEN_Get(p *radius.Packet) (value MotorolaCanopyVLLEARNEN) {
	value, _ = MotorolaCanopyVLLEARNEN_Lookup(p)
	return
}

func MotorolaCanopyVLLEARNEN_Gets(p *radius.Packet) (values []MotorolaCanopyVLLEARNEN, err error) {
	var i uint32
	for _, attr := range _Motorola_GetsVendor(p, 14) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MotorolaCanopyVLLEARNEN(i))
	}
	return
}

func MotorolaCanopyVLLEARNEN_Lookup(p *radius.Packet) (value MotorolaCanopyVLLEARNEN, err error) {
	a, ok := _Motorola_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MotorolaCanopyVLLEARNEN(i)
	return
}

func MotorolaCanopyVLLEARNEN_Set(p *radius.Packet, value MotorolaCanopyVLLEARNEN) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_SetVendor(p, 14, a)
}

func MotorolaCanopyVLLEARNEN_Del(p *radius.Packet) {
	_Motorola_DelVendor(p, 14)
}

type MotorolaCanopyVLFRAMES uint32

const (
	MotorolaCanopyVLFRAMES_Value_All      MotorolaCanopyVLFRAMES = 0
	MotorolaCanopyVLFRAMES_Value_Tagged   MotorolaCanopyVLFRAMES = 1
	MotorolaCanopyVLFRAMES_Value_Untagged MotorolaCanopyVLFRAMES = 2
)

var MotorolaCanopyVLFRAMES_Strings = map[MotorolaCanopyVLFRAMES]string{
	MotorolaCanopyVLFRAMES_Value_All:      "All",
	MotorolaCanopyVLFRAMES_Value_Tagged:   "Tagged",
	MotorolaCanopyVLFRAMES_Value_Untagged: "Untagged",
}

func (a MotorolaCanopyVLFRAMES) String() string {
	if str, ok := MotorolaCanopyVLFRAMES_Strings[a]; ok {
		return str
	}
	return "MotorolaCanopyVLFRAMES(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MotorolaCanopyVLFRAMES_Add(p *radius.Packet, value MotorolaCanopyVLFRAMES) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_AddVendor(p, 15, a)
}

func MotorolaCanopyVLFRAMES_Get(p *radius.Packet) (value MotorolaCanopyVLFRAMES) {
	value, _ = MotorolaCanopyVLFRAMES_Lookup(p)
	return
}

func MotorolaCanopyVLFRAMES_Gets(p *radius.Packet) (values []MotorolaCanopyVLFRAMES, err error) {
	var i uint32
	for _, attr := range _Motorola_GetsVendor(p, 15) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MotorolaCanopyVLFRAMES(i))
	}
	return
}

func MotorolaCanopyVLFRAMES_Lookup(p *radius.Packet) (value MotorolaCanopyVLFRAMES, err error) {
	a, ok := _Motorola_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MotorolaCanopyVLFRAMES(i)
	return
}

func MotorolaCanopyVLFRAMES_Set(p *radius.Packet, value MotorolaCanopyVLFRAMES) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_SetVendor(p, 15, a)
}

func MotorolaCanopyVLFRAMES_Del(p *radius.Packet) {
	_Motorola_DelVendor(p, 15)
}

type MotorolaCanopyVLIDSET uint32

var MotorolaCanopyVLIDSET_Strings = map[MotorolaCanopyVLIDSET]string{}

func (a MotorolaCanopyVLIDSET) String() string {
	if str, ok := MotorolaCanopyVLIDSET_Strings[a]; ok {
		return str
	}
	return "MotorolaCanopyVLIDSET(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MotorolaCanopyVLIDSET_Add(p *radius.Packet, value MotorolaCanopyVLIDSET) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_AddVendor(p, 16, a)
}

func MotorolaCanopyVLIDSET_Get(p *radius.Packet) (value MotorolaCanopyVLIDSET) {
	value, _ = MotorolaCanopyVLIDSET_Lookup(p)
	return
}

func MotorolaCanopyVLIDSET_Gets(p *radius.Packet) (values []MotorolaCanopyVLIDSET, err error) {
	var i uint32
	for _, attr := range _Motorola_GetsVendor(p, 16) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MotorolaCanopyVLIDSET(i))
	}
	return
}

func MotorolaCanopyVLIDSET_Lookup(p *radius.Packet) (value MotorolaCanopyVLIDSET, err error) {
	a, ok := _Motorola_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MotorolaCanopyVLIDSET(i)
	return
}

func MotorolaCanopyVLIDSET_Set(p *radius.Packet, value MotorolaCanopyVLIDSET) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_SetVendor(p, 16, a)
}

func MotorolaCanopyVLIDSET_Del(p *radius.Packet) {
	_Motorola_DelVendor(p, 16)
}

type MotorolaCanopyVLAGETO uint32

var MotorolaCanopyVLAGETO_Strings = map[MotorolaCanopyVLAGETO]string{}

func (a MotorolaCanopyVLAGETO) String() string {
	if str, ok := MotorolaCanopyVLAGETO_Strings[a]; ok {
		return str
	}
	return "MotorolaCanopyVLAGETO(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MotorolaCanopyVLAGETO_Add(p *radius.Packet, value MotorolaCanopyVLAGETO) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_AddVendor(p, 20, a)
}

func MotorolaCanopyVLAGETO_Get(p *radius.Packet) (value MotorolaCanopyVLAGETO) {
	value, _ = MotorolaCanopyVLAGETO_Lookup(p)
	return
}

func MotorolaCanopyVLAGETO_Gets(p *radius.Packet) (values []MotorolaCanopyVLAGETO, err error) {
	var i uint32
	for _, attr := range _Motorola_GetsVendor(p, 20) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MotorolaCanopyVLAGETO(i))
	}
	return
}

func MotorolaCanopyVLAGETO_Lookup(p *radius.Packet) (value MotorolaCanopyVLAGETO, err error) {
	a, ok := _Motorola_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MotorolaCanopyVLAGETO(i)
	return
}

func MotorolaCanopyVLAGETO_Set(p *radius.Packet, value MotorolaCanopyVLAGETO) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_SetVendor(p, 20, a)
}

func MotorolaCanopyVLAGETO_Del(p *radius.Packet) {
	_Motorola_DelVendor(p, 20)
}

type MotorolaCanopyVLIGVID uint32

var MotorolaCanopyVLIGVID_Strings = map[MotorolaCanopyVLIGVID]string{}

func (a MotorolaCanopyVLIGVID) String() string {
	if str, ok := MotorolaCanopyVLIGVID_Strings[a]; ok {
		return str
	}
	return "MotorolaCanopyVLIGVID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MotorolaCanopyVLIGVID_Add(p *radius.Packet, value MotorolaCanopyVLIGVID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_AddVendor(p, 21, a)
}

func MotorolaCanopyVLIGVID_Get(p *radius.Packet) (value MotorolaCanopyVLIGVID) {
	value, _ = MotorolaCanopyVLIGVID_Lookup(p)
	return
}

func MotorolaCanopyVLIGVID_Gets(p *radius.Packet) (values []MotorolaCanopyVLIGVID, err error) {
	var i uint32
	for _, attr := range _Motorola_GetsVendor(p, 21) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MotorolaCanopyVLIGVID(i))
	}
	return
}

func MotorolaCanopyVLIGVID_Lookup(p *radius.Packet) (value MotorolaCanopyVLIGVID, err error) {
	a, ok := _Motorola_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MotorolaCanopyVLIGVID(i)
	return
}

func MotorolaCanopyVLIGVID_Set(p *radius.Packet, value MotorolaCanopyVLIGVID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_SetVendor(p, 21, a)
}

func MotorolaCanopyVLIGVID_Del(p *radius.Packet) {
	_Motorola_DelVendor(p, 21)
}

type MotorolaCanopyVLMGVID uint32

var MotorolaCanopyVLMGVID_Strings = map[MotorolaCanopyVLMGVID]string{}

func (a MotorolaCanopyVLMGVID) String() string {
	if str, ok := MotorolaCanopyVLMGVID_Strings[a]; ok {
		return str
	}
	return "MotorolaCanopyVLMGVID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MotorolaCanopyVLMGVID_Add(p *radius.Packet, value MotorolaCanopyVLMGVID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_AddVendor(p, 22, a)
}

func MotorolaCanopyVLMGVID_Get(p *radius.Packet) (value MotorolaCanopyVLMGVID) {
	value, _ = MotorolaCanopyVLMGVID_Lookup(p)
	return
}

func MotorolaCanopyVLMGVID_Gets(p *radius.Packet) (values []MotorolaCanopyVLMGVID, err error) {
	var i uint32
	for _, attr := range _Motorola_GetsVendor(p, 22) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MotorolaCanopyVLMGVID(i))
	}
	return
}

func MotorolaCanopyVLMGVID_Lookup(p *radius.Packet) (value MotorolaCanopyVLMGVID, err error) {
	a, ok := _Motorola_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MotorolaCanopyVLMGVID(i)
	return
}

func MotorolaCanopyVLMGVID_Set(p *radius.Packet, value MotorolaCanopyVLMGVID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_SetVendor(p, 22, a)
}

func MotorolaCanopyVLMGVID_Del(p *radius.Packet) {
	_Motorola_DelVendor(p, 22)
}

type MotorolaCanopyVLSMMGPASS uint32

const (
	MotorolaCanopyVLSMMGPASS_Value_Disable MotorolaCanopyVLSMMGPASS = 0
	MotorolaCanopyVLSMMGPASS_Value_Enable  MotorolaCanopyVLSMMGPASS = 1
)

var MotorolaCanopyVLSMMGPASS_Strings = map[MotorolaCanopyVLSMMGPASS]string{
	MotorolaCanopyVLSMMGPASS_Value_Disable: "Disable",
	MotorolaCanopyVLSMMGPASS_Value_Enable:  "Enable",
}

func (a MotorolaCanopyVLSMMGPASS) String() string {
	if str, ok := MotorolaCanopyVLSMMGPASS_Strings[a]; ok {
		return str
	}
	return "MotorolaCanopyVLSMMGPASS(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MotorolaCanopyVLSMMGPASS_Add(p *radius.Packet, value MotorolaCanopyVLSMMGPASS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_AddVendor(p, 23, a)
}

func MotorolaCanopyVLSMMGPASS_Get(p *radius.Packet) (value MotorolaCanopyVLSMMGPASS) {
	value, _ = MotorolaCanopyVLSMMGPASS_Lookup(p)
	return
}

func MotorolaCanopyVLSMMGPASS_Gets(p *radius.Packet) (values []MotorolaCanopyVLSMMGPASS, err error) {
	var i uint32
	for _, attr := range _Motorola_GetsVendor(p, 23) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MotorolaCanopyVLSMMGPASS(i))
	}
	return
}

func MotorolaCanopyVLSMMGPASS_Lookup(p *radius.Packet) (value MotorolaCanopyVLSMMGPASS, err error) {
	a, ok := _Motorola_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MotorolaCanopyVLSMMGPASS(i)
	return
}

func MotorolaCanopyVLSMMGPASS_Set(p *radius.Packet, value MotorolaCanopyVLSMMGPASS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_SetVendor(p, 23, a)
}

func MotorolaCanopyVLSMMGPASS_Del(p *radius.Packet) {
	_Motorola_DelVendor(p, 23)
}

type MotorolaCanopyBCASTMIR uint32

var MotorolaCanopyBCASTMIR_Strings = map[MotorolaCanopyBCASTMIR]string{}

func (a MotorolaCanopyBCASTMIR) String() string {
	if str, ok := MotorolaCanopyBCASTMIR_Strings[a]; ok {
		return str
	}
	return "MotorolaCanopyBCASTMIR(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MotorolaCanopyBCASTMIR_Add(p *radius.Packet, value MotorolaCanopyBCASTMIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_AddVendor(p, 24, a)
}

func MotorolaCanopyBCASTMIR_Get(p *radius.Packet) (value MotorolaCanopyBCASTMIR) {
	value, _ = MotorolaCanopyBCASTMIR_Lookup(p)
	return
}

func MotorolaCanopyBCASTMIR_Gets(p *radius.Packet) (values []MotorolaCanopyBCASTMIR, err error) {
	var i uint32
	for _, attr := range _Motorola_GetsVendor(p, 24) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MotorolaCanopyBCASTMIR(i))
	}
	return
}

func MotorolaCanopyBCASTMIR_Lookup(p *radius.Packet) (value MotorolaCanopyBCASTMIR, err error) {
	a, ok := _Motorola_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MotorolaCanopyBCASTMIR(i)
	return
}

func MotorolaCanopyBCASTMIR_Set(p *radius.Packet, value MotorolaCanopyBCASTMIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_SetVendor(p, 24, a)
}

func MotorolaCanopyBCASTMIR_Del(p *radius.Packet) {
	_Motorola_DelVendor(p, 24)
}

type MotorolaCanopyUserLevel uint32

const (
	MotorolaCanopyUserLevel_Value_TECH    MotorolaCanopyUserLevel = 1
	MotorolaCanopyUserLevel_Value_INSTALL MotorolaCanopyUserLevel = 2
	MotorolaCanopyUserLevel_Value_ADMIN   MotorolaCanopyUserLevel = 3
)

var MotorolaCanopyUserLevel_Strings = map[MotorolaCanopyUserLevel]string{
	MotorolaCanopyUserLevel_Value_TECH:    "TECH",
	MotorolaCanopyUserLevel_Value_INSTALL: "INSTALL",
	MotorolaCanopyUserLevel_Value_ADMIN:   "ADMIN",
}

func (a MotorolaCanopyUserLevel) String() string {
	if str, ok := MotorolaCanopyUserLevel_Strings[a]; ok {
		return str
	}
	return "MotorolaCanopyUserLevel(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MotorolaCanopyUserLevel_Add(p *radius.Packet, value MotorolaCanopyUserLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_AddVendor(p, 50, a)
}

func MotorolaCanopyUserLevel_Get(p *radius.Packet) (value MotorolaCanopyUserLevel) {
	value, _ = MotorolaCanopyUserLevel_Lookup(p)
	return
}

func MotorolaCanopyUserLevel_Gets(p *radius.Packet) (values []MotorolaCanopyUserLevel, err error) {
	var i uint32
	for _, attr := range _Motorola_GetsVendor(p, 50) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MotorolaCanopyUserLevel(i))
	}
	return
}

func MotorolaCanopyUserLevel_Lookup(p *radius.Packet) (value MotorolaCanopyUserLevel, err error) {
	a, ok := _Motorola_LookupVendor(p, 50)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MotorolaCanopyUserLevel(i)
	return
}

func MotorolaCanopyUserLevel_Set(p *radius.Packet, value MotorolaCanopyUserLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Motorola_SetVendor(p, 50, a)
}

func MotorolaCanopyUserLevel_Del(p *radius.Packet) {
	_Motorola_DelVendor(p, 50)
}
