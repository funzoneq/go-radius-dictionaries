// Code generated by radius-dict-gen. DO NOT EDIT.

package zte

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_ZTE_VendorID = 3902
)

func _ZTE_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_ZTE_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _ZTE_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _ZTE_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _ZTE_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _ZTE_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _ZTE_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _ZTE_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _ZTE_AddVendor(p, typ, attr)
}

func _ZTE_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _ZTE_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func ZTEClientDNSPri_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 1, a)
}

func ZTEClientDNSPri_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 1, a)
}

func ZTEClientDNSPri_Get(p *radius.Packet) (value []byte) {
	value, _ = ZTEClientDNSPri_Lookup(p)
	return
}

func ZTEClientDNSPri_GetString(p *radius.Packet) (value string) {
	value, _ = ZTEClientDNSPri_LookupString(p)
	return
}

func ZTEClientDNSPri_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEClientDNSPri_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEClientDNSPri_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ZTEClientDNSPri_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ZTEClientDNSPri_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 1, a)
}

func ZTEClientDNSPri_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 1, a)
}

func ZTEClientDNSPri_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 1)
}

func ZTEClientDNSSec_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 2, a)
}

func ZTEClientDNSSec_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 2, a)
}

func ZTEClientDNSSec_Get(p *radius.Packet) (value []byte) {
	value, _ = ZTEClientDNSSec_Lookup(p)
	return
}

func ZTEClientDNSSec_GetString(p *radius.Packet) (value string) {
	value, _ = ZTEClientDNSSec_LookupString(p)
	return
}

func ZTEClientDNSSec_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEClientDNSSec_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEClientDNSSec_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ZTEClientDNSSec_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ZTEClientDNSSec_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 2, a)
}

func ZTEClientDNSSec_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 2, a)
}

func ZTEClientDNSSec_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 2)
}

func ZTEContextName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 4, a)
}

func ZTEContextName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 4, a)
}

func ZTEContextName_Get(p *radius.Packet) (value []byte) {
	value, _ = ZTEContextName_Lookup(p)
	return
}

func ZTEContextName_GetString(p *radius.Packet) (value string) {
	value, _ = ZTEContextName_LookupString(p)
	return
}

func ZTEContextName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEContextName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEContextName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ZTEContextName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ZTEContextName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 4, a)
}

func ZTEContextName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 4, a)
}

func ZTEContextName_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 4)
}

type ZTETunnelMaxSessions uint32

var ZTETunnelMaxSessions_Strings = map[ZTETunnelMaxSessions]string{}

func (a ZTETunnelMaxSessions) String() string {
	if str, ok := ZTETunnelMaxSessions_Strings[a]; ok {
		return str
	}
	return "ZTETunnelMaxSessions(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTETunnelMaxSessions_Add(p *radius.Packet, value ZTETunnelMaxSessions) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 21, a)
}

func ZTETunnelMaxSessions_Get(p *radius.Packet) (value ZTETunnelMaxSessions) {
	value, _ = ZTETunnelMaxSessions_Lookup(p)
	return
}

func ZTETunnelMaxSessions_Gets(p *radius.Packet) (values []ZTETunnelMaxSessions, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 21) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTETunnelMaxSessions(i))
	}
	return
}

func ZTETunnelMaxSessions_Lookup(p *radius.Packet) (value ZTETunnelMaxSessions, err error) {
	a, ok := _ZTE_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTETunnelMaxSessions(i)
	return
}

func ZTETunnelMaxSessions_Set(p *radius.Packet, value ZTETunnelMaxSessions) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 21, a)
}

func ZTETunnelMaxSessions_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 21)
}

type ZTETunnelMaxTunnels uint32

var ZTETunnelMaxTunnels_Strings = map[ZTETunnelMaxTunnels]string{}

func (a ZTETunnelMaxTunnels) String() string {
	if str, ok := ZTETunnelMaxTunnels_Strings[a]; ok {
		return str
	}
	return "ZTETunnelMaxTunnels(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTETunnelMaxTunnels_Add(p *radius.Packet, value ZTETunnelMaxTunnels) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 22, a)
}

func ZTETunnelMaxTunnels_Get(p *radius.Packet) (value ZTETunnelMaxTunnels) {
	value, _ = ZTETunnelMaxTunnels_Lookup(p)
	return
}

func ZTETunnelMaxTunnels_Gets(p *radius.Packet) (values []ZTETunnelMaxTunnels, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 22) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTETunnelMaxTunnels(i))
	}
	return
}

func ZTETunnelMaxTunnels_Lookup(p *radius.Packet) (value ZTETunnelMaxTunnels, err error) {
	a, ok := _ZTE_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTETunnelMaxTunnels(i)
	return
}

func ZTETunnelMaxTunnels_Set(p *radius.Packet, value ZTETunnelMaxTunnels) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 22, a)
}

func ZTETunnelMaxTunnels_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 22)
}

type ZTETunnelWindow uint32

var ZTETunnelWindow_Strings = map[ZTETunnelWindow]string{}

func (a ZTETunnelWindow) String() string {
	if str, ok := ZTETunnelWindow_Strings[a]; ok {
		return str
	}
	return "ZTETunnelWindow(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTETunnelWindow_Add(p *radius.Packet, value ZTETunnelWindow) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 24, a)
}

func ZTETunnelWindow_Get(p *radius.Packet) (value ZTETunnelWindow) {
	value, _ = ZTETunnelWindow_Lookup(p)
	return
}

func ZTETunnelWindow_Gets(p *radius.Packet) (values []ZTETunnelWindow, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 24) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTETunnelWindow(i))
	}
	return
}

func ZTETunnelWindow_Lookup(p *radius.Packet) (value ZTETunnelWindow, err error) {
	a, ok := _ZTE_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTETunnelWindow(i)
	return
}

func ZTETunnelWindow_Set(p *radius.Packet, value ZTETunnelWindow) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 24, a)
}

func ZTETunnelWindow_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 24)
}

type ZTETunnelRetransmit uint32

var ZTETunnelRetransmit_Strings = map[ZTETunnelRetransmit]string{}

func (a ZTETunnelRetransmit) String() string {
	if str, ok := ZTETunnelRetransmit_Strings[a]; ok {
		return str
	}
	return "ZTETunnelRetransmit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTETunnelRetransmit_Add(p *radius.Packet, value ZTETunnelRetransmit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 25, a)
}

func ZTETunnelRetransmit_Get(p *radius.Packet) (value ZTETunnelRetransmit) {
	value, _ = ZTETunnelRetransmit_Lookup(p)
	return
}

func ZTETunnelRetransmit_Gets(p *radius.Packet) (values []ZTETunnelRetransmit, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 25) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTETunnelRetransmit(i))
	}
	return
}

func ZTETunnelRetransmit_Lookup(p *radius.Packet) (value ZTETunnelRetransmit, err error) {
	a, ok := _ZTE_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTETunnelRetransmit(i)
	return
}

func ZTETunnelRetransmit_Set(p *radius.Packet, value ZTETunnelRetransmit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 25, a)
}

func ZTETunnelRetransmit_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 25)
}

type ZTETunnelCmdTimeout uint32

var ZTETunnelCmdTimeout_Strings = map[ZTETunnelCmdTimeout]string{}

func (a ZTETunnelCmdTimeout) String() string {
	if str, ok := ZTETunnelCmdTimeout_Strings[a]; ok {
		return str
	}
	return "ZTETunnelCmdTimeout(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTETunnelCmdTimeout_Add(p *radius.Packet, value ZTETunnelCmdTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 26, a)
}

func ZTETunnelCmdTimeout_Get(p *radius.Packet) (value ZTETunnelCmdTimeout) {
	value, _ = ZTETunnelCmdTimeout_Lookup(p)
	return
}

func ZTETunnelCmdTimeout_Gets(p *radius.Packet) (values []ZTETunnelCmdTimeout, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 26) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTETunnelCmdTimeout(i))
	}
	return
}

func ZTETunnelCmdTimeout_Lookup(p *radius.Packet) (value ZTETunnelCmdTimeout, err error) {
	a, ok := _ZTE_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTETunnelCmdTimeout(i)
	return
}

func ZTETunnelCmdTimeout_Set(p *radius.Packet, value ZTETunnelCmdTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 26, a)
}

func ZTETunnelCmdTimeout_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 26)
}

func ZTEPPPOEURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 27, a)
}

func ZTEPPPOEURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 27, a)
}

func ZTEPPPOEURL_Get(p *radius.Packet) (value []byte) {
	value, _ = ZTEPPPOEURL_Lookup(p)
	return
}

func ZTEPPPOEURL_GetString(p *radius.Packet) (value string) {
	value, _ = ZTEPPPOEURL_LookupString(p)
	return
}

func ZTEPPPOEURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 27) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEPPPOEURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 27) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEPPPOEURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ZTEPPPOEURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ZTEPPPOEURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 27, a)
}

func ZTEPPPOEURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 27, a)
}

func ZTEPPPOEURL_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 27)
}

func ZTEPPPOEMOTM_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 28, a)
}

func ZTEPPPOEMOTM_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 28, a)
}

func ZTEPPPOEMOTM_Get(p *radius.Packet) (value []byte) {
	value, _ = ZTEPPPOEMOTM_Lookup(p)
	return
}

func ZTEPPPOEMOTM_GetString(p *radius.Packet) (value string) {
	value, _ = ZTEPPPOEMOTM_LookupString(p)
	return
}

func ZTEPPPOEMOTM_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 28) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEPPPOEMOTM_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 28) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEPPPOEMOTM_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ZTEPPPOEMOTM_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ZTEPPPOEMOTM_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 28, a)
}

func ZTEPPPOEMOTM_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 28, a)
}

func ZTEPPPOEMOTM_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 28)
}

type ZTETunnelAlgorithm uint32

var ZTETunnelAlgorithm_Strings = map[ZTETunnelAlgorithm]string{}

func (a ZTETunnelAlgorithm) String() string {
	if str, ok := ZTETunnelAlgorithm_Strings[a]; ok {
		return str
	}
	return "ZTETunnelAlgorithm(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTETunnelAlgorithm_Add(p *radius.Packet, value ZTETunnelAlgorithm) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 31, a)
}

func ZTETunnelAlgorithm_Get(p *radius.Packet) (value ZTETunnelAlgorithm) {
	value, _ = ZTETunnelAlgorithm_Lookup(p)
	return
}

func ZTETunnelAlgorithm_Gets(p *radius.Packet) (values []ZTETunnelAlgorithm, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 31) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTETunnelAlgorithm(i))
	}
	return
}

func ZTETunnelAlgorithm_Lookup(p *radius.Packet) (value ZTETunnelAlgorithm, err error) {
	a, ok := _ZTE_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTETunnelAlgorithm(i)
	return
}

func ZTETunnelAlgorithm_Set(p *radius.Packet, value ZTETunnelAlgorithm) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 31, a)
}

func ZTETunnelAlgorithm_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 31)
}

type ZTETunnelDeadtime uint32

var ZTETunnelDeadtime_Strings = map[ZTETunnelDeadtime]string{}

func (a ZTETunnelDeadtime) String() string {
	if str, ok := ZTETunnelDeadtime_Strings[a]; ok {
		return str
	}
	return "ZTETunnelDeadtime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTETunnelDeadtime_Add(p *radius.Packet, value ZTETunnelDeadtime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 32, a)
}

func ZTETunnelDeadtime_Get(p *radius.Packet) (value ZTETunnelDeadtime) {
	value, _ = ZTETunnelDeadtime_Lookup(p)
	return
}

func ZTETunnelDeadtime_Gets(p *radius.Packet) (values []ZTETunnelDeadtime, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 32) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTETunnelDeadtime(i))
	}
	return
}

func ZTETunnelDeadtime_Lookup(p *radius.Packet) (value ZTETunnelDeadtime, err error) {
	a, ok := _ZTE_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTETunnelDeadtime(i)
	return
}

func ZTETunnelDeadtime_Set(p *radius.Packet, value ZTETunnelDeadtime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 32, a)
}

func ZTETunnelDeadtime_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 32)
}

type ZTEMcastSend uint32

var ZTEMcastSend_Strings = map[ZTEMcastSend]string{}

func (a ZTEMcastSend) String() string {
	if str, ok := ZTEMcastSend_Strings[a]; ok {
		return str
	}
	return "ZTEMcastSend(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTEMcastSend_Add(p *radius.Packet, value ZTEMcastSend) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 33, a)
}

func ZTEMcastSend_Get(p *radius.Packet) (value ZTEMcastSend) {
	value, _ = ZTEMcastSend_Lookup(p)
	return
}

func ZTEMcastSend_Gets(p *radius.Packet) (values []ZTEMcastSend, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 33) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTEMcastSend(i))
	}
	return
}

func ZTEMcastSend_Lookup(p *radius.Packet) (value ZTEMcastSend, err error) {
	a, ok := _ZTE_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTEMcastSend(i)
	return
}

func ZTEMcastSend_Set(p *radius.Packet, value ZTEMcastSend) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 33, a)
}

func ZTEMcastSend_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 33)
}

type ZTEMcastReceive uint32

var ZTEMcastReceive_Strings = map[ZTEMcastReceive]string{}

func (a ZTEMcastReceive) String() string {
	if str, ok := ZTEMcastReceive_Strings[a]; ok {
		return str
	}
	return "ZTEMcastReceive(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTEMcastReceive_Add(p *radius.Packet, value ZTEMcastReceive) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 34, a)
}

func ZTEMcastReceive_Get(p *radius.Packet) (value ZTEMcastReceive) {
	value, _ = ZTEMcastReceive_Lookup(p)
	return
}

func ZTEMcastReceive_Gets(p *radius.Packet) (values []ZTEMcastReceive, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 34) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTEMcastReceive(i))
	}
	return
}

func ZTEMcastReceive_Lookup(p *radius.Packet) (value ZTEMcastReceive, err error) {
	a, ok := _ZTE_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTEMcastReceive(i)
	return
}

func ZTEMcastReceive_Set(p *radius.Packet, value ZTEMcastReceive) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 34, a)
}

func ZTEMcastReceive_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 34)
}

type ZTEMcastMaxGroups uint32

var ZTEMcastMaxGroups_Strings = map[ZTEMcastMaxGroups]string{}

func (a ZTEMcastMaxGroups) String() string {
	if str, ok := ZTEMcastMaxGroups_Strings[a]; ok {
		return str
	}
	return "ZTEMcastMaxGroups(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTEMcastMaxGroups_Add(p *radius.Packet, value ZTEMcastMaxGroups) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 35, a)
}

func ZTEMcastMaxGroups_Get(p *radius.Packet) (value ZTEMcastMaxGroups) {
	value, _ = ZTEMcastMaxGroups_Lookup(p)
	return
}

func ZTEMcastMaxGroups_Gets(p *radius.Packet) (values []ZTEMcastMaxGroups, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 35) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTEMcastMaxGroups(i))
	}
	return
}

func ZTEMcastMaxGroups_Lookup(p *radius.Packet) (value ZTEMcastMaxGroups, err error) {
	a, ok := _ZTE_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTEMcastMaxGroups(i)
	return
}

func ZTEMcastMaxGroups_Set(p *radius.Packet, value ZTEMcastMaxGroups) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 35, a)
}

func ZTEMcastMaxGroups_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 35)
}

type ZTEAccessType uint32

var ZTEAccessType_Strings = map[ZTEAccessType]string{}

func (a ZTEAccessType) String() string {
	if str, ok := ZTEAccessType_Strings[a]; ok {
		return str
	}
	return "ZTEAccessType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTEAccessType_Add(p *radius.Packet, value ZTEAccessType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 74, a)
}

func ZTEAccessType_Get(p *radius.Packet) (value ZTEAccessType) {
	value, _ = ZTEAccessType_Lookup(p)
	return
}

func ZTEAccessType_Gets(p *radius.Packet) (values []ZTEAccessType, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 74) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTEAccessType(i))
	}
	return
}

func ZTEAccessType_Lookup(p *radius.Packet) (value ZTEAccessType, err error) {
	a, ok := _ZTE_LookupVendor(p, 74)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTEAccessType(i)
	return
}

func ZTEAccessType_Set(p *radius.Packet, value ZTEAccessType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 74, a)
}

func ZTEAccessType_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 74)
}

type ZTEQoSType uint32

var ZTEQoSType_Strings = map[ZTEQoSType]string{}

func (a ZTEQoSType) String() string {
	if str, ok := ZTEQoSType_Strings[a]; ok {
		return str
	}
	return "ZTEQoSType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTEQoSType_Add(p *radius.Packet, value ZTEQoSType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 81, a)
}

func ZTEQoSType_Get(p *radius.Packet) (value ZTEQoSType) {
	value, _ = ZTEQoSType_Lookup(p)
	return
}

func ZTEQoSType_Gets(p *radius.Packet) (values []ZTEQoSType, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 81) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTEQoSType(i))
	}
	return
}

func ZTEQoSType_Lookup(p *radius.Packet) (value ZTEQoSType, err error) {
	a, ok := _ZTE_LookupVendor(p, 81)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTEQoSType(i)
	return
}

func ZTEQoSType_Set(p *radius.Packet, value ZTEQoSType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 81, a)
}

func ZTEQoSType_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 81)
}

func ZTEQoSProfileDown_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 82, a)
}

func ZTEQoSProfileDown_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 82, a)
}

func ZTEQoSProfileDown_Get(p *radius.Packet) (value []byte) {
	value, _ = ZTEQoSProfileDown_Lookup(p)
	return
}

func ZTEQoSProfileDown_GetString(p *radius.Packet) (value string) {
	value, _ = ZTEQoSProfileDown_LookupString(p)
	return
}

func ZTEQoSProfileDown_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 82) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEQoSProfileDown_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 82) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEQoSProfileDown_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ZTEQoSProfileDown_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ZTEQoSProfileDown_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 82, a)
}

func ZTEQoSProfileDown_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 82, a)
}

func ZTEQoSProfileDown_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 82)
}

type ZTERateCtrlSCRDown uint32

var ZTERateCtrlSCRDown_Strings = map[ZTERateCtrlSCRDown]string{}

func (a ZTERateCtrlSCRDown) String() string {
	if str, ok := ZTERateCtrlSCRDown_Strings[a]; ok {
		return str
	}
	return "ZTERateCtrlSCRDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTERateCtrlSCRDown_Add(p *radius.Packet, value ZTERateCtrlSCRDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 83, a)
}

func ZTERateCtrlSCRDown_Get(p *radius.Packet) (value ZTERateCtrlSCRDown) {
	value, _ = ZTERateCtrlSCRDown_Lookup(p)
	return
}

func ZTERateCtrlSCRDown_Gets(p *radius.Packet) (values []ZTERateCtrlSCRDown, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 83) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTERateCtrlSCRDown(i))
	}
	return
}

func ZTERateCtrlSCRDown_Lookup(p *radius.Packet) (value ZTERateCtrlSCRDown, err error) {
	a, ok := _ZTE_LookupVendor(p, 83)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTERateCtrlSCRDown(i)
	return
}

func ZTERateCtrlSCRDown_Set(p *radius.Packet, value ZTERateCtrlSCRDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 83, a)
}

func ZTERateCtrlSCRDown_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 83)
}

type ZTERateCtrlBurstDown uint32

var ZTERateCtrlBurstDown_Strings = map[ZTERateCtrlBurstDown]string{}

func (a ZTERateCtrlBurstDown) String() string {
	if str, ok := ZTERateCtrlBurstDown_Strings[a]; ok {
		return str
	}
	return "ZTERateCtrlBurstDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTERateCtrlBurstDown_Add(p *radius.Packet, value ZTERateCtrlBurstDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 84, a)
}

func ZTERateCtrlBurstDown_Get(p *radius.Packet) (value ZTERateCtrlBurstDown) {
	value, _ = ZTERateCtrlBurstDown_Lookup(p)
	return
}

func ZTERateCtrlBurstDown_Gets(p *radius.Packet) (values []ZTERateCtrlBurstDown, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 84) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTERateCtrlBurstDown(i))
	}
	return
}

func ZTERateCtrlBurstDown_Lookup(p *radius.Packet) (value ZTERateCtrlBurstDown, err error) {
	a, ok := _ZTE_LookupVendor(p, 84)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTERateCtrlBurstDown(i)
	return
}

func ZTERateCtrlBurstDown_Set(p *radius.Packet, value ZTERateCtrlBurstDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 84, a)
}

func ZTERateCtrlBurstDown_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 84)
}

type ZTERateCtrlPCR uint32

var ZTERateCtrlPCR_Strings = map[ZTERateCtrlPCR]string{}

func (a ZTERateCtrlPCR) String() string {
	if str, ok := ZTERateCtrlPCR_Strings[a]; ok {
		return str
	}
	return "ZTERateCtrlPCR(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTERateCtrlPCR_Add(p *radius.Packet, value ZTERateCtrlPCR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 86, a)
}

func ZTERateCtrlPCR_Get(p *radius.Packet) (value ZTERateCtrlPCR) {
	value, _ = ZTERateCtrlPCR_Lookup(p)
	return
}

func ZTERateCtrlPCR_Gets(p *radius.Packet) (values []ZTERateCtrlPCR, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 86) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTERateCtrlPCR(i))
	}
	return
}

func ZTERateCtrlPCR_Lookup(p *radius.Packet) (value ZTERateCtrlPCR, err error) {
	a, ok := _ZTE_LookupVendor(p, 86)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTERateCtrlPCR(i)
	return
}

func ZTERateCtrlPCR_Set(p *radius.Packet, value ZTERateCtrlPCR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 86, a)
}

func ZTERateCtrlPCR_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 86)
}

type ZTETCPSynRate uint32

var ZTETCPSynRate_Strings = map[ZTETCPSynRate]string{}

func (a ZTETCPSynRate) String() string {
	if str, ok := ZTETCPSynRate_Strings[a]; ok {
		return str
	}
	return "ZTETCPSynRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTETCPSynRate_Add(p *radius.Packet, value ZTETCPSynRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 88, a)
}

func ZTETCPSynRate_Get(p *radius.Packet) (value ZTETCPSynRate) {
	value, _ = ZTETCPSynRate_Lookup(p)
	return
}

func ZTETCPSynRate_Gets(p *radius.Packet) (values []ZTETCPSynRate, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 88) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTETCPSynRate(i))
	}
	return
}

func ZTETCPSynRate_Lookup(p *radius.Packet) (value ZTETCPSynRate, err error) {
	a, ok := _ZTE_LookupVendor(p, 88)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTETCPSynRate(i)
	return
}

func ZTETCPSynRate_Set(p *radius.Packet, value ZTETCPSynRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 88, a)
}

func ZTETCPSynRate_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 88)
}

type ZTERateCtrlSCRUp uint32

var ZTERateCtrlSCRUp_Strings = map[ZTERateCtrlSCRUp]string{}

func (a ZTERateCtrlSCRUp) String() string {
	if str, ok := ZTERateCtrlSCRUp_Strings[a]; ok {
		return str
	}
	return "ZTERateCtrlSCRUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTERateCtrlSCRUp_Add(p *radius.Packet, value ZTERateCtrlSCRUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 89, a)
}

func ZTERateCtrlSCRUp_Get(p *radius.Packet) (value ZTERateCtrlSCRUp) {
	value, _ = ZTERateCtrlSCRUp_Lookup(p)
	return
}

func ZTERateCtrlSCRUp_Gets(p *radius.Packet) (values []ZTERateCtrlSCRUp, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 89) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTERateCtrlSCRUp(i))
	}
	return
}

func ZTERateCtrlSCRUp_Lookup(p *radius.Packet) (value ZTERateCtrlSCRUp, err error) {
	a, ok := _ZTE_LookupVendor(p, 89)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTERateCtrlSCRUp(i)
	return
}

func ZTERateCtrlSCRUp_Set(p *radius.Packet, value ZTERateCtrlSCRUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 89, a)
}

func ZTERateCtrlSCRUp_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 89)
}

type ZTEPriorityLevel uint32

var ZTEPriorityLevel_Strings = map[ZTEPriorityLevel]string{}

func (a ZTEPriorityLevel) String() string {
	if str, ok := ZTEPriorityLevel_Strings[a]; ok {
		return str
	}
	return "ZTEPriorityLevel(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTEPriorityLevel_Add(p *radius.Packet, value ZTEPriorityLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 90, a)
}

func ZTEPriorityLevel_Get(p *radius.Packet) (value ZTEPriorityLevel) {
	value, _ = ZTEPriorityLevel_Lookup(p)
	return
}

func ZTEPriorityLevel_Gets(p *radius.Packet) (values []ZTEPriorityLevel, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 90) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTEPriorityLevel(i))
	}
	return
}

func ZTEPriorityLevel_Lookup(p *radius.Packet) (value ZTEPriorityLevel, err error) {
	a, ok := _ZTE_LookupVendor(p, 90)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTEPriorityLevel(i)
	return
}

func ZTEPriorityLevel_Set(p *radius.Packet, value ZTEPriorityLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 90, a)
}

func ZTEPriorityLevel_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 90)
}

type ZTERateCtrlBurstUp uint32

var ZTERateCtrlBurstUp_Strings = map[ZTERateCtrlBurstUp]string{}

func (a ZTERateCtrlBurstUp) String() string {
	if str, ok := ZTERateCtrlBurstUp_Strings[a]; ok {
		return str
	}
	return "ZTERateCtrlBurstUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTERateCtrlBurstUp_Add(p *radius.Packet, value ZTERateCtrlBurstUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 91, a)
}

func ZTERateCtrlBurstUp_Get(p *radius.Packet) (value ZTERateCtrlBurstUp) {
	value, _ = ZTERateCtrlBurstUp_Lookup(p)
	return
}

func ZTERateCtrlBurstUp_Gets(p *radius.Packet) (values []ZTERateCtrlBurstUp, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 91) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTERateCtrlBurstUp(i))
	}
	return
}

func ZTERateCtrlBurstUp_Lookup(p *radius.Packet) (value ZTERateCtrlBurstUp, err error) {
	a, ok := _ZTE_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTERateCtrlBurstUp(i)
	return
}

func ZTERateCtrlBurstUp_Set(p *radius.Packet, value ZTERateCtrlBurstUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 91, a)
}

func ZTERateCtrlBurstUp_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 91)
}

type ZTERateCtrlBurstMaxDown uint32

var ZTERateCtrlBurstMaxDown_Strings = map[ZTERateCtrlBurstMaxDown]string{}

func (a ZTERateCtrlBurstMaxDown) String() string {
	if str, ok := ZTERateCtrlBurstMaxDown_Strings[a]; ok {
		return str
	}
	return "ZTERateCtrlBurstMaxDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTERateCtrlBurstMaxDown_Add(p *radius.Packet, value ZTERateCtrlBurstMaxDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 92, a)
}

func ZTERateCtrlBurstMaxDown_Get(p *radius.Packet) (value ZTERateCtrlBurstMaxDown) {
	value, _ = ZTERateCtrlBurstMaxDown_Lookup(p)
	return
}

func ZTERateCtrlBurstMaxDown_Gets(p *radius.Packet) (values []ZTERateCtrlBurstMaxDown, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 92) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTERateCtrlBurstMaxDown(i))
	}
	return
}

func ZTERateCtrlBurstMaxDown_Lookup(p *radius.Packet) (value ZTERateCtrlBurstMaxDown, err error) {
	a, ok := _ZTE_LookupVendor(p, 92)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTERateCtrlBurstMaxDown(i)
	return
}

func ZTERateCtrlBurstMaxDown_Set(p *radius.Packet, value ZTERateCtrlBurstMaxDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 92, a)
}

func ZTERateCtrlBurstMaxDown_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 92)
}

type ZTERateCtrlBurstMaxUp uint32

var ZTERateCtrlBurstMaxUp_Strings = map[ZTERateCtrlBurstMaxUp]string{}

func (a ZTERateCtrlBurstMaxUp) String() string {
	if str, ok := ZTERateCtrlBurstMaxUp_Strings[a]; ok {
		return str
	}
	return "ZTERateCtrlBurstMaxUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTERateCtrlBurstMaxUp_Add(p *radius.Packet, value ZTERateCtrlBurstMaxUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 93, a)
}

func ZTERateCtrlBurstMaxUp_Get(p *radius.Packet) (value ZTERateCtrlBurstMaxUp) {
	value, _ = ZTERateCtrlBurstMaxUp_Lookup(p)
	return
}

func ZTERateCtrlBurstMaxUp_Gets(p *radius.Packet) (values []ZTERateCtrlBurstMaxUp, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 93) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTERateCtrlBurstMaxUp(i))
	}
	return
}

func ZTERateCtrlBurstMaxUp_Lookup(p *radius.Packet) (value ZTERateCtrlBurstMaxUp, err error) {
	a, ok := _ZTE_LookupVendor(p, 93)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTERateCtrlBurstMaxUp(i)
	return
}

func ZTERateCtrlBurstMaxUp_Set(p *radius.Packet, value ZTERateCtrlBurstMaxUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 93, a)
}

func ZTERateCtrlBurstMaxUp_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 93)
}

func ZTEQOSProfileUp_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 94, a)
}

func ZTEQOSProfileUp_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 94, a)
}

func ZTEQOSProfileUp_Get(p *radius.Packet) (value []byte) {
	value, _ = ZTEQOSProfileUp_Lookup(p)
	return
}

func ZTEQOSProfileUp_GetString(p *radius.Packet) (value string) {
	value, _ = ZTEQOSProfileUp_LookupString(p)
	return
}

func ZTEQOSProfileUp_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 94) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEQOSProfileUp_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 94) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEQOSProfileUp_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 94)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ZTEQOSProfileUp_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 94)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ZTEQOSProfileUp_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 94, a)
}

func ZTEQOSProfileUp_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 94, a)
}

func ZTEQOSProfileUp_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 94)
}

type ZTETCPLimitNum uint32

var ZTETCPLimitNum_Strings = map[ZTETCPLimitNum]string{}

func (a ZTETCPLimitNum) String() string {
	if str, ok := ZTETCPLimitNum_Strings[a]; ok {
		return str
	}
	return "ZTETCPLimitNum(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTETCPLimitNum_Add(p *radius.Packet, value ZTETCPLimitNum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 95, a)
}

func ZTETCPLimitNum_Get(p *radius.Packet) (value ZTETCPLimitNum) {
	value, _ = ZTETCPLimitNum_Lookup(p)
	return
}

func ZTETCPLimitNum_Gets(p *radius.Packet) (values []ZTETCPLimitNum, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 95) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTETCPLimitNum(i))
	}
	return
}

func ZTETCPLimitNum_Lookup(p *radius.Packet) (value ZTETCPLimitNum, err error) {
	a, ok := _ZTE_LookupVendor(p, 95)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTETCPLimitNum(i)
	return
}

func ZTETCPLimitNum_Set(p *radius.Packet, value ZTETCPLimitNum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 95, a)
}

func ZTETCPLimitNum_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 95)
}

type ZTETCPLimitMode uint32

var ZTETCPLimitMode_Strings = map[ZTETCPLimitMode]string{}

func (a ZTETCPLimitMode) String() string {
	if str, ok := ZTETCPLimitMode_Strings[a]; ok {
		return str
	}
	return "ZTETCPLimitMode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTETCPLimitMode_Add(p *radius.Packet, value ZTETCPLimitMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 96, a)
}

func ZTETCPLimitMode_Get(p *radius.Packet) (value ZTETCPLimitMode) {
	value, _ = ZTETCPLimitMode_Lookup(p)
	return
}

func ZTETCPLimitMode_Gets(p *radius.Packet) (values []ZTETCPLimitMode, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 96) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTETCPLimitMode(i))
	}
	return
}

func ZTETCPLimitMode_Lookup(p *radius.Packet) (value ZTETCPLimitMode, err error) {
	a, ok := _ZTE_LookupVendor(p, 96)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTETCPLimitMode(i)
	return
}

func ZTETCPLimitMode_Set(p *radius.Packet, value ZTETCPLimitMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 96, a)
}

func ZTETCPLimitMode_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 96)
}

type ZTEIGMPServiceProfileNum uint32

var ZTEIGMPServiceProfileNum_Strings = map[ZTEIGMPServiceProfileNum]string{}

func (a ZTEIGMPServiceProfileNum) String() string {
	if str, ok := ZTEIGMPServiceProfileNum_Strings[a]; ok {
		return str
	}
	return "ZTEIGMPServiceProfileNum(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTEIGMPServiceProfileNum_Add(p *radius.Packet, value ZTEIGMPServiceProfileNum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 97, a)
}

func ZTEIGMPServiceProfileNum_Get(p *radius.Packet) (value ZTEIGMPServiceProfileNum) {
	value, _ = ZTEIGMPServiceProfileNum_Lookup(p)
	return
}

func ZTEIGMPServiceProfileNum_Gets(p *radius.Packet) (values []ZTEIGMPServiceProfileNum, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 97) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTEIGMPServiceProfileNum(i))
	}
	return
}

func ZTEIGMPServiceProfileNum_Lookup(p *radius.Packet) (value ZTEIGMPServiceProfileNum, err error) {
	a, ok := _ZTE_LookupVendor(p, 97)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTEIGMPServiceProfileNum(i)
	return
}

func ZTEIGMPServiceProfileNum_Set(p *radius.Packet, value ZTEIGMPServiceProfileNum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 97, a)
}

func ZTEIGMPServiceProfileNum_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 97)
}

type ZTEPPPSserviceType uint32

var ZTEPPPSserviceType_Strings = map[ZTEPPPSserviceType]string{}

func (a ZTEPPPSserviceType) String() string {
	if str, ok := ZTEPPPSserviceType_Strings[a]; ok {
		return str
	}
	return "ZTEPPPSserviceType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTEPPPSserviceType_Add(p *radius.Packet, value ZTEPPPSserviceType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 101, a)
}

func ZTEPPPSserviceType_Get(p *radius.Packet) (value ZTEPPPSserviceType) {
	value, _ = ZTEPPPSserviceType_Lookup(p)
	return
}

func ZTEPPPSserviceType_Gets(p *radius.Packet) (values []ZTEPPPSserviceType, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 101) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTEPPPSserviceType(i))
	}
	return
}

func ZTEPPPSserviceType_Lookup(p *radius.Packet) (value ZTEPPPSserviceType, err error) {
	a, ok := _ZTE_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTEPPPSserviceType(i)
	return
}

func ZTEPPPSserviceType_Set(p *radius.Packet, value ZTEPPPSserviceType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 101, a)
}

func ZTEPPPSserviceType_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 101)
}

type ZTESWPrivilege uint32

var ZTESWPrivilege_Strings = map[ZTESWPrivilege]string{}

func (a ZTESWPrivilege) String() string {
	if str, ok := ZTESWPrivilege_Strings[a]; ok {
		return str
	}
	return "ZTESWPrivilege(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTESWPrivilege_Add(p *radius.Packet, value ZTESWPrivilege) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 104, a)
}

func ZTESWPrivilege_Get(p *radius.Packet) (value ZTESWPrivilege) {
	value, _ = ZTESWPrivilege_Lookup(p)
	return
}

func ZTESWPrivilege_Gets(p *radius.Packet) (values []ZTESWPrivilege, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 104) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTESWPrivilege(i))
	}
	return
}

func ZTESWPrivilege_Lookup(p *radius.Packet) (value ZTESWPrivilege, err error) {
	a, ok := _ZTE_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTESWPrivilege(i)
	return
}

func ZTESWPrivilege_Set(p *radius.Packet, value ZTESWPrivilege) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 104, a)
}

func ZTESWPrivilege_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 104)
}

func ZTEAccessDomain_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 151, a)
}

func ZTEAccessDomain_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 151, a)
}

func ZTEAccessDomain_Get(p *radius.Packet) (value []byte) {
	value, _ = ZTEAccessDomain_Lookup(p)
	return
}

func ZTEAccessDomain_GetString(p *radius.Packet) (value string) {
	value, _ = ZTEAccessDomain_LookupString(p)
	return
}

func ZTEAccessDomain_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 151) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEAccessDomain_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 151) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEAccessDomain_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 151)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ZTEAccessDomain_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 151)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ZTEAccessDomain_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 151, a)
}

func ZTEAccessDomain_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 151, a)
}

func ZTEAccessDomain_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 151)
}

func ZTEVPNID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 190, a)
}

func ZTEVPNID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 190, a)
}

func ZTEVPNID_Get(p *radius.Packet) (value []byte) {
	value, _ = ZTEVPNID_Lookup(p)
	return
}

func ZTEVPNID_GetString(p *radius.Packet) (value string) {
	value, _ = ZTEVPNID_LookupString(p)
	return
}

func ZTEVPNID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 190) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEVPNID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 190) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEVPNID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 190)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ZTEVPNID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 190)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ZTEVPNID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 190, a)
}

func ZTEVPNID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 190, a)
}

func ZTEVPNID_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 190)
}

type ZTERateBustDPIR uint32

var ZTERateBustDPIR_Strings = map[ZTERateBustDPIR]string{}

func (a ZTERateBustDPIR) String() string {
	if str, ok := ZTERateBustDPIR_Strings[a]; ok {
		return str
	}
	return "ZTERateBustDPIR(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTERateBustDPIR_Add(p *radius.Packet, value ZTERateBustDPIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 191, a)
}

func ZTERateBustDPIR_Get(p *radius.Packet) (value ZTERateBustDPIR) {
	value, _ = ZTERateBustDPIR_Lookup(p)
	return
}

func ZTERateBustDPIR_Gets(p *radius.Packet) (values []ZTERateBustDPIR, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 191) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTERateBustDPIR(i))
	}
	return
}

func ZTERateBustDPIR_Lookup(p *radius.Packet) (value ZTERateBustDPIR, err error) {
	a, ok := _ZTE_LookupVendor(p, 191)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTERateBustDPIR(i)
	return
}

func ZTERateBustDPIR_Set(p *radius.Packet, value ZTERateBustDPIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 191, a)
}

func ZTERateBustDPIR_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 191)
}

type ZTERateBustUPIR uint32

var ZTERateBustUPIR_Strings = map[ZTERateBustUPIR]string{}

func (a ZTERateBustUPIR) String() string {
	if str, ok := ZTERateBustUPIR_Strings[a]; ok {
		return str
	}
	return "ZTERateBustUPIR(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTERateBustUPIR_Add(p *radius.Packet, value ZTERateBustUPIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 192, a)
}

func ZTERateBustUPIR_Get(p *radius.Packet) (value ZTERateBustUPIR) {
	value, _ = ZTERateBustUPIR_Lookup(p)
	return
}

func ZTERateBustUPIR_Gets(p *radius.Packet) (values []ZTERateBustUPIR, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 192) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTERateBustUPIR(i))
	}
	return
}

func ZTERateBustUPIR_Lookup(p *radius.Packet) (value ZTERateBustUPIR, err error) {
	a, ok := _ZTE_LookupVendor(p, 192)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTERateBustUPIR(i)
	return
}

func ZTERateBustUPIR_Set(p *radius.Packet, value ZTERateBustUPIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 192, a)
}

func ZTERateBustUPIR_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 192)
}

type ZTERateCtrlPBSDown uint32

var ZTERateCtrlPBSDown_Strings = map[ZTERateCtrlPBSDown]string{}

func (a ZTERateCtrlPBSDown) String() string {
	if str, ok := ZTERateCtrlPBSDown_Strings[a]; ok {
		return str
	}
	return "ZTERateCtrlPBSDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTERateCtrlPBSDown_Add(p *radius.Packet, value ZTERateCtrlPBSDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 202, a)
}

func ZTERateCtrlPBSDown_Get(p *radius.Packet) (value ZTERateCtrlPBSDown) {
	value, _ = ZTERateCtrlPBSDown_Lookup(p)
	return
}

func ZTERateCtrlPBSDown_Gets(p *radius.Packet) (values []ZTERateCtrlPBSDown, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 202) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTERateCtrlPBSDown(i))
	}
	return
}

func ZTERateCtrlPBSDown_Lookup(p *radius.Packet) (value ZTERateCtrlPBSDown, err error) {
	a, ok := _ZTE_LookupVendor(p, 202)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTERateCtrlPBSDown(i)
	return
}

func ZTERateCtrlPBSDown_Set(p *radius.Packet, value ZTERateCtrlPBSDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 202, a)
}

func ZTERateCtrlPBSDown_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 202)
}

type ZTERateCtrlPBSUp uint32

var ZTERateCtrlPBSUp_Strings = map[ZTERateCtrlPBSUp]string{}

func (a ZTERateCtrlPBSUp) String() string {
	if str, ok := ZTERateCtrlPBSUp_Strings[a]; ok {
		return str
	}
	return "ZTERateCtrlPBSUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTERateCtrlPBSUp_Add(p *radius.Packet, value ZTERateCtrlPBSUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 203, a)
}

func ZTERateCtrlPBSUp_Get(p *radius.Packet) (value ZTERateCtrlPBSUp) {
	value, _ = ZTERateCtrlPBSUp_Lookup(p)
	return
}

func ZTERateCtrlPBSUp_Gets(p *radius.Packet) (values []ZTERateCtrlPBSUp, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 203) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTERateCtrlPBSUp(i))
	}
	return
}

func ZTERateCtrlPBSUp_Lookup(p *radius.Packet) (value ZTERateCtrlPBSUp, err error) {
	a, ok := _ZTE_LookupVendor(p, 203)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTERateCtrlPBSUp(i)
	return
}

func ZTERateCtrlPBSUp_Set(p *radius.Packet, value ZTERateCtrlPBSUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 203, a)
}

func ZTERateCtrlPBSUp_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 203)
}

type ZTERateCtrlSCRUpV6 uint32

var ZTERateCtrlSCRUpV6_Strings = map[ZTERateCtrlSCRUpV6]string{}

func (a ZTERateCtrlSCRUpV6) String() string {
	if str, ok := ZTERateCtrlSCRUpV6_Strings[a]; ok {
		return str
	}
	return "ZTERateCtrlSCRUpV6(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTERateCtrlSCRUpV6_Add(p *radius.Packet, value ZTERateCtrlSCRUpV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 228, a)
}

func ZTERateCtrlSCRUpV6_Get(p *radius.Packet) (value ZTERateCtrlSCRUpV6) {
	value, _ = ZTERateCtrlSCRUpV6_Lookup(p)
	return
}

func ZTERateCtrlSCRUpV6_Gets(p *radius.Packet) (values []ZTERateCtrlSCRUpV6, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 228) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTERateCtrlSCRUpV6(i))
	}
	return
}

func ZTERateCtrlSCRUpV6_Lookup(p *radius.Packet) (value ZTERateCtrlSCRUpV6, err error) {
	a, ok := _ZTE_LookupVendor(p, 228)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTERateCtrlSCRUpV6(i)
	return
}

func ZTERateCtrlSCRUpV6_Set(p *radius.Packet, value ZTERateCtrlSCRUpV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 228, a)
}

func ZTERateCtrlSCRUpV6_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 228)
}

type ZTERateCtrlBurstUpV6 uint32

var ZTERateCtrlBurstUpV6_Strings = map[ZTERateCtrlBurstUpV6]string{}

func (a ZTERateCtrlBurstUpV6) String() string {
	if str, ok := ZTERateCtrlBurstUpV6_Strings[a]; ok {
		return str
	}
	return "ZTERateCtrlBurstUpV6(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTERateCtrlBurstUpV6_Add(p *radius.Packet, value ZTERateCtrlBurstUpV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 229, a)
}

func ZTERateCtrlBurstUpV6_Get(p *radius.Packet) (value ZTERateCtrlBurstUpV6) {
	value, _ = ZTERateCtrlBurstUpV6_Lookup(p)
	return
}

func ZTERateCtrlBurstUpV6_Gets(p *radius.Packet) (values []ZTERateCtrlBurstUpV6, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 229) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTERateCtrlBurstUpV6(i))
	}
	return
}

func ZTERateCtrlBurstUpV6_Lookup(p *radius.Packet) (value ZTERateCtrlBurstUpV6, err error) {
	a, ok := _ZTE_LookupVendor(p, 229)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTERateCtrlBurstUpV6(i)
	return
}

func ZTERateCtrlBurstUpV6_Set(p *radius.Packet, value ZTERateCtrlBurstUpV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 229, a)
}

func ZTERateCtrlBurstUpV6_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 229)
}

type ZTERateCtrlBurstMaxUpV6 uint32

var ZTERateCtrlBurstMaxUpV6_Strings = map[ZTERateCtrlBurstMaxUpV6]string{}

func (a ZTERateCtrlBurstMaxUpV6) String() string {
	if str, ok := ZTERateCtrlBurstMaxUpV6_Strings[a]; ok {
		return str
	}
	return "ZTERateCtrlBurstMaxUpV6(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTERateCtrlBurstMaxUpV6_Add(p *radius.Packet, value ZTERateCtrlBurstMaxUpV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 230, a)
}

func ZTERateCtrlBurstMaxUpV6_Get(p *radius.Packet) (value ZTERateCtrlBurstMaxUpV6) {
	value, _ = ZTERateCtrlBurstMaxUpV6_Lookup(p)
	return
}

func ZTERateCtrlBurstMaxUpV6_Gets(p *radius.Packet) (values []ZTERateCtrlBurstMaxUpV6, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 230) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTERateCtrlBurstMaxUpV6(i))
	}
	return
}

func ZTERateCtrlBurstMaxUpV6_Lookup(p *radius.Packet) (value ZTERateCtrlBurstMaxUpV6, err error) {
	a, ok := _ZTE_LookupVendor(p, 230)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTERateCtrlBurstMaxUpV6(i)
	return
}

func ZTERateCtrlBurstMaxUpV6_Set(p *radius.Packet, value ZTERateCtrlBurstMaxUpV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 230, a)
}

func ZTERateCtrlBurstMaxUpV6_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 230)
}

type ZTERateCtrlPBSUpV6 uint32

var ZTERateCtrlPBSUpV6_Strings = map[ZTERateCtrlPBSUpV6]string{}

func (a ZTERateCtrlPBSUpV6) String() string {
	if str, ok := ZTERateCtrlPBSUpV6_Strings[a]; ok {
		return str
	}
	return "ZTERateCtrlPBSUpV6(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTERateCtrlPBSUpV6_Add(p *radius.Packet, value ZTERateCtrlPBSUpV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 231, a)
}

func ZTERateCtrlPBSUpV6_Get(p *radius.Packet) (value ZTERateCtrlPBSUpV6) {
	value, _ = ZTERateCtrlPBSUpV6_Lookup(p)
	return
}

func ZTERateCtrlPBSUpV6_Gets(p *radius.Packet) (values []ZTERateCtrlPBSUpV6, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 231) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTERateCtrlPBSUpV6(i))
	}
	return
}

func ZTERateCtrlPBSUpV6_Lookup(p *radius.Packet) (value ZTERateCtrlPBSUpV6, err error) {
	a, ok := _ZTE_LookupVendor(p, 231)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTERateCtrlPBSUpV6(i)
	return
}

func ZTERateCtrlPBSUpV6_Set(p *radius.Packet, value ZTERateCtrlPBSUpV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 231, a)
}

func ZTERateCtrlPBSUpV6_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 231)
}

func ZTEQoSProfileUpV6_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 232, a)
}

func ZTEQoSProfileUpV6_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 232, a)
}

func ZTEQoSProfileUpV6_Get(p *radius.Packet) (value []byte) {
	value, _ = ZTEQoSProfileUpV6_Lookup(p)
	return
}

func ZTEQoSProfileUpV6_GetString(p *radius.Packet) (value string) {
	value, _ = ZTEQoSProfileUpV6_LookupString(p)
	return
}

func ZTEQoSProfileUpV6_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 232) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEQoSProfileUpV6_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 232) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEQoSProfileUpV6_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 232)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ZTEQoSProfileUpV6_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 232)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ZTEQoSProfileUpV6_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 232, a)
}

func ZTEQoSProfileUpV6_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 232, a)
}

func ZTEQoSProfileUpV6_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 232)
}

type ZTERateCtrlSCRDownV6 uint32

var ZTERateCtrlSCRDownV6_Strings = map[ZTERateCtrlSCRDownV6]string{}

func (a ZTERateCtrlSCRDownV6) String() string {
	if str, ok := ZTERateCtrlSCRDownV6_Strings[a]; ok {
		return str
	}
	return "ZTERateCtrlSCRDownV6(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTERateCtrlSCRDownV6_Add(p *radius.Packet, value ZTERateCtrlSCRDownV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 233, a)
}

func ZTERateCtrlSCRDownV6_Get(p *radius.Packet) (value ZTERateCtrlSCRDownV6) {
	value, _ = ZTERateCtrlSCRDownV6_Lookup(p)
	return
}

func ZTERateCtrlSCRDownV6_Gets(p *radius.Packet) (values []ZTERateCtrlSCRDownV6, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 233) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTERateCtrlSCRDownV6(i))
	}
	return
}

func ZTERateCtrlSCRDownV6_Lookup(p *radius.Packet) (value ZTERateCtrlSCRDownV6, err error) {
	a, ok := _ZTE_LookupVendor(p, 233)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTERateCtrlSCRDownV6(i)
	return
}

func ZTERateCtrlSCRDownV6_Set(p *radius.Packet, value ZTERateCtrlSCRDownV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 233, a)
}

func ZTERateCtrlSCRDownV6_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 233)
}

type ZTERateCtrlBurstDownV6 uint32

var ZTERateCtrlBurstDownV6_Strings = map[ZTERateCtrlBurstDownV6]string{}

func (a ZTERateCtrlBurstDownV6) String() string {
	if str, ok := ZTERateCtrlBurstDownV6_Strings[a]; ok {
		return str
	}
	return "ZTERateCtrlBurstDownV6(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTERateCtrlBurstDownV6_Add(p *radius.Packet, value ZTERateCtrlBurstDownV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 234, a)
}

func ZTERateCtrlBurstDownV6_Get(p *radius.Packet) (value ZTERateCtrlBurstDownV6) {
	value, _ = ZTERateCtrlBurstDownV6_Lookup(p)
	return
}

func ZTERateCtrlBurstDownV6_Gets(p *radius.Packet) (values []ZTERateCtrlBurstDownV6, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 234) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTERateCtrlBurstDownV6(i))
	}
	return
}

func ZTERateCtrlBurstDownV6_Lookup(p *radius.Packet) (value ZTERateCtrlBurstDownV6, err error) {
	a, ok := _ZTE_LookupVendor(p, 234)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTERateCtrlBurstDownV6(i)
	return
}

func ZTERateCtrlBurstDownV6_Set(p *radius.Packet, value ZTERateCtrlBurstDownV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 234, a)
}

func ZTERateCtrlBurstDownV6_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 234)
}

type ZTERateCtrlBurstMaxDownV6 uint32

var ZTERateCtrlBurstMaxDownV6_Strings = map[ZTERateCtrlBurstMaxDownV6]string{}

func (a ZTERateCtrlBurstMaxDownV6) String() string {
	if str, ok := ZTERateCtrlBurstMaxDownV6_Strings[a]; ok {
		return str
	}
	return "ZTERateCtrlBurstMaxDownV6(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTERateCtrlBurstMaxDownV6_Add(p *radius.Packet, value ZTERateCtrlBurstMaxDownV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 235, a)
}

func ZTERateCtrlBurstMaxDownV6_Get(p *radius.Packet) (value ZTERateCtrlBurstMaxDownV6) {
	value, _ = ZTERateCtrlBurstMaxDownV6_Lookup(p)
	return
}

func ZTERateCtrlBurstMaxDownV6_Gets(p *radius.Packet) (values []ZTERateCtrlBurstMaxDownV6, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 235) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTERateCtrlBurstMaxDownV6(i))
	}
	return
}

func ZTERateCtrlBurstMaxDownV6_Lookup(p *radius.Packet) (value ZTERateCtrlBurstMaxDownV6, err error) {
	a, ok := _ZTE_LookupVendor(p, 235)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTERateCtrlBurstMaxDownV6(i)
	return
}

func ZTERateCtrlBurstMaxDownV6_Set(p *radius.Packet, value ZTERateCtrlBurstMaxDownV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 235, a)
}

func ZTERateCtrlBurstMaxDownV6_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 235)
}

type ZTERateCtrlPBSDownV6 uint32

var ZTERateCtrlPBSDownV6_Strings = map[ZTERateCtrlPBSDownV6]string{}

func (a ZTERateCtrlPBSDownV6) String() string {
	if str, ok := ZTERateCtrlPBSDownV6_Strings[a]; ok {
		return str
	}
	return "ZTERateCtrlPBSDownV6(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZTERateCtrlPBSDownV6_Add(p *radius.Packet, value ZTERateCtrlPBSDownV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_AddVendor(p, 236, a)
}

func ZTERateCtrlPBSDownV6_Get(p *radius.Packet) (value ZTERateCtrlPBSDownV6) {
	value, _ = ZTERateCtrlPBSDownV6_Lookup(p)
	return
}

func ZTERateCtrlPBSDownV6_Gets(p *radius.Packet) (values []ZTERateCtrlPBSDownV6, err error) {
	var i uint32
	for _, attr := range _ZTE_GetsVendor(p, 236) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZTERateCtrlPBSDownV6(i))
	}
	return
}

func ZTERateCtrlPBSDownV6_Lookup(p *radius.Packet) (value ZTERateCtrlPBSDownV6, err error) {
	a, ok := _ZTE_LookupVendor(p, 236)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZTERateCtrlPBSDownV6(i)
	return
}

func ZTERateCtrlPBSDownV6_Set(p *radius.Packet, value ZTERateCtrlPBSDownV6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ZTE_SetVendor(p, 236, a)
}

func ZTERateCtrlPBSDownV6_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 236)
}

func ZTEQoSProfileDownV6_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 237, a)
}

func ZTEQoSProfileDownV6_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_AddVendor(p, 237, a)
}

func ZTEQoSProfileDownV6_Get(p *radius.Packet) (value []byte) {
	value, _ = ZTEQoSProfileDownV6_Lookup(p)
	return
}

func ZTEQoSProfileDownV6_GetString(p *radius.Packet) (value string) {
	value, _ = ZTEQoSProfileDownV6_LookupString(p)
	return
}

func ZTEQoSProfileDownV6_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ZTE_GetsVendor(p, 237) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEQoSProfileDownV6_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ZTE_GetsVendor(p, 237) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZTEQoSProfileDownV6_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ZTE_LookupVendor(p, 237)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ZTEQoSProfileDownV6_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ZTE_LookupVendor(p, 237)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ZTEQoSProfileDownV6_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 237, a)
}

func ZTEQoSProfileDownV6_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ZTE_SetVendor(p, 237, a)
}

func ZTEQoSProfileDownV6_Del(p *radius.Packet) {
	_ZTE_DelVendor(p, 237)
}
