// Code generated by radius-dict-gen. DO NOT EDIT.

package ukerna

import (
	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_UKERNA_VendorID = 25622
)

func _UKERNA_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_UKERNA_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _UKERNA_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _UKERNA_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _UKERNA_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _UKERNA_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _UKERNA_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _UKERNA_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _UKERNA_AddVendor(p, typ, attr)
}

func _UKERNA_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _UKERNA_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func UKERNAGSSAcceptorServiceName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 128, a)
}

func UKERNAGSSAcceptorServiceName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 128, a)
}

func UKERNAGSSAcceptorServiceName_Get(p *radius.Packet) (value []byte) {
	value, _ = UKERNAGSSAcceptorServiceName_Lookup(p)
	return
}

func UKERNAGSSAcceptorServiceName_GetString(p *radius.Packet) (value string) {
	value, _ = UKERNAGSSAcceptorServiceName_LookupString(p)
	return
}

func UKERNAGSSAcceptorServiceName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _UKERNA_GetsVendor(p, 128) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UKERNAGSSAcceptorServiceName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _UKERNA_GetsVendor(p, 128) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UKERNAGSSAcceptorServiceName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _UKERNA_LookupVendor(p, 128)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UKERNAGSSAcceptorServiceName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _UKERNA_LookupVendor(p, 128)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UKERNAGSSAcceptorServiceName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 128, a)
}

func UKERNAGSSAcceptorServiceName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 128, a)
}

func UKERNAGSSAcceptorServiceName_Del(p *radius.Packet) {
	_UKERNA_DelVendor(p, 128)
}

func UKERNAGSSAcceptorHostName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 129, a)
}

func UKERNAGSSAcceptorHostName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 129, a)
}

func UKERNAGSSAcceptorHostName_Get(p *radius.Packet) (value []byte) {
	value, _ = UKERNAGSSAcceptorHostName_Lookup(p)
	return
}

func UKERNAGSSAcceptorHostName_GetString(p *radius.Packet) (value string) {
	value, _ = UKERNAGSSAcceptorHostName_LookupString(p)
	return
}

func UKERNAGSSAcceptorHostName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _UKERNA_GetsVendor(p, 129) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UKERNAGSSAcceptorHostName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _UKERNA_GetsVendor(p, 129) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UKERNAGSSAcceptorHostName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _UKERNA_LookupVendor(p, 129)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UKERNAGSSAcceptorHostName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _UKERNA_LookupVendor(p, 129)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UKERNAGSSAcceptorHostName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 129, a)
}

func UKERNAGSSAcceptorHostName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 129, a)
}

func UKERNAGSSAcceptorHostName_Del(p *radius.Packet) {
	_UKERNA_DelVendor(p, 129)
}

func UKERNAGSSAcceptorServiceSpecific_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 130, a)
}

func UKERNAGSSAcceptorServiceSpecific_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 130, a)
}

func UKERNAGSSAcceptorServiceSpecific_Get(p *radius.Packet) (value []byte) {
	value, _ = UKERNAGSSAcceptorServiceSpecific_Lookup(p)
	return
}

func UKERNAGSSAcceptorServiceSpecific_GetString(p *radius.Packet) (value string) {
	value, _ = UKERNAGSSAcceptorServiceSpecific_LookupString(p)
	return
}

func UKERNAGSSAcceptorServiceSpecific_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _UKERNA_GetsVendor(p, 130) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UKERNAGSSAcceptorServiceSpecific_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _UKERNA_GetsVendor(p, 130) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UKERNAGSSAcceptorServiceSpecific_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _UKERNA_LookupVendor(p, 130)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UKERNAGSSAcceptorServiceSpecific_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _UKERNA_LookupVendor(p, 130)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UKERNAGSSAcceptorServiceSpecific_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 130, a)
}

func UKERNAGSSAcceptorServiceSpecific_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 130, a)
}

func UKERNAGSSAcceptorServiceSpecific_Del(p *radius.Packet) {
	_UKERNA_DelVendor(p, 130)
}

func UKERNAGSSAcceptorRealmName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 131, a)
}

func UKERNAGSSAcceptorRealmName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 131, a)
}

func UKERNAGSSAcceptorRealmName_Get(p *radius.Packet) (value []byte) {
	value, _ = UKERNAGSSAcceptorRealmName_Lookup(p)
	return
}

func UKERNAGSSAcceptorRealmName_GetString(p *radius.Packet) (value string) {
	value, _ = UKERNAGSSAcceptorRealmName_LookupString(p)
	return
}

func UKERNAGSSAcceptorRealmName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _UKERNA_GetsVendor(p, 131) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UKERNAGSSAcceptorRealmName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _UKERNA_GetsVendor(p, 131) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UKERNAGSSAcceptorRealmName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _UKERNA_LookupVendor(p, 131)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UKERNAGSSAcceptorRealmName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _UKERNA_LookupVendor(p, 131)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UKERNAGSSAcceptorRealmName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 131, a)
}

func UKERNAGSSAcceptorRealmName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 131, a)
}

func UKERNAGSSAcceptorRealmName_Del(p *radius.Packet) {
	_UKERNA_DelVendor(p, 131)
}

func SAMLAAAAssertion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 132, a)
}

func SAMLAAAAssertion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 132, a)
}

func SAMLAAAAssertion_Get(p *radius.Packet) (value []byte) {
	value, _ = SAMLAAAAssertion_Lookup(p)
	return
}

func SAMLAAAAssertion_GetString(p *radius.Packet) (value string) {
	value, _ = SAMLAAAAssertion_LookupString(p)
	return
}

func SAMLAAAAssertion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _UKERNA_GetsVendor(p, 132) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SAMLAAAAssertion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _UKERNA_GetsVendor(p, 132) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SAMLAAAAssertion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _UKERNA_LookupVendor(p, 132)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SAMLAAAAssertion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _UKERNA_LookupVendor(p, 132)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SAMLAAAAssertion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 132, a)
}

func SAMLAAAAssertion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 132, a)
}

func SAMLAAAAssertion_Del(p *radius.Packet) {
	_UKERNA_DelVendor(p, 132)
}

func EAPChannelBindingMessage_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 135, a)
}

func EAPChannelBindingMessage_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 135, a)
}

func EAPChannelBindingMessage_Get(p *radius.Packet) (value []byte) {
	value, _ = EAPChannelBindingMessage_Lookup(p)
	return
}

func EAPChannelBindingMessage_GetString(p *radius.Packet) (value string) {
	value, _ = EAPChannelBindingMessage_LookupString(p)
	return
}

func EAPChannelBindingMessage_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _UKERNA_GetsVendor(p, 135) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EAPChannelBindingMessage_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _UKERNA_GetsVendor(p, 135) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EAPChannelBindingMessage_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _UKERNA_LookupVendor(p, 135)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EAPChannelBindingMessage_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _UKERNA_LookupVendor(p, 135)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EAPChannelBindingMessage_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 135, a)
}

func EAPChannelBindingMessage_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 135, a)
}

func EAPChannelBindingMessage_Del(p *radius.Packet) {
	_UKERNA_DelVendor(p, 135)
}

func TrustRouterCOI_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 136, a)
}

func TrustRouterCOI_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 136, a)
}

func TrustRouterCOI_Get(p *radius.Packet) (value []byte) {
	value, _ = TrustRouterCOI_Lookup(p)
	return
}

func TrustRouterCOI_GetString(p *radius.Packet) (value string) {
	value, _ = TrustRouterCOI_LookupString(p)
	return
}

func TrustRouterCOI_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _UKERNA_GetsVendor(p, 136) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TrustRouterCOI_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _UKERNA_GetsVendor(p, 136) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TrustRouterCOI_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _UKERNA_LookupVendor(p, 136)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TrustRouterCOI_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _UKERNA_LookupVendor(p, 136)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TrustRouterCOI_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 136, a)
}

func TrustRouterCOI_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 136, a)
}

func TrustRouterCOI_Del(p *radius.Packet) {
	_UKERNA_DelVendor(p, 136)
}

func TrustRouterAPC_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 137, a)
}

func TrustRouterAPC_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 137, a)
}

func TrustRouterAPC_Get(p *radius.Packet) (value []byte) {
	value, _ = TrustRouterAPC_Lookup(p)
	return
}

func TrustRouterAPC_GetString(p *radius.Packet) (value string) {
	value, _ = TrustRouterAPC_LookupString(p)
	return
}

func TrustRouterAPC_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _UKERNA_GetsVendor(p, 137) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TrustRouterAPC_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _UKERNA_GetsVendor(p, 137) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TrustRouterAPC_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _UKERNA_LookupVendor(p, 137)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TrustRouterAPC_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _UKERNA_LookupVendor(p, 137)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TrustRouterAPC_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 137, a)
}

func TrustRouterAPC_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 137, a)
}

func TrustRouterAPC_Del(p *radius.Packet) {
	_UKERNA_DelVendor(p, 137)
}

func MoonshotHostTargetedId_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 138, a)
}

func MoonshotHostTargetedId_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 138, a)
}

func MoonshotHostTargetedId_Get(p *radius.Packet) (value []byte) {
	value, _ = MoonshotHostTargetedId_Lookup(p)
	return
}

func MoonshotHostTargetedId_GetString(p *radius.Packet) (value string) {
	value, _ = MoonshotHostTargetedId_LookupString(p)
	return
}

func MoonshotHostTargetedId_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _UKERNA_GetsVendor(p, 138) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MoonshotHostTargetedId_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _UKERNA_GetsVendor(p, 138) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MoonshotHostTargetedId_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _UKERNA_LookupVendor(p, 138)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MoonshotHostTargetedId_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _UKERNA_LookupVendor(p, 138)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MoonshotHostTargetedId_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 138, a)
}

func MoonshotHostTargetedId_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 138, a)
}

func MoonshotHostTargetedId_Del(p *radius.Packet) {
	_UKERNA_DelVendor(p, 138)
}

func MoonshotRealmTargetedId_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 139, a)
}

func MoonshotRealmTargetedId_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 139, a)
}

func MoonshotRealmTargetedId_Get(p *radius.Packet) (value []byte) {
	value, _ = MoonshotRealmTargetedId_Lookup(p)
	return
}

func MoonshotRealmTargetedId_GetString(p *radius.Packet) (value string) {
	value, _ = MoonshotRealmTargetedId_LookupString(p)
	return
}

func MoonshotRealmTargetedId_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _UKERNA_GetsVendor(p, 139) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MoonshotRealmTargetedId_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _UKERNA_GetsVendor(p, 139) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MoonshotRealmTargetedId_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _UKERNA_LookupVendor(p, 139)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MoonshotRealmTargetedId_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _UKERNA_LookupVendor(p, 139)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MoonshotRealmTargetedId_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 139, a)
}

func MoonshotRealmTargetedId_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 139, a)
}

func MoonshotRealmTargetedId_Del(p *radius.Packet) {
	_UKERNA_DelVendor(p, 139)
}

func MoonshotTRCOITargetedId_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 140, a)
}

func MoonshotTRCOITargetedId_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 140, a)
}

func MoonshotTRCOITargetedId_Get(p *radius.Packet) (value []byte) {
	value, _ = MoonshotTRCOITargetedId_Lookup(p)
	return
}

func MoonshotTRCOITargetedId_GetString(p *radius.Packet) (value string) {
	value, _ = MoonshotTRCOITargetedId_LookupString(p)
	return
}

func MoonshotTRCOITargetedId_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _UKERNA_GetsVendor(p, 140) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MoonshotTRCOITargetedId_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _UKERNA_GetsVendor(p, 140) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MoonshotTRCOITargetedId_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _UKERNA_LookupVendor(p, 140)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MoonshotTRCOITargetedId_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _UKERNA_LookupVendor(p, 140)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MoonshotTRCOITargetedId_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 140, a)
}

func MoonshotTRCOITargetedId_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 140, a)
}

func MoonshotTRCOITargetedId_Del(p *radius.Packet) {
	_UKERNA_DelVendor(p, 140)
}

func MoonshotMSTIDGSSAcceptor_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 141, a)
}

func MoonshotMSTIDGSSAcceptor_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 141, a)
}

func MoonshotMSTIDGSSAcceptor_Get(p *radius.Packet) (value []byte) {
	value, _ = MoonshotMSTIDGSSAcceptor_Lookup(p)
	return
}

func MoonshotMSTIDGSSAcceptor_GetString(p *radius.Packet) (value string) {
	value, _ = MoonshotMSTIDGSSAcceptor_LookupString(p)
	return
}

func MoonshotMSTIDGSSAcceptor_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _UKERNA_GetsVendor(p, 141) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MoonshotMSTIDGSSAcceptor_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _UKERNA_GetsVendor(p, 141) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MoonshotMSTIDGSSAcceptor_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _UKERNA_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MoonshotMSTIDGSSAcceptor_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _UKERNA_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MoonshotMSTIDGSSAcceptor_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 141, a)
}

func MoonshotMSTIDGSSAcceptor_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 141, a)
}

func MoonshotMSTIDGSSAcceptor_Del(p *radius.Packet) {
	_UKERNA_DelVendor(p, 141)
}

func MoonshotMSTIDNamespace_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 142, a)
}

func MoonshotMSTIDNamespace_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 142, a)
}

func MoonshotMSTIDNamespace_Get(p *radius.Packet) (value []byte) {
	value, _ = MoonshotMSTIDNamespace_Lookup(p)
	return
}

func MoonshotMSTIDNamespace_GetString(p *radius.Packet) (value string) {
	value, _ = MoonshotMSTIDNamespace_LookupString(p)
	return
}

func MoonshotMSTIDNamespace_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _UKERNA_GetsVendor(p, 142) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MoonshotMSTIDNamespace_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _UKERNA_GetsVendor(p, 142) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MoonshotMSTIDNamespace_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _UKERNA_LookupVendor(p, 142)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MoonshotMSTIDNamespace_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _UKERNA_LookupVendor(p, 142)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MoonshotMSTIDNamespace_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 142, a)
}

func MoonshotMSTIDNamespace_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 142, a)
}

func MoonshotMSTIDNamespace_Del(p *radius.Packet) {
	_UKERNA_DelVendor(p, 142)
}

func MoonshotMSTIDTargetedId_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 143, a)
}

func MoonshotMSTIDTargetedId_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 143, a)
}

func MoonshotMSTIDTargetedId_Get(p *radius.Packet) (value []byte) {
	value, _ = MoonshotMSTIDTargetedId_Lookup(p)
	return
}

func MoonshotMSTIDTargetedId_GetString(p *radius.Packet) (value string) {
	value, _ = MoonshotMSTIDTargetedId_LookupString(p)
	return
}

func MoonshotMSTIDTargetedId_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _UKERNA_GetsVendor(p, 143) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MoonshotMSTIDTargetedId_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _UKERNA_GetsVendor(p, 143) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MoonshotMSTIDTargetedId_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _UKERNA_LookupVendor(p, 143)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MoonshotMSTIDTargetedId_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _UKERNA_LookupVendor(p, 143)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MoonshotMSTIDTargetedId_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 143, a)
}

func MoonshotMSTIDTargetedId_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 143, a)
}

func MoonshotMSTIDTargetedId_Del(p *radius.Packet) {
	_UKERNA_DelVendor(p, 143)
}

func MoonshotOTPSecret_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 144, a)
}

func MoonshotOTPSecret_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_AddVendor(p, 144, a)
}

func MoonshotOTPSecret_Get(p *radius.Packet) (value []byte) {
	value, _ = MoonshotOTPSecret_Lookup(p)
	return
}

func MoonshotOTPSecret_GetString(p *radius.Packet) (value string) {
	value, _ = MoonshotOTPSecret_LookupString(p)
	return
}

func MoonshotOTPSecret_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _UKERNA_GetsVendor(p, 144) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MoonshotOTPSecret_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _UKERNA_GetsVendor(p, 144) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MoonshotOTPSecret_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _UKERNA_LookupVendor(p, 144)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MoonshotOTPSecret_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _UKERNA_LookupVendor(p, 144)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MoonshotOTPSecret_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 144, a)
}

func MoonshotOTPSecret_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UKERNA_SetVendor(p, 144, a)
}

func MoonshotOTPSecret_Del(p *radius.Packet) {
	_UKERNA_DelVendor(p, 144)
}
