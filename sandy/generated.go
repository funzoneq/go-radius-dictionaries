// Code generated by radius-dict-gen. DO NOT EDIT.

package sandy

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Sandy_VendorID = 11406
)

func _Sandy_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Sandy_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Sandy_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Sandy_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Sandy_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Sandy_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Sandy_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Sandy_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Sandy_AddVendor(p, typ, attr)
}

func _Sandy_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Sandy_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

type SandyUserID uint32

var SandyUserID_Strings = map[SandyUserID]string{}

func (a SandyUserID) String() string {
	if str, ok := SandyUserID_Strings[a]; ok {
		return str
	}
	return "SandyUserID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SandyUserID_Add(p *radius.Packet, value SandyUserID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Sandy_AddVendor(p, 1, a)
}

func SandyUserID_Get(p *radius.Packet) (value SandyUserID) {
	value, _ = SandyUserID_Lookup(p)
	return
}

func SandyUserID_Gets(p *radius.Packet) (values []SandyUserID, err error) {
	var i uint32
	for _, attr := range _Sandy_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SandyUserID(i))
	}
	return
}

func SandyUserID_Lookup(p *radius.Packet) (value SandyUserID, err error) {
	a, ok := _Sandy_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SandyUserID(i)
	return
}

func SandyUserID_Set(p *radius.Packet, value SandyUserID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Sandy_SetVendor(p, 1, a)
}

func SandyUserID_Del(p *radius.Packet) {
	_Sandy_DelVendor(p, 1)
}

type SandyGroupID uint32

var SandyGroupID_Strings = map[SandyGroupID]string{}

func (a SandyGroupID) String() string {
	if str, ok := SandyGroupID_Strings[a]; ok {
		return str
	}
	return "SandyGroupID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SandyGroupID_Add(p *radius.Packet, value SandyGroupID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Sandy_AddVendor(p, 2, a)
}

func SandyGroupID_Get(p *radius.Packet) (value SandyGroupID) {
	value, _ = SandyGroupID_Lookup(p)
	return
}

func SandyGroupID_Gets(p *radius.Packet) (values []SandyGroupID, err error) {
	var i uint32
	for _, attr := range _Sandy_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SandyGroupID(i))
	}
	return
}

func SandyGroupID_Lookup(p *radius.Packet) (value SandyGroupID, err error) {
	a, ok := _Sandy_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SandyGroupID(i)
	return
}

func SandyGroupID_Set(p *radius.Packet, value SandyGroupID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Sandy_SetVendor(p, 2, a)
}

func SandyGroupID_Del(p *radius.Packet) {
	_Sandy_DelVendor(p, 2)
}

func SandyGECOS_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Sandy_AddVendor(p, 3, a)
}

func SandyGECOS_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Sandy_AddVendor(p, 3, a)
}

func SandyGECOS_Get(p *radius.Packet) (value []byte) {
	value, _ = SandyGECOS_Lookup(p)
	return
}

func SandyGECOS_GetString(p *radius.Packet) (value string) {
	value, _ = SandyGECOS_LookupString(p)
	return
}

func SandyGECOS_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Sandy_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SandyGECOS_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Sandy_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SandyGECOS_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Sandy_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SandyGECOS_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Sandy_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SandyGECOS_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Sandy_SetVendor(p, 3, a)
}

func SandyGECOS_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Sandy_SetVendor(p, 3, a)
}

func SandyGECOS_Del(p *radius.Packet) {
	_Sandy_DelVendor(p, 3)
}

func SandyShell_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Sandy_AddVendor(p, 4, a)
}

func SandyShell_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Sandy_AddVendor(p, 4, a)
}

func SandyShell_Get(p *radius.Packet) (value []byte) {
	value, _ = SandyShell_Lookup(p)
	return
}

func SandyShell_GetString(p *radius.Packet) (value string) {
	value, _ = SandyShell_LookupString(p)
	return
}

func SandyShell_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Sandy_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SandyShell_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Sandy_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SandyShell_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Sandy_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SandyShell_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Sandy_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SandyShell_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Sandy_SetVendor(p, 4, a)
}

func SandyShell_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Sandy_SetVendor(p, 4, a)
}

func SandyShell_Del(p *radius.Packet) {
	_Sandy_DelVendor(p, 4)
}

func SandyHome_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Sandy_AddVendor(p, 5, a)
}

func SandyHome_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Sandy_AddVendor(p, 5, a)
}

func SandyHome_Get(p *radius.Packet) (value []byte) {
	value, _ = SandyHome_Lookup(p)
	return
}

func SandyHome_GetString(p *radius.Packet) (value string) {
	value, _ = SandyHome_LookupString(p)
	return
}

func SandyHome_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Sandy_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SandyHome_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Sandy_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SandyHome_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Sandy_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SandyHome_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Sandy_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SandyHome_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Sandy_SetVendor(p, 5, a)
}

func SandyHome_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Sandy_SetVendor(p, 5, a)
}

func SandyHome_Del(p *radius.Packet) {
	_Sandy_DelVendor(p, 5)
}

type SandyMailService uint32

const (
	SandyMailService_Value_Transfer SandyMailService = 1
	SandyMailService_Value_Delivery SandyMailService = 2
	SandyMailService_Value_POP      SandyMailService = 3
	SandyMailService_Value_IMAP     SandyMailService = 4
	SandyMailService_Value_WEBMAIL  SandyMailService = 5
	SandyMailService_Value_Control  SandyMailService = 6
)

var SandyMailService_Strings = map[SandyMailService]string{
	SandyMailService_Value_Transfer: "Transfer",
	SandyMailService_Value_Delivery: "Delivery",
	SandyMailService_Value_POP:      "POP",
	SandyMailService_Value_IMAP:     "IMAP",
	SandyMailService_Value_WEBMAIL:  "WEBMAIL",
	SandyMailService_Value_Control:  "Control",
}

func (a SandyMailService) String() string {
	if str, ok := SandyMailService_Strings[a]; ok {
		return str
	}
	return "SandyMailService(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SandyMailService_Add(p *radius.Packet, value SandyMailService) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Sandy_AddVendor(p, 100, a)
}

func SandyMailService_Get(p *radius.Packet) (value SandyMailService) {
	value, _ = SandyMailService_Lookup(p)
	return
}

func SandyMailService_Gets(p *radius.Packet) (values []SandyMailService, err error) {
	var i uint32
	for _, attr := range _Sandy_GetsVendor(p, 100) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SandyMailService(i))
	}
	return
}

func SandyMailService_Lookup(p *radius.Packet) (value SandyMailService, err error) {
	a, ok := _Sandy_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SandyMailService(i)
	return
}

func SandyMailService_Set(p *radius.Packet, value SandyMailService) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Sandy_SetVendor(p, 100, a)
}

func SandyMailService_Del(p *radius.Packet) {
	_Sandy_DelVendor(p, 100)
}

type SandyMailAuthtype uint32

const (
	SandyMailAuthtype_Value_NONE     SandyMailAuthtype = 0
	SandyMailAuthtype_Value_PLAIN    SandyMailAuthtype = 1
	SandyMailAuthtype_Value_CRAMMD5  SandyMailAuthtype = 2
	SandyMailAuthtype_Value_APOP     SandyMailAuthtype = 3
	SandyMailAuthtype_Value_KRB4     SandyMailAuthtype = 4
	SandyMailAuthtype_Value_KRB5     SandyMailAuthtype = 5
	SandyMailAuthtype_Value_NTLM     SandyMailAuthtype = 6
	SandyMailAuthtype_Value_NTLM2    SandyMailAuthtype = 7
	SandyMailAuthtype_Value_CRAMMD4  SandyMailAuthtype = 8
	SandyMailAuthtype_Value_CRAMSHA1 SandyMailAuthtype = 9
)

var SandyMailAuthtype_Strings = map[SandyMailAuthtype]string{
	SandyMailAuthtype_Value_NONE:     "NONE",
	SandyMailAuthtype_Value_PLAIN:    "PLAIN",
	SandyMailAuthtype_Value_CRAMMD5:  "CRAM-MD5",
	SandyMailAuthtype_Value_APOP:     "APOP",
	SandyMailAuthtype_Value_KRB4:     "KRB4",
	SandyMailAuthtype_Value_KRB5:     "KRB5",
	SandyMailAuthtype_Value_NTLM:     "NTLM",
	SandyMailAuthtype_Value_NTLM2:    "NTLM2",
	SandyMailAuthtype_Value_CRAMMD4:  "CRAM-MD4",
	SandyMailAuthtype_Value_CRAMSHA1: "CRAM-SHA1",
}

func (a SandyMailAuthtype) String() string {
	if str, ok := SandyMailAuthtype_Strings[a]; ok {
		return str
	}
	return "SandyMailAuthtype(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SandyMailAuthtype_Add(p *radius.Packet, value SandyMailAuthtype) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Sandy_AddVendor(p, 101, a)
}

func SandyMailAuthtype_Get(p *radius.Packet) (value SandyMailAuthtype) {
	value, _ = SandyMailAuthtype_Lookup(p)
	return
}

func SandyMailAuthtype_Gets(p *radius.Packet) (values []SandyMailAuthtype, err error) {
	var i uint32
	for _, attr := range _Sandy_GetsVendor(p, 101) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SandyMailAuthtype(i))
	}
	return
}

func SandyMailAuthtype_Lookup(p *radius.Packet) (value SandyMailAuthtype, err error) {
	a, ok := _Sandy_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SandyMailAuthtype(i)
	return
}

func SandyMailAuthtype_Set(p *radius.Packet, value SandyMailAuthtype) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Sandy_SetVendor(p, 101, a)
}

func SandyMailAuthtype_Del(p *radius.Packet) {
	_Sandy_DelVendor(p, 101)
}

func SandyMailChallenge_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Sandy_AddVendor(p, 102, a)
}

func SandyMailChallenge_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Sandy_AddVendor(p, 102, a)
}

func SandyMailChallenge_Get(p *radius.Packet) (value []byte) {
	value, _ = SandyMailChallenge_Lookup(p)
	return
}

func SandyMailChallenge_GetString(p *radius.Packet) (value string) {
	value, _ = SandyMailChallenge_LookupString(p)
	return
}

func SandyMailChallenge_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Sandy_GetsVendor(p, 102) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SandyMailChallenge_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Sandy_GetsVendor(p, 102) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SandyMailChallenge_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Sandy_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SandyMailChallenge_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Sandy_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SandyMailChallenge_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Sandy_SetVendor(p, 102, a)
}

func SandyMailChallenge_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Sandy_SetVendor(p, 102, a)
}

func SandyMailChallenge_Del(p *radius.Packet) {
	_Sandy_DelVendor(p, 102)
}

func SandyMailResponse_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Sandy_AddVendor(p, 103, a)
}

func SandyMailResponse_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Sandy_AddVendor(p, 103, a)
}

func SandyMailResponse_Get(p *radius.Packet) (value []byte) {
	value, _ = SandyMailResponse_Lookup(p)
	return
}

func SandyMailResponse_GetString(p *radius.Packet) (value string) {
	value, _ = SandyMailResponse_LookupString(p)
	return
}

func SandyMailResponse_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Sandy_GetsVendor(p, 103) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SandyMailResponse_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Sandy_GetsVendor(p, 103) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SandyMailResponse_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Sandy_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SandyMailResponse_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Sandy_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SandyMailResponse_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Sandy_SetVendor(p, 103, a)
}

func SandyMailResponse_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Sandy_SetVendor(p, 103, a)
}

func SandyMailResponse_Del(p *radius.Packet) {
	_Sandy_DelVendor(p, 103)
}

func SandyMailAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Sandy_AddVendor(p, 104, a)
}

func SandyMailAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Sandy_AddVendor(p, 104, a)
}

func SandyMailAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = SandyMailAddress_Lookup(p)
	return
}

func SandyMailAddress_GetString(p *radius.Packet) (value string) {
	value, _ = SandyMailAddress_LookupString(p)
	return
}

func SandyMailAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Sandy_GetsVendor(p, 104) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SandyMailAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Sandy_GetsVendor(p, 104) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SandyMailAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Sandy_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SandyMailAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Sandy_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SandyMailAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Sandy_SetVendor(p, 104, a)
}

func SandyMailAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Sandy_SetVendor(p, 104, a)
}

func SandyMailAddress_Del(p *radius.Packet) {
	_Sandy_DelVendor(p, 104)
}

type SandyMailSpamcontrol uint32

var SandyMailSpamcontrol_Strings = map[SandyMailSpamcontrol]string{}

func (a SandyMailSpamcontrol) String() string {
	if str, ok := SandyMailSpamcontrol_Strings[a]; ok {
		return str
	}
	return "SandyMailSpamcontrol(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SandyMailSpamcontrol_Add(p *radius.Packet, value SandyMailSpamcontrol) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Sandy_AddVendor(p, 105, a)
}

func SandyMailSpamcontrol_Get(p *radius.Packet) (value SandyMailSpamcontrol) {
	value, _ = SandyMailSpamcontrol_Lookup(p)
	return
}

func SandyMailSpamcontrol_Gets(p *radius.Packet) (values []SandyMailSpamcontrol, err error) {
	var i uint32
	for _, attr := range _Sandy_GetsVendor(p, 105) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SandyMailSpamcontrol(i))
	}
	return
}

func SandyMailSpamcontrol_Lookup(p *radius.Packet) (value SandyMailSpamcontrol, err error) {
	a, ok := _Sandy_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SandyMailSpamcontrol(i)
	return
}

func SandyMailSpamcontrol_Set(p *radius.Packet, value SandyMailSpamcontrol) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Sandy_SetVendor(p, 105, a)
}

func SandyMailSpamcontrol_Del(p *radius.Packet) {
	_Sandy_DelVendor(p, 105)
}

func SandyMailNotification_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Sandy_AddVendor(p, 106, a)
}

func SandyMailNotification_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Sandy_AddVendor(p, 106, a)
}

func SandyMailNotification_Get(p *radius.Packet) (value []byte) {
	value, _ = SandyMailNotification_Lookup(p)
	return
}

func SandyMailNotification_GetString(p *radius.Packet) (value string) {
	value, _ = SandyMailNotification_LookupString(p)
	return
}

func SandyMailNotification_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Sandy_GetsVendor(p, 106) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SandyMailNotification_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Sandy_GetsVendor(p, 106) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SandyMailNotification_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Sandy_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SandyMailNotification_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Sandy_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SandyMailNotification_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Sandy_SetVendor(p, 106, a)
}

func SandyMailNotification_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Sandy_SetVendor(p, 106, a)
}

func SandyMailNotification_Del(p *radius.Packet) {
	_Sandy_DelVendor(p, 106)
}

func SandyMailBox_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Sandy_AddVendor(p, 107, a)
}

func SandyMailBox_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Sandy_AddVendor(p, 107, a)
}

func SandyMailBox_Get(p *radius.Packet) (value []byte) {
	value, _ = SandyMailBox_Lookup(p)
	return
}

func SandyMailBox_GetString(p *radius.Packet) (value string) {
	value, _ = SandyMailBox_LookupString(p)
	return
}

func SandyMailBox_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Sandy_GetsVendor(p, 107) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SandyMailBox_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Sandy_GetsVendor(p, 107) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SandyMailBox_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Sandy_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SandyMailBox_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Sandy_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SandyMailBox_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Sandy_SetVendor(p, 107, a)
}

func SandyMailBox_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Sandy_SetVendor(p, 107, a)
}

func SandyMailBox_Del(p *radius.Packet) {
	_Sandy_DelVendor(p, 107)
}

type SandyMailQuota uint32

var SandyMailQuota_Strings = map[SandyMailQuota]string{}

func (a SandyMailQuota) String() string {
	if str, ok := SandyMailQuota_Strings[a]; ok {
		return str
	}
	return "SandyMailQuota(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SandyMailQuota_Add(p *radius.Packet, value SandyMailQuota) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Sandy_AddVendor(p, 108, a)
}

func SandyMailQuota_Get(p *radius.Packet) (value SandyMailQuota) {
	value, _ = SandyMailQuota_Lookup(p)
	return
}

func SandyMailQuota_Gets(p *radius.Packet) (values []SandyMailQuota, err error) {
	var i uint32
	for _, attr := range _Sandy_GetsVendor(p, 108) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SandyMailQuota(i))
	}
	return
}

func SandyMailQuota_Lookup(p *radius.Packet) (value SandyMailQuota, err error) {
	a, ok := _Sandy_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SandyMailQuota(i)
	return
}

func SandyMailQuota_Set(p *radius.Packet, value SandyMailQuota) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Sandy_SetVendor(p, 108, a)
}

func SandyMailQuota_Del(p *radius.Packet) {
	_Sandy_DelVendor(p, 108)
}

func SandyMailFilter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Sandy_AddVendor(p, 109, a)
}

func SandyMailFilter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Sandy_AddVendor(p, 109, a)
}

func SandyMailFilter_Get(p *radius.Packet) (value []byte) {
	value, _ = SandyMailFilter_Lookup(p)
	return
}

func SandyMailFilter_GetString(p *radius.Packet) (value string) {
	value, _ = SandyMailFilter_LookupString(p)
	return
}

func SandyMailFilter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Sandy_GetsVendor(p, 109) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SandyMailFilter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Sandy_GetsVendor(p, 109) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SandyMailFilter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Sandy_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SandyMailFilter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Sandy_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SandyMailFilter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Sandy_SetVendor(p, 109, a)
}

func SandyMailFilter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Sandy_SetVendor(p, 109, a)
}

func SandyMailFilter_Del(p *radius.Packet) {
	_Sandy_DelVendor(p, 109)
}

type SandyMailBoxControl uint32

var SandyMailBoxControl_Strings = map[SandyMailBoxControl]string{}

func (a SandyMailBoxControl) String() string {
	if str, ok := SandyMailBoxControl_Strings[a]; ok {
		return str
	}
	return "SandyMailBoxControl(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SandyMailBoxControl_Add(p *radius.Packet, value SandyMailBoxControl) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Sandy_AddVendor(p, 110, a)
}

func SandyMailBoxControl_Get(p *radius.Packet) (value SandyMailBoxControl) {
	value, _ = SandyMailBoxControl_Lookup(p)
	return
}

func SandyMailBoxControl_Gets(p *radius.Packet) (values []SandyMailBoxControl, err error) {
	var i uint32
	for _, attr := range _Sandy_GetsVendor(p, 110) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SandyMailBoxControl(i))
	}
	return
}

func SandyMailBoxControl_Lookup(p *radius.Packet) (value SandyMailBoxControl, err error) {
	a, ok := _Sandy_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SandyMailBoxControl(i)
	return
}

func SandyMailBoxControl_Set(p *radius.Packet, value SandyMailBoxControl) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Sandy_SetVendor(p, 110, a)
}

func SandyMailBoxControl_Del(p *radius.Packet) {
	_Sandy_DelVendor(p, 110)
}

func SandyMailClientIP_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Sandy_AddVendor(p, 111, a)
}

func SandyMailClientIP_Get(p *radius.Packet) (value net.IP) {
	value, _ = SandyMailClientIP_Lookup(p)
	return
}

func SandyMailClientIP_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Sandy_GetsVendor(p, 111) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SandyMailClientIP_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Sandy_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func SandyMailClientIP_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Sandy_SetVendor(p, 111, a)
}

func SandyMailClientIP_Del(p *radius.Packet) {
	_Sandy_DelVendor(p, 111)
}

func SandyMailClientHelo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Sandy_AddVendor(p, 110, a)
}

func SandyMailClientHelo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Sandy_AddVendor(p, 110, a)
}

func SandyMailClientHelo_Get(p *radius.Packet) (value []byte) {
	value, _ = SandyMailClientHelo_Lookup(p)
	return
}

func SandyMailClientHelo_GetString(p *radius.Packet) (value string) {
	value, _ = SandyMailClientHelo_LookupString(p)
	return
}

func SandyMailClientHelo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Sandy_GetsVendor(p, 110) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SandyMailClientHelo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Sandy_GetsVendor(p, 110) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SandyMailClientHelo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Sandy_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SandyMailClientHelo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Sandy_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SandyMailClientHelo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Sandy_SetVendor(p, 110, a)
}

func SandyMailClientHelo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Sandy_SetVendor(p, 110, a)
}

func SandyMailClientHelo_Del(p *radius.Packet) {
	_Sandy_DelVendor(p, 110)
}
