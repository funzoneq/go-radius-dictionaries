// Code generated by radius-dict-gen. DO NOT EDIT.

package fdxtended

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_FdXtended_VendorID = 34536
)

func _FdXtended_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_FdXtended_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _FdXtended_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _FdXtended_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _FdXtended_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _FdXtended_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _FdXtended_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _FdXtended_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _FdXtended_AddVendor(p, typ, attr)
}

func _FdXtended_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _FdXtended_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

type FdXtendedBandwidthUp uint32

var FdXtendedBandwidthUp_Strings = map[FdXtendedBandwidthUp]string{}

func (a FdXtendedBandwidthUp) String() string {
	if str, ok := FdXtendedBandwidthUp_Strings[a]; ok {
		return str
	}
	return "FdXtendedBandwidthUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func FdXtendedBandwidthUp_Add(p *radius.Packet, value FdXtendedBandwidthUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FdXtended_AddVendor(p, 1, a)
}

func FdXtendedBandwidthUp_Get(p *radius.Packet) (value FdXtendedBandwidthUp) {
	value, _ = FdXtendedBandwidthUp_Lookup(p)
	return
}

func FdXtendedBandwidthUp_Gets(p *radius.Packet) (values []FdXtendedBandwidthUp, err error) {
	var i uint32
	for _, attr := range _FdXtended_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, FdXtendedBandwidthUp(i))
	}
	return
}

func FdXtendedBandwidthUp_Lookup(p *radius.Packet) (value FdXtendedBandwidthUp, err error) {
	a, ok := _FdXtended_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = FdXtendedBandwidthUp(i)
	return
}

func FdXtendedBandwidthUp_Set(p *radius.Packet, value FdXtendedBandwidthUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FdXtended_SetVendor(p, 1, a)
}

func FdXtendedBandwidthUp_Del(p *radius.Packet) {
	_FdXtended_DelVendor(p, 1)
}

type FdXtendedBandwidthDown uint32

var FdXtendedBandwidthDown_Strings = map[FdXtendedBandwidthDown]string{}

func (a FdXtendedBandwidthDown) String() string {
	if str, ok := FdXtendedBandwidthDown_Strings[a]; ok {
		return str
	}
	return "FdXtendedBandwidthDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func FdXtendedBandwidthDown_Add(p *radius.Packet, value FdXtendedBandwidthDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FdXtended_AddVendor(p, 2, a)
}

func FdXtendedBandwidthDown_Get(p *radius.Packet) (value FdXtendedBandwidthDown) {
	value, _ = FdXtendedBandwidthDown_Lookup(p)
	return
}

func FdXtendedBandwidthDown_Gets(p *radius.Packet) (values []FdXtendedBandwidthDown, err error) {
	var i uint32
	for _, attr := range _FdXtended_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, FdXtendedBandwidthDown(i))
	}
	return
}

func FdXtendedBandwidthDown_Lookup(p *radius.Packet) (value FdXtendedBandwidthDown, err error) {
	a, ok := _FdXtended_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = FdXtendedBandwidthDown(i)
	return
}

func FdXtendedBandwidthDown_Set(p *radius.Packet, value FdXtendedBandwidthDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FdXtended_SetVendor(p, 2, a)
}

func FdXtendedBandwidthDown_Del(p *radius.Packet) {
	_FdXtended_DelVendor(p, 2)
}

func FdXtendedPostAuthURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _FdXtended_AddVendor(p, 3, a)
}

func FdXtendedPostAuthURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _FdXtended_AddVendor(p, 3, a)
}

func FdXtendedPostAuthURL_Get(p *radius.Packet) (value []byte) {
	value, _ = FdXtendedPostAuthURL_Lookup(p)
	return
}

func FdXtendedPostAuthURL_GetString(p *radius.Packet) (value string) {
	value, _ = FdXtendedPostAuthURL_LookupString(p)
	return
}

func FdXtendedPostAuthURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _FdXtended_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FdXtendedPostAuthURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _FdXtended_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FdXtendedPostAuthURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _FdXtended_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FdXtendedPostAuthURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _FdXtended_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FdXtendedPostAuthURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _FdXtended_SetVendor(p, 3, a)
}

func FdXtendedPostAuthURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _FdXtended_SetVendor(p, 3, a)
}

func FdXtendedPostAuthURL_Del(p *radius.Packet) {
	_FdXtended_DelVendor(p, 3)
}

func FdXtendedOne2onenatIP_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _FdXtended_AddVendor(p, 4, a)
}

func FdXtendedOne2onenatIP_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _FdXtended_AddVendor(p, 4, a)
}

func FdXtendedOne2onenatIP_Get(p *radius.Packet) (value []byte) {
	value, _ = FdXtendedOne2onenatIP_Lookup(p)
	return
}

func FdXtendedOne2onenatIP_GetString(p *radius.Packet) (value string) {
	value, _ = FdXtendedOne2onenatIP_LookupString(p)
	return
}

func FdXtendedOne2onenatIP_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _FdXtended_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FdXtendedOne2onenatIP_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _FdXtended_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FdXtendedOne2onenatIP_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _FdXtended_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FdXtendedOne2onenatIP_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _FdXtended_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FdXtendedOne2onenatIP_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _FdXtended_SetVendor(p, 4, a)
}

func FdXtendedOne2onenatIP_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _FdXtended_SetVendor(p, 4, a)
}

func FdXtendedOne2onenatIP_Del(p *radius.Packet) {
	_FdXtended_DelVendor(p, 4)
}

type FdXtendedContentFilter uint32

var FdXtendedContentFilter_Strings = map[FdXtendedContentFilter]string{}

func (a FdXtendedContentFilter) String() string {
	if str, ok := FdXtendedContentFilter_Strings[a]; ok {
		return str
	}
	return "FdXtendedContentFilter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func FdXtendedContentFilter_Add(p *radius.Packet, value FdXtendedContentFilter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FdXtended_AddVendor(p, 5, a)
}

func FdXtendedContentFilter_Get(p *radius.Packet) (value FdXtendedContentFilter) {
	value, _ = FdXtendedContentFilter_Lookup(p)
	return
}

func FdXtendedContentFilter_Gets(p *radius.Packet) (values []FdXtendedContentFilter, err error) {
	var i uint32
	for _, attr := range _FdXtended_GetsVendor(p, 5) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, FdXtendedContentFilter(i))
	}
	return
}

func FdXtendedContentFilter_Lookup(p *radius.Packet) (value FdXtendedContentFilter, err error) {
	a, ok := _FdXtended_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = FdXtendedContentFilter(i)
	return
}

func FdXtendedContentFilter_Set(p *radius.Packet, value FdXtendedContentFilter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FdXtended_SetVendor(p, 5, a)
}

func FdXtendedContentFilter_Del(p *radius.Packet) {
	_FdXtended_DelVendor(p, 5)
}

type FdXtendedNetworkPolicy uint32

var FdXtendedNetworkPolicy_Strings = map[FdXtendedNetworkPolicy]string{}

func (a FdXtendedNetworkPolicy) String() string {
	if str, ok := FdXtendedNetworkPolicy_Strings[a]; ok {
		return str
	}
	return "FdXtendedNetworkPolicy(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func FdXtendedNetworkPolicy_Add(p *radius.Packet, value FdXtendedNetworkPolicy) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FdXtended_AddVendor(p, 6, a)
}

func FdXtendedNetworkPolicy_Get(p *radius.Packet) (value FdXtendedNetworkPolicy) {
	value, _ = FdXtendedNetworkPolicy_Lookup(p)
	return
}

func FdXtendedNetworkPolicy_Gets(p *radius.Packet) (values []FdXtendedNetworkPolicy, err error) {
	var i uint32
	for _, attr := range _FdXtended_GetsVendor(p, 6) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, FdXtendedNetworkPolicy(i))
	}
	return
}

func FdXtendedNetworkPolicy_Lookup(p *radius.Packet) (value FdXtendedNetworkPolicy, err error) {
	a, ok := _FdXtended_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = FdXtendedNetworkPolicy(i)
	return
}

func FdXtendedNetworkPolicy_Set(p *radius.Packet, value FdXtendedNetworkPolicy) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FdXtended_SetVendor(p, 6, a)
}

func FdXtendedNetworkPolicy_Del(p *radius.Packet) {
	_FdXtended_DelVendor(p, 6)
}

type FdXtendedBytesDown uint32

var FdXtendedBytesDown_Strings = map[FdXtendedBytesDown]string{}

func (a FdXtendedBytesDown) String() string {
	if str, ok := FdXtendedBytesDown_Strings[a]; ok {
		return str
	}
	return "FdXtendedBytesDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func FdXtendedBytesDown_Add(p *radius.Packet, value FdXtendedBytesDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FdXtended_AddVendor(p, 7, a)
}

func FdXtendedBytesDown_Get(p *radius.Packet) (value FdXtendedBytesDown) {
	value, _ = FdXtendedBytesDown_Lookup(p)
	return
}

func FdXtendedBytesDown_Gets(p *radius.Packet) (values []FdXtendedBytesDown, err error) {
	var i uint32
	for _, attr := range _FdXtended_GetsVendor(p, 7) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, FdXtendedBytesDown(i))
	}
	return
}

func FdXtendedBytesDown_Lookup(p *radius.Packet) (value FdXtendedBytesDown, err error) {
	a, ok := _FdXtended_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = FdXtendedBytesDown(i)
	return
}

func FdXtendedBytesDown_Set(p *radius.Packet, value FdXtendedBytesDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FdXtended_SetVendor(p, 7, a)
}

func FdXtendedBytesDown_Del(p *radius.Packet) {
	_FdXtended_DelVendor(p, 7)
}

type FdXtendedBytesUp uint32

var FdXtendedBytesUp_Strings = map[FdXtendedBytesUp]string{}

func (a FdXtendedBytesUp) String() string {
	if str, ok := FdXtendedBytesUp_Strings[a]; ok {
		return str
	}
	return "FdXtendedBytesUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func FdXtendedBytesUp_Add(p *radius.Packet, value FdXtendedBytesUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FdXtended_AddVendor(p, 8, a)
}

func FdXtendedBytesUp_Get(p *radius.Packet) (value FdXtendedBytesUp) {
	value, _ = FdXtendedBytesUp_Lookup(p)
	return
}

func FdXtendedBytesUp_Gets(p *radius.Packet) (values []FdXtendedBytesUp, err error) {
	var i uint32
	for _, attr := range _FdXtended_GetsVendor(p, 8) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, FdXtendedBytesUp(i))
	}
	return
}

func FdXtendedBytesUp_Lookup(p *radius.Packet) (value FdXtendedBytesUp, err error) {
	a, ok := _FdXtended_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = FdXtendedBytesUp(i)
	return
}

func FdXtendedBytesUp_Set(p *radius.Packet, value FdXtendedBytesUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FdXtended_SetVendor(p, 8, a)
}

func FdXtendedBytesUp_Del(p *radius.Packet) {
	_FdXtended_DelVendor(p, 8)
}

func FdXtendedExpiration_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _FdXtended_AddVendor(p, 9, a)
}

func FdXtendedExpiration_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _FdXtended_AddVendor(p, 9, a)
}

func FdXtendedExpiration_Get(p *radius.Packet) (value []byte) {
	value, _ = FdXtendedExpiration_Lookup(p)
	return
}

func FdXtendedExpiration_GetString(p *radius.Packet) (value string) {
	value, _ = FdXtendedExpiration_LookupString(p)
	return
}

func FdXtendedExpiration_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _FdXtended_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FdXtendedExpiration_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _FdXtended_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FdXtendedExpiration_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _FdXtended_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FdXtendedExpiration_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _FdXtended_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FdXtendedExpiration_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _FdXtended_SetVendor(p, 9, a)
}

func FdXtendedExpiration_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _FdXtended_SetVendor(p, 9, a)
}

func FdXtendedExpiration_Del(p *radius.Packet) {
	_FdXtended_DelVendor(p, 9)
}

type FdXtendedSessionTimeout uint32

var FdXtendedSessionTimeout_Strings = map[FdXtendedSessionTimeout]string{}

func (a FdXtendedSessionTimeout) String() string {
	if str, ok := FdXtendedSessionTimeout_Strings[a]; ok {
		return str
	}
	return "FdXtendedSessionTimeout(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func FdXtendedSessionTimeout_Add(p *radius.Packet, value FdXtendedSessionTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FdXtended_AddVendor(p, 10, a)
}

func FdXtendedSessionTimeout_Get(p *radius.Packet) (value FdXtendedSessionTimeout) {
	value, _ = FdXtendedSessionTimeout_Lookup(p)
	return
}

func FdXtendedSessionTimeout_Gets(p *radius.Packet) (values []FdXtendedSessionTimeout, err error) {
	var i uint32
	for _, attr := range _FdXtended_GetsVendor(p, 10) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, FdXtendedSessionTimeout(i))
	}
	return
}

func FdXtendedSessionTimeout_Lookup(p *radius.Packet) (value FdXtendedSessionTimeout, err error) {
	a, ok := _FdXtended_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = FdXtendedSessionTimeout(i)
	return
}

func FdXtendedSessionTimeout_Set(p *radius.Packet, value FdXtendedSessionTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _FdXtended_SetVendor(p, 10, a)
}

func FdXtendedSessionTimeout_Del(p *radius.Packet) {
	_FdXtended_DelVendor(p, 10)
}

func FdXtendedWanInterface_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _FdXtended_AddVendor(p, 11, a)
}

func FdXtendedWanInterface_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _FdXtended_AddVendor(p, 11, a)
}

func FdXtendedWanInterface_Get(p *radius.Packet) (value []byte) {
	value, _ = FdXtendedWanInterface_Lookup(p)
	return
}

func FdXtendedWanInterface_GetString(p *radius.Packet) (value string) {
	value, _ = FdXtendedWanInterface_LookupString(p)
	return
}

func FdXtendedWanInterface_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _FdXtended_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FdXtendedWanInterface_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _FdXtended_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FdXtendedWanInterface_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _FdXtended_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FdXtendedWanInterface_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _FdXtended_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FdXtendedWanInterface_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _FdXtended_SetVendor(p, 11, a)
}

func FdXtendedWanInterface_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _FdXtended_SetVendor(p, 11, a)
}

func FdXtendedWanInterface_Del(p *radius.Packet) {
	_FdXtended_DelVendor(p, 11)
}
