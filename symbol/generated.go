// Code generated by radius-dict-gen. DO NOT EDIT.

package symbol

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Symbol_VendorID = 388
)

func _Symbol_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Symbol_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Symbol_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Symbol_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Symbol_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Symbol_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Symbol_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Symbol_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Symbol_AddVendor(p, typ, attr)
}

func _Symbol_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Symbol_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

type SymbolAdminRole uint32

const (
	SymbolAdminRole_Value_Monitor      SymbolAdminRole = 1
	SymbolAdminRole_Value_Helpdesk     SymbolAdminRole = 2
	SymbolAdminRole_Value_NetworkAdmin SymbolAdminRole = 4
	SymbolAdminRole_Value_SysAdmin     SymbolAdminRole = 8
	SymbolAdminRole_Value_WebAdmin     SymbolAdminRole = 16
	SymbolAdminRole_Value_Security     SymbolAdminRole = 32
	SymbolAdminRole_Value_SuperUser    SymbolAdminRole = 32768
)

var SymbolAdminRole_Strings = map[SymbolAdminRole]string{
	SymbolAdminRole_Value_Monitor:      "Monitor",
	SymbolAdminRole_Value_Helpdesk:     "Helpdesk",
	SymbolAdminRole_Value_NetworkAdmin: "NetworkAdmin",
	SymbolAdminRole_Value_SysAdmin:     "SysAdmin",
	SymbolAdminRole_Value_WebAdmin:     "WebAdmin",
	SymbolAdminRole_Value_Security:     "Security",
	SymbolAdminRole_Value_SuperUser:    "SuperUser",
}

func (a SymbolAdminRole) String() string {
	if str, ok := SymbolAdminRole_Strings[a]; ok {
		return str
	}
	return "SymbolAdminRole(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SymbolAdminRole_Add(p *radius.Packet, value SymbolAdminRole) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Symbol_AddVendor(p, 1, a)
}

func SymbolAdminRole_Get(p *radius.Packet) (value SymbolAdminRole) {
	value, _ = SymbolAdminRole_Lookup(p)
	return
}

func SymbolAdminRole_Gets(p *radius.Packet) (values []SymbolAdminRole, err error) {
	var i uint32
	for _, attr := range _Symbol_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SymbolAdminRole(i))
	}
	return
}

func SymbolAdminRole_Lookup(p *radius.Packet) (value SymbolAdminRole, err error) {
	a, ok := _Symbol_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SymbolAdminRole(i)
	return
}

func SymbolAdminRole_Set(p *radius.Packet, value SymbolAdminRole) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Symbol_SetVendor(p, 1, a)
}

func SymbolAdminRole_Del(p *radius.Packet) {
	_Symbol_DelVendor(p, 1)
}

func SymbolCurrentESSID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Symbol_AddVendor(p, 2, a)
}

func SymbolCurrentESSID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Symbol_AddVendor(p, 2, a)
}

func SymbolCurrentESSID_Get(p *radius.Packet) (value []byte) {
	value, _ = SymbolCurrentESSID_Lookup(p)
	return
}

func SymbolCurrentESSID_GetString(p *radius.Packet) (value string) {
	value, _ = SymbolCurrentESSID_LookupString(p)
	return
}

func SymbolCurrentESSID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Symbol_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SymbolCurrentESSID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Symbol_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SymbolCurrentESSID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Symbol_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SymbolCurrentESSID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Symbol_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SymbolCurrentESSID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Symbol_SetVendor(p, 2, a)
}

func SymbolCurrentESSID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Symbol_SetVendor(p, 2, a)
}

func SymbolCurrentESSID_Del(p *radius.Packet) {
	_Symbol_DelVendor(p, 2)
}

func SymbolAllowedESSID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Symbol_AddVendor(p, 3, a)
}

func SymbolAllowedESSID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Symbol_AddVendor(p, 3, a)
}

func SymbolAllowedESSID_Get(p *radius.Packet) (value []byte) {
	value, _ = SymbolAllowedESSID_Lookup(p)
	return
}

func SymbolAllowedESSID_GetString(p *radius.Packet) (value string) {
	value, _ = SymbolAllowedESSID_LookupString(p)
	return
}

func SymbolAllowedESSID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Symbol_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SymbolAllowedESSID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Symbol_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SymbolAllowedESSID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Symbol_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SymbolAllowedESSID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Symbol_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SymbolAllowedESSID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Symbol_SetVendor(p, 3, a)
}

func SymbolAllowedESSID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Symbol_SetVendor(p, 3, a)
}

func SymbolAllowedESSID_Del(p *radius.Packet) {
	_Symbol_DelVendor(p, 3)
}

type SymbolWLANIndex uint32

var SymbolWLANIndex_Strings = map[SymbolWLANIndex]string{}

func (a SymbolWLANIndex) String() string {
	if str, ok := SymbolWLANIndex_Strings[a]; ok {
		return str
	}
	return "SymbolWLANIndex(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SymbolWLANIndex_Add(p *radius.Packet, value SymbolWLANIndex) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Symbol_AddVendor(p, 4, a)
}

func SymbolWLANIndex_Get(p *radius.Packet) (value SymbolWLANIndex) {
	value, _ = SymbolWLANIndex_Lookup(p)
	return
}

func SymbolWLANIndex_Gets(p *radius.Packet) (values []SymbolWLANIndex, err error) {
	var i uint32
	for _, attr := range _Symbol_GetsVendor(p, 4) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SymbolWLANIndex(i))
	}
	return
}

func SymbolWLANIndex_Lookup(p *radius.Packet) (value SymbolWLANIndex, err error) {
	a, ok := _Symbol_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SymbolWLANIndex(i)
	return
}

func SymbolWLANIndex_Set(p *radius.Packet, value SymbolWLANIndex) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Symbol_SetVendor(p, 4, a)
}

func SymbolWLANIndex_Del(p *radius.Packet) {
	_Symbol_DelVendor(p, 4)
}

type SymbolQoSProfile uint32

const (
	SymbolQoSProfile_Value_BestEffort SymbolQoSProfile = 1
	SymbolQoSProfile_Value_Background SymbolQoSProfile = 2
	SymbolQoSProfile_Value_Video      SymbolQoSProfile = 3
	SymbolQoSProfile_Value_Voice      SymbolQoSProfile = 4
)

var SymbolQoSProfile_Strings = map[SymbolQoSProfile]string{
	SymbolQoSProfile_Value_BestEffort: "BestEffort",
	SymbolQoSProfile_Value_Background: "Background",
	SymbolQoSProfile_Value_Video:      "Video",
	SymbolQoSProfile_Value_Voice:      "Voice",
}

func (a SymbolQoSProfile) String() string {
	if str, ok := SymbolQoSProfile_Strings[a]; ok {
		return str
	}
	return "SymbolQoSProfile(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SymbolQoSProfile_Add(p *radius.Packet, value SymbolQoSProfile) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Symbol_AddVendor(p, 5, a)
}

func SymbolQoSProfile_Get(p *radius.Packet) (value SymbolQoSProfile) {
	value, _ = SymbolQoSProfile_Lookup(p)
	return
}

func SymbolQoSProfile_Gets(p *radius.Packet) (values []SymbolQoSProfile, err error) {
	var i uint32
	for _, attr := range _Symbol_GetsVendor(p, 5) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SymbolQoSProfile(i))
	}
	return
}

func SymbolQoSProfile_Lookup(p *radius.Packet) (value SymbolQoSProfile, err error) {
	a, ok := _Symbol_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SymbolQoSProfile(i)
	return
}

func SymbolQoSProfile_Set(p *radius.Packet, value SymbolQoSProfile) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Symbol_SetVendor(p, 5, a)
}

func SymbolQoSProfile_Del(p *radius.Packet) {
	_Symbol_DelVendor(p, 5)
}

func SymbolAllowedRadio_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Symbol_AddVendor(p, 6, a)
}

func SymbolAllowedRadio_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Symbol_AddVendor(p, 6, a)
}

func SymbolAllowedRadio_Get(p *radius.Packet) (value []byte) {
	value, _ = SymbolAllowedRadio_Lookup(p)
	return
}

func SymbolAllowedRadio_GetString(p *radius.Packet) (value string) {
	value, _ = SymbolAllowedRadio_LookupString(p)
	return
}

func SymbolAllowedRadio_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Symbol_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SymbolAllowedRadio_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Symbol_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SymbolAllowedRadio_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Symbol_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SymbolAllowedRadio_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Symbol_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SymbolAllowedRadio_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Symbol_SetVendor(p, 6, a)
}

func SymbolAllowedRadio_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Symbol_SetVendor(p, 6, a)
}

func SymbolAllowedRadio_Del(p *radius.Packet) {
	_Symbol_DelVendor(p, 6)
}

func SymbolExpiryDateTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Symbol_AddVendor(p, 7, a)
}

func SymbolExpiryDateTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Symbol_AddVendor(p, 7, a)
}

func SymbolExpiryDateTime_Get(p *radius.Packet) (value []byte) {
	value, _ = SymbolExpiryDateTime_Lookup(p)
	return
}

func SymbolExpiryDateTime_GetString(p *radius.Packet) (value string) {
	value, _ = SymbolExpiryDateTime_LookupString(p)
	return
}

func SymbolExpiryDateTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Symbol_GetsVendor(p, 7) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SymbolExpiryDateTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Symbol_GetsVendor(p, 7) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SymbolExpiryDateTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Symbol_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SymbolExpiryDateTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Symbol_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SymbolExpiryDateTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Symbol_SetVendor(p, 7, a)
}

func SymbolExpiryDateTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Symbol_SetVendor(p, 7, a)
}

func SymbolExpiryDateTime_Del(p *radius.Packet) {
	_Symbol_DelVendor(p, 7)
}

func SymbolStartDateTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Symbol_AddVendor(p, 8, a)
}

func SymbolStartDateTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Symbol_AddVendor(p, 8, a)
}

func SymbolStartDateTime_Get(p *radius.Packet) (value []byte) {
	value, _ = SymbolStartDateTime_Lookup(p)
	return
}

func SymbolStartDateTime_GetString(p *radius.Packet) (value string) {
	value, _ = SymbolStartDateTime_LookupString(p)
	return
}

func SymbolStartDateTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Symbol_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SymbolStartDateTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Symbol_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SymbolStartDateTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Symbol_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SymbolStartDateTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Symbol_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SymbolStartDateTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Symbol_SetVendor(p, 8, a)
}

func SymbolStartDateTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Symbol_SetVendor(p, 8, a)
}

func SymbolStartDateTime_Del(p *radius.Packet) {
	_Symbol_DelVendor(p, 8)
}

func SymbolPostureStatus_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Symbol_AddVendor(p, 9, a)
}

func SymbolPostureStatus_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Symbol_AddVendor(p, 9, a)
}

func SymbolPostureStatus_Get(p *radius.Packet) (value []byte) {
	value, _ = SymbolPostureStatus_Lookup(p)
	return
}

func SymbolPostureStatus_GetString(p *radius.Packet) (value string) {
	value, _ = SymbolPostureStatus_LookupString(p)
	return
}

func SymbolPostureStatus_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Symbol_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SymbolPostureStatus_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Symbol_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SymbolPostureStatus_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Symbol_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SymbolPostureStatus_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Symbol_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SymbolPostureStatus_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Symbol_SetVendor(p, 9, a)
}

func SymbolPostureStatus_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Symbol_SetVendor(p, 9, a)
}

func SymbolPostureStatus_Del(p *radius.Packet) {
	_Symbol_DelVendor(p, 9)
}

func SymbolDownlinkLimit_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Symbol_AddVendor(p, 10, a)
}

func SymbolDownlinkLimit_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Symbol_AddVendor(p, 10, a)
}

func SymbolDownlinkLimit_Get(p *radius.Packet) (value []byte) {
	value, _ = SymbolDownlinkLimit_Lookup(p)
	return
}

func SymbolDownlinkLimit_GetString(p *radius.Packet) (value string) {
	value, _ = SymbolDownlinkLimit_LookupString(p)
	return
}

func SymbolDownlinkLimit_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Symbol_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SymbolDownlinkLimit_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Symbol_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SymbolDownlinkLimit_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Symbol_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SymbolDownlinkLimit_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Symbol_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SymbolDownlinkLimit_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Symbol_SetVendor(p, 10, a)
}

func SymbolDownlinkLimit_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Symbol_SetVendor(p, 10, a)
}

func SymbolDownlinkLimit_Del(p *radius.Packet) {
	_Symbol_DelVendor(p, 10)
}

func SymbolUplinkLimit_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Symbol_AddVendor(p, 11, a)
}

func SymbolUplinkLimit_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Symbol_AddVendor(p, 11, a)
}

func SymbolUplinkLimit_Get(p *radius.Packet) (value []byte) {
	value, _ = SymbolUplinkLimit_Lookup(p)
	return
}

func SymbolUplinkLimit_GetString(p *radius.Packet) (value string) {
	value, _ = SymbolUplinkLimit_LookupString(p)
	return
}

func SymbolUplinkLimit_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Symbol_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SymbolUplinkLimit_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Symbol_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SymbolUplinkLimit_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Symbol_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SymbolUplinkLimit_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Symbol_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SymbolUplinkLimit_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Symbol_SetVendor(p, 11, a)
}

func SymbolUplinkLimit_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Symbol_SetVendor(p, 11, a)
}

func SymbolUplinkLimit_Del(p *radius.Packet) {
	_Symbol_DelVendor(p, 11)
}

func SymbolUserGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Symbol_AddVendor(p, 12, a)
}

func SymbolUserGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Symbol_AddVendor(p, 12, a)
}

func SymbolUserGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = SymbolUserGroup_Lookup(p)
	return
}

func SymbolUserGroup_GetString(p *radius.Packet) (value string) {
	value, _ = SymbolUserGroup_LookupString(p)
	return
}

func SymbolUserGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Symbol_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SymbolUserGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Symbol_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SymbolUserGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Symbol_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SymbolUserGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Symbol_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SymbolUserGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Symbol_SetVendor(p, 12, a)
}

func SymbolUserGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Symbol_SetVendor(p, 12, a)
}

func SymbolUserGroup_Del(p *radius.Packet) {
	_Symbol_DelVendor(p, 12)
}

type SymbolLoginSource uint32

const (
	SymbolLoginSource_Value_HTTP    SymbolLoginSource = 16
	SymbolLoginSource_Value_SSH     SymbolLoginSource = 32
	SymbolLoginSource_Value_Telnet  SymbolLoginSource = 64
	SymbolLoginSource_Value_Console SymbolLoginSource = 128
	SymbolLoginSource_Value_All     SymbolLoginSource = 240
)

var SymbolLoginSource_Strings = map[SymbolLoginSource]string{
	SymbolLoginSource_Value_HTTP:    "HTTP",
	SymbolLoginSource_Value_SSH:     "SSH",
	SymbolLoginSource_Value_Telnet:  "Telnet",
	SymbolLoginSource_Value_Console: "Console",
	SymbolLoginSource_Value_All:     "All",
}

func (a SymbolLoginSource) String() string {
	if str, ok := SymbolLoginSource_Strings[a]; ok {
		return str
	}
	return "SymbolLoginSource(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SymbolLoginSource_Add(p *radius.Packet, value SymbolLoginSource) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Symbol_AddVendor(p, 100, a)
}

func SymbolLoginSource_Get(p *radius.Packet) (value SymbolLoginSource) {
	value, _ = SymbolLoginSource_Lookup(p)
	return
}

func SymbolLoginSource_Gets(p *radius.Packet) (values []SymbolLoginSource, err error) {
	var i uint32
	for _, attr := range _Symbol_GetsVendor(p, 100) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SymbolLoginSource(i))
	}
	return
}

func SymbolLoginSource_Lookup(p *radius.Packet) (value SymbolLoginSource, err error) {
	a, ok := _Symbol_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SymbolLoginSource(i)
	return
}

func SymbolLoginSource_Set(p *radius.Packet, value SymbolLoginSource) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Symbol_SetVendor(p, 100, a)
}

func SymbolLoginSource_Del(p *radius.Packet) {
	_Symbol_DelVendor(p, 100)
}
