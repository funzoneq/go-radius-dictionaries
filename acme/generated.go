// Code generated by radius-dict-gen. DO NOT EDIT.

package acme

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Acme_VendorID = 9148
)

func _Acme_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Acme_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Acme_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Acme_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Acme_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Acme_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Acme_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Acme_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Acme_AddVendor(p, typ, attr)
}

func _Acme_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Acme_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func AcmeFlowIDFS1F_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 1, a)
}

func AcmeFlowIDFS1F_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 1, a)
}

func AcmeFlowIDFS1F_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeFlowIDFS1F_Lookup(p)
	return
}

func AcmeFlowIDFS1F_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeFlowIDFS1F_LookupString(p)
	return
}

func AcmeFlowIDFS1F_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowIDFS1F_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowIDFS1F_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeFlowIDFS1F_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeFlowIDFS1F_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 1, a)
}

func AcmeFlowIDFS1F_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 1, a)
}

func AcmeFlowIDFS1F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 1)
}

func AcmeFlowTypeFS1F_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 2, a)
}

func AcmeFlowTypeFS1F_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 2, a)
}

func AcmeFlowTypeFS1F_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeFlowTypeFS1F_Lookup(p)
	return
}

func AcmeFlowTypeFS1F_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeFlowTypeFS1F_LookupString(p)
	return
}

func AcmeFlowTypeFS1F_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowTypeFS1F_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowTypeFS1F_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeFlowTypeFS1F_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeFlowTypeFS1F_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 2, a)
}

func AcmeFlowTypeFS1F_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 2, a)
}

func AcmeFlowTypeFS1F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 2)
}

func AcmeSessionIngressCallId_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 3, a)
}

func AcmeSessionIngressCallId_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 3, a)
}

func AcmeSessionIngressCallId_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeSessionIngressCallId_Lookup(p)
	return
}

func AcmeSessionIngressCallId_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeSessionIngressCallId_LookupString(p)
	return
}

func AcmeSessionIngressCallId_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionIngressCallId_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionIngressCallId_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeSessionIngressCallId_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeSessionIngressCallId_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 3, a)
}

func AcmeSessionIngressCallId_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 3, a)
}

func AcmeSessionIngressCallId_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 3)
}

func AcmeSessionEgressCallId_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 4, a)
}

func AcmeSessionEgressCallId_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 4, a)
}

func AcmeSessionEgressCallId_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeSessionEgressCallId_Lookup(p)
	return
}

func AcmeSessionEgressCallId_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeSessionEgressCallId_LookupString(p)
	return
}

func AcmeSessionEgressCallId_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionEgressCallId_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionEgressCallId_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeSessionEgressCallId_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeSessionEgressCallId_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 4, a)
}

func AcmeSessionEgressCallId_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 4, a)
}

func AcmeSessionEgressCallId_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 4)
}

func AcmeFlowInRealmFS1F_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 10, a)
}

func AcmeFlowInRealmFS1F_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 10, a)
}

func AcmeFlowInRealmFS1F_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeFlowInRealmFS1F_Lookup(p)
	return
}

func AcmeFlowInRealmFS1F_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeFlowInRealmFS1F_LookupString(p)
	return
}

func AcmeFlowInRealmFS1F_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInRealmFS1F_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInRealmFS1F_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeFlowInRealmFS1F_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeFlowInRealmFS1F_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 10, a)
}

func AcmeFlowInRealmFS1F_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 10, a)
}

func AcmeFlowInRealmFS1F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 10)
}

func AcmeFlowInSrcAddrFS1F_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 11, a)
}

func AcmeFlowInSrcAddrFS1F_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowInSrcAddrFS1F_Lookup(p)
	return
}

func AcmeFlowInSrcAddrFS1F_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 11) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInSrcAddrFS1F_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AcmeFlowInSrcAddrFS1F_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 11, a)
}

func AcmeFlowInSrcAddrFS1F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 11)
}

type AcmeFlowInSrcPortFS1F uint32

var AcmeFlowInSrcPortFS1F_Strings = map[AcmeFlowInSrcPortFS1F]string{}

func (a AcmeFlowInSrcPortFS1F) String() string {
	if str, ok := AcmeFlowInSrcPortFS1F_Strings[a]; ok {
		return str
	}
	return "AcmeFlowInSrcPortFS1F(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeFlowInSrcPortFS1F_Add(p *radius.Packet, value AcmeFlowInSrcPortFS1F) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 12, a)
}

func AcmeFlowInSrcPortFS1F_Get(p *radius.Packet) (value AcmeFlowInSrcPortFS1F) {
	value, _ = AcmeFlowInSrcPortFS1F_Lookup(p)
	return
}

func AcmeFlowInSrcPortFS1F_Gets(p *radius.Packet) (values []AcmeFlowInSrcPortFS1F, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 12) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeFlowInSrcPortFS1F(i))
	}
	return
}

func AcmeFlowInSrcPortFS1F_Lookup(p *radius.Packet) (value AcmeFlowInSrcPortFS1F, err error) {
	a, ok := _Acme_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeFlowInSrcPortFS1F(i)
	return
}

func AcmeFlowInSrcPortFS1F_Set(p *radius.Packet, value AcmeFlowInSrcPortFS1F) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 12, a)
}

func AcmeFlowInSrcPortFS1F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 12)
}

func AcmeFlowInDstAddrFS1F_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 13, a)
}

func AcmeFlowInDstAddrFS1F_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowInDstAddrFS1F_Lookup(p)
	return
}

func AcmeFlowInDstAddrFS1F_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 13) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInDstAddrFS1F_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AcmeFlowInDstAddrFS1F_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 13, a)
}

func AcmeFlowInDstAddrFS1F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 13)
}

type AcmeFlowInDstPortFS1F uint32

var AcmeFlowInDstPortFS1F_Strings = map[AcmeFlowInDstPortFS1F]string{}

func (a AcmeFlowInDstPortFS1F) String() string {
	if str, ok := AcmeFlowInDstPortFS1F_Strings[a]; ok {
		return str
	}
	return "AcmeFlowInDstPortFS1F(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeFlowInDstPortFS1F_Add(p *radius.Packet, value AcmeFlowInDstPortFS1F) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 14, a)
}

func AcmeFlowInDstPortFS1F_Get(p *radius.Packet) (value AcmeFlowInDstPortFS1F) {
	value, _ = AcmeFlowInDstPortFS1F_Lookup(p)
	return
}

func AcmeFlowInDstPortFS1F_Gets(p *radius.Packet) (values []AcmeFlowInDstPortFS1F, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 14) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeFlowInDstPortFS1F(i))
	}
	return
}

func AcmeFlowInDstPortFS1F_Lookup(p *radius.Packet) (value AcmeFlowInDstPortFS1F, err error) {
	a, ok := _Acme_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeFlowInDstPortFS1F(i)
	return
}

func AcmeFlowInDstPortFS1F_Set(p *radius.Packet, value AcmeFlowInDstPortFS1F) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 14, a)
}

func AcmeFlowInDstPortFS1F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 14)
}

func AcmeFlowOutRealmFS1F_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 20, a)
}

func AcmeFlowOutRealmFS1F_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 20, a)
}

func AcmeFlowOutRealmFS1F_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeFlowOutRealmFS1F_Lookup(p)
	return
}

func AcmeFlowOutRealmFS1F_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeFlowOutRealmFS1F_LookupString(p)
	return
}

func AcmeFlowOutRealmFS1F_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 20) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutRealmFS1F_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 20) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutRealmFS1F_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeFlowOutRealmFS1F_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeFlowOutRealmFS1F_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 20, a)
}

func AcmeFlowOutRealmFS1F_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 20, a)
}

func AcmeFlowOutRealmFS1F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 20)
}

func AcmeFlowOutSrcAddrFS1F_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 21, a)
}

func AcmeFlowOutSrcAddrFS1F_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowOutSrcAddrFS1F_Lookup(p)
	return
}

func AcmeFlowOutSrcAddrFS1F_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 21) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutSrcAddrFS1F_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AcmeFlowOutSrcAddrFS1F_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 21, a)
}

func AcmeFlowOutSrcAddrFS1F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 21)
}

type AcmeFlowOutSrcPortFS1F uint32

var AcmeFlowOutSrcPortFS1F_Strings = map[AcmeFlowOutSrcPortFS1F]string{}

func (a AcmeFlowOutSrcPortFS1F) String() string {
	if str, ok := AcmeFlowOutSrcPortFS1F_Strings[a]; ok {
		return str
	}
	return "AcmeFlowOutSrcPortFS1F(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeFlowOutSrcPortFS1F_Add(p *radius.Packet, value AcmeFlowOutSrcPortFS1F) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 22, a)
}

func AcmeFlowOutSrcPortFS1F_Get(p *radius.Packet) (value AcmeFlowOutSrcPortFS1F) {
	value, _ = AcmeFlowOutSrcPortFS1F_Lookup(p)
	return
}

func AcmeFlowOutSrcPortFS1F_Gets(p *radius.Packet) (values []AcmeFlowOutSrcPortFS1F, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 22) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeFlowOutSrcPortFS1F(i))
	}
	return
}

func AcmeFlowOutSrcPortFS1F_Lookup(p *radius.Packet) (value AcmeFlowOutSrcPortFS1F, err error) {
	a, ok := _Acme_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeFlowOutSrcPortFS1F(i)
	return
}

func AcmeFlowOutSrcPortFS1F_Set(p *radius.Packet, value AcmeFlowOutSrcPortFS1F) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 22, a)
}

func AcmeFlowOutSrcPortFS1F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 22)
}

func AcmeFlowOutDstAddrFS1F_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 23, a)
}

func AcmeFlowOutDstAddrFS1F_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowOutDstAddrFS1F_Lookup(p)
	return
}

func AcmeFlowOutDstAddrFS1F_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 23) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutDstAddrFS1F_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AcmeFlowOutDstAddrFS1F_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 23, a)
}

func AcmeFlowOutDstAddrFS1F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 23)
}

type AcmeFlowOutDstPortFS1F uint32

var AcmeFlowOutDstPortFS1F_Strings = map[AcmeFlowOutDstPortFS1F]string{}

func (a AcmeFlowOutDstPortFS1F) String() string {
	if str, ok := AcmeFlowOutDstPortFS1F_Strings[a]; ok {
		return str
	}
	return "AcmeFlowOutDstPortFS1F(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeFlowOutDstPortFS1F_Add(p *radius.Packet, value AcmeFlowOutDstPortFS1F) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 24, a)
}

func AcmeFlowOutDstPortFS1F_Get(p *radius.Packet) (value AcmeFlowOutDstPortFS1F) {
	value, _ = AcmeFlowOutDstPortFS1F_Lookup(p)
	return
}

func AcmeFlowOutDstPortFS1F_Gets(p *radius.Packet) (values []AcmeFlowOutDstPortFS1F, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 24) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeFlowOutDstPortFS1F(i))
	}
	return
}

func AcmeFlowOutDstPortFS1F_Lookup(p *radius.Packet) (value AcmeFlowOutDstPortFS1F, err error) {
	a, ok := _Acme_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeFlowOutDstPortFS1F(i)
	return
}

func AcmeFlowOutDstPortFS1F_Set(p *radius.Packet, value AcmeFlowOutDstPortFS1F) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 24, a)
}

func AcmeFlowOutDstPortFS1F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 24)
}

type AcmeCallingOctetsFS1 uint32

var AcmeCallingOctetsFS1_Strings = map[AcmeCallingOctetsFS1]string{}

func (a AcmeCallingOctetsFS1) String() string {
	if str, ok := AcmeCallingOctetsFS1_Strings[a]; ok {
		return str
	}
	return "AcmeCallingOctetsFS1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingOctetsFS1_Add(p *radius.Packet, value AcmeCallingOctetsFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 28, a)
}

func AcmeCallingOctetsFS1_Get(p *radius.Packet) (value AcmeCallingOctetsFS1) {
	value, _ = AcmeCallingOctetsFS1_Lookup(p)
	return
}

func AcmeCallingOctetsFS1_Gets(p *radius.Packet) (values []AcmeCallingOctetsFS1, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 28) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingOctetsFS1(i))
	}
	return
}

func AcmeCallingOctetsFS1_Lookup(p *radius.Packet) (value AcmeCallingOctetsFS1, err error) {
	a, ok := _Acme_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingOctetsFS1(i)
	return
}

func AcmeCallingOctetsFS1_Set(p *radius.Packet, value AcmeCallingOctetsFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 28, a)
}

func AcmeCallingOctetsFS1_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 28)
}

type AcmeCallingPacketsFS1 uint32

var AcmeCallingPacketsFS1_Strings = map[AcmeCallingPacketsFS1]string{}

func (a AcmeCallingPacketsFS1) String() string {
	if str, ok := AcmeCallingPacketsFS1_Strings[a]; ok {
		return str
	}
	return "AcmeCallingPacketsFS1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingPacketsFS1_Add(p *radius.Packet, value AcmeCallingPacketsFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 29, a)
}

func AcmeCallingPacketsFS1_Get(p *radius.Packet) (value AcmeCallingPacketsFS1) {
	value, _ = AcmeCallingPacketsFS1_Lookup(p)
	return
}

func AcmeCallingPacketsFS1_Gets(p *radius.Packet) (values []AcmeCallingPacketsFS1, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 29) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingPacketsFS1(i))
	}
	return
}

func AcmeCallingPacketsFS1_Lookup(p *radius.Packet) (value AcmeCallingPacketsFS1, err error) {
	a, ok := _Acme_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingPacketsFS1(i)
	return
}

func AcmeCallingPacketsFS1_Set(p *radius.Packet, value AcmeCallingPacketsFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 29, a)
}

func AcmeCallingPacketsFS1_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 29)
}

type AcmeCallingRTCPPacketsLostFS1 uint32

var AcmeCallingRTCPPacketsLostFS1_Strings = map[AcmeCallingRTCPPacketsLostFS1]string{}

func (a AcmeCallingRTCPPacketsLostFS1) String() string {
	if str, ok := AcmeCallingRTCPPacketsLostFS1_Strings[a]; ok {
		return str
	}
	return "AcmeCallingRTCPPacketsLostFS1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingRTCPPacketsLostFS1_Add(p *radius.Packet, value AcmeCallingRTCPPacketsLostFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 32, a)
}

func AcmeCallingRTCPPacketsLostFS1_Get(p *radius.Packet) (value AcmeCallingRTCPPacketsLostFS1) {
	value, _ = AcmeCallingRTCPPacketsLostFS1_Lookup(p)
	return
}

func AcmeCallingRTCPPacketsLostFS1_Gets(p *radius.Packet) (values []AcmeCallingRTCPPacketsLostFS1, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 32) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingRTCPPacketsLostFS1(i))
	}
	return
}

func AcmeCallingRTCPPacketsLostFS1_Lookup(p *radius.Packet) (value AcmeCallingRTCPPacketsLostFS1, err error) {
	a, ok := _Acme_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingRTCPPacketsLostFS1(i)
	return
}

func AcmeCallingRTCPPacketsLostFS1_Set(p *radius.Packet, value AcmeCallingRTCPPacketsLostFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 32, a)
}

func AcmeCallingRTCPPacketsLostFS1_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 32)
}

type AcmeCallingRTCPAvgJitterFS1 uint32

var AcmeCallingRTCPAvgJitterFS1_Strings = map[AcmeCallingRTCPAvgJitterFS1]string{}

func (a AcmeCallingRTCPAvgJitterFS1) String() string {
	if str, ok := AcmeCallingRTCPAvgJitterFS1_Strings[a]; ok {
		return str
	}
	return "AcmeCallingRTCPAvgJitterFS1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingRTCPAvgJitterFS1_Add(p *radius.Packet, value AcmeCallingRTCPAvgJitterFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 33, a)
}

func AcmeCallingRTCPAvgJitterFS1_Get(p *radius.Packet) (value AcmeCallingRTCPAvgJitterFS1) {
	value, _ = AcmeCallingRTCPAvgJitterFS1_Lookup(p)
	return
}

func AcmeCallingRTCPAvgJitterFS1_Gets(p *radius.Packet) (values []AcmeCallingRTCPAvgJitterFS1, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 33) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingRTCPAvgJitterFS1(i))
	}
	return
}

func AcmeCallingRTCPAvgJitterFS1_Lookup(p *radius.Packet) (value AcmeCallingRTCPAvgJitterFS1, err error) {
	a, ok := _Acme_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingRTCPAvgJitterFS1(i)
	return
}

func AcmeCallingRTCPAvgJitterFS1_Set(p *radius.Packet, value AcmeCallingRTCPAvgJitterFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 33, a)
}

func AcmeCallingRTCPAvgJitterFS1_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 33)
}

type AcmeCallingRTCPAvgLatencyFS1 uint32

var AcmeCallingRTCPAvgLatencyFS1_Strings = map[AcmeCallingRTCPAvgLatencyFS1]string{}

func (a AcmeCallingRTCPAvgLatencyFS1) String() string {
	if str, ok := AcmeCallingRTCPAvgLatencyFS1_Strings[a]; ok {
		return str
	}
	return "AcmeCallingRTCPAvgLatencyFS1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingRTCPAvgLatencyFS1_Add(p *radius.Packet, value AcmeCallingRTCPAvgLatencyFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 34, a)
}

func AcmeCallingRTCPAvgLatencyFS1_Get(p *radius.Packet) (value AcmeCallingRTCPAvgLatencyFS1) {
	value, _ = AcmeCallingRTCPAvgLatencyFS1_Lookup(p)
	return
}

func AcmeCallingRTCPAvgLatencyFS1_Gets(p *radius.Packet) (values []AcmeCallingRTCPAvgLatencyFS1, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 34) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingRTCPAvgLatencyFS1(i))
	}
	return
}

func AcmeCallingRTCPAvgLatencyFS1_Lookup(p *radius.Packet) (value AcmeCallingRTCPAvgLatencyFS1, err error) {
	a, ok := _Acme_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingRTCPAvgLatencyFS1(i)
	return
}

func AcmeCallingRTCPAvgLatencyFS1_Set(p *radius.Packet, value AcmeCallingRTCPAvgLatencyFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 34, a)
}

func AcmeCallingRTCPAvgLatencyFS1_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 34)
}

type AcmeCallingRTCPMaxJitterFS1 uint32

var AcmeCallingRTCPMaxJitterFS1_Strings = map[AcmeCallingRTCPMaxJitterFS1]string{}

func (a AcmeCallingRTCPMaxJitterFS1) String() string {
	if str, ok := AcmeCallingRTCPMaxJitterFS1_Strings[a]; ok {
		return str
	}
	return "AcmeCallingRTCPMaxJitterFS1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingRTCPMaxJitterFS1_Add(p *radius.Packet, value AcmeCallingRTCPMaxJitterFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 35, a)
}

func AcmeCallingRTCPMaxJitterFS1_Get(p *radius.Packet) (value AcmeCallingRTCPMaxJitterFS1) {
	value, _ = AcmeCallingRTCPMaxJitterFS1_Lookup(p)
	return
}

func AcmeCallingRTCPMaxJitterFS1_Gets(p *radius.Packet) (values []AcmeCallingRTCPMaxJitterFS1, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 35) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingRTCPMaxJitterFS1(i))
	}
	return
}

func AcmeCallingRTCPMaxJitterFS1_Lookup(p *radius.Packet) (value AcmeCallingRTCPMaxJitterFS1, err error) {
	a, ok := _Acme_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingRTCPMaxJitterFS1(i)
	return
}

func AcmeCallingRTCPMaxJitterFS1_Set(p *radius.Packet, value AcmeCallingRTCPMaxJitterFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 35, a)
}

func AcmeCallingRTCPMaxJitterFS1_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 35)
}

type AcmeCallingRTCPMaxLatencyFS1 uint32

var AcmeCallingRTCPMaxLatencyFS1_Strings = map[AcmeCallingRTCPMaxLatencyFS1]string{}

func (a AcmeCallingRTCPMaxLatencyFS1) String() string {
	if str, ok := AcmeCallingRTCPMaxLatencyFS1_Strings[a]; ok {
		return str
	}
	return "AcmeCallingRTCPMaxLatencyFS1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingRTCPMaxLatencyFS1_Add(p *radius.Packet, value AcmeCallingRTCPMaxLatencyFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 36, a)
}

func AcmeCallingRTCPMaxLatencyFS1_Get(p *radius.Packet) (value AcmeCallingRTCPMaxLatencyFS1) {
	value, _ = AcmeCallingRTCPMaxLatencyFS1_Lookup(p)
	return
}

func AcmeCallingRTCPMaxLatencyFS1_Gets(p *radius.Packet) (values []AcmeCallingRTCPMaxLatencyFS1, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 36) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingRTCPMaxLatencyFS1(i))
	}
	return
}

func AcmeCallingRTCPMaxLatencyFS1_Lookup(p *radius.Packet) (value AcmeCallingRTCPMaxLatencyFS1, err error) {
	a, ok := _Acme_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingRTCPMaxLatencyFS1(i)
	return
}

func AcmeCallingRTCPMaxLatencyFS1_Set(p *radius.Packet, value AcmeCallingRTCPMaxLatencyFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 36, a)
}

func AcmeCallingRTCPMaxLatencyFS1_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 36)
}

type AcmeCallingRTPPacketsLostFS1 uint32

var AcmeCallingRTPPacketsLostFS1_Strings = map[AcmeCallingRTPPacketsLostFS1]string{}

func (a AcmeCallingRTPPacketsLostFS1) String() string {
	if str, ok := AcmeCallingRTPPacketsLostFS1_Strings[a]; ok {
		return str
	}
	return "AcmeCallingRTPPacketsLostFS1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingRTPPacketsLostFS1_Add(p *radius.Packet, value AcmeCallingRTPPacketsLostFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 37, a)
}

func AcmeCallingRTPPacketsLostFS1_Get(p *radius.Packet) (value AcmeCallingRTPPacketsLostFS1) {
	value, _ = AcmeCallingRTPPacketsLostFS1_Lookup(p)
	return
}

func AcmeCallingRTPPacketsLostFS1_Gets(p *radius.Packet) (values []AcmeCallingRTPPacketsLostFS1, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 37) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingRTPPacketsLostFS1(i))
	}
	return
}

func AcmeCallingRTPPacketsLostFS1_Lookup(p *radius.Packet) (value AcmeCallingRTPPacketsLostFS1, err error) {
	a, ok := _Acme_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingRTPPacketsLostFS1(i)
	return
}

func AcmeCallingRTPPacketsLostFS1_Set(p *radius.Packet, value AcmeCallingRTPPacketsLostFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 37, a)
}

func AcmeCallingRTPPacketsLostFS1_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 37)
}

type AcmeCallingRTPAvgJitterFS1 uint32

var AcmeCallingRTPAvgJitterFS1_Strings = map[AcmeCallingRTPAvgJitterFS1]string{}

func (a AcmeCallingRTPAvgJitterFS1) String() string {
	if str, ok := AcmeCallingRTPAvgJitterFS1_Strings[a]; ok {
		return str
	}
	return "AcmeCallingRTPAvgJitterFS1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingRTPAvgJitterFS1_Add(p *radius.Packet, value AcmeCallingRTPAvgJitterFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 38, a)
}

func AcmeCallingRTPAvgJitterFS1_Get(p *radius.Packet) (value AcmeCallingRTPAvgJitterFS1) {
	value, _ = AcmeCallingRTPAvgJitterFS1_Lookup(p)
	return
}

func AcmeCallingRTPAvgJitterFS1_Gets(p *radius.Packet) (values []AcmeCallingRTPAvgJitterFS1, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 38) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingRTPAvgJitterFS1(i))
	}
	return
}

func AcmeCallingRTPAvgJitterFS1_Lookup(p *radius.Packet) (value AcmeCallingRTPAvgJitterFS1, err error) {
	a, ok := _Acme_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingRTPAvgJitterFS1(i)
	return
}

func AcmeCallingRTPAvgJitterFS1_Set(p *radius.Packet, value AcmeCallingRTPAvgJitterFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 38, a)
}

func AcmeCallingRTPAvgJitterFS1_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 38)
}

type AcmeCallingRTPMaxJitterFS1 uint32

var AcmeCallingRTPMaxJitterFS1_Strings = map[AcmeCallingRTPMaxJitterFS1]string{}

func (a AcmeCallingRTPMaxJitterFS1) String() string {
	if str, ok := AcmeCallingRTPMaxJitterFS1_Strings[a]; ok {
		return str
	}
	return "AcmeCallingRTPMaxJitterFS1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingRTPMaxJitterFS1_Add(p *radius.Packet, value AcmeCallingRTPMaxJitterFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 39, a)
}

func AcmeCallingRTPMaxJitterFS1_Get(p *radius.Packet) (value AcmeCallingRTPMaxJitterFS1) {
	value, _ = AcmeCallingRTPMaxJitterFS1_Lookup(p)
	return
}

func AcmeCallingRTPMaxJitterFS1_Gets(p *radius.Packet) (values []AcmeCallingRTPMaxJitterFS1, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 39) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingRTPMaxJitterFS1(i))
	}
	return
}

func AcmeCallingRTPMaxJitterFS1_Lookup(p *radius.Packet) (value AcmeCallingRTPMaxJitterFS1, err error) {
	a, ok := _Acme_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingRTPMaxJitterFS1(i)
	return
}

func AcmeCallingRTPMaxJitterFS1_Set(p *radius.Packet, value AcmeCallingRTPMaxJitterFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 39, a)
}

func AcmeCallingRTPMaxJitterFS1_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 39)
}

func AcmeSessionGenericID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 40, a)
}

func AcmeSessionGenericID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 40, a)
}

func AcmeSessionGenericID_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeSessionGenericID_Lookup(p)
	return
}

func AcmeSessionGenericID_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeSessionGenericID_LookupString(p)
	return
}

func AcmeSessionGenericID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 40) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionGenericID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 40) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionGenericID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeSessionGenericID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeSessionGenericID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 40, a)
}

func AcmeSessionGenericID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 40, a)
}

func AcmeSessionGenericID_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 40)
}

func AcmeSessionIngressRealm_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 41, a)
}

func AcmeSessionIngressRealm_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 41, a)
}

func AcmeSessionIngressRealm_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeSessionIngressRealm_Lookup(p)
	return
}

func AcmeSessionIngressRealm_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeSessionIngressRealm_LookupString(p)
	return
}

func AcmeSessionIngressRealm_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 41) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionIngressRealm_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 41) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionIngressRealm_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeSessionIngressRealm_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeSessionIngressRealm_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 41, a)
}

func AcmeSessionIngressRealm_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 41, a)
}

func AcmeSessionIngressRealm_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 41)
}

func AcmeSessionEgressRealm_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 42, a)
}

func AcmeSessionEgressRealm_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 42, a)
}

func AcmeSessionEgressRealm_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeSessionEgressRealm_Lookup(p)
	return
}

func AcmeSessionEgressRealm_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeSessionEgressRealm_LookupString(p)
	return
}

func AcmeSessionEgressRealm_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 42) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionEgressRealm_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 42) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionEgressRealm_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 42)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeSessionEgressRealm_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 42)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeSessionEgressRealm_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 42, a)
}

func AcmeSessionEgressRealm_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 42, a)
}

func AcmeSessionEgressRealm_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 42)
}

func AcmeSessionProtocolType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 43, a)
}

func AcmeSessionProtocolType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 43, a)
}

func AcmeSessionProtocolType_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeSessionProtocolType_Lookup(p)
	return
}

func AcmeSessionProtocolType_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeSessionProtocolType_LookupString(p)
	return
}

func AcmeSessionProtocolType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 43) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionProtocolType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 43) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionProtocolType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 43)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeSessionProtocolType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 43)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeSessionProtocolType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 43, a)
}

func AcmeSessionProtocolType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 43, a)
}

func AcmeSessionProtocolType_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 43)
}

type AcmeCalledOctetsFS1 uint32

var AcmeCalledOctetsFS1_Strings = map[AcmeCalledOctetsFS1]string{}

func (a AcmeCalledOctetsFS1) String() string {
	if str, ok := AcmeCalledOctetsFS1_Strings[a]; ok {
		return str
	}
	return "AcmeCalledOctetsFS1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledOctetsFS1_Add(p *radius.Packet, value AcmeCalledOctetsFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 44, a)
}

func AcmeCalledOctetsFS1_Get(p *radius.Packet) (value AcmeCalledOctetsFS1) {
	value, _ = AcmeCalledOctetsFS1_Lookup(p)
	return
}

func AcmeCalledOctetsFS1_Gets(p *radius.Packet) (values []AcmeCalledOctetsFS1, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 44) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledOctetsFS1(i))
	}
	return
}

func AcmeCalledOctetsFS1_Lookup(p *radius.Packet) (value AcmeCalledOctetsFS1, err error) {
	a, ok := _Acme_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledOctetsFS1(i)
	return
}

func AcmeCalledOctetsFS1_Set(p *radius.Packet, value AcmeCalledOctetsFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 44, a)
}

func AcmeCalledOctetsFS1_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 44)
}

type AcmeCalledPacketsFS1 uint32

var AcmeCalledPacketsFS1_Strings = map[AcmeCalledPacketsFS1]string{}

func (a AcmeCalledPacketsFS1) String() string {
	if str, ok := AcmeCalledPacketsFS1_Strings[a]; ok {
		return str
	}
	return "AcmeCalledPacketsFS1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledPacketsFS1_Add(p *radius.Packet, value AcmeCalledPacketsFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 45, a)
}

func AcmeCalledPacketsFS1_Get(p *radius.Packet) (value AcmeCalledPacketsFS1) {
	value, _ = AcmeCalledPacketsFS1_Lookup(p)
	return
}

func AcmeCalledPacketsFS1_Gets(p *radius.Packet) (values []AcmeCalledPacketsFS1, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 45) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledPacketsFS1(i))
	}
	return
}

func AcmeCalledPacketsFS1_Lookup(p *radius.Packet) (value AcmeCalledPacketsFS1, err error) {
	a, ok := _Acme_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledPacketsFS1(i)
	return
}

func AcmeCalledPacketsFS1_Set(p *radius.Packet, value AcmeCalledPacketsFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 45, a)
}

func AcmeCalledPacketsFS1_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 45)
}

type AcmeCalledRTCPPacketsLostFS1 uint32

var AcmeCalledRTCPPacketsLostFS1_Strings = map[AcmeCalledRTCPPacketsLostFS1]string{}

func (a AcmeCalledRTCPPacketsLostFS1) String() string {
	if str, ok := AcmeCalledRTCPPacketsLostFS1_Strings[a]; ok {
		return str
	}
	return "AcmeCalledRTCPPacketsLostFS1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledRTCPPacketsLostFS1_Add(p *radius.Packet, value AcmeCalledRTCPPacketsLostFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 46, a)
}

func AcmeCalledRTCPPacketsLostFS1_Get(p *radius.Packet) (value AcmeCalledRTCPPacketsLostFS1) {
	value, _ = AcmeCalledRTCPPacketsLostFS1_Lookup(p)
	return
}

func AcmeCalledRTCPPacketsLostFS1_Gets(p *radius.Packet) (values []AcmeCalledRTCPPacketsLostFS1, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 46) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledRTCPPacketsLostFS1(i))
	}
	return
}

func AcmeCalledRTCPPacketsLostFS1_Lookup(p *radius.Packet) (value AcmeCalledRTCPPacketsLostFS1, err error) {
	a, ok := _Acme_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledRTCPPacketsLostFS1(i)
	return
}

func AcmeCalledRTCPPacketsLostFS1_Set(p *radius.Packet, value AcmeCalledRTCPPacketsLostFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 46, a)
}

func AcmeCalledRTCPPacketsLostFS1_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 46)
}

type AcmeCalledRTCPAvgJitterFS1 uint32

var AcmeCalledRTCPAvgJitterFS1_Strings = map[AcmeCalledRTCPAvgJitterFS1]string{}

func (a AcmeCalledRTCPAvgJitterFS1) String() string {
	if str, ok := AcmeCalledRTCPAvgJitterFS1_Strings[a]; ok {
		return str
	}
	return "AcmeCalledRTCPAvgJitterFS1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledRTCPAvgJitterFS1_Add(p *radius.Packet, value AcmeCalledRTCPAvgJitterFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 47, a)
}

func AcmeCalledRTCPAvgJitterFS1_Get(p *radius.Packet) (value AcmeCalledRTCPAvgJitterFS1) {
	value, _ = AcmeCalledRTCPAvgJitterFS1_Lookup(p)
	return
}

func AcmeCalledRTCPAvgJitterFS1_Gets(p *radius.Packet) (values []AcmeCalledRTCPAvgJitterFS1, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 47) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledRTCPAvgJitterFS1(i))
	}
	return
}

func AcmeCalledRTCPAvgJitterFS1_Lookup(p *radius.Packet) (value AcmeCalledRTCPAvgJitterFS1, err error) {
	a, ok := _Acme_LookupVendor(p, 47)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledRTCPAvgJitterFS1(i)
	return
}

func AcmeCalledRTCPAvgJitterFS1_Set(p *radius.Packet, value AcmeCalledRTCPAvgJitterFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 47, a)
}

func AcmeCalledRTCPAvgJitterFS1_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 47)
}

type AcmeCalledRTCPAvgLatencyFS1 uint32

var AcmeCalledRTCPAvgLatencyFS1_Strings = map[AcmeCalledRTCPAvgLatencyFS1]string{}

func (a AcmeCalledRTCPAvgLatencyFS1) String() string {
	if str, ok := AcmeCalledRTCPAvgLatencyFS1_Strings[a]; ok {
		return str
	}
	return "AcmeCalledRTCPAvgLatencyFS1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledRTCPAvgLatencyFS1_Add(p *radius.Packet, value AcmeCalledRTCPAvgLatencyFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 48, a)
}

func AcmeCalledRTCPAvgLatencyFS1_Get(p *radius.Packet) (value AcmeCalledRTCPAvgLatencyFS1) {
	value, _ = AcmeCalledRTCPAvgLatencyFS1_Lookup(p)
	return
}

func AcmeCalledRTCPAvgLatencyFS1_Gets(p *radius.Packet) (values []AcmeCalledRTCPAvgLatencyFS1, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 48) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledRTCPAvgLatencyFS1(i))
	}
	return
}

func AcmeCalledRTCPAvgLatencyFS1_Lookup(p *radius.Packet) (value AcmeCalledRTCPAvgLatencyFS1, err error) {
	a, ok := _Acme_LookupVendor(p, 48)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledRTCPAvgLatencyFS1(i)
	return
}

func AcmeCalledRTCPAvgLatencyFS1_Set(p *radius.Packet, value AcmeCalledRTCPAvgLatencyFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 48, a)
}

func AcmeCalledRTCPAvgLatencyFS1_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 48)
}

type AcmeCalledRTCPMaxJitterFS1 uint32

var AcmeCalledRTCPMaxJitterFS1_Strings = map[AcmeCalledRTCPMaxJitterFS1]string{}

func (a AcmeCalledRTCPMaxJitterFS1) String() string {
	if str, ok := AcmeCalledRTCPMaxJitterFS1_Strings[a]; ok {
		return str
	}
	return "AcmeCalledRTCPMaxJitterFS1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledRTCPMaxJitterFS1_Add(p *radius.Packet, value AcmeCalledRTCPMaxJitterFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 49, a)
}

func AcmeCalledRTCPMaxJitterFS1_Get(p *radius.Packet) (value AcmeCalledRTCPMaxJitterFS1) {
	value, _ = AcmeCalledRTCPMaxJitterFS1_Lookup(p)
	return
}

func AcmeCalledRTCPMaxJitterFS1_Gets(p *radius.Packet) (values []AcmeCalledRTCPMaxJitterFS1, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 49) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledRTCPMaxJitterFS1(i))
	}
	return
}

func AcmeCalledRTCPMaxJitterFS1_Lookup(p *radius.Packet) (value AcmeCalledRTCPMaxJitterFS1, err error) {
	a, ok := _Acme_LookupVendor(p, 49)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledRTCPMaxJitterFS1(i)
	return
}

func AcmeCalledRTCPMaxJitterFS1_Set(p *radius.Packet, value AcmeCalledRTCPMaxJitterFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 49, a)
}

func AcmeCalledRTCPMaxJitterFS1_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 49)
}

type AcmeCalledRTCPMaxLatencyFS1 uint32

var AcmeCalledRTCPMaxLatencyFS1_Strings = map[AcmeCalledRTCPMaxLatencyFS1]string{}

func (a AcmeCalledRTCPMaxLatencyFS1) String() string {
	if str, ok := AcmeCalledRTCPMaxLatencyFS1_Strings[a]; ok {
		return str
	}
	return "AcmeCalledRTCPMaxLatencyFS1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledRTCPMaxLatencyFS1_Add(p *radius.Packet, value AcmeCalledRTCPMaxLatencyFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 50, a)
}

func AcmeCalledRTCPMaxLatencyFS1_Get(p *radius.Packet) (value AcmeCalledRTCPMaxLatencyFS1) {
	value, _ = AcmeCalledRTCPMaxLatencyFS1_Lookup(p)
	return
}

func AcmeCalledRTCPMaxLatencyFS1_Gets(p *radius.Packet) (values []AcmeCalledRTCPMaxLatencyFS1, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 50) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledRTCPMaxLatencyFS1(i))
	}
	return
}

func AcmeCalledRTCPMaxLatencyFS1_Lookup(p *radius.Packet) (value AcmeCalledRTCPMaxLatencyFS1, err error) {
	a, ok := _Acme_LookupVendor(p, 50)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledRTCPMaxLatencyFS1(i)
	return
}

func AcmeCalledRTCPMaxLatencyFS1_Set(p *radius.Packet, value AcmeCalledRTCPMaxLatencyFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 50, a)
}

func AcmeCalledRTCPMaxLatencyFS1_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 50)
}

type AcmeCalledRTPPacketsLostFS1 uint32

var AcmeCalledRTPPacketsLostFS1_Strings = map[AcmeCalledRTPPacketsLostFS1]string{}

func (a AcmeCalledRTPPacketsLostFS1) String() string {
	if str, ok := AcmeCalledRTPPacketsLostFS1_Strings[a]; ok {
		return str
	}
	return "AcmeCalledRTPPacketsLostFS1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledRTPPacketsLostFS1_Add(p *radius.Packet, value AcmeCalledRTPPacketsLostFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 51, a)
}

func AcmeCalledRTPPacketsLostFS1_Get(p *radius.Packet) (value AcmeCalledRTPPacketsLostFS1) {
	value, _ = AcmeCalledRTPPacketsLostFS1_Lookup(p)
	return
}

func AcmeCalledRTPPacketsLostFS1_Gets(p *radius.Packet) (values []AcmeCalledRTPPacketsLostFS1, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 51) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledRTPPacketsLostFS1(i))
	}
	return
}

func AcmeCalledRTPPacketsLostFS1_Lookup(p *radius.Packet) (value AcmeCalledRTPPacketsLostFS1, err error) {
	a, ok := _Acme_LookupVendor(p, 51)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledRTPPacketsLostFS1(i)
	return
}

func AcmeCalledRTPPacketsLostFS1_Set(p *radius.Packet, value AcmeCalledRTPPacketsLostFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 51, a)
}

func AcmeCalledRTPPacketsLostFS1_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 51)
}

type AcmeCalledRTPAvgJitterFS1 uint32

var AcmeCalledRTPAvgJitterFS1_Strings = map[AcmeCalledRTPAvgJitterFS1]string{}

func (a AcmeCalledRTPAvgJitterFS1) String() string {
	if str, ok := AcmeCalledRTPAvgJitterFS1_Strings[a]; ok {
		return str
	}
	return "AcmeCalledRTPAvgJitterFS1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledRTPAvgJitterFS1_Add(p *radius.Packet, value AcmeCalledRTPAvgJitterFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 52, a)
}

func AcmeCalledRTPAvgJitterFS1_Get(p *radius.Packet) (value AcmeCalledRTPAvgJitterFS1) {
	value, _ = AcmeCalledRTPAvgJitterFS1_Lookup(p)
	return
}

func AcmeCalledRTPAvgJitterFS1_Gets(p *radius.Packet) (values []AcmeCalledRTPAvgJitterFS1, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 52) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledRTPAvgJitterFS1(i))
	}
	return
}

func AcmeCalledRTPAvgJitterFS1_Lookup(p *radius.Packet) (value AcmeCalledRTPAvgJitterFS1, err error) {
	a, ok := _Acme_LookupVendor(p, 52)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledRTPAvgJitterFS1(i)
	return
}

func AcmeCalledRTPAvgJitterFS1_Set(p *radius.Packet, value AcmeCalledRTPAvgJitterFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 52, a)
}

func AcmeCalledRTPAvgJitterFS1_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 52)
}

type AcmeCalledRTPMaxJitterFS1 uint32

var AcmeCalledRTPMaxJitterFS1_Strings = map[AcmeCalledRTPMaxJitterFS1]string{}

func (a AcmeCalledRTPMaxJitterFS1) String() string {
	if str, ok := AcmeCalledRTPMaxJitterFS1_Strings[a]; ok {
		return str
	}
	return "AcmeCalledRTPMaxJitterFS1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledRTPMaxJitterFS1_Add(p *radius.Packet, value AcmeCalledRTPMaxJitterFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 53, a)
}

func AcmeCalledRTPMaxJitterFS1_Get(p *radius.Packet) (value AcmeCalledRTPMaxJitterFS1) {
	value, _ = AcmeCalledRTPMaxJitterFS1_Lookup(p)
	return
}

func AcmeCalledRTPMaxJitterFS1_Gets(p *radius.Packet) (values []AcmeCalledRTPMaxJitterFS1, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 53) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledRTPMaxJitterFS1(i))
	}
	return
}

func AcmeCalledRTPMaxJitterFS1_Lookup(p *radius.Packet) (value AcmeCalledRTPMaxJitterFS1, err error) {
	a, ok := _Acme_LookupVendor(p, 53)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledRTPMaxJitterFS1(i)
	return
}

func AcmeCalledRTPMaxJitterFS1_Set(p *radius.Packet, value AcmeCalledRTPMaxJitterFS1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 53, a)
}

func AcmeCalledRTPMaxJitterFS1_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 53)
}

func AcmeSessionChargingVector_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 54, a)
}

func AcmeSessionChargingVector_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 54, a)
}

func AcmeSessionChargingVector_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeSessionChargingVector_Lookup(p)
	return
}

func AcmeSessionChargingVector_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeSessionChargingVector_LookupString(p)
	return
}

func AcmeSessionChargingVector_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 54) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionChargingVector_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 54) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionChargingVector_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 54)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeSessionChargingVector_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 54)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeSessionChargingVector_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 54, a)
}

func AcmeSessionChargingVector_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 54, a)
}

func AcmeSessionChargingVector_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 54)
}

func AcmeSessionChargingFunctionAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 55, a)
}

func AcmeSessionChargingFunctionAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 55, a)
}

func AcmeSessionChargingFunctionAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeSessionChargingFunctionAddress_Lookup(p)
	return
}

func AcmeSessionChargingFunctionAddress_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeSessionChargingFunctionAddress_LookupString(p)
	return
}

func AcmeSessionChargingFunctionAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 55) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionChargingFunctionAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 55) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionChargingFunctionAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 55)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeSessionChargingFunctionAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 55)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeSessionChargingFunctionAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 55, a)
}

func AcmeSessionChargingFunctionAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 55, a)
}

func AcmeSessionChargingFunctionAddress_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 55)
}

func AcmeFirmwareVersion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 56, a)
}

func AcmeFirmwareVersion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 56, a)
}

func AcmeFirmwareVersion_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeFirmwareVersion_Lookup(p)
	return
}

func AcmeFirmwareVersion_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeFirmwareVersion_LookupString(p)
	return
}

func AcmeFirmwareVersion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 56) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFirmwareVersion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 56) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFirmwareVersion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 56)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeFirmwareVersion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 56)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeFirmwareVersion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 56, a)
}

func AcmeFirmwareVersion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 56, a)
}

func AcmeFirmwareVersion_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 56)
}

func AcmeLocalTimeZone_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 57, a)
}

func AcmeLocalTimeZone_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 57, a)
}

func AcmeLocalTimeZone_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeLocalTimeZone_Lookup(p)
	return
}

func AcmeLocalTimeZone_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeLocalTimeZone_LookupString(p)
	return
}

func AcmeLocalTimeZone_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 57) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeLocalTimeZone_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 57) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeLocalTimeZone_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 57)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeLocalTimeZone_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 57)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeLocalTimeZone_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 57, a)
}

func AcmeLocalTimeZone_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 57, a)
}

func AcmeLocalTimeZone_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 57)
}

type AcmePostDialDelay uint32

var AcmePostDialDelay_Strings = map[AcmePostDialDelay]string{}

func (a AcmePostDialDelay) String() string {
	if str, ok := AcmePostDialDelay_Strings[a]; ok {
		return str
	}
	return "AcmePostDialDelay(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmePostDialDelay_Add(p *radius.Packet, value AcmePostDialDelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 58, a)
}

func AcmePostDialDelay_Get(p *radius.Packet) (value AcmePostDialDelay) {
	value, _ = AcmePostDialDelay_Lookup(p)
	return
}

func AcmePostDialDelay_Gets(p *radius.Packet) (values []AcmePostDialDelay, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 58) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmePostDialDelay(i))
	}
	return
}

func AcmePostDialDelay_Lookup(p *radius.Packet) (value AcmePostDialDelay, err error) {
	a, ok := _Acme_LookupVendor(p, 58)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmePostDialDelay(i)
	return
}

func AcmePostDialDelay_Set(p *radius.Packet, value AcmePostDialDelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 58, a)
}

func AcmePostDialDelay_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 58)
}

type AcmeCDRSequenceNumber uint32

var AcmeCDRSequenceNumber_Strings = map[AcmeCDRSequenceNumber]string{}

func (a AcmeCDRSequenceNumber) String() string {
	if str, ok := AcmeCDRSequenceNumber_Strings[a]; ok {
		return str
	}
	return "AcmeCDRSequenceNumber(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCDRSequenceNumber_Add(p *radius.Packet, value AcmeCDRSequenceNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 59, a)
}

func AcmeCDRSequenceNumber_Get(p *radius.Packet) (value AcmeCDRSequenceNumber) {
	value, _ = AcmeCDRSequenceNumber_Lookup(p)
	return
}

func AcmeCDRSequenceNumber_Gets(p *radius.Packet) (values []AcmeCDRSequenceNumber, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 59) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCDRSequenceNumber(i))
	}
	return
}

func AcmeCDRSequenceNumber_Lookup(p *radius.Packet) (value AcmeCDRSequenceNumber, err error) {
	a, ok := _Acme_LookupVendor(p, 59)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCDRSequenceNumber(i)
	return
}

func AcmeCDRSequenceNumber_Set(p *radius.Packet, value AcmeCDRSequenceNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 59, a)
}

func AcmeCDRSequenceNumber_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 59)
}

type AcmeSessionDisposition uint32

var AcmeSessionDisposition_Strings = map[AcmeSessionDisposition]string{}

func (a AcmeSessionDisposition) String() string {
	if str, ok := AcmeSessionDisposition_Strings[a]; ok {
		return str
	}
	return "AcmeSessionDisposition(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeSessionDisposition_Add(p *radius.Packet, value AcmeSessionDisposition) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 60, a)
}

func AcmeSessionDisposition_Get(p *radius.Packet) (value AcmeSessionDisposition) {
	value, _ = AcmeSessionDisposition_Lookup(p)
	return
}

func AcmeSessionDisposition_Gets(p *radius.Packet) (values []AcmeSessionDisposition, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 60) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeSessionDisposition(i))
	}
	return
}

func AcmeSessionDisposition_Lookup(p *radius.Packet) (value AcmeSessionDisposition, err error) {
	a, ok := _Acme_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeSessionDisposition(i)
	return
}

func AcmeSessionDisposition_Set(p *radius.Packet, value AcmeSessionDisposition) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 60, a)
}

func AcmeSessionDisposition_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 60)
}

type AcmeDisconnectInitiator uint32

var AcmeDisconnectInitiator_Strings = map[AcmeDisconnectInitiator]string{}

func (a AcmeDisconnectInitiator) String() string {
	if str, ok := AcmeDisconnectInitiator_Strings[a]; ok {
		return str
	}
	return "AcmeDisconnectInitiator(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeDisconnectInitiator_Add(p *radius.Packet, value AcmeDisconnectInitiator) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 61, a)
}

func AcmeDisconnectInitiator_Get(p *radius.Packet) (value AcmeDisconnectInitiator) {
	value, _ = AcmeDisconnectInitiator_Lookup(p)
	return
}

func AcmeDisconnectInitiator_Gets(p *radius.Packet) (values []AcmeDisconnectInitiator, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 61) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeDisconnectInitiator(i))
	}
	return
}

func AcmeDisconnectInitiator_Lookup(p *radius.Packet) (value AcmeDisconnectInitiator, err error) {
	a, ok := _Acme_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeDisconnectInitiator(i)
	return
}

func AcmeDisconnectInitiator_Set(p *radius.Packet, value AcmeDisconnectInitiator) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 61, a)
}

func AcmeDisconnectInitiator_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 61)
}

type AcmeDisconnectCause uint32

var AcmeDisconnectCause_Strings = map[AcmeDisconnectCause]string{}

func (a AcmeDisconnectCause) String() string {
	if str, ok := AcmeDisconnectCause_Strings[a]; ok {
		return str
	}
	return "AcmeDisconnectCause(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeDisconnectCause_Add(p *radius.Packet, value AcmeDisconnectCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 62, a)
}

func AcmeDisconnectCause_Get(p *radius.Packet) (value AcmeDisconnectCause) {
	value, _ = AcmeDisconnectCause_Lookup(p)
	return
}

func AcmeDisconnectCause_Gets(p *radius.Packet) (values []AcmeDisconnectCause, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 62) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeDisconnectCause(i))
	}
	return
}

func AcmeDisconnectCause_Lookup(p *radius.Packet) (value AcmeDisconnectCause, err error) {
	a, ok := _Acme_LookupVendor(p, 62)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeDisconnectCause(i)
	return
}

func AcmeDisconnectCause_Set(p *radius.Packet, value AcmeDisconnectCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 62, a)
}

func AcmeDisconnectCause_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 62)
}

func AcmeIntermediateTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 63, a)
}

func AcmeIntermediateTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 63, a)
}

func AcmeIntermediateTime_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeIntermediateTime_Lookup(p)
	return
}

func AcmeIntermediateTime_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeIntermediateTime_LookupString(p)
	return
}

func AcmeIntermediateTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 63) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeIntermediateTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 63) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeIntermediateTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeIntermediateTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeIntermediateTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 63, a)
}

func AcmeIntermediateTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 63, a)
}

func AcmeIntermediateTime_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 63)
}

func AcmePrimaryRoutingNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 64, a)
}

func AcmePrimaryRoutingNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 64, a)
}

func AcmePrimaryRoutingNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmePrimaryRoutingNumber_Lookup(p)
	return
}

func AcmePrimaryRoutingNumber_GetString(p *radius.Packet) (value string) {
	value, _ = AcmePrimaryRoutingNumber_LookupString(p)
	return
}

func AcmePrimaryRoutingNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 64) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmePrimaryRoutingNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 64) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmePrimaryRoutingNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmePrimaryRoutingNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmePrimaryRoutingNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 64, a)
}

func AcmePrimaryRoutingNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 64, a)
}

func AcmePrimaryRoutingNumber_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 64)
}

func AcmeOriginatingTrunkGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 65, a)
}

func AcmeOriginatingTrunkGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 65, a)
}

func AcmeOriginatingTrunkGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeOriginatingTrunkGroup_Lookup(p)
	return
}

func AcmeOriginatingTrunkGroup_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeOriginatingTrunkGroup_LookupString(p)
	return
}

func AcmeOriginatingTrunkGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 65) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeOriginatingTrunkGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 65) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeOriginatingTrunkGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeOriginatingTrunkGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeOriginatingTrunkGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 65, a)
}

func AcmeOriginatingTrunkGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 65, a)
}

func AcmeOriginatingTrunkGroup_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 65)
}

func AcmeTerminatingTrunkGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 66, a)
}

func AcmeTerminatingTrunkGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 66, a)
}

func AcmeTerminatingTrunkGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeTerminatingTrunkGroup_Lookup(p)
	return
}

func AcmeTerminatingTrunkGroup_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeTerminatingTrunkGroup_LookupString(p)
	return
}

func AcmeTerminatingTrunkGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 66) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeTerminatingTrunkGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 66) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeTerminatingTrunkGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 66)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeTerminatingTrunkGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 66)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeTerminatingTrunkGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 66, a)
}

func AcmeTerminatingTrunkGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 66, a)
}

func AcmeTerminatingTrunkGroup_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 66)
}

func AcmeOriginatingTrunkContext_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 67, a)
}

func AcmeOriginatingTrunkContext_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 67, a)
}

func AcmeOriginatingTrunkContext_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeOriginatingTrunkContext_Lookup(p)
	return
}

func AcmeOriginatingTrunkContext_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeOriginatingTrunkContext_LookupString(p)
	return
}

func AcmeOriginatingTrunkContext_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 67) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeOriginatingTrunkContext_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 67) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeOriginatingTrunkContext_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 67)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeOriginatingTrunkContext_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 67)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeOriginatingTrunkContext_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 67, a)
}

func AcmeOriginatingTrunkContext_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 67, a)
}

func AcmeOriginatingTrunkContext_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 67)
}

func AcmeTerminatingTrunkContext_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 68, a)
}

func AcmeTerminatingTrunkContext_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 68, a)
}

func AcmeTerminatingTrunkContext_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeTerminatingTrunkContext_Lookup(p)
	return
}

func AcmeTerminatingTrunkContext_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeTerminatingTrunkContext_LookupString(p)
	return
}

func AcmeTerminatingTrunkContext_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 68) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeTerminatingTrunkContext_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 68) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeTerminatingTrunkContext_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 68)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeTerminatingTrunkContext_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 68)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeTerminatingTrunkContext_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 68, a)
}

func AcmeTerminatingTrunkContext_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 68, a)
}

func AcmeTerminatingTrunkContext_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 68)
}

func AcmePAssertedID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 69, a)
}

func AcmePAssertedID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 69, a)
}

func AcmePAssertedID_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmePAssertedID_Lookup(p)
	return
}

func AcmePAssertedID_GetString(p *radius.Packet) (value string) {
	value, _ = AcmePAssertedID_LookupString(p)
	return
}

func AcmePAssertedID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 69) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmePAssertedID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 69) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmePAssertedID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 69)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmePAssertedID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 69)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmePAssertedID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 69, a)
}

func AcmePAssertedID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 69, a)
}

func AcmePAssertedID_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 69)
}

func AcmeSIPDiversion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 70, a)
}

func AcmeSIPDiversion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 70, a)
}

func AcmeSIPDiversion_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeSIPDiversion_Lookup(p)
	return
}

func AcmeSIPDiversion_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeSIPDiversion_LookupString(p)
	return
}

func AcmeSIPDiversion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 70) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSIPDiversion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 70) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSIPDiversion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 70)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeSIPDiversion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 70)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeSIPDiversion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 70, a)
}

func AcmeSIPDiversion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 70, a)
}

func AcmeSIPDiversion_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 70)
}

type AcmeSIPStatus uint32

var AcmeSIPStatus_Strings = map[AcmeSIPStatus]string{}

func (a AcmeSIPStatus) String() string {
	if str, ok := AcmeSIPStatus_Strings[a]; ok {
		return str
	}
	return "AcmeSIPStatus(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeSIPStatus_Add(p *radius.Packet, value AcmeSIPStatus) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 71, a)
}

func AcmeSIPStatus_Get(p *radius.Packet) (value AcmeSIPStatus) {
	value, _ = AcmeSIPStatus_Lookup(p)
	return
}

func AcmeSIPStatus_Gets(p *radius.Packet) (values []AcmeSIPStatus, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 71) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeSIPStatus(i))
	}
	return
}

func AcmeSIPStatus_Lookup(p *radius.Packet) (value AcmeSIPStatus, err error) {
	a, ok := _Acme_LookupVendor(p, 71)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeSIPStatus(i)
	return
}

func AcmeSIPStatus_Set(p *radius.Packet, value AcmeSIPStatus) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 71, a)
}

func AcmeSIPStatus_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 71)
}

func AcmeIngressLocalAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 74, a)
}

func AcmeIngressLocalAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 74, a)
}

func AcmeIngressLocalAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeIngressLocalAddr_Lookup(p)
	return
}

func AcmeIngressLocalAddr_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeIngressLocalAddr_LookupString(p)
	return
}

func AcmeIngressLocalAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 74) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeIngressLocalAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 74) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeIngressLocalAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 74)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeIngressLocalAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 74)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeIngressLocalAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 74, a)
}

func AcmeIngressLocalAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 74, a)
}

func AcmeIngressLocalAddr_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 74)
}

func AcmeIngressRemoteAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 75, a)
}

func AcmeIngressRemoteAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 75, a)
}

func AcmeIngressRemoteAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeIngressRemoteAddr_Lookup(p)
	return
}

func AcmeIngressRemoteAddr_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeIngressRemoteAddr_LookupString(p)
	return
}

func AcmeIngressRemoteAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 75) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeIngressRemoteAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 75) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeIngressRemoteAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 75)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeIngressRemoteAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 75)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeIngressRemoteAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 75, a)
}

func AcmeIngressRemoteAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 75, a)
}

func AcmeIngressRemoteAddr_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 75)
}

func AcmeEgressLocalAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 76, a)
}

func AcmeEgressLocalAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 76, a)
}

func AcmeEgressLocalAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeEgressLocalAddr_Lookup(p)
	return
}

func AcmeEgressLocalAddr_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeEgressLocalAddr_LookupString(p)
	return
}

func AcmeEgressLocalAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 76) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeEgressLocalAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 76) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeEgressLocalAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 76)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeEgressLocalAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 76)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeEgressLocalAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 76, a)
}

func AcmeEgressLocalAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 76, a)
}

func AcmeEgressLocalAddr_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 76)
}

func AcmeEgressRemoteAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 77, a)
}

func AcmeEgressRemoteAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 77, a)
}

func AcmeEgressRemoteAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeEgressRemoteAddr_Lookup(p)
	return
}

func AcmeEgressRemoteAddr_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeEgressRemoteAddr_LookupString(p)
	return
}

func AcmeEgressRemoteAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 77) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeEgressRemoteAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 77) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeEgressRemoteAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 77)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeEgressRemoteAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 77)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeEgressRemoteAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 77, a)
}

func AcmeEgressRemoteAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 77, a)
}

func AcmeEgressRemoteAddr_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 77)
}

func AcmeFlowIDFS1R_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 78, a)
}

func AcmeFlowIDFS1R_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 78, a)
}

func AcmeFlowIDFS1R_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeFlowIDFS1R_Lookup(p)
	return
}

func AcmeFlowIDFS1R_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeFlowIDFS1R_LookupString(p)
	return
}

func AcmeFlowIDFS1R_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 78) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowIDFS1R_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 78) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowIDFS1R_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 78)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeFlowIDFS1R_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 78)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeFlowIDFS1R_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 78, a)
}

func AcmeFlowIDFS1R_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 78, a)
}

func AcmeFlowIDFS1R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 78)
}

func AcmeFlowTypeFS1R_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 79, a)
}

func AcmeFlowTypeFS1R_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 79, a)
}

func AcmeFlowTypeFS1R_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeFlowTypeFS1R_Lookup(p)
	return
}

func AcmeFlowTypeFS1R_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeFlowTypeFS1R_LookupString(p)
	return
}

func AcmeFlowTypeFS1R_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 79) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowTypeFS1R_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 79) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowTypeFS1R_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 79)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeFlowTypeFS1R_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 79)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeFlowTypeFS1R_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 79, a)
}

func AcmeFlowTypeFS1R_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 79, a)
}

func AcmeFlowTypeFS1R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 79)
}

func AcmeFlowInRealmFS1R_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 80, a)
}

func AcmeFlowInRealmFS1R_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 80, a)
}

func AcmeFlowInRealmFS1R_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeFlowInRealmFS1R_Lookup(p)
	return
}

func AcmeFlowInRealmFS1R_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeFlowInRealmFS1R_LookupString(p)
	return
}

func AcmeFlowInRealmFS1R_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 80) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInRealmFS1R_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 80) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInRealmFS1R_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 80)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeFlowInRealmFS1R_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 80)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeFlowInRealmFS1R_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 80, a)
}

func AcmeFlowInRealmFS1R_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 80, a)
}

func AcmeFlowInRealmFS1R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 80)
}

func AcmeFlowInSrcAddrFS1R_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 81, a)
}

func AcmeFlowInSrcAddrFS1R_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowInSrcAddrFS1R_Lookup(p)
	return
}

func AcmeFlowInSrcAddrFS1R_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 81) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInSrcAddrFS1R_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 81)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AcmeFlowInSrcAddrFS1R_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 81, a)
}

func AcmeFlowInSrcAddrFS1R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 81)
}

type AcmeFlowInSrcPortFS1R uint32

var AcmeFlowInSrcPortFS1R_Strings = map[AcmeFlowInSrcPortFS1R]string{}

func (a AcmeFlowInSrcPortFS1R) String() string {
	if str, ok := AcmeFlowInSrcPortFS1R_Strings[a]; ok {
		return str
	}
	return "AcmeFlowInSrcPortFS1R(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeFlowInSrcPortFS1R_Add(p *radius.Packet, value AcmeFlowInSrcPortFS1R) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 82, a)
}

func AcmeFlowInSrcPortFS1R_Get(p *radius.Packet) (value AcmeFlowInSrcPortFS1R) {
	value, _ = AcmeFlowInSrcPortFS1R_Lookup(p)
	return
}

func AcmeFlowInSrcPortFS1R_Gets(p *radius.Packet) (values []AcmeFlowInSrcPortFS1R, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 82) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeFlowInSrcPortFS1R(i))
	}
	return
}

func AcmeFlowInSrcPortFS1R_Lookup(p *radius.Packet) (value AcmeFlowInSrcPortFS1R, err error) {
	a, ok := _Acme_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeFlowInSrcPortFS1R(i)
	return
}

func AcmeFlowInSrcPortFS1R_Set(p *radius.Packet, value AcmeFlowInSrcPortFS1R) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 82, a)
}

func AcmeFlowInSrcPortFS1R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 82)
}

func AcmeFlowInDstAddrFS1R_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 83, a)
}

func AcmeFlowInDstAddrFS1R_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowInDstAddrFS1R_Lookup(p)
	return
}

func AcmeFlowInDstAddrFS1R_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 83) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInDstAddrFS1R_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 83)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AcmeFlowInDstAddrFS1R_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 83, a)
}

func AcmeFlowInDstAddrFS1R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 83)
}

type AcmeFlowInDstPortFS1R uint32

var AcmeFlowInDstPortFS1R_Strings = map[AcmeFlowInDstPortFS1R]string{}

func (a AcmeFlowInDstPortFS1R) String() string {
	if str, ok := AcmeFlowInDstPortFS1R_Strings[a]; ok {
		return str
	}
	return "AcmeFlowInDstPortFS1R(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeFlowInDstPortFS1R_Add(p *radius.Packet, value AcmeFlowInDstPortFS1R) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 84, a)
}

func AcmeFlowInDstPortFS1R_Get(p *radius.Packet) (value AcmeFlowInDstPortFS1R) {
	value, _ = AcmeFlowInDstPortFS1R_Lookup(p)
	return
}

func AcmeFlowInDstPortFS1R_Gets(p *radius.Packet) (values []AcmeFlowInDstPortFS1R, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 84) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeFlowInDstPortFS1R(i))
	}
	return
}

func AcmeFlowInDstPortFS1R_Lookup(p *radius.Packet) (value AcmeFlowInDstPortFS1R, err error) {
	a, ok := _Acme_LookupVendor(p, 84)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeFlowInDstPortFS1R(i)
	return
}

func AcmeFlowInDstPortFS1R_Set(p *radius.Packet, value AcmeFlowInDstPortFS1R) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 84, a)
}

func AcmeFlowInDstPortFS1R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 84)
}

func AcmeFlowOutRealmFS1R_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 85, a)
}

func AcmeFlowOutRealmFS1R_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 85, a)
}

func AcmeFlowOutRealmFS1R_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeFlowOutRealmFS1R_Lookup(p)
	return
}

func AcmeFlowOutRealmFS1R_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeFlowOutRealmFS1R_LookupString(p)
	return
}

func AcmeFlowOutRealmFS1R_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 85) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutRealmFS1R_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 85) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutRealmFS1R_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 85)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeFlowOutRealmFS1R_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 85)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeFlowOutRealmFS1R_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 85, a)
}

func AcmeFlowOutRealmFS1R_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 85, a)
}

func AcmeFlowOutRealmFS1R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 85)
}

func AcmeFlowOutSrcAddrFS1R_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 86, a)
}

func AcmeFlowOutSrcAddrFS1R_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowOutSrcAddrFS1R_Lookup(p)
	return
}

func AcmeFlowOutSrcAddrFS1R_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 86) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutSrcAddrFS1R_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 86)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AcmeFlowOutSrcAddrFS1R_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 86, a)
}

func AcmeFlowOutSrcAddrFS1R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 86)
}

type AcmeFlowOutSrcPortFS1R uint32

var AcmeFlowOutSrcPortFS1R_Strings = map[AcmeFlowOutSrcPortFS1R]string{}

func (a AcmeFlowOutSrcPortFS1R) String() string {
	if str, ok := AcmeFlowOutSrcPortFS1R_Strings[a]; ok {
		return str
	}
	return "AcmeFlowOutSrcPortFS1R(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeFlowOutSrcPortFS1R_Add(p *radius.Packet, value AcmeFlowOutSrcPortFS1R) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 87, a)
}

func AcmeFlowOutSrcPortFS1R_Get(p *radius.Packet) (value AcmeFlowOutSrcPortFS1R) {
	value, _ = AcmeFlowOutSrcPortFS1R_Lookup(p)
	return
}

func AcmeFlowOutSrcPortFS1R_Gets(p *radius.Packet) (values []AcmeFlowOutSrcPortFS1R, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 87) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeFlowOutSrcPortFS1R(i))
	}
	return
}

func AcmeFlowOutSrcPortFS1R_Lookup(p *radius.Packet) (value AcmeFlowOutSrcPortFS1R, err error) {
	a, ok := _Acme_LookupVendor(p, 87)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeFlowOutSrcPortFS1R(i)
	return
}

func AcmeFlowOutSrcPortFS1R_Set(p *radius.Packet, value AcmeFlowOutSrcPortFS1R) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 87, a)
}

func AcmeFlowOutSrcPortFS1R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 87)
}

func AcmeFlowOutDstAddrFS1R_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 88, a)
}

func AcmeFlowOutDstAddrFS1R_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowOutDstAddrFS1R_Lookup(p)
	return
}

func AcmeFlowOutDstAddrFS1R_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 88) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutDstAddrFS1R_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 88)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AcmeFlowOutDstAddrFS1R_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 88, a)
}

func AcmeFlowOutDstAddrFS1R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 88)
}

type AcmeFlowOutDstPortFS1R uint32

var AcmeFlowOutDstPortFS1R_Strings = map[AcmeFlowOutDstPortFS1R]string{}

func (a AcmeFlowOutDstPortFS1R) String() string {
	if str, ok := AcmeFlowOutDstPortFS1R_Strings[a]; ok {
		return str
	}
	return "AcmeFlowOutDstPortFS1R(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeFlowOutDstPortFS1R_Add(p *radius.Packet, value AcmeFlowOutDstPortFS1R) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 89, a)
}

func AcmeFlowOutDstPortFS1R_Get(p *radius.Packet) (value AcmeFlowOutDstPortFS1R) {
	value, _ = AcmeFlowOutDstPortFS1R_Lookup(p)
	return
}

func AcmeFlowOutDstPortFS1R_Gets(p *radius.Packet) (values []AcmeFlowOutDstPortFS1R, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 89) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeFlowOutDstPortFS1R(i))
	}
	return
}

func AcmeFlowOutDstPortFS1R_Lookup(p *radius.Packet) (value AcmeFlowOutDstPortFS1R, err error) {
	a, ok := _Acme_LookupVendor(p, 89)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeFlowOutDstPortFS1R(i)
	return
}

func AcmeFlowOutDstPortFS1R_Set(p *radius.Packet, value AcmeFlowOutDstPortFS1R) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 89, a)
}

func AcmeFlowOutDstPortFS1R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 89)
}

func AcmeFlowIDFS2F_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 90, a)
}

func AcmeFlowIDFS2F_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 90, a)
}

func AcmeFlowIDFS2F_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeFlowIDFS2F_Lookup(p)
	return
}

func AcmeFlowIDFS2F_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeFlowIDFS2F_LookupString(p)
	return
}

func AcmeFlowIDFS2F_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 90) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowIDFS2F_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 90) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowIDFS2F_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 90)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeFlowIDFS2F_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 90)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeFlowIDFS2F_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 90, a)
}

func AcmeFlowIDFS2F_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 90, a)
}

func AcmeFlowIDFS2F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 90)
}

func AcmeFlowTypeFS2F_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 91, a)
}

func AcmeFlowTypeFS2F_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 91, a)
}

func AcmeFlowTypeFS2F_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeFlowTypeFS2F_Lookup(p)
	return
}

func AcmeFlowTypeFS2F_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeFlowTypeFS2F_LookupString(p)
	return
}

func AcmeFlowTypeFS2F_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 91) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowTypeFS2F_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 91) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowTypeFS2F_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeFlowTypeFS2F_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeFlowTypeFS2F_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 91, a)
}

func AcmeFlowTypeFS2F_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 91, a)
}

func AcmeFlowTypeFS2F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 91)
}

func AcmeFlowInRealmFS2F_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 92, a)
}

func AcmeFlowInRealmFS2F_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 92, a)
}

func AcmeFlowInRealmFS2F_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeFlowInRealmFS2F_Lookup(p)
	return
}

func AcmeFlowInRealmFS2F_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeFlowInRealmFS2F_LookupString(p)
	return
}

func AcmeFlowInRealmFS2F_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 92) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInRealmFS2F_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 92) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInRealmFS2F_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 92)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeFlowInRealmFS2F_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 92)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeFlowInRealmFS2F_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 92, a)
}

func AcmeFlowInRealmFS2F_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 92, a)
}

func AcmeFlowInRealmFS2F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 92)
}

func AcmeFlowInSrcAddrFS2F_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 93, a)
}

func AcmeFlowInSrcAddrFS2F_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowInSrcAddrFS2F_Lookup(p)
	return
}

func AcmeFlowInSrcAddrFS2F_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 93) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInSrcAddrFS2F_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 93)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AcmeFlowInSrcAddrFS2F_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 93, a)
}

func AcmeFlowInSrcAddrFS2F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 93)
}

type AcmeFlowInSrcPortFS2F uint32

var AcmeFlowInSrcPortFS2F_Strings = map[AcmeFlowInSrcPortFS2F]string{}

func (a AcmeFlowInSrcPortFS2F) String() string {
	if str, ok := AcmeFlowInSrcPortFS2F_Strings[a]; ok {
		return str
	}
	return "AcmeFlowInSrcPortFS2F(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeFlowInSrcPortFS2F_Add(p *radius.Packet, value AcmeFlowInSrcPortFS2F) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 94, a)
}

func AcmeFlowInSrcPortFS2F_Get(p *radius.Packet) (value AcmeFlowInSrcPortFS2F) {
	value, _ = AcmeFlowInSrcPortFS2F_Lookup(p)
	return
}

func AcmeFlowInSrcPortFS2F_Gets(p *radius.Packet) (values []AcmeFlowInSrcPortFS2F, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 94) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeFlowInSrcPortFS2F(i))
	}
	return
}

func AcmeFlowInSrcPortFS2F_Lookup(p *radius.Packet) (value AcmeFlowInSrcPortFS2F, err error) {
	a, ok := _Acme_LookupVendor(p, 94)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeFlowInSrcPortFS2F(i)
	return
}

func AcmeFlowInSrcPortFS2F_Set(p *radius.Packet, value AcmeFlowInSrcPortFS2F) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 94, a)
}

func AcmeFlowInSrcPortFS2F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 94)
}

func AcmeFlowInDstAddrFS2F_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 95, a)
}

func AcmeFlowInDstAddrFS2F_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowInDstAddrFS2F_Lookup(p)
	return
}

func AcmeFlowInDstAddrFS2F_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 95) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInDstAddrFS2F_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 95)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AcmeFlowInDstAddrFS2F_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 95, a)
}

func AcmeFlowInDstAddrFS2F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 95)
}

type AcmeFlowInDstPortFS2F uint32

var AcmeFlowInDstPortFS2F_Strings = map[AcmeFlowInDstPortFS2F]string{}

func (a AcmeFlowInDstPortFS2F) String() string {
	if str, ok := AcmeFlowInDstPortFS2F_Strings[a]; ok {
		return str
	}
	return "AcmeFlowInDstPortFS2F(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeFlowInDstPortFS2F_Add(p *radius.Packet, value AcmeFlowInDstPortFS2F) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 96, a)
}

func AcmeFlowInDstPortFS2F_Get(p *radius.Packet) (value AcmeFlowInDstPortFS2F) {
	value, _ = AcmeFlowInDstPortFS2F_Lookup(p)
	return
}

func AcmeFlowInDstPortFS2F_Gets(p *radius.Packet) (values []AcmeFlowInDstPortFS2F, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 96) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeFlowInDstPortFS2F(i))
	}
	return
}

func AcmeFlowInDstPortFS2F_Lookup(p *radius.Packet) (value AcmeFlowInDstPortFS2F, err error) {
	a, ok := _Acme_LookupVendor(p, 96)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeFlowInDstPortFS2F(i)
	return
}

func AcmeFlowInDstPortFS2F_Set(p *radius.Packet, value AcmeFlowInDstPortFS2F) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 96, a)
}

func AcmeFlowInDstPortFS2F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 96)
}

func AcmeFlowOutRealmFS2F_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 97, a)
}

func AcmeFlowOutRealmFS2F_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 97, a)
}

func AcmeFlowOutRealmFS2F_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeFlowOutRealmFS2F_Lookup(p)
	return
}

func AcmeFlowOutRealmFS2F_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeFlowOutRealmFS2F_LookupString(p)
	return
}

func AcmeFlowOutRealmFS2F_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 97) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutRealmFS2F_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 97) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutRealmFS2F_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 97)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeFlowOutRealmFS2F_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 97)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeFlowOutRealmFS2F_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 97, a)
}

func AcmeFlowOutRealmFS2F_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 97, a)
}

func AcmeFlowOutRealmFS2F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 97)
}

func AcmeFlowOutSrcAddrFS2F_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 98, a)
}

func AcmeFlowOutSrcAddrFS2F_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowOutSrcAddrFS2F_Lookup(p)
	return
}

func AcmeFlowOutSrcAddrFS2F_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 98) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutSrcAddrFS2F_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 98)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AcmeFlowOutSrcAddrFS2F_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 98, a)
}

func AcmeFlowOutSrcAddrFS2F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 98)
}

type AcmeFlowOutSrcPortFS2F uint32

var AcmeFlowOutSrcPortFS2F_Strings = map[AcmeFlowOutSrcPortFS2F]string{}

func (a AcmeFlowOutSrcPortFS2F) String() string {
	if str, ok := AcmeFlowOutSrcPortFS2F_Strings[a]; ok {
		return str
	}
	return "AcmeFlowOutSrcPortFS2F(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeFlowOutSrcPortFS2F_Add(p *radius.Packet, value AcmeFlowOutSrcPortFS2F) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 99, a)
}

func AcmeFlowOutSrcPortFS2F_Get(p *radius.Packet) (value AcmeFlowOutSrcPortFS2F) {
	value, _ = AcmeFlowOutSrcPortFS2F_Lookup(p)
	return
}

func AcmeFlowOutSrcPortFS2F_Gets(p *radius.Packet) (values []AcmeFlowOutSrcPortFS2F, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 99) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeFlowOutSrcPortFS2F(i))
	}
	return
}

func AcmeFlowOutSrcPortFS2F_Lookup(p *radius.Packet) (value AcmeFlowOutSrcPortFS2F, err error) {
	a, ok := _Acme_LookupVendor(p, 99)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeFlowOutSrcPortFS2F(i)
	return
}

func AcmeFlowOutSrcPortFS2F_Set(p *radius.Packet, value AcmeFlowOutSrcPortFS2F) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 99, a)
}

func AcmeFlowOutSrcPortFS2F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 99)
}

func AcmeFlowOutDstAddrFS2F_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 100, a)
}

func AcmeFlowOutDstAddrFS2F_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowOutDstAddrFS2F_Lookup(p)
	return
}

func AcmeFlowOutDstAddrFS2F_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 100) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutDstAddrFS2F_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AcmeFlowOutDstAddrFS2F_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 100, a)
}

func AcmeFlowOutDstAddrFS2F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 100)
}

type AcmeFlowOutDstPortFS2F uint32

var AcmeFlowOutDstPortFS2F_Strings = map[AcmeFlowOutDstPortFS2F]string{}

func (a AcmeFlowOutDstPortFS2F) String() string {
	if str, ok := AcmeFlowOutDstPortFS2F_Strings[a]; ok {
		return str
	}
	return "AcmeFlowOutDstPortFS2F(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeFlowOutDstPortFS2F_Add(p *radius.Packet, value AcmeFlowOutDstPortFS2F) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 101, a)
}

func AcmeFlowOutDstPortFS2F_Get(p *radius.Packet) (value AcmeFlowOutDstPortFS2F) {
	value, _ = AcmeFlowOutDstPortFS2F_Lookup(p)
	return
}

func AcmeFlowOutDstPortFS2F_Gets(p *radius.Packet) (values []AcmeFlowOutDstPortFS2F, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 101) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeFlowOutDstPortFS2F(i))
	}
	return
}

func AcmeFlowOutDstPortFS2F_Lookup(p *radius.Packet) (value AcmeFlowOutDstPortFS2F, err error) {
	a, ok := _Acme_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeFlowOutDstPortFS2F(i)
	return
}

func AcmeFlowOutDstPortFS2F_Set(p *radius.Packet, value AcmeFlowOutDstPortFS2F) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 101, a)
}

func AcmeFlowOutDstPortFS2F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 101)
}

type AcmeCallingOctetsFS2 uint32

var AcmeCallingOctetsFS2_Strings = map[AcmeCallingOctetsFS2]string{}

func (a AcmeCallingOctetsFS2) String() string {
	if str, ok := AcmeCallingOctetsFS2_Strings[a]; ok {
		return str
	}
	return "AcmeCallingOctetsFS2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingOctetsFS2_Add(p *radius.Packet, value AcmeCallingOctetsFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 102, a)
}

func AcmeCallingOctetsFS2_Get(p *radius.Packet) (value AcmeCallingOctetsFS2) {
	value, _ = AcmeCallingOctetsFS2_Lookup(p)
	return
}

func AcmeCallingOctetsFS2_Gets(p *radius.Packet) (values []AcmeCallingOctetsFS2, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 102) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingOctetsFS2(i))
	}
	return
}

func AcmeCallingOctetsFS2_Lookup(p *radius.Packet) (value AcmeCallingOctetsFS2, err error) {
	a, ok := _Acme_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingOctetsFS2(i)
	return
}

func AcmeCallingOctetsFS2_Set(p *radius.Packet, value AcmeCallingOctetsFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 102, a)
}

func AcmeCallingOctetsFS2_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 102)
}

type AcmeCallingPacketsFS2 uint32

var AcmeCallingPacketsFS2_Strings = map[AcmeCallingPacketsFS2]string{}

func (a AcmeCallingPacketsFS2) String() string {
	if str, ok := AcmeCallingPacketsFS2_Strings[a]; ok {
		return str
	}
	return "AcmeCallingPacketsFS2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingPacketsFS2_Add(p *radius.Packet, value AcmeCallingPacketsFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 103, a)
}

func AcmeCallingPacketsFS2_Get(p *radius.Packet) (value AcmeCallingPacketsFS2) {
	value, _ = AcmeCallingPacketsFS2_Lookup(p)
	return
}

func AcmeCallingPacketsFS2_Gets(p *radius.Packet) (values []AcmeCallingPacketsFS2, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 103) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingPacketsFS2(i))
	}
	return
}

func AcmeCallingPacketsFS2_Lookup(p *radius.Packet) (value AcmeCallingPacketsFS2, err error) {
	a, ok := _Acme_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingPacketsFS2(i)
	return
}

func AcmeCallingPacketsFS2_Set(p *radius.Packet, value AcmeCallingPacketsFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 103, a)
}

func AcmeCallingPacketsFS2_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 103)
}

type AcmeCallingRTCPPacketsLostFS2 uint32

var AcmeCallingRTCPPacketsLostFS2_Strings = map[AcmeCallingRTCPPacketsLostFS2]string{}

func (a AcmeCallingRTCPPacketsLostFS2) String() string {
	if str, ok := AcmeCallingRTCPPacketsLostFS2_Strings[a]; ok {
		return str
	}
	return "AcmeCallingRTCPPacketsLostFS2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingRTCPPacketsLostFS2_Add(p *radius.Packet, value AcmeCallingRTCPPacketsLostFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 104, a)
}

func AcmeCallingRTCPPacketsLostFS2_Get(p *radius.Packet) (value AcmeCallingRTCPPacketsLostFS2) {
	value, _ = AcmeCallingRTCPPacketsLostFS2_Lookup(p)
	return
}

func AcmeCallingRTCPPacketsLostFS2_Gets(p *radius.Packet) (values []AcmeCallingRTCPPacketsLostFS2, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 104) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingRTCPPacketsLostFS2(i))
	}
	return
}

func AcmeCallingRTCPPacketsLostFS2_Lookup(p *radius.Packet) (value AcmeCallingRTCPPacketsLostFS2, err error) {
	a, ok := _Acme_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingRTCPPacketsLostFS2(i)
	return
}

func AcmeCallingRTCPPacketsLostFS2_Set(p *radius.Packet, value AcmeCallingRTCPPacketsLostFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 104, a)
}

func AcmeCallingRTCPPacketsLostFS2_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 104)
}

type AcmeCallingRTCPAvgJitterFS2 uint32

var AcmeCallingRTCPAvgJitterFS2_Strings = map[AcmeCallingRTCPAvgJitterFS2]string{}

func (a AcmeCallingRTCPAvgJitterFS2) String() string {
	if str, ok := AcmeCallingRTCPAvgJitterFS2_Strings[a]; ok {
		return str
	}
	return "AcmeCallingRTCPAvgJitterFS2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingRTCPAvgJitterFS2_Add(p *radius.Packet, value AcmeCallingRTCPAvgJitterFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 105, a)
}

func AcmeCallingRTCPAvgJitterFS2_Get(p *radius.Packet) (value AcmeCallingRTCPAvgJitterFS2) {
	value, _ = AcmeCallingRTCPAvgJitterFS2_Lookup(p)
	return
}

func AcmeCallingRTCPAvgJitterFS2_Gets(p *radius.Packet) (values []AcmeCallingRTCPAvgJitterFS2, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 105) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingRTCPAvgJitterFS2(i))
	}
	return
}

func AcmeCallingRTCPAvgJitterFS2_Lookup(p *radius.Packet) (value AcmeCallingRTCPAvgJitterFS2, err error) {
	a, ok := _Acme_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingRTCPAvgJitterFS2(i)
	return
}

func AcmeCallingRTCPAvgJitterFS2_Set(p *radius.Packet, value AcmeCallingRTCPAvgJitterFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 105, a)
}

func AcmeCallingRTCPAvgJitterFS2_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 105)
}

type AcmeCallingRTCPAvgLatencyFS2 uint32

var AcmeCallingRTCPAvgLatencyFS2_Strings = map[AcmeCallingRTCPAvgLatencyFS2]string{}

func (a AcmeCallingRTCPAvgLatencyFS2) String() string {
	if str, ok := AcmeCallingRTCPAvgLatencyFS2_Strings[a]; ok {
		return str
	}
	return "AcmeCallingRTCPAvgLatencyFS2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingRTCPAvgLatencyFS2_Add(p *radius.Packet, value AcmeCallingRTCPAvgLatencyFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 106, a)
}

func AcmeCallingRTCPAvgLatencyFS2_Get(p *radius.Packet) (value AcmeCallingRTCPAvgLatencyFS2) {
	value, _ = AcmeCallingRTCPAvgLatencyFS2_Lookup(p)
	return
}

func AcmeCallingRTCPAvgLatencyFS2_Gets(p *radius.Packet) (values []AcmeCallingRTCPAvgLatencyFS2, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 106) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingRTCPAvgLatencyFS2(i))
	}
	return
}

func AcmeCallingRTCPAvgLatencyFS2_Lookup(p *radius.Packet) (value AcmeCallingRTCPAvgLatencyFS2, err error) {
	a, ok := _Acme_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingRTCPAvgLatencyFS2(i)
	return
}

func AcmeCallingRTCPAvgLatencyFS2_Set(p *radius.Packet, value AcmeCallingRTCPAvgLatencyFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 106, a)
}

func AcmeCallingRTCPAvgLatencyFS2_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 106)
}

type AcmeCallingRTCPMaxJitterFS2 uint32

var AcmeCallingRTCPMaxJitterFS2_Strings = map[AcmeCallingRTCPMaxJitterFS2]string{}

func (a AcmeCallingRTCPMaxJitterFS2) String() string {
	if str, ok := AcmeCallingRTCPMaxJitterFS2_Strings[a]; ok {
		return str
	}
	return "AcmeCallingRTCPMaxJitterFS2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingRTCPMaxJitterFS2_Add(p *radius.Packet, value AcmeCallingRTCPMaxJitterFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 107, a)
}

func AcmeCallingRTCPMaxJitterFS2_Get(p *radius.Packet) (value AcmeCallingRTCPMaxJitterFS2) {
	value, _ = AcmeCallingRTCPMaxJitterFS2_Lookup(p)
	return
}

func AcmeCallingRTCPMaxJitterFS2_Gets(p *radius.Packet) (values []AcmeCallingRTCPMaxJitterFS2, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 107) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingRTCPMaxJitterFS2(i))
	}
	return
}

func AcmeCallingRTCPMaxJitterFS2_Lookup(p *radius.Packet) (value AcmeCallingRTCPMaxJitterFS2, err error) {
	a, ok := _Acme_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingRTCPMaxJitterFS2(i)
	return
}

func AcmeCallingRTCPMaxJitterFS2_Set(p *radius.Packet, value AcmeCallingRTCPMaxJitterFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 107, a)
}

func AcmeCallingRTCPMaxJitterFS2_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 107)
}

type AcmeCallingRTCPMaxLatencyFS2 uint32

var AcmeCallingRTCPMaxLatencyFS2_Strings = map[AcmeCallingRTCPMaxLatencyFS2]string{}

func (a AcmeCallingRTCPMaxLatencyFS2) String() string {
	if str, ok := AcmeCallingRTCPMaxLatencyFS2_Strings[a]; ok {
		return str
	}
	return "AcmeCallingRTCPMaxLatencyFS2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingRTCPMaxLatencyFS2_Add(p *radius.Packet, value AcmeCallingRTCPMaxLatencyFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 108, a)
}

func AcmeCallingRTCPMaxLatencyFS2_Get(p *radius.Packet) (value AcmeCallingRTCPMaxLatencyFS2) {
	value, _ = AcmeCallingRTCPMaxLatencyFS2_Lookup(p)
	return
}

func AcmeCallingRTCPMaxLatencyFS2_Gets(p *radius.Packet) (values []AcmeCallingRTCPMaxLatencyFS2, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 108) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingRTCPMaxLatencyFS2(i))
	}
	return
}

func AcmeCallingRTCPMaxLatencyFS2_Lookup(p *radius.Packet) (value AcmeCallingRTCPMaxLatencyFS2, err error) {
	a, ok := _Acme_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingRTCPMaxLatencyFS2(i)
	return
}

func AcmeCallingRTCPMaxLatencyFS2_Set(p *radius.Packet, value AcmeCallingRTCPMaxLatencyFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 108, a)
}

func AcmeCallingRTCPMaxLatencyFS2_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 108)
}

type AcmeCallingRTPPacketsLostFS2 uint32

var AcmeCallingRTPPacketsLostFS2_Strings = map[AcmeCallingRTPPacketsLostFS2]string{}

func (a AcmeCallingRTPPacketsLostFS2) String() string {
	if str, ok := AcmeCallingRTPPacketsLostFS2_Strings[a]; ok {
		return str
	}
	return "AcmeCallingRTPPacketsLostFS2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingRTPPacketsLostFS2_Add(p *radius.Packet, value AcmeCallingRTPPacketsLostFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 109, a)
}

func AcmeCallingRTPPacketsLostFS2_Get(p *radius.Packet) (value AcmeCallingRTPPacketsLostFS2) {
	value, _ = AcmeCallingRTPPacketsLostFS2_Lookup(p)
	return
}

func AcmeCallingRTPPacketsLostFS2_Gets(p *radius.Packet) (values []AcmeCallingRTPPacketsLostFS2, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 109) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingRTPPacketsLostFS2(i))
	}
	return
}

func AcmeCallingRTPPacketsLostFS2_Lookup(p *radius.Packet) (value AcmeCallingRTPPacketsLostFS2, err error) {
	a, ok := _Acme_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingRTPPacketsLostFS2(i)
	return
}

func AcmeCallingRTPPacketsLostFS2_Set(p *radius.Packet, value AcmeCallingRTPPacketsLostFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 109, a)
}

func AcmeCallingRTPPacketsLostFS2_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 109)
}

type AcmeCallingRTPAvgJitterFS2 uint32

var AcmeCallingRTPAvgJitterFS2_Strings = map[AcmeCallingRTPAvgJitterFS2]string{}

func (a AcmeCallingRTPAvgJitterFS2) String() string {
	if str, ok := AcmeCallingRTPAvgJitterFS2_Strings[a]; ok {
		return str
	}
	return "AcmeCallingRTPAvgJitterFS2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingRTPAvgJitterFS2_Add(p *radius.Packet, value AcmeCallingRTPAvgJitterFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 110, a)
}

func AcmeCallingRTPAvgJitterFS2_Get(p *radius.Packet) (value AcmeCallingRTPAvgJitterFS2) {
	value, _ = AcmeCallingRTPAvgJitterFS2_Lookup(p)
	return
}

func AcmeCallingRTPAvgJitterFS2_Gets(p *radius.Packet) (values []AcmeCallingRTPAvgJitterFS2, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 110) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingRTPAvgJitterFS2(i))
	}
	return
}

func AcmeCallingRTPAvgJitterFS2_Lookup(p *radius.Packet) (value AcmeCallingRTPAvgJitterFS2, err error) {
	a, ok := _Acme_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingRTPAvgJitterFS2(i)
	return
}

func AcmeCallingRTPAvgJitterFS2_Set(p *radius.Packet, value AcmeCallingRTPAvgJitterFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 110, a)
}

func AcmeCallingRTPAvgJitterFS2_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 110)
}

type AcmeCallingRTPMaxJitterFS2 uint32

var AcmeCallingRTPMaxJitterFS2_Strings = map[AcmeCallingRTPMaxJitterFS2]string{}

func (a AcmeCallingRTPMaxJitterFS2) String() string {
	if str, ok := AcmeCallingRTPMaxJitterFS2_Strings[a]; ok {
		return str
	}
	return "AcmeCallingRTPMaxJitterFS2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingRTPMaxJitterFS2_Add(p *radius.Packet, value AcmeCallingRTPMaxJitterFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 111, a)
}

func AcmeCallingRTPMaxJitterFS2_Get(p *radius.Packet) (value AcmeCallingRTPMaxJitterFS2) {
	value, _ = AcmeCallingRTPMaxJitterFS2_Lookup(p)
	return
}

func AcmeCallingRTPMaxJitterFS2_Gets(p *radius.Packet) (values []AcmeCallingRTPMaxJitterFS2, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 111) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingRTPMaxJitterFS2(i))
	}
	return
}

func AcmeCallingRTPMaxJitterFS2_Lookup(p *radius.Packet) (value AcmeCallingRTPMaxJitterFS2, err error) {
	a, ok := _Acme_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingRTPMaxJitterFS2(i)
	return
}

func AcmeCallingRTPMaxJitterFS2_Set(p *radius.Packet, value AcmeCallingRTPMaxJitterFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 111, a)
}

func AcmeCallingRTPMaxJitterFS2_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 111)
}

func AcmeFlowIDFS2R_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 112, a)
}

func AcmeFlowIDFS2R_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 112, a)
}

func AcmeFlowIDFS2R_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeFlowIDFS2R_Lookup(p)
	return
}

func AcmeFlowIDFS2R_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeFlowIDFS2R_LookupString(p)
	return
}

func AcmeFlowIDFS2R_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 112) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowIDFS2R_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 112) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowIDFS2R_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeFlowIDFS2R_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeFlowIDFS2R_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 112, a)
}

func AcmeFlowIDFS2R_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 112, a)
}

func AcmeFlowIDFS2R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 112)
}

func AcmeFlowTypeFS2R_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 113, a)
}

func AcmeFlowTypeFS2R_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 113, a)
}

func AcmeFlowTypeFS2R_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeFlowTypeFS2R_Lookup(p)
	return
}

func AcmeFlowTypeFS2R_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeFlowTypeFS2R_LookupString(p)
	return
}

func AcmeFlowTypeFS2R_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 113) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowTypeFS2R_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 113) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowTypeFS2R_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeFlowTypeFS2R_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeFlowTypeFS2R_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 113, a)
}

func AcmeFlowTypeFS2R_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 113, a)
}

func AcmeFlowTypeFS2R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 113)
}

func AcmeFlowInRealmFS2R_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 114, a)
}

func AcmeFlowInRealmFS2R_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 114, a)
}

func AcmeFlowInRealmFS2R_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeFlowInRealmFS2R_Lookup(p)
	return
}

func AcmeFlowInRealmFS2R_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeFlowInRealmFS2R_LookupString(p)
	return
}

func AcmeFlowInRealmFS2R_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 114) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInRealmFS2R_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 114) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInRealmFS2R_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeFlowInRealmFS2R_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeFlowInRealmFS2R_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 114, a)
}

func AcmeFlowInRealmFS2R_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 114, a)
}

func AcmeFlowInRealmFS2R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 114)
}

func AcmeFlowInSrcAddrFS2R_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 115, a)
}

func AcmeFlowInSrcAddrFS2R_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowInSrcAddrFS2R_Lookup(p)
	return
}

func AcmeFlowInSrcAddrFS2R_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 115) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInSrcAddrFS2R_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 115)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AcmeFlowInSrcAddrFS2R_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 115, a)
}

func AcmeFlowInSrcAddrFS2R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 115)
}

type AcmeFlowInSrcPortFS2R uint32

var AcmeFlowInSrcPortFS2R_Strings = map[AcmeFlowInSrcPortFS2R]string{}

func (a AcmeFlowInSrcPortFS2R) String() string {
	if str, ok := AcmeFlowInSrcPortFS2R_Strings[a]; ok {
		return str
	}
	return "AcmeFlowInSrcPortFS2R(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeFlowInSrcPortFS2R_Add(p *radius.Packet, value AcmeFlowInSrcPortFS2R) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 116, a)
}

func AcmeFlowInSrcPortFS2R_Get(p *radius.Packet) (value AcmeFlowInSrcPortFS2R) {
	value, _ = AcmeFlowInSrcPortFS2R_Lookup(p)
	return
}

func AcmeFlowInSrcPortFS2R_Gets(p *radius.Packet) (values []AcmeFlowInSrcPortFS2R, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 116) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeFlowInSrcPortFS2R(i))
	}
	return
}

func AcmeFlowInSrcPortFS2R_Lookup(p *radius.Packet) (value AcmeFlowInSrcPortFS2R, err error) {
	a, ok := _Acme_LookupVendor(p, 116)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeFlowInSrcPortFS2R(i)
	return
}

func AcmeFlowInSrcPortFS2R_Set(p *radius.Packet, value AcmeFlowInSrcPortFS2R) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 116, a)
}

func AcmeFlowInSrcPortFS2R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 116)
}

func AcmeFlowInDstAddrFS2R_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 117, a)
}

func AcmeFlowInDstAddrFS2R_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowInDstAddrFS2R_Lookup(p)
	return
}

func AcmeFlowInDstAddrFS2R_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 117) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInDstAddrFS2R_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 117)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AcmeFlowInDstAddrFS2R_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 117, a)
}

func AcmeFlowInDstAddrFS2R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 117)
}

type AcmeFlowInDstPortFS2R uint32

var AcmeFlowInDstPortFS2R_Strings = map[AcmeFlowInDstPortFS2R]string{}

func (a AcmeFlowInDstPortFS2R) String() string {
	if str, ok := AcmeFlowInDstPortFS2R_Strings[a]; ok {
		return str
	}
	return "AcmeFlowInDstPortFS2R(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeFlowInDstPortFS2R_Add(p *radius.Packet, value AcmeFlowInDstPortFS2R) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 118, a)
}

func AcmeFlowInDstPortFS2R_Get(p *radius.Packet) (value AcmeFlowInDstPortFS2R) {
	value, _ = AcmeFlowInDstPortFS2R_Lookup(p)
	return
}

func AcmeFlowInDstPortFS2R_Gets(p *radius.Packet) (values []AcmeFlowInDstPortFS2R, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 118) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeFlowInDstPortFS2R(i))
	}
	return
}

func AcmeFlowInDstPortFS2R_Lookup(p *radius.Packet) (value AcmeFlowInDstPortFS2R, err error) {
	a, ok := _Acme_LookupVendor(p, 118)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeFlowInDstPortFS2R(i)
	return
}

func AcmeFlowInDstPortFS2R_Set(p *radius.Packet, value AcmeFlowInDstPortFS2R) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 118, a)
}

func AcmeFlowInDstPortFS2R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 118)
}

func AcmeFlowOutRealmFS2R_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 119, a)
}

func AcmeFlowOutRealmFS2R_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 119, a)
}

func AcmeFlowOutRealmFS2R_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeFlowOutRealmFS2R_Lookup(p)
	return
}

func AcmeFlowOutRealmFS2R_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeFlowOutRealmFS2R_LookupString(p)
	return
}

func AcmeFlowOutRealmFS2R_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 119) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutRealmFS2R_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 119) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutRealmFS2R_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 119)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeFlowOutRealmFS2R_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 119)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeFlowOutRealmFS2R_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 119, a)
}

func AcmeFlowOutRealmFS2R_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 119, a)
}

func AcmeFlowOutRealmFS2R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 119)
}

func AcmeFlowOutSrcAddrFS2R_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 120, a)
}

func AcmeFlowOutSrcAddrFS2R_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowOutSrcAddrFS2R_Lookup(p)
	return
}

func AcmeFlowOutSrcAddrFS2R_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 120) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutSrcAddrFS2R_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 120)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AcmeFlowOutSrcAddrFS2R_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 120, a)
}

func AcmeFlowOutSrcAddrFS2R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 120)
}

type AcmeFlowOutSrcPortFS2R uint32

var AcmeFlowOutSrcPortFS2R_Strings = map[AcmeFlowOutSrcPortFS2R]string{}

func (a AcmeFlowOutSrcPortFS2R) String() string {
	if str, ok := AcmeFlowOutSrcPortFS2R_Strings[a]; ok {
		return str
	}
	return "AcmeFlowOutSrcPortFS2R(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeFlowOutSrcPortFS2R_Add(p *radius.Packet, value AcmeFlowOutSrcPortFS2R) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 121, a)
}

func AcmeFlowOutSrcPortFS2R_Get(p *radius.Packet) (value AcmeFlowOutSrcPortFS2R) {
	value, _ = AcmeFlowOutSrcPortFS2R_Lookup(p)
	return
}

func AcmeFlowOutSrcPortFS2R_Gets(p *radius.Packet) (values []AcmeFlowOutSrcPortFS2R, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 121) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeFlowOutSrcPortFS2R(i))
	}
	return
}

func AcmeFlowOutSrcPortFS2R_Lookup(p *radius.Packet) (value AcmeFlowOutSrcPortFS2R, err error) {
	a, ok := _Acme_LookupVendor(p, 121)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeFlowOutSrcPortFS2R(i)
	return
}

func AcmeFlowOutSrcPortFS2R_Set(p *radius.Packet, value AcmeFlowOutSrcPortFS2R) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 121, a)
}

func AcmeFlowOutSrcPortFS2R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 121)
}

func AcmeFlowOutDstAddrFS2R_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 122, a)
}

func AcmeFlowOutDstAddrFS2R_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowOutDstAddrFS2R_Lookup(p)
	return
}

func AcmeFlowOutDstAddrFS2R_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 122) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutDstAddrFS2R_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 122)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AcmeFlowOutDstAddrFS2R_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 122, a)
}

func AcmeFlowOutDstAddrFS2R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 122)
}

type AcmeFlowOutDstPortFS2R uint32

var AcmeFlowOutDstPortFS2R_Strings = map[AcmeFlowOutDstPortFS2R]string{}

func (a AcmeFlowOutDstPortFS2R) String() string {
	if str, ok := AcmeFlowOutDstPortFS2R_Strings[a]; ok {
		return str
	}
	return "AcmeFlowOutDstPortFS2R(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeFlowOutDstPortFS2R_Add(p *radius.Packet, value AcmeFlowOutDstPortFS2R) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 123, a)
}

func AcmeFlowOutDstPortFS2R_Get(p *radius.Packet) (value AcmeFlowOutDstPortFS2R) {
	value, _ = AcmeFlowOutDstPortFS2R_Lookup(p)
	return
}

func AcmeFlowOutDstPortFS2R_Gets(p *radius.Packet) (values []AcmeFlowOutDstPortFS2R, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 123) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeFlowOutDstPortFS2R(i))
	}
	return
}

func AcmeFlowOutDstPortFS2R_Lookup(p *radius.Packet) (value AcmeFlowOutDstPortFS2R, err error) {
	a, ok := _Acme_LookupVendor(p, 123)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeFlowOutDstPortFS2R(i)
	return
}

func AcmeFlowOutDstPortFS2R_Set(p *radius.Packet, value AcmeFlowOutDstPortFS2R) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 123, a)
}

func AcmeFlowOutDstPortFS2R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 123)
}

type AcmeCalledOctetsFS2 uint32

var AcmeCalledOctetsFS2_Strings = map[AcmeCalledOctetsFS2]string{}

func (a AcmeCalledOctetsFS2) String() string {
	if str, ok := AcmeCalledOctetsFS2_Strings[a]; ok {
		return str
	}
	return "AcmeCalledOctetsFS2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledOctetsFS2_Add(p *radius.Packet, value AcmeCalledOctetsFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 124, a)
}

func AcmeCalledOctetsFS2_Get(p *radius.Packet) (value AcmeCalledOctetsFS2) {
	value, _ = AcmeCalledOctetsFS2_Lookup(p)
	return
}

func AcmeCalledOctetsFS2_Gets(p *radius.Packet) (values []AcmeCalledOctetsFS2, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 124) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledOctetsFS2(i))
	}
	return
}

func AcmeCalledOctetsFS2_Lookup(p *radius.Packet) (value AcmeCalledOctetsFS2, err error) {
	a, ok := _Acme_LookupVendor(p, 124)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledOctetsFS2(i)
	return
}

func AcmeCalledOctetsFS2_Set(p *radius.Packet, value AcmeCalledOctetsFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 124, a)
}

func AcmeCalledOctetsFS2_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 124)
}

type AcmeCalledPacketsFS2 uint32

var AcmeCalledPacketsFS2_Strings = map[AcmeCalledPacketsFS2]string{}

func (a AcmeCalledPacketsFS2) String() string {
	if str, ok := AcmeCalledPacketsFS2_Strings[a]; ok {
		return str
	}
	return "AcmeCalledPacketsFS2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledPacketsFS2_Add(p *radius.Packet, value AcmeCalledPacketsFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 125, a)
}

func AcmeCalledPacketsFS2_Get(p *radius.Packet) (value AcmeCalledPacketsFS2) {
	value, _ = AcmeCalledPacketsFS2_Lookup(p)
	return
}

func AcmeCalledPacketsFS2_Gets(p *radius.Packet) (values []AcmeCalledPacketsFS2, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 125) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledPacketsFS2(i))
	}
	return
}

func AcmeCalledPacketsFS2_Lookup(p *radius.Packet) (value AcmeCalledPacketsFS2, err error) {
	a, ok := _Acme_LookupVendor(p, 125)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledPacketsFS2(i)
	return
}

func AcmeCalledPacketsFS2_Set(p *radius.Packet, value AcmeCalledPacketsFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 125, a)
}

func AcmeCalledPacketsFS2_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 125)
}

type AcmeCalledRTCPPacketsLostFS2 uint32

var AcmeCalledRTCPPacketsLostFS2_Strings = map[AcmeCalledRTCPPacketsLostFS2]string{}

func (a AcmeCalledRTCPPacketsLostFS2) String() string {
	if str, ok := AcmeCalledRTCPPacketsLostFS2_Strings[a]; ok {
		return str
	}
	return "AcmeCalledRTCPPacketsLostFS2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledRTCPPacketsLostFS2_Add(p *radius.Packet, value AcmeCalledRTCPPacketsLostFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 126, a)
}

func AcmeCalledRTCPPacketsLostFS2_Get(p *radius.Packet) (value AcmeCalledRTCPPacketsLostFS2) {
	value, _ = AcmeCalledRTCPPacketsLostFS2_Lookup(p)
	return
}

func AcmeCalledRTCPPacketsLostFS2_Gets(p *radius.Packet) (values []AcmeCalledRTCPPacketsLostFS2, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 126) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledRTCPPacketsLostFS2(i))
	}
	return
}

func AcmeCalledRTCPPacketsLostFS2_Lookup(p *radius.Packet) (value AcmeCalledRTCPPacketsLostFS2, err error) {
	a, ok := _Acme_LookupVendor(p, 126)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledRTCPPacketsLostFS2(i)
	return
}

func AcmeCalledRTCPPacketsLostFS2_Set(p *radius.Packet, value AcmeCalledRTCPPacketsLostFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 126, a)
}

func AcmeCalledRTCPPacketsLostFS2_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 126)
}

type AcmeCalledRTCPAvgJitterFS2 uint32

var AcmeCalledRTCPAvgJitterFS2_Strings = map[AcmeCalledRTCPAvgJitterFS2]string{}

func (a AcmeCalledRTCPAvgJitterFS2) String() string {
	if str, ok := AcmeCalledRTCPAvgJitterFS2_Strings[a]; ok {
		return str
	}
	return "AcmeCalledRTCPAvgJitterFS2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledRTCPAvgJitterFS2_Add(p *radius.Packet, value AcmeCalledRTCPAvgJitterFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 127, a)
}

func AcmeCalledRTCPAvgJitterFS2_Get(p *radius.Packet) (value AcmeCalledRTCPAvgJitterFS2) {
	value, _ = AcmeCalledRTCPAvgJitterFS2_Lookup(p)
	return
}

func AcmeCalledRTCPAvgJitterFS2_Gets(p *radius.Packet) (values []AcmeCalledRTCPAvgJitterFS2, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 127) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledRTCPAvgJitterFS2(i))
	}
	return
}

func AcmeCalledRTCPAvgJitterFS2_Lookup(p *radius.Packet) (value AcmeCalledRTCPAvgJitterFS2, err error) {
	a, ok := _Acme_LookupVendor(p, 127)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledRTCPAvgJitterFS2(i)
	return
}

func AcmeCalledRTCPAvgJitterFS2_Set(p *radius.Packet, value AcmeCalledRTCPAvgJitterFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 127, a)
}

func AcmeCalledRTCPAvgJitterFS2_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 127)
}

type AcmeCalledRTCPAvgLatencyFS2 uint32

var AcmeCalledRTCPAvgLatencyFS2_Strings = map[AcmeCalledRTCPAvgLatencyFS2]string{}

func (a AcmeCalledRTCPAvgLatencyFS2) String() string {
	if str, ok := AcmeCalledRTCPAvgLatencyFS2_Strings[a]; ok {
		return str
	}
	return "AcmeCalledRTCPAvgLatencyFS2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledRTCPAvgLatencyFS2_Add(p *radius.Packet, value AcmeCalledRTCPAvgLatencyFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 128, a)
}

func AcmeCalledRTCPAvgLatencyFS2_Get(p *radius.Packet) (value AcmeCalledRTCPAvgLatencyFS2) {
	value, _ = AcmeCalledRTCPAvgLatencyFS2_Lookup(p)
	return
}

func AcmeCalledRTCPAvgLatencyFS2_Gets(p *radius.Packet) (values []AcmeCalledRTCPAvgLatencyFS2, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 128) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledRTCPAvgLatencyFS2(i))
	}
	return
}

func AcmeCalledRTCPAvgLatencyFS2_Lookup(p *radius.Packet) (value AcmeCalledRTCPAvgLatencyFS2, err error) {
	a, ok := _Acme_LookupVendor(p, 128)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledRTCPAvgLatencyFS2(i)
	return
}

func AcmeCalledRTCPAvgLatencyFS2_Set(p *radius.Packet, value AcmeCalledRTCPAvgLatencyFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 128, a)
}

func AcmeCalledRTCPAvgLatencyFS2_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 128)
}

type AcmeCalledRTCPMaxJitterFS2 uint32

var AcmeCalledRTCPMaxJitterFS2_Strings = map[AcmeCalledRTCPMaxJitterFS2]string{}

func (a AcmeCalledRTCPMaxJitterFS2) String() string {
	if str, ok := AcmeCalledRTCPMaxJitterFS2_Strings[a]; ok {
		return str
	}
	return "AcmeCalledRTCPMaxJitterFS2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledRTCPMaxJitterFS2_Add(p *radius.Packet, value AcmeCalledRTCPMaxJitterFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 129, a)
}

func AcmeCalledRTCPMaxJitterFS2_Get(p *radius.Packet) (value AcmeCalledRTCPMaxJitterFS2) {
	value, _ = AcmeCalledRTCPMaxJitterFS2_Lookup(p)
	return
}

func AcmeCalledRTCPMaxJitterFS2_Gets(p *radius.Packet) (values []AcmeCalledRTCPMaxJitterFS2, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 129) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledRTCPMaxJitterFS2(i))
	}
	return
}

func AcmeCalledRTCPMaxJitterFS2_Lookup(p *radius.Packet) (value AcmeCalledRTCPMaxJitterFS2, err error) {
	a, ok := _Acme_LookupVendor(p, 129)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledRTCPMaxJitterFS2(i)
	return
}

func AcmeCalledRTCPMaxJitterFS2_Set(p *radius.Packet, value AcmeCalledRTCPMaxJitterFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 129, a)
}

func AcmeCalledRTCPMaxJitterFS2_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 129)
}

type AcmeCalledRTCPMaxLatencyFS2 uint32

var AcmeCalledRTCPMaxLatencyFS2_Strings = map[AcmeCalledRTCPMaxLatencyFS2]string{}

func (a AcmeCalledRTCPMaxLatencyFS2) String() string {
	if str, ok := AcmeCalledRTCPMaxLatencyFS2_Strings[a]; ok {
		return str
	}
	return "AcmeCalledRTCPMaxLatencyFS2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledRTCPMaxLatencyFS2_Add(p *radius.Packet, value AcmeCalledRTCPMaxLatencyFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 130, a)
}

func AcmeCalledRTCPMaxLatencyFS2_Get(p *radius.Packet) (value AcmeCalledRTCPMaxLatencyFS2) {
	value, _ = AcmeCalledRTCPMaxLatencyFS2_Lookup(p)
	return
}

func AcmeCalledRTCPMaxLatencyFS2_Gets(p *radius.Packet) (values []AcmeCalledRTCPMaxLatencyFS2, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 130) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledRTCPMaxLatencyFS2(i))
	}
	return
}

func AcmeCalledRTCPMaxLatencyFS2_Lookup(p *radius.Packet) (value AcmeCalledRTCPMaxLatencyFS2, err error) {
	a, ok := _Acme_LookupVendor(p, 130)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledRTCPMaxLatencyFS2(i)
	return
}

func AcmeCalledRTCPMaxLatencyFS2_Set(p *radius.Packet, value AcmeCalledRTCPMaxLatencyFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 130, a)
}

func AcmeCalledRTCPMaxLatencyFS2_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 130)
}

type AcmeCalledRTPPacketsLostFS2 uint32

var AcmeCalledRTPPacketsLostFS2_Strings = map[AcmeCalledRTPPacketsLostFS2]string{}

func (a AcmeCalledRTPPacketsLostFS2) String() string {
	if str, ok := AcmeCalledRTPPacketsLostFS2_Strings[a]; ok {
		return str
	}
	return "AcmeCalledRTPPacketsLostFS2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledRTPPacketsLostFS2_Add(p *radius.Packet, value AcmeCalledRTPPacketsLostFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 131, a)
}

func AcmeCalledRTPPacketsLostFS2_Get(p *radius.Packet) (value AcmeCalledRTPPacketsLostFS2) {
	value, _ = AcmeCalledRTPPacketsLostFS2_Lookup(p)
	return
}

func AcmeCalledRTPPacketsLostFS2_Gets(p *radius.Packet) (values []AcmeCalledRTPPacketsLostFS2, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 131) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledRTPPacketsLostFS2(i))
	}
	return
}

func AcmeCalledRTPPacketsLostFS2_Lookup(p *radius.Packet) (value AcmeCalledRTPPacketsLostFS2, err error) {
	a, ok := _Acme_LookupVendor(p, 131)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledRTPPacketsLostFS2(i)
	return
}

func AcmeCalledRTPPacketsLostFS2_Set(p *radius.Packet, value AcmeCalledRTPPacketsLostFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 131, a)
}

func AcmeCalledRTPPacketsLostFS2_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 131)
}

type AcmeCalledRTPAvgJitterFS2 uint32

var AcmeCalledRTPAvgJitterFS2_Strings = map[AcmeCalledRTPAvgJitterFS2]string{}

func (a AcmeCalledRTPAvgJitterFS2) String() string {
	if str, ok := AcmeCalledRTPAvgJitterFS2_Strings[a]; ok {
		return str
	}
	return "AcmeCalledRTPAvgJitterFS2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledRTPAvgJitterFS2_Add(p *radius.Packet, value AcmeCalledRTPAvgJitterFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 132, a)
}

func AcmeCalledRTPAvgJitterFS2_Get(p *radius.Packet) (value AcmeCalledRTPAvgJitterFS2) {
	value, _ = AcmeCalledRTPAvgJitterFS2_Lookup(p)
	return
}

func AcmeCalledRTPAvgJitterFS2_Gets(p *radius.Packet) (values []AcmeCalledRTPAvgJitterFS2, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 132) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledRTPAvgJitterFS2(i))
	}
	return
}

func AcmeCalledRTPAvgJitterFS2_Lookup(p *radius.Packet) (value AcmeCalledRTPAvgJitterFS2, err error) {
	a, ok := _Acme_LookupVendor(p, 132)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledRTPAvgJitterFS2(i)
	return
}

func AcmeCalledRTPAvgJitterFS2_Set(p *radius.Packet, value AcmeCalledRTPAvgJitterFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 132, a)
}

func AcmeCalledRTPAvgJitterFS2_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 132)
}

type AcmeCalledRTPMaxJitterFS2 uint32

var AcmeCalledRTPMaxJitterFS2_Strings = map[AcmeCalledRTPMaxJitterFS2]string{}

func (a AcmeCalledRTPMaxJitterFS2) String() string {
	if str, ok := AcmeCalledRTPMaxJitterFS2_Strings[a]; ok {
		return str
	}
	return "AcmeCalledRTPMaxJitterFS2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledRTPMaxJitterFS2_Add(p *radius.Packet, value AcmeCalledRTPMaxJitterFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 133, a)
}

func AcmeCalledRTPMaxJitterFS2_Get(p *radius.Packet) (value AcmeCalledRTPMaxJitterFS2) {
	value, _ = AcmeCalledRTPMaxJitterFS2_Lookup(p)
	return
}

func AcmeCalledRTPMaxJitterFS2_Gets(p *radius.Packet) (values []AcmeCalledRTPMaxJitterFS2, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 133) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledRTPMaxJitterFS2(i))
	}
	return
}

func AcmeCalledRTPMaxJitterFS2_Lookup(p *radius.Packet) (value AcmeCalledRTPMaxJitterFS2, err error) {
	a, ok := _Acme_LookupVendor(p, 133)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledRTPMaxJitterFS2(i)
	return
}

func AcmeCalledRTPMaxJitterFS2_Set(p *radius.Packet, value AcmeCalledRTPMaxJitterFS2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 133, a)
}

func AcmeCalledRTPMaxJitterFS2_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 133)
}

func AcmeEgressFinalRoutingNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 134, a)
}

func AcmeEgressFinalRoutingNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 134, a)
}

func AcmeEgressFinalRoutingNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeEgressFinalRoutingNumber_Lookup(p)
	return
}

func AcmeEgressFinalRoutingNumber_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeEgressFinalRoutingNumber_LookupString(p)
	return
}

func AcmeEgressFinalRoutingNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 134) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeEgressFinalRoutingNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 134) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeEgressFinalRoutingNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 134)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeEgressFinalRoutingNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 134)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeEgressFinalRoutingNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 134, a)
}

func AcmeEgressFinalRoutingNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 134, a)
}

func AcmeEgressFinalRoutingNumber_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 134)
}

func AcmeSessionIngressRPH_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 135, a)
}

func AcmeSessionIngressRPH_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 135, a)
}

func AcmeSessionIngressRPH_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeSessionIngressRPH_Lookup(p)
	return
}

func AcmeSessionIngressRPH_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeSessionIngressRPH_LookupString(p)
	return
}

func AcmeSessionIngressRPH_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 135) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionIngressRPH_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 135) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionIngressRPH_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 135)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeSessionIngressRPH_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 135)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeSessionIngressRPH_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 135, a)
}

func AcmeSessionIngressRPH_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 135, a)
}

func AcmeSessionIngressRPH_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 135)
}

func AcmeSessionEgressRPH_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 136, a)
}

func AcmeSessionEgressRPH_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 136, a)
}

func AcmeSessionEgressRPH_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeSessionEgressRPH_Lookup(p)
	return
}

func AcmeSessionEgressRPH_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeSessionEgressRPH_LookupString(p)
	return
}

func AcmeSessionEgressRPH_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 136) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionEgressRPH_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 136) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionEgressRPH_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 136)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeSessionEgressRPH_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 136)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeSessionEgressRPH_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 136, a)
}

func AcmeSessionEgressRPH_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 136, a)
}

func AcmeSessionEgressRPH_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 136)
}

func AcmeIngressNetworkInterfaceID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 137, a)
}

func AcmeIngressNetworkInterfaceID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 137, a)
}

func AcmeIngressNetworkInterfaceID_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeIngressNetworkInterfaceID_Lookup(p)
	return
}

func AcmeIngressNetworkInterfaceID_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeIngressNetworkInterfaceID_LookupString(p)
	return
}

func AcmeIngressNetworkInterfaceID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 137) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeIngressNetworkInterfaceID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 137) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeIngressNetworkInterfaceID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 137)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeIngressNetworkInterfaceID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 137)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeIngressNetworkInterfaceID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 137, a)
}

func AcmeIngressNetworkInterfaceID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 137, a)
}

func AcmeIngressNetworkInterfaceID_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 137)
}

type AcmeIngressVlanTagValue uint32

var AcmeIngressVlanTagValue_Strings = map[AcmeIngressVlanTagValue]string{}

func (a AcmeIngressVlanTagValue) String() string {
	if str, ok := AcmeIngressVlanTagValue_Strings[a]; ok {
		return str
	}
	return "AcmeIngressVlanTagValue(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeIngressVlanTagValue_Add(p *radius.Packet, value AcmeIngressVlanTagValue) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 138, a)
}

func AcmeIngressVlanTagValue_Get(p *radius.Packet) (value AcmeIngressVlanTagValue) {
	value, _ = AcmeIngressVlanTagValue_Lookup(p)
	return
}

func AcmeIngressVlanTagValue_Gets(p *radius.Packet) (values []AcmeIngressVlanTagValue, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 138) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeIngressVlanTagValue(i))
	}
	return
}

func AcmeIngressVlanTagValue_Lookup(p *radius.Packet) (value AcmeIngressVlanTagValue, err error) {
	a, ok := _Acme_LookupVendor(p, 138)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeIngressVlanTagValue(i)
	return
}

func AcmeIngressVlanTagValue_Set(p *radius.Packet, value AcmeIngressVlanTagValue) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 138, a)
}

func AcmeIngressVlanTagValue_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 138)
}

func AcmeEgressNetworkInterfaceID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 139, a)
}

func AcmeEgressNetworkInterfaceID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 139, a)
}

func AcmeEgressNetworkInterfaceID_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeEgressNetworkInterfaceID_Lookup(p)
	return
}

func AcmeEgressNetworkInterfaceID_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeEgressNetworkInterfaceID_LookupString(p)
	return
}

func AcmeEgressNetworkInterfaceID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 139) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeEgressNetworkInterfaceID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 139) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeEgressNetworkInterfaceID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 139)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeEgressNetworkInterfaceID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 139)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeEgressNetworkInterfaceID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 139, a)
}

func AcmeEgressNetworkInterfaceID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 139, a)
}

func AcmeEgressNetworkInterfaceID_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 139)
}

type AcmeEgressVlanTagValue uint32

var AcmeEgressVlanTagValue_Strings = map[AcmeEgressVlanTagValue]string{}

func (a AcmeEgressVlanTagValue) String() string {
	if str, ok := AcmeEgressVlanTagValue_Strings[a]; ok {
		return str
	}
	return "AcmeEgressVlanTagValue(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeEgressVlanTagValue_Add(p *radius.Packet, value AcmeEgressVlanTagValue) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 140, a)
}

func AcmeEgressVlanTagValue_Get(p *radius.Packet) (value AcmeEgressVlanTagValue) {
	value, _ = AcmeEgressVlanTagValue_Lookup(p)
	return
}

func AcmeEgressVlanTagValue_Gets(p *radius.Packet) (values []AcmeEgressVlanTagValue, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 140) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeEgressVlanTagValue(i))
	}
	return
}

func AcmeEgressVlanTagValue_Lookup(p *radius.Packet) (value AcmeEgressVlanTagValue, err error) {
	a, ok := _Acme_LookupVendor(p, 140)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeEgressVlanTagValue(i)
	return
}

func AcmeEgressVlanTagValue_Set(p *radius.Packet, value AcmeEgressVlanTagValue) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 140, a)
}

func AcmeEgressVlanTagValue_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 140)
}

func AcmeReferCallTransferID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 141, a)
}

func AcmeReferCallTransferID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 141, a)
}

func AcmeReferCallTransferID_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeReferCallTransferID_Lookup(p)
	return
}

func AcmeReferCallTransferID_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeReferCallTransferID_LookupString(p)
	return
}

func AcmeReferCallTransferID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 141) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeReferCallTransferID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 141) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeReferCallTransferID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeReferCallTransferID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeReferCallTransferID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 141, a)
}

func AcmeReferCallTransferID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 141, a)
}

func AcmeReferCallTransferID_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 141)
}

func AcmeFlowMediaTypeFS1F_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 142, a)
}

func AcmeFlowMediaTypeFS1F_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 142, a)
}

func AcmeFlowMediaTypeFS1F_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeFlowMediaTypeFS1F_Lookup(p)
	return
}

func AcmeFlowMediaTypeFS1F_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeFlowMediaTypeFS1F_LookupString(p)
	return
}

func AcmeFlowMediaTypeFS1F_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 142) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowMediaTypeFS1F_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 142) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowMediaTypeFS1F_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 142)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeFlowMediaTypeFS1F_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 142)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeFlowMediaTypeFS1F_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 142, a)
}

func AcmeFlowMediaTypeFS1F_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 142, a)
}

func AcmeFlowMediaTypeFS1F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 142)
}

func AcmeFlowMediaTypeFS1R_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 143, a)
}

func AcmeFlowMediaTypeFS1R_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 143, a)
}

func AcmeFlowMediaTypeFS1R_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeFlowMediaTypeFS1R_Lookup(p)
	return
}

func AcmeFlowMediaTypeFS1R_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeFlowMediaTypeFS1R_LookupString(p)
	return
}

func AcmeFlowMediaTypeFS1R_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 143) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowMediaTypeFS1R_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 143) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowMediaTypeFS1R_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 143)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeFlowMediaTypeFS1R_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 143)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeFlowMediaTypeFS1R_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 143, a)
}

func AcmeFlowMediaTypeFS1R_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 143, a)
}

func AcmeFlowMediaTypeFS1R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 143)
}

func AcmeFlowMediaTypeFS2F_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 144, a)
}

func AcmeFlowMediaTypeFS2F_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 144, a)
}

func AcmeFlowMediaTypeFS2F_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeFlowMediaTypeFS2F_Lookup(p)
	return
}

func AcmeFlowMediaTypeFS2F_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeFlowMediaTypeFS2F_LookupString(p)
	return
}

func AcmeFlowMediaTypeFS2F_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 144) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowMediaTypeFS2F_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 144) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowMediaTypeFS2F_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 144)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeFlowMediaTypeFS2F_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 144)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeFlowMediaTypeFS2F_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 144, a)
}

func AcmeFlowMediaTypeFS2F_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 144, a)
}

func AcmeFlowMediaTypeFS2F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 144)
}

func AcmeFlowMediaTypeFS2R_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 145, a)
}

func AcmeFlowMediaTypeFS2R_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 145, a)
}

func AcmeFlowMediaTypeFS2R_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeFlowMediaTypeFS2R_Lookup(p)
	return
}

func AcmeFlowMediaTypeFS2R_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeFlowMediaTypeFS2R_LookupString(p)
	return
}

func AcmeFlowMediaTypeFS2R_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 145) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowMediaTypeFS2R_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 145) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowMediaTypeFS2R_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 145)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeFlowMediaTypeFS2R_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 145)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeFlowMediaTypeFS2R_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 145, a)
}

func AcmeFlowMediaTypeFS2R_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 145, a)
}

func AcmeFlowMediaTypeFS2R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 145)
}

type AcmeFlowPTimeFS1F uint32

var AcmeFlowPTimeFS1F_Strings = map[AcmeFlowPTimeFS1F]string{}

func (a AcmeFlowPTimeFS1F) String() string {
	if str, ok := AcmeFlowPTimeFS1F_Strings[a]; ok {
		return str
	}
	return "AcmeFlowPTimeFS1F(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeFlowPTimeFS1F_Add(p *radius.Packet, value AcmeFlowPTimeFS1F) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 146, a)
}

func AcmeFlowPTimeFS1F_Get(p *radius.Packet) (value AcmeFlowPTimeFS1F) {
	value, _ = AcmeFlowPTimeFS1F_Lookup(p)
	return
}

func AcmeFlowPTimeFS1F_Gets(p *radius.Packet) (values []AcmeFlowPTimeFS1F, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 146) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeFlowPTimeFS1F(i))
	}
	return
}

func AcmeFlowPTimeFS1F_Lookup(p *radius.Packet) (value AcmeFlowPTimeFS1F, err error) {
	a, ok := _Acme_LookupVendor(p, 146)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeFlowPTimeFS1F(i)
	return
}

func AcmeFlowPTimeFS1F_Set(p *radius.Packet, value AcmeFlowPTimeFS1F) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 146, a)
}

func AcmeFlowPTimeFS1F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 146)
}

type AcmeFlowPTimeFS1R uint32

var AcmeFlowPTimeFS1R_Strings = map[AcmeFlowPTimeFS1R]string{}

func (a AcmeFlowPTimeFS1R) String() string {
	if str, ok := AcmeFlowPTimeFS1R_Strings[a]; ok {
		return str
	}
	return "AcmeFlowPTimeFS1R(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeFlowPTimeFS1R_Add(p *radius.Packet, value AcmeFlowPTimeFS1R) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 147, a)
}

func AcmeFlowPTimeFS1R_Get(p *radius.Packet) (value AcmeFlowPTimeFS1R) {
	value, _ = AcmeFlowPTimeFS1R_Lookup(p)
	return
}

func AcmeFlowPTimeFS1R_Gets(p *radius.Packet) (values []AcmeFlowPTimeFS1R, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 147) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeFlowPTimeFS1R(i))
	}
	return
}

func AcmeFlowPTimeFS1R_Lookup(p *radius.Packet) (value AcmeFlowPTimeFS1R, err error) {
	a, ok := _Acme_LookupVendor(p, 147)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeFlowPTimeFS1R(i)
	return
}

func AcmeFlowPTimeFS1R_Set(p *radius.Packet, value AcmeFlowPTimeFS1R) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 147, a)
}

func AcmeFlowPTimeFS1R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 147)
}

type AcmeFlowPTimeFS2F uint32

var AcmeFlowPTimeFS2F_Strings = map[AcmeFlowPTimeFS2F]string{}

func (a AcmeFlowPTimeFS2F) String() string {
	if str, ok := AcmeFlowPTimeFS2F_Strings[a]; ok {
		return str
	}
	return "AcmeFlowPTimeFS2F(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeFlowPTimeFS2F_Add(p *radius.Packet, value AcmeFlowPTimeFS2F) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 148, a)
}

func AcmeFlowPTimeFS2F_Get(p *radius.Packet) (value AcmeFlowPTimeFS2F) {
	value, _ = AcmeFlowPTimeFS2F_Lookup(p)
	return
}

func AcmeFlowPTimeFS2F_Gets(p *radius.Packet) (values []AcmeFlowPTimeFS2F, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 148) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeFlowPTimeFS2F(i))
	}
	return
}

func AcmeFlowPTimeFS2F_Lookup(p *radius.Packet) (value AcmeFlowPTimeFS2F, err error) {
	a, ok := _Acme_LookupVendor(p, 148)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeFlowPTimeFS2F(i)
	return
}

func AcmeFlowPTimeFS2F_Set(p *radius.Packet, value AcmeFlowPTimeFS2F) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 148, a)
}

func AcmeFlowPTimeFS2F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 148)
}

type AcmeFlowPTimeFS2R uint32

var AcmeFlowPTimeFS2R_Strings = map[AcmeFlowPTimeFS2R]string{}

func (a AcmeFlowPTimeFS2R) String() string {
	if str, ok := AcmeFlowPTimeFS2R_Strings[a]; ok {
		return str
	}
	return "AcmeFlowPTimeFS2R(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeFlowPTimeFS2R_Add(p *radius.Packet, value AcmeFlowPTimeFS2R) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 149, a)
}

func AcmeFlowPTimeFS2R_Get(p *radius.Packet) (value AcmeFlowPTimeFS2R) {
	value, _ = AcmeFlowPTimeFS2R_Lookup(p)
	return
}

func AcmeFlowPTimeFS2R_Gets(p *radius.Packet) (values []AcmeFlowPTimeFS2R, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 149) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeFlowPTimeFS2R(i))
	}
	return
}

func AcmeFlowPTimeFS2R_Lookup(p *radius.Packet) (value AcmeFlowPTimeFS2R, err error) {
	a, ok := _Acme_LookupVendor(p, 149)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeFlowPTimeFS2R(i)
	return
}

func AcmeFlowPTimeFS2R_Set(p *radius.Packet, value AcmeFlowPTimeFS2R) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 149, a)
}

func AcmeFlowPTimeFS2R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 149)
}

func AcmeSessionMediaProcess_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 150, a)
}

func AcmeSessionMediaProcess_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 150, a)
}

func AcmeSessionMediaProcess_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeSessionMediaProcess_Lookup(p)
	return
}

func AcmeSessionMediaProcess_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeSessionMediaProcess_LookupString(p)
	return
}

func AcmeSessionMediaProcess_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 150) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionMediaProcess_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 150) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionMediaProcess_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 150)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeSessionMediaProcess_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 150)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeSessionMediaProcess_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 150, a)
}

func AcmeSessionMediaProcess_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 150, a)
}

func AcmeSessionMediaProcess_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 150)
}

type AcmeCallingRFactor uint32

var AcmeCallingRFactor_Strings = map[AcmeCallingRFactor]string{}

func (a AcmeCallingRFactor) String() string {
	if str, ok := AcmeCallingRFactor_Strings[a]; ok {
		return str
	}
	return "AcmeCallingRFactor(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingRFactor_Add(p *radius.Packet, value AcmeCallingRFactor) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 151, a)
}

func AcmeCallingRFactor_Get(p *radius.Packet) (value AcmeCallingRFactor) {
	value, _ = AcmeCallingRFactor_Lookup(p)
	return
}

func AcmeCallingRFactor_Gets(p *radius.Packet) (values []AcmeCallingRFactor, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 151) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingRFactor(i))
	}
	return
}

func AcmeCallingRFactor_Lookup(p *radius.Packet) (value AcmeCallingRFactor, err error) {
	a, ok := _Acme_LookupVendor(p, 151)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingRFactor(i)
	return
}

func AcmeCallingRFactor_Set(p *radius.Packet, value AcmeCallingRFactor) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 151, a)
}

func AcmeCallingRFactor_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 151)
}

type AcmeCallingMOS uint32

var AcmeCallingMOS_Strings = map[AcmeCallingMOS]string{}

func (a AcmeCallingMOS) String() string {
	if str, ok := AcmeCallingMOS_Strings[a]; ok {
		return str
	}
	return "AcmeCallingMOS(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCallingMOS_Add(p *radius.Packet, value AcmeCallingMOS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 152, a)
}

func AcmeCallingMOS_Get(p *radius.Packet) (value AcmeCallingMOS) {
	value, _ = AcmeCallingMOS_Lookup(p)
	return
}

func AcmeCallingMOS_Gets(p *radius.Packet) (values []AcmeCallingMOS, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 152) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCallingMOS(i))
	}
	return
}

func AcmeCallingMOS_Lookup(p *radius.Packet) (value AcmeCallingMOS, err error) {
	a, ok := _Acme_LookupVendor(p, 152)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCallingMOS(i)
	return
}

func AcmeCallingMOS_Set(p *radius.Packet, value AcmeCallingMOS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 152, a)
}

func AcmeCallingMOS_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 152)
}

type AcmeCalledRFactor uint32

var AcmeCalledRFactor_Strings = map[AcmeCalledRFactor]string{}

func (a AcmeCalledRFactor) String() string {
	if str, ok := AcmeCalledRFactor_Strings[a]; ok {
		return str
	}
	return "AcmeCalledRFactor(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledRFactor_Add(p *radius.Packet, value AcmeCalledRFactor) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 153, a)
}

func AcmeCalledRFactor_Get(p *radius.Packet) (value AcmeCalledRFactor) {
	value, _ = AcmeCalledRFactor_Lookup(p)
	return
}

func AcmeCalledRFactor_Gets(p *radius.Packet) (values []AcmeCalledRFactor, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 153) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledRFactor(i))
	}
	return
}

func AcmeCalledRFactor_Lookup(p *radius.Packet) (value AcmeCalledRFactor, err error) {
	a, ok := _Acme_LookupVendor(p, 153)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledRFactor(i)
	return
}

func AcmeCalledRFactor_Set(p *radius.Packet, value AcmeCalledRFactor) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 153, a)
}

func AcmeCalledRFactor_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 153)
}

type AcmeCalledMOS uint32

var AcmeCalledMOS_Strings = map[AcmeCalledMOS]string{}

func (a AcmeCalledMOS) String() string {
	if str, ok := AcmeCalledMOS_Strings[a]; ok {
		return str
	}
	return "AcmeCalledMOS(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AcmeCalledMOS_Add(p *radius.Packet, value AcmeCalledMOS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_AddVendor(p, 154, a)
}

func AcmeCalledMOS_Get(p *radius.Packet) (value AcmeCalledMOS) {
	value, _ = AcmeCalledMOS_Lookup(p)
	return
}

func AcmeCalledMOS_Gets(p *radius.Packet) (values []AcmeCalledMOS, err error) {
	var i uint32
	for _, attr := range _Acme_GetsVendor(p, 154) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AcmeCalledMOS(i))
	}
	return
}

func AcmeCalledMOS_Lookup(p *radius.Packet) (value AcmeCalledMOS, err error) {
	a, ok := _Acme_LookupVendor(p, 154)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AcmeCalledMOS(i)
	return
}

func AcmeCalledMOS_Set(p *radius.Packet, value AcmeCalledMOS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Acme_SetVendor(p, 154, a)
}

func AcmeCalledMOS_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 154)
}

func AcmeFlowInSrcIPv6AddrFS1F_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 155, a)
}

func AcmeFlowInSrcIPv6AddrFS1F_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowInSrcIPv6AddrFS1F_Lookup(p)
	return
}

func AcmeFlowInSrcIPv6AddrFS1F_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 155) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInSrcIPv6AddrFS1F_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 155)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func AcmeFlowInSrcIPv6AddrFS1F_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 155, a)
}

func AcmeFlowInSrcIPv6AddrFS1F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 155)
}

func AcmeFlowInDstIPv6AddrFS1F_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 156, a)
}

func AcmeFlowInDstIPv6AddrFS1F_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowInDstIPv6AddrFS1F_Lookup(p)
	return
}

func AcmeFlowInDstIPv6AddrFS1F_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 156) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInDstIPv6AddrFS1F_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 156)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func AcmeFlowInDstIPv6AddrFS1F_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 156, a)
}

func AcmeFlowInDstIPv6AddrFS1F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 156)
}

func AcmeFlowOutSrcIPv6AddrFS1F_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 157, a)
}

func AcmeFlowOutSrcIPv6AddrFS1F_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowOutSrcIPv6AddrFS1F_Lookup(p)
	return
}

func AcmeFlowOutSrcIPv6AddrFS1F_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 157) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutSrcIPv6AddrFS1F_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 157)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func AcmeFlowOutSrcIPv6AddrFS1F_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 157, a)
}

func AcmeFlowOutSrcIPv6AddrFS1F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 157)
}

func AcmeFlowOutDstIPv6AddrFS1F_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 158, a)
}

func AcmeFlowOutDstIPv6AddrFS1F_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowOutDstIPv6AddrFS1F_Lookup(p)
	return
}

func AcmeFlowOutDstIPv6AddrFS1F_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 158) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutDstIPv6AddrFS1F_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 158)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func AcmeFlowOutDstIPv6AddrFS1F_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 158, a)
}

func AcmeFlowOutDstIPv6AddrFS1F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 158)
}

func AcmeFlowInSrcIPv6AddrFS1R_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 159, a)
}

func AcmeFlowInSrcIPv6AddrFS1R_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowInSrcIPv6AddrFS1R_Lookup(p)
	return
}

func AcmeFlowInSrcIPv6AddrFS1R_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 159) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInSrcIPv6AddrFS1R_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 159)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func AcmeFlowInSrcIPv6AddrFS1R_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 159, a)
}

func AcmeFlowInSrcIPv6AddrFS1R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 159)
}

func AcmeFlowInDstIPv6AddrFS1R_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 160, a)
}

func AcmeFlowInDstIPv6AddrFS1R_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowInDstIPv6AddrFS1R_Lookup(p)
	return
}

func AcmeFlowInDstIPv6AddrFS1R_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 160) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInDstIPv6AddrFS1R_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 160)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func AcmeFlowInDstIPv6AddrFS1R_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 160, a)
}

func AcmeFlowInDstIPv6AddrFS1R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 160)
}

func AcmeFlowOutSrcIPv6AddrFS1R_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 161, a)
}

func AcmeFlowOutSrcIPv6AddrFS1R_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowOutSrcIPv6AddrFS1R_Lookup(p)
	return
}

func AcmeFlowOutSrcIPv6AddrFS1R_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 161) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutSrcIPv6AddrFS1R_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 161)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func AcmeFlowOutSrcIPv6AddrFS1R_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 161, a)
}

func AcmeFlowOutSrcIPv6AddrFS1R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 161)
}

func AcmeFlowOutDstIPv6AddrFS1R_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 162, a)
}

func AcmeFlowOutDstIPv6AddrFS1R_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowOutDstIPv6AddrFS1R_Lookup(p)
	return
}

func AcmeFlowOutDstIPv6AddrFS1R_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 162) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutDstIPv6AddrFS1R_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 162)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func AcmeFlowOutDstIPv6AddrFS1R_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 162, a)
}

func AcmeFlowOutDstIPv6AddrFS1R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 162)
}

func AcmeFlowInSrcIPv6AddrFS2F_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 163, a)
}

func AcmeFlowInSrcIPv6AddrFS2F_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowInSrcIPv6AddrFS2F_Lookup(p)
	return
}

func AcmeFlowInSrcIPv6AddrFS2F_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 163) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInSrcIPv6AddrFS2F_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 163)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func AcmeFlowInSrcIPv6AddrFS2F_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 163, a)
}

func AcmeFlowInSrcIPv6AddrFS2F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 163)
}

func AcmeFlowInDstIPv6AddrFS2F_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 164, a)
}

func AcmeFlowInDstIPv6AddrFS2F_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowInDstIPv6AddrFS2F_Lookup(p)
	return
}

func AcmeFlowInDstIPv6AddrFS2F_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 164) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInDstIPv6AddrFS2F_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 164)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func AcmeFlowInDstIPv6AddrFS2F_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 164, a)
}

func AcmeFlowInDstIPv6AddrFS2F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 164)
}

func AcmeFlowOutSrcIPv6AddrFS2F_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 165, a)
}

func AcmeFlowOutSrcIPv6AddrFS2F_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowOutSrcIPv6AddrFS2F_Lookup(p)
	return
}

func AcmeFlowOutSrcIPv6AddrFS2F_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 165) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutSrcIPv6AddrFS2F_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 165)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func AcmeFlowOutSrcIPv6AddrFS2F_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 165, a)
}

func AcmeFlowOutSrcIPv6AddrFS2F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 165)
}

func AcmeFlowOutDstIPv6AddrFS2F_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 166, a)
}

func AcmeFlowOutDstIPv6AddrFS2F_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowOutDstIPv6AddrFS2F_Lookup(p)
	return
}

func AcmeFlowOutDstIPv6AddrFS2F_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 166) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutDstIPv6AddrFS2F_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 166)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func AcmeFlowOutDstIPv6AddrFS2F_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 166, a)
}

func AcmeFlowOutDstIPv6AddrFS2F_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 166)
}

func AcmeFlowInSrcIPv6AddrFS2R_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 167, a)
}

func AcmeFlowInSrcIPv6AddrFS2R_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowInSrcIPv6AddrFS2R_Lookup(p)
	return
}

func AcmeFlowInSrcIPv6AddrFS2R_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 167) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInSrcIPv6AddrFS2R_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 167)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func AcmeFlowInSrcIPv6AddrFS2R_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 167, a)
}

func AcmeFlowInSrcIPv6AddrFS2R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 167)
}

func AcmeFlowInDstIPv6AddrFS2R_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 168, a)
}

func AcmeFlowInDstIPv6AddrFS2R_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowInDstIPv6AddrFS2R_Lookup(p)
	return
}

func AcmeFlowInDstIPv6AddrFS2R_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 168) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowInDstIPv6AddrFS2R_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 168)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func AcmeFlowInDstIPv6AddrFS2R_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 168, a)
}

func AcmeFlowInDstIPv6AddrFS2R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 168)
}

func AcmeFlowOutSrcIPv6AddrFS2R_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 169, a)
}

func AcmeFlowOutSrcIPv6AddrFS2R_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowOutSrcIPv6AddrFS2R_Lookup(p)
	return
}

func AcmeFlowOutSrcIPv6AddrFS2R_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 169) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutSrcIPv6AddrFS2R_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 169)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func AcmeFlowOutSrcIPv6AddrFS2R_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 169, a)
}

func AcmeFlowOutSrcIPv6AddrFS2R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 169)
}

func AcmeFlowOutDstIPv6AddrFS2R_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 170, a)
}

func AcmeFlowOutDstIPv6AddrFS2R_Get(p *radius.Packet) (value net.IP) {
	value, _ = AcmeFlowOutDstIPv6AddrFS2R_Lookup(p)
	return
}

func AcmeFlowOutDstIPv6AddrFS2R_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Acme_GetsVendor(p, 170) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeFlowOutDstIPv6AddrFS2R_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Acme_LookupVendor(p, 170)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func AcmeFlowOutDstIPv6AddrFS2R_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 170, a)
}

func AcmeFlowOutDstIPv6AddrFS2R_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 170)
}

func AcmeSessionForkedCallID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 171, a)
}

func AcmeSessionForkedCallID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 171, a)
}

func AcmeSessionForkedCallID_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeSessionForkedCallID_Lookup(p)
	return
}

func AcmeSessionForkedCallID_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeSessionForkedCallID_LookupString(p)
	return
}

func AcmeSessionForkedCallID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 171) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionForkedCallID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 171) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeSessionForkedCallID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 171)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeSessionForkedCallID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 171)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeSessionForkedCallID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 171, a)
}

func AcmeSessionForkedCallID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 171, a)
}

func AcmeSessionForkedCallID_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 171)
}

func AcmeCustomVSA200_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 200, a)
}

func AcmeCustomVSA200_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 200, a)
}

func AcmeCustomVSA200_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA200_Lookup(p)
	return
}

func AcmeCustomVSA200_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA200_LookupString(p)
	return
}

func AcmeCustomVSA200_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 200) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA200_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 200) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA200_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 200)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA200_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 200)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA200_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 200, a)
}

func AcmeCustomVSA200_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 200, a)
}

func AcmeCustomVSA200_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 200)
}

func AcmeCustomVSA201_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 201, a)
}

func AcmeCustomVSA201_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 201, a)
}

func AcmeCustomVSA201_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA201_Lookup(p)
	return
}

func AcmeCustomVSA201_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA201_LookupString(p)
	return
}

func AcmeCustomVSA201_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 201) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA201_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 201) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA201_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 201)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA201_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 201)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA201_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 201, a)
}

func AcmeCustomVSA201_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 201, a)
}

func AcmeCustomVSA201_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 201)
}

func AcmeCustomVSA202_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 202, a)
}

func AcmeCustomVSA202_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 202, a)
}

func AcmeCustomVSA202_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA202_Lookup(p)
	return
}

func AcmeCustomVSA202_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA202_LookupString(p)
	return
}

func AcmeCustomVSA202_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 202) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA202_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 202) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA202_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 202)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA202_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 202)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA202_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 202, a)
}

func AcmeCustomVSA202_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 202, a)
}

func AcmeCustomVSA202_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 202)
}

func AcmeCustomVSA203_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 203, a)
}

func AcmeCustomVSA203_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 203, a)
}

func AcmeCustomVSA203_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA203_Lookup(p)
	return
}

func AcmeCustomVSA203_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA203_LookupString(p)
	return
}

func AcmeCustomVSA203_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 203) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA203_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 203) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA203_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 203)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA203_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 203)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA203_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 203, a)
}

func AcmeCustomVSA203_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 203, a)
}

func AcmeCustomVSA203_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 203)
}

func AcmeCustomVSA204_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 204, a)
}

func AcmeCustomVSA204_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 204, a)
}

func AcmeCustomVSA204_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA204_Lookup(p)
	return
}

func AcmeCustomVSA204_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA204_LookupString(p)
	return
}

func AcmeCustomVSA204_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 204) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA204_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 204) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA204_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 204)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA204_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 204)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA204_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 204, a)
}

func AcmeCustomVSA204_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 204, a)
}

func AcmeCustomVSA204_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 204)
}

func AcmeCustomVSA205_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 205, a)
}

func AcmeCustomVSA205_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 205, a)
}

func AcmeCustomVSA205_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA205_Lookup(p)
	return
}

func AcmeCustomVSA205_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA205_LookupString(p)
	return
}

func AcmeCustomVSA205_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 205) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA205_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 205) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA205_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 205)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA205_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 205)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA205_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 205, a)
}

func AcmeCustomVSA205_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 205, a)
}

func AcmeCustomVSA205_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 205)
}

func AcmeCustomVSA206_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 206, a)
}

func AcmeCustomVSA206_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 206, a)
}

func AcmeCustomVSA206_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA206_Lookup(p)
	return
}

func AcmeCustomVSA206_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA206_LookupString(p)
	return
}

func AcmeCustomVSA206_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 206) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA206_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 206) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA206_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 206)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA206_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 206)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA206_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 206, a)
}

func AcmeCustomVSA206_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 206, a)
}

func AcmeCustomVSA206_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 206)
}

func AcmeCustomVSA207_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 207, a)
}

func AcmeCustomVSA207_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 207, a)
}

func AcmeCustomVSA207_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA207_Lookup(p)
	return
}

func AcmeCustomVSA207_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA207_LookupString(p)
	return
}

func AcmeCustomVSA207_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 207) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA207_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 207) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA207_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 207)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA207_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 207)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA207_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 207, a)
}

func AcmeCustomVSA207_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 207, a)
}

func AcmeCustomVSA207_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 207)
}

func AcmeCustomVSA208_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 208, a)
}

func AcmeCustomVSA208_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 208, a)
}

func AcmeCustomVSA208_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA208_Lookup(p)
	return
}

func AcmeCustomVSA208_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA208_LookupString(p)
	return
}

func AcmeCustomVSA208_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 208) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA208_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 208) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA208_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 208)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA208_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 208)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA208_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 208, a)
}

func AcmeCustomVSA208_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 208, a)
}

func AcmeCustomVSA208_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 208)
}

func AcmeCustomVSA209_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 209, a)
}

func AcmeCustomVSA209_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 209, a)
}

func AcmeCustomVSA209_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA209_Lookup(p)
	return
}

func AcmeCustomVSA209_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA209_LookupString(p)
	return
}

func AcmeCustomVSA209_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 209) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA209_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 209) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA209_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 209)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA209_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 209)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA209_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 209, a)
}

func AcmeCustomVSA209_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 209, a)
}

func AcmeCustomVSA209_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 209)
}

func AcmeCustomVSA210_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 210, a)
}

func AcmeCustomVSA210_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 210, a)
}

func AcmeCustomVSA210_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA210_Lookup(p)
	return
}

func AcmeCustomVSA210_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA210_LookupString(p)
	return
}

func AcmeCustomVSA210_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 210) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA210_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 210) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA210_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 210)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA210_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 210)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA210_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 210, a)
}

func AcmeCustomVSA210_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 210, a)
}

func AcmeCustomVSA210_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 210)
}

func AcmeCustomVSA211_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 211, a)
}

func AcmeCustomVSA211_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 211, a)
}

func AcmeCustomVSA211_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA211_Lookup(p)
	return
}

func AcmeCustomVSA211_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA211_LookupString(p)
	return
}

func AcmeCustomVSA211_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 211) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA211_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 211) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA211_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 211)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA211_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 211)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA211_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 211, a)
}

func AcmeCustomVSA211_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 211, a)
}

func AcmeCustomVSA211_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 211)
}

func AcmeCustomVSA212_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 212, a)
}

func AcmeCustomVSA212_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 212, a)
}

func AcmeCustomVSA212_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA212_Lookup(p)
	return
}

func AcmeCustomVSA212_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA212_LookupString(p)
	return
}

func AcmeCustomVSA212_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 212) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA212_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 212) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA212_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 212)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA212_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 212)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA212_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 212, a)
}

func AcmeCustomVSA212_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 212, a)
}

func AcmeCustomVSA212_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 212)
}

func AcmeCustomVSA213_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 213, a)
}

func AcmeCustomVSA213_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 213, a)
}

func AcmeCustomVSA213_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA213_Lookup(p)
	return
}

func AcmeCustomVSA213_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA213_LookupString(p)
	return
}

func AcmeCustomVSA213_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 213) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA213_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 213) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA213_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 213)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA213_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 213)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA213_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 213, a)
}

func AcmeCustomVSA213_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 213, a)
}

func AcmeCustomVSA213_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 213)
}

func AcmeCustomVSA214_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 214, a)
}

func AcmeCustomVSA214_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 214, a)
}

func AcmeCustomVSA214_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA214_Lookup(p)
	return
}

func AcmeCustomVSA214_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA214_LookupString(p)
	return
}

func AcmeCustomVSA214_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 214) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA214_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 214) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA214_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 214)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA214_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 214)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA214_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 214, a)
}

func AcmeCustomVSA214_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 214, a)
}

func AcmeCustomVSA214_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 214)
}

func AcmeCustomVSA215_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 215, a)
}

func AcmeCustomVSA215_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 215, a)
}

func AcmeCustomVSA215_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA215_Lookup(p)
	return
}

func AcmeCustomVSA215_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA215_LookupString(p)
	return
}

func AcmeCustomVSA215_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 215) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA215_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 215) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA215_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 215)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA215_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 215)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA215_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 215, a)
}

func AcmeCustomVSA215_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 215, a)
}

func AcmeCustomVSA215_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 215)
}

func AcmeCustomVSA216_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 216, a)
}

func AcmeCustomVSA216_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 216, a)
}

func AcmeCustomVSA216_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA216_Lookup(p)
	return
}

func AcmeCustomVSA216_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA216_LookupString(p)
	return
}

func AcmeCustomVSA216_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 216) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA216_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 216) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA216_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 216)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA216_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 216)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA216_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 216, a)
}

func AcmeCustomVSA216_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 216, a)
}

func AcmeCustomVSA216_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 216)
}

func AcmeCustomVSA217_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 217, a)
}

func AcmeCustomVSA217_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 217, a)
}

func AcmeCustomVSA217_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA217_Lookup(p)
	return
}

func AcmeCustomVSA217_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA217_LookupString(p)
	return
}

func AcmeCustomVSA217_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 217) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA217_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 217) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA217_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 217)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA217_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 217)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA217_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 217, a)
}

func AcmeCustomVSA217_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 217, a)
}

func AcmeCustomVSA217_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 217)
}

func AcmeCustomVSA218_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 218, a)
}

func AcmeCustomVSA218_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 218, a)
}

func AcmeCustomVSA218_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA218_Lookup(p)
	return
}

func AcmeCustomVSA218_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA218_LookupString(p)
	return
}

func AcmeCustomVSA218_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 218) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA218_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 218) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA218_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 218)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA218_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 218)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA218_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 218, a)
}

func AcmeCustomVSA218_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 218, a)
}

func AcmeCustomVSA218_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 218)
}

func AcmeCustomVSA219_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 219, a)
}

func AcmeCustomVSA219_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 219, a)
}

func AcmeCustomVSA219_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA219_Lookup(p)
	return
}

func AcmeCustomVSA219_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA219_LookupString(p)
	return
}

func AcmeCustomVSA219_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 219) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA219_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 219) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA219_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 219)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA219_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 219)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA219_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 219, a)
}

func AcmeCustomVSA219_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 219, a)
}

func AcmeCustomVSA219_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 219)
}

func AcmeCustomVSA220_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 220, a)
}

func AcmeCustomVSA220_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 220, a)
}

func AcmeCustomVSA220_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA220_Lookup(p)
	return
}

func AcmeCustomVSA220_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA220_LookupString(p)
	return
}

func AcmeCustomVSA220_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 220) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA220_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 220) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA220_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 220)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA220_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 220)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA220_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 220, a)
}

func AcmeCustomVSA220_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 220, a)
}

func AcmeCustomVSA220_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 220)
}

func AcmeCustomVSA221_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 221, a)
}

func AcmeCustomVSA221_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 221, a)
}

func AcmeCustomVSA221_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA221_Lookup(p)
	return
}

func AcmeCustomVSA221_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA221_LookupString(p)
	return
}

func AcmeCustomVSA221_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 221) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA221_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 221) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA221_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 221)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA221_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 221)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA221_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 221, a)
}

func AcmeCustomVSA221_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 221, a)
}

func AcmeCustomVSA221_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 221)
}

func AcmeCustomVSA222_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 222, a)
}

func AcmeCustomVSA222_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 222, a)
}

func AcmeCustomVSA222_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA222_Lookup(p)
	return
}

func AcmeCustomVSA222_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA222_LookupString(p)
	return
}

func AcmeCustomVSA222_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 222) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA222_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 222) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA222_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 222)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA222_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 222)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA222_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 222, a)
}

func AcmeCustomVSA222_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 222, a)
}

func AcmeCustomVSA222_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 222)
}

func AcmeCustomVSA223_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 223, a)
}

func AcmeCustomVSA223_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 223, a)
}

func AcmeCustomVSA223_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA223_Lookup(p)
	return
}

func AcmeCustomVSA223_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA223_LookupString(p)
	return
}

func AcmeCustomVSA223_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 223) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA223_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 223) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA223_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 223)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA223_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 223)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA223_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 223, a)
}

func AcmeCustomVSA223_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 223, a)
}

func AcmeCustomVSA223_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 223)
}

func AcmeCustomVSA224_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 224, a)
}

func AcmeCustomVSA224_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 224, a)
}

func AcmeCustomVSA224_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA224_Lookup(p)
	return
}

func AcmeCustomVSA224_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA224_LookupString(p)
	return
}

func AcmeCustomVSA224_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 224) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA224_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 224) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA224_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 224)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA224_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 224)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA224_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 224, a)
}

func AcmeCustomVSA224_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 224, a)
}

func AcmeCustomVSA224_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 224)
}

func AcmeCustomVSA225_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 225, a)
}

func AcmeCustomVSA225_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 225, a)
}

func AcmeCustomVSA225_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA225_Lookup(p)
	return
}

func AcmeCustomVSA225_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA225_LookupString(p)
	return
}

func AcmeCustomVSA225_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 225) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA225_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 225) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA225_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 225)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA225_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 225)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA225_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 225, a)
}

func AcmeCustomVSA225_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 225, a)
}

func AcmeCustomVSA225_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 225)
}

func AcmeCustomVSA226_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 226, a)
}

func AcmeCustomVSA226_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 226, a)
}

func AcmeCustomVSA226_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA226_Lookup(p)
	return
}

func AcmeCustomVSA226_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA226_LookupString(p)
	return
}

func AcmeCustomVSA226_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 226) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA226_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 226) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA226_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 226)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA226_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 226)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA226_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 226, a)
}

func AcmeCustomVSA226_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 226, a)
}

func AcmeCustomVSA226_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 226)
}

func AcmeCustomVSA227_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 227, a)
}

func AcmeCustomVSA227_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 227, a)
}

func AcmeCustomVSA227_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA227_Lookup(p)
	return
}

func AcmeCustomVSA227_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA227_LookupString(p)
	return
}

func AcmeCustomVSA227_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 227) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA227_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 227) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA227_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 227)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA227_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 227)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA227_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 227, a)
}

func AcmeCustomVSA227_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 227, a)
}

func AcmeCustomVSA227_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 227)
}

func AcmeCustomVSA228_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 228, a)
}

func AcmeCustomVSA228_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 228, a)
}

func AcmeCustomVSA228_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA228_Lookup(p)
	return
}

func AcmeCustomVSA228_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA228_LookupString(p)
	return
}

func AcmeCustomVSA228_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 228) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA228_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 228) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA228_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 228)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA228_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 228)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA228_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 228, a)
}

func AcmeCustomVSA228_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 228, a)
}

func AcmeCustomVSA228_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 228)
}

func AcmeCustomVSA229_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 229, a)
}

func AcmeCustomVSA229_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 229, a)
}

func AcmeCustomVSA229_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA229_Lookup(p)
	return
}

func AcmeCustomVSA229_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA229_LookupString(p)
	return
}

func AcmeCustomVSA229_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 229) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA229_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 229) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA229_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 229)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA229_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 229)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA229_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 229, a)
}

func AcmeCustomVSA229_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 229, a)
}

func AcmeCustomVSA229_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 229)
}

func AcmeCustomVSA230_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 230, a)
}

func AcmeCustomVSA230_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 230, a)
}

func AcmeCustomVSA230_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeCustomVSA230_Lookup(p)
	return
}

func AcmeCustomVSA230_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeCustomVSA230_LookupString(p)
	return
}

func AcmeCustomVSA230_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 230) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA230_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 230) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeCustomVSA230_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 230)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeCustomVSA230_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 230)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeCustomVSA230_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 230, a)
}

func AcmeCustomVSA230_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 230, a)
}

func AcmeCustomVSA230_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 230)
}

func AcmeUserClass_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 254, a)
}

func AcmeUserClass_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_AddVendor(p, 254, a)
}

func AcmeUserClass_Get(p *radius.Packet) (value []byte) {
	value, _ = AcmeUserClass_Lookup(p)
	return
}

func AcmeUserClass_GetString(p *radius.Packet) (value string) {
	value, _ = AcmeUserClass_LookupString(p)
	return
}

func AcmeUserClass_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Acme_GetsVendor(p, 254) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeUserClass_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Acme_GetsVendor(p, 254) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AcmeUserClass_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Acme_LookupVendor(p, 254)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AcmeUserClass_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Acme_LookupVendor(p, 254)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AcmeUserClass_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 254, a)
}

func AcmeUserClass_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Acme_SetVendor(p, 254, a)
}

func AcmeUserClass_Del(p *radius.Packet) {
	_Acme_DelVendor(p, 254)
}
