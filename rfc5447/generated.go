// Code generated by radius-dict-gen. DO NOT EDIT.

package rfc5447

import (
	"net"

	"layeh.com/radius"
)

const (
	MIP6FeatureVector_Type  radius.Type = 124
	MIP6HomeLinkPrefix_Type radius.Type = 125
)

func MIP6FeatureVector_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(MIP6FeatureVector_Type, a)
	return
}

func MIP6FeatureVector_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(MIP6FeatureVector_Type, a)
	return
}

func MIP6FeatureVector_Get(p *radius.Packet) (value []byte) {
	value, _ = MIP6FeatureVector_Lookup(p)
	return
}

func MIP6FeatureVector_GetString(p *radius.Packet) (value string) {
	value, _ = MIP6FeatureVector_LookupString(p)
	return
}

func MIP6FeatureVector_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range p.Attributes[MIP6FeatureVector_Type] {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MIP6FeatureVector_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range p.Attributes[MIP6FeatureVector_Type] {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MIP6FeatureVector_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(MIP6FeatureVector_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MIP6FeatureVector_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(MIP6FeatureVector_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MIP6FeatureVector_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(MIP6FeatureVector_Type, a)
	return
}

func MIP6FeatureVector_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(MIP6FeatureVector_Type, a)
	return
}

func MIP6FeatureVector_Del(p *radius.Packet) {
	p.Attributes.Del(MIP6FeatureVector_Type)
}

func MIP6HomeLinkPrefix_Add(p *radius.Packet, value *net.IPNet) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Prefix(value)
	if err != nil {
		return
	}
	p.Add(MIP6HomeLinkPrefix_Type, a)
	return
}

func MIP6HomeLinkPrefix_Get(p *radius.Packet) (value *net.IPNet) {
	value, _ = MIP6HomeLinkPrefix_Lookup(p)
	return
}

func MIP6HomeLinkPrefix_Gets(p *radius.Packet) (values []*net.IPNet, err error) {
	var i *net.IPNet
	for _, attr := range p.Attributes[MIP6HomeLinkPrefix_Type] {
		i, err = radius.IPv6Prefix(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MIP6HomeLinkPrefix_Lookup(p *radius.Packet) (value *net.IPNet, err error) {
	a, ok := p.Lookup(MIP6HomeLinkPrefix_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Prefix(a)
	return
}

func MIP6HomeLinkPrefix_Set(p *radius.Packet, value *net.IPNet) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Prefix(value)
	if err != nil {
		return
	}
	p.Set(MIP6HomeLinkPrefix_Type, a)
	return
}

func MIP6HomeLinkPrefix_Del(p *radius.Packet) {
	p.Attributes.Del(MIP6HomeLinkPrefix_Type)
}
