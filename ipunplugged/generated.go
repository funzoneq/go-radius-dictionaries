// Code generated by radius-dict-gen. DO NOT EDIT.

package ipunplugged

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_IpUnplugged_VendorID = 5925
)

func _IpUnplugged_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_IpUnplugged_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _IpUnplugged_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _IpUnplugged_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _IpUnplugged_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _IpUnplugged_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _IpUnplugged_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _IpUnplugged_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _IpUnplugged_AddVendor(p, typ, attr)
}

func _IpUnplugged_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _IpUnplugged_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

type IPUMIPSpi uint32

var IPUMIPSpi_Strings = map[IPUMIPSpi]string{}

func (a IPUMIPSpi) String() string {
	if str, ok := IPUMIPSpi_Strings[a]; ok {
		return str
	}
	return "IPUMIPSpi(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func IPUMIPSpi_Add(p *radius.Packet, value IPUMIPSpi) (err error) {
	a := radius.NewInteger(uint32(value))
	return _IpUnplugged_AddVendor(p, 51, a)
}

func IPUMIPSpi_Get(p *radius.Packet) (value IPUMIPSpi) {
	value, _ = IPUMIPSpi_Lookup(p)
	return
}

func IPUMIPSpi_Gets(p *radius.Packet) (values []IPUMIPSpi, err error) {
	var i uint32
	for _, attr := range _IpUnplugged_GetsVendor(p, 51) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, IPUMIPSpi(i))
	}
	return
}

func IPUMIPSpi_Lookup(p *radius.Packet) (value IPUMIPSpi, err error) {
	a, ok := _IpUnplugged_LookupVendor(p, 51)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = IPUMIPSpi(i)
	return
}

func IPUMIPSpi_Set(p *radius.Packet, value IPUMIPSpi) (err error) {
	a := radius.NewInteger(uint32(value))
	return _IpUnplugged_SetVendor(p, 51, a)
}

func IPUMIPSpi_Del(p *radius.Packet) {
	_IpUnplugged_DelVendor(p, 51)
}

func IPUMIPKey_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _IpUnplugged_AddVendor(p, 52, a)
}

func IPUMIPKey_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _IpUnplugged_AddVendor(p, 52, a)
}

func IPUMIPKey_Get(p *radius.Packet) (value []byte) {
	value, _ = IPUMIPKey_Lookup(p)
	return
}

func IPUMIPKey_GetString(p *radius.Packet) (value string) {
	value, _ = IPUMIPKey_LookupString(p)
	return
}

func IPUMIPKey_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _IpUnplugged_GetsVendor(p, 52) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IPUMIPKey_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _IpUnplugged_GetsVendor(p, 52) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IPUMIPKey_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _IpUnplugged_LookupVendor(p, 52)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func IPUMIPKey_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _IpUnplugged_LookupVendor(p, 52)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func IPUMIPKey_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _IpUnplugged_SetVendor(p, 52, a)
}

func IPUMIPKey_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _IpUnplugged_SetVendor(p, 52, a)
}

func IPUMIPKey_Del(p *radius.Packet) {
	_IpUnplugged_DelVendor(p, 52)
}

type IPUMIPAlgType uint32

var IPUMIPAlgType_Strings = map[IPUMIPAlgType]string{}

func (a IPUMIPAlgType) String() string {
	if str, ok := IPUMIPAlgType_Strings[a]; ok {
		return str
	}
	return "IPUMIPAlgType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func IPUMIPAlgType_Add(p *radius.Packet, value IPUMIPAlgType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _IpUnplugged_AddVendor(p, 53, a)
}

func IPUMIPAlgType_Get(p *radius.Packet) (value IPUMIPAlgType) {
	value, _ = IPUMIPAlgType_Lookup(p)
	return
}

func IPUMIPAlgType_Gets(p *radius.Packet) (values []IPUMIPAlgType, err error) {
	var i uint32
	for _, attr := range _IpUnplugged_GetsVendor(p, 53) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, IPUMIPAlgType(i))
	}
	return
}

func IPUMIPAlgType_Lookup(p *radius.Packet) (value IPUMIPAlgType, err error) {
	a, ok := _IpUnplugged_LookupVendor(p, 53)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = IPUMIPAlgType(i)
	return
}

func IPUMIPAlgType_Set(p *radius.Packet, value IPUMIPAlgType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _IpUnplugged_SetVendor(p, 53, a)
}

func IPUMIPAlgType_Del(p *radius.Packet) {
	_IpUnplugged_DelVendor(p, 53)
}

type IPUMIPAlgMode uint32

var IPUMIPAlgMode_Strings = map[IPUMIPAlgMode]string{}

func (a IPUMIPAlgMode) String() string {
	if str, ok := IPUMIPAlgMode_Strings[a]; ok {
		return str
	}
	return "IPUMIPAlgMode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func IPUMIPAlgMode_Add(p *radius.Packet, value IPUMIPAlgMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _IpUnplugged_AddVendor(p, 54, a)
}

func IPUMIPAlgMode_Get(p *radius.Packet) (value IPUMIPAlgMode) {
	value, _ = IPUMIPAlgMode_Lookup(p)
	return
}

func IPUMIPAlgMode_Gets(p *radius.Packet) (values []IPUMIPAlgMode, err error) {
	var i uint32
	for _, attr := range _IpUnplugged_GetsVendor(p, 54) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, IPUMIPAlgMode(i))
	}
	return
}

func IPUMIPAlgMode_Lookup(p *radius.Packet) (value IPUMIPAlgMode, err error) {
	a, ok := _IpUnplugged_LookupVendor(p, 54)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = IPUMIPAlgMode(i)
	return
}

func IPUMIPAlgMode_Set(p *radius.Packet, value IPUMIPAlgMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _IpUnplugged_SetVendor(p, 54, a)
}

func IPUMIPAlgMode_Del(p *radius.Packet) {
	_IpUnplugged_DelVendor(p, 54)
}

type IPUMIPReplayProt uint32

var IPUMIPReplayProt_Strings = map[IPUMIPReplayProt]string{}

func (a IPUMIPReplayProt) String() string {
	if str, ok := IPUMIPReplayProt_Strings[a]; ok {
		return str
	}
	return "IPUMIPReplayProt(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func IPUMIPReplayProt_Add(p *radius.Packet, value IPUMIPReplayProt) (err error) {
	a := radius.NewInteger(uint32(value))
	return _IpUnplugged_AddVendor(p, 55, a)
}

func IPUMIPReplayProt_Get(p *radius.Packet) (value IPUMIPReplayProt) {
	value, _ = IPUMIPReplayProt_Lookup(p)
	return
}

func IPUMIPReplayProt_Gets(p *radius.Packet) (values []IPUMIPReplayProt, err error) {
	var i uint32
	for _, attr := range _IpUnplugged_GetsVendor(p, 55) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, IPUMIPReplayProt(i))
	}
	return
}

func IPUMIPReplayProt_Lookup(p *radius.Packet) (value IPUMIPReplayProt, err error) {
	a, ok := _IpUnplugged_LookupVendor(p, 55)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = IPUMIPReplayProt(i)
	return
}

func IPUMIPReplayProt_Set(p *radius.Packet, value IPUMIPReplayProt) (err error) {
	a := radius.NewInteger(uint32(value))
	return _IpUnplugged_SetVendor(p, 55, a)
}

func IPUMIPReplayProt_Del(p *radius.Packet) {
	_IpUnplugged_DelVendor(p, 55)
}

func IPUIKERemoteAddr_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _IpUnplugged_AddVendor(p, 61, a)
}

func IPUIKERemoteAddr_Get(p *radius.Packet) (value net.IP) {
	value, _ = IPUIKERemoteAddr_Lookup(p)
	return
}

func IPUIKERemoteAddr_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _IpUnplugged_GetsVendor(p, 61) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IPUIKERemoteAddr_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _IpUnplugged_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func IPUIKERemoteAddr_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _IpUnplugged_SetVendor(p, 61, a)
}

func IPUIKERemoteAddr_Del(p *radius.Packet) {
	_IpUnplugged_DelVendor(p, 61)
}

func IPUIKELocalAddr_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _IpUnplugged_AddVendor(p, 62, a)
}

func IPUIKELocalAddr_Get(p *radius.Packet) (value net.IP) {
	value, _ = IPUIKELocalAddr_Lookup(p)
	return
}

func IPUIKELocalAddr_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _IpUnplugged_GetsVendor(p, 62) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IPUIKELocalAddr_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _IpUnplugged_LookupVendor(p, 62)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func IPUIKELocalAddr_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _IpUnplugged_SetVendor(p, 62, a)
}

func IPUIKELocalAddr_Del(p *radius.Packet) {
	_IpUnplugged_DelVendor(p, 62)
}

func IPUIKEAuth_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _IpUnplugged_AddVendor(p, 63, a)
}

func IPUIKEAuth_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _IpUnplugged_AddVendor(p, 63, a)
}

func IPUIKEAuth_Get(p *radius.Packet) (value []byte) {
	value, _ = IPUIKEAuth_Lookup(p)
	return
}

func IPUIKEAuth_GetString(p *radius.Packet) (value string) {
	value, _ = IPUIKEAuth_LookupString(p)
	return
}

func IPUIKEAuth_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _IpUnplugged_GetsVendor(p, 63) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IPUIKEAuth_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _IpUnplugged_GetsVendor(p, 63) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IPUIKEAuth_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _IpUnplugged_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func IPUIKEAuth_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _IpUnplugged_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func IPUIKEAuth_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _IpUnplugged_SetVendor(p, 63, a)
}

func IPUIKEAuth_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _IpUnplugged_SetVendor(p, 63, a)
}

func IPUIKEAuth_Del(p *radius.Packet) {
	_IpUnplugged_DelVendor(p, 63)
}

func IPUIKEConfName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _IpUnplugged_AddVendor(p, 64, a)
}

func IPUIKEConfName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _IpUnplugged_AddVendor(p, 64, a)
}

func IPUIKEConfName_Get(p *radius.Packet) (value []byte) {
	value, _ = IPUIKEConfName_Lookup(p)
	return
}

func IPUIKEConfName_GetString(p *radius.Packet) (value string) {
	value, _ = IPUIKEConfName_LookupString(p)
	return
}

func IPUIKEConfName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _IpUnplugged_GetsVendor(p, 64) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IPUIKEConfName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _IpUnplugged_GetsVendor(p, 64) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IPUIKEConfName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _IpUnplugged_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func IPUIKEConfName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _IpUnplugged_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func IPUIKEConfName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _IpUnplugged_SetVendor(p, 64, a)
}

func IPUIKEConfName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _IpUnplugged_SetVendor(p, 64, a)
}

func IPUIKEConfName_Del(p *radius.Packet) {
	_IpUnplugged_DelVendor(p, 64)
}

func IPUIKECmd_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _IpUnplugged_AddVendor(p, 65, a)
}

func IPUIKECmd_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _IpUnplugged_AddVendor(p, 65, a)
}

func IPUIKECmd_Get(p *radius.Packet) (value []byte) {
	value, _ = IPUIKECmd_Lookup(p)
	return
}

func IPUIKECmd_GetString(p *radius.Packet) (value string) {
	value, _ = IPUIKECmd_LookupString(p)
	return
}

func IPUIKECmd_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _IpUnplugged_GetsVendor(p, 65) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IPUIKECmd_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _IpUnplugged_GetsVendor(p, 65) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IPUIKECmd_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _IpUnplugged_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func IPUIKECmd_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _IpUnplugged_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func IPUIKECmd_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _IpUnplugged_SetVendor(p, 65, a)
}

func IPUIKECmd_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _IpUnplugged_SetVendor(p, 65, a)
}

func IPUIKECmd_Del(p *radius.Packet) {
	_IpUnplugged_DelVendor(p, 65)
}
