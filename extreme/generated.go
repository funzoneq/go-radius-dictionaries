// Code generated by radius-dict-gen. DO NOT EDIT.

package extreme

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Extreme_VendorID = 1916
)

func _Extreme_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Extreme_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Extreme_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Extreme_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Extreme_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Extreme_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Extreme_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Extreme_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Extreme_AddVendor(p, typ, attr)
}

func _Extreme_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Extreme_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

type ExtremeCLIAuthorization uint32

const (
	ExtremeCLIAuthorization_Value_Disabled ExtremeCLIAuthorization = 0
	ExtremeCLIAuthorization_Value_Enabled  ExtremeCLIAuthorization = 1
)

var ExtremeCLIAuthorization_Strings = map[ExtremeCLIAuthorization]string{
	ExtremeCLIAuthorization_Value_Disabled: "Disabled",
	ExtremeCLIAuthorization_Value_Enabled:  "Enabled",
}

func (a ExtremeCLIAuthorization) String() string {
	if str, ok := ExtremeCLIAuthorization_Strings[a]; ok {
		return str
	}
	return "ExtremeCLIAuthorization(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ExtremeCLIAuthorization_Add(p *radius.Packet, value ExtremeCLIAuthorization) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Extreme_AddVendor(p, 201, a)
}

func ExtremeCLIAuthorization_Get(p *radius.Packet) (value ExtremeCLIAuthorization) {
	value, _ = ExtremeCLIAuthorization_Lookup(p)
	return
}

func ExtremeCLIAuthorization_Gets(p *radius.Packet) (values []ExtremeCLIAuthorization, err error) {
	var i uint32
	for _, attr := range _Extreme_GetsVendor(p, 201) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ExtremeCLIAuthorization(i))
	}
	return
}

func ExtremeCLIAuthorization_Lookup(p *radius.Packet) (value ExtremeCLIAuthorization, err error) {
	a, ok := _Extreme_LookupVendor(p, 201)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ExtremeCLIAuthorization(i)
	return
}

func ExtremeCLIAuthorization_Set(p *radius.Packet, value ExtremeCLIAuthorization) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Extreme_SetVendor(p, 201, a)
}

func ExtremeCLIAuthorization_Del(p *radius.Packet) {
	_Extreme_DelVendor(p, 201)
}

func ExtremeShellCommand_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Extreme_AddVendor(p, 202, a)
}

func ExtremeShellCommand_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Extreme_AddVendor(p, 202, a)
}

func ExtremeShellCommand_Get(p *radius.Packet) (value []byte) {
	value, _ = ExtremeShellCommand_Lookup(p)
	return
}

func ExtremeShellCommand_GetString(p *radius.Packet) (value string) {
	value, _ = ExtremeShellCommand_LookupString(p)
	return
}

func ExtremeShellCommand_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Extreme_GetsVendor(p, 202) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ExtremeShellCommand_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Extreme_GetsVendor(p, 202) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ExtremeShellCommand_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Extreme_LookupVendor(p, 202)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ExtremeShellCommand_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Extreme_LookupVendor(p, 202)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ExtremeShellCommand_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Extreme_SetVendor(p, 202, a)
}

func ExtremeShellCommand_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Extreme_SetVendor(p, 202, a)
}

func ExtremeShellCommand_Del(p *radius.Packet) {
	_Extreme_DelVendor(p, 202)
}

func ExtremeNetloginVlan_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Extreme_AddVendor(p, 203, a)
}

func ExtremeNetloginVlan_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Extreme_AddVendor(p, 203, a)
}

func ExtremeNetloginVlan_Get(p *radius.Packet) (value []byte) {
	value, _ = ExtremeNetloginVlan_Lookup(p)
	return
}

func ExtremeNetloginVlan_GetString(p *radius.Packet) (value string) {
	value, _ = ExtremeNetloginVlan_LookupString(p)
	return
}

func ExtremeNetloginVlan_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Extreme_GetsVendor(p, 203) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ExtremeNetloginVlan_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Extreme_GetsVendor(p, 203) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ExtremeNetloginVlan_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Extreme_LookupVendor(p, 203)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ExtremeNetloginVlan_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Extreme_LookupVendor(p, 203)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ExtremeNetloginVlan_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Extreme_SetVendor(p, 203, a)
}

func ExtremeNetloginVlan_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Extreme_SetVendor(p, 203, a)
}

func ExtremeNetloginVlan_Del(p *radius.Packet) {
	_Extreme_DelVendor(p, 203)
}

func ExtremeNetloginURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Extreme_AddVendor(p, 204, a)
}

func ExtremeNetloginURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Extreme_AddVendor(p, 204, a)
}

func ExtremeNetloginURL_Get(p *radius.Packet) (value []byte) {
	value, _ = ExtremeNetloginURL_Lookup(p)
	return
}

func ExtremeNetloginURL_GetString(p *radius.Packet) (value string) {
	value, _ = ExtremeNetloginURL_LookupString(p)
	return
}

func ExtremeNetloginURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Extreme_GetsVendor(p, 204) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ExtremeNetloginURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Extreme_GetsVendor(p, 204) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ExtremeNetloginURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Extreme_LookupVendor(p, 204)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ExtremeNetloginURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Extreme_LookupVendor(p, 204)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ExtremeNetloginURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Extreme_SetVendor(p, 204, a)
}

func ExtremeNetloginURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Extreme_SetVendor(p, 204, a)
}

func ExtremeNetloginURL_Del(p *radius.Packet) {
	_Extreme_DelVendor(p, 204)
}

func ExtremeNetloginURLDesc_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Extreme_AddVendor(p, 205, a)
}

func ExtremeNetloginURLDesc_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Extreme_AddVendor(p, 205, a)
}

func ExtremeNetloginURLDesc_Get(p *radius.Packet) (value []byte) {
	value, _ = ExtremeNetloginURLDesc_Lookup(p)
	return
}

func ExtremeNetloginURLDesc_GetString(p *radius.Packet) (value string) {
	value, _ = ExtremeNetloginURLDesc_LookupString(p)
	return
}

func ExtremeNetloginURLDesc_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Extreme_GetsVendor(p, 205) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ExtremeNetloginURLDesc_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Extreme_GetsVendor(p, 205) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ExtremeNetloginURLDesc_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Extreme_LookupVendor(p, 205)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ExtremeNetloginURLDesc_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Extreme_LookupVendor(p, 205)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ExtremeNetloginURLDesc_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Extreme_SetVendor(p, 205, a)
}

func ExtremeNetloginURLDesc_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Extreme_SetVendor(p, 205, a)
}

func ExtremeNetloginURLDesc_Del(p *radius.Packet) {
	_Extreme_DelVendor(p, 205)
}

type ExtremeNetloginOnly uint32

const (
	ExtremeNetloginOnly_Value_Disabled ExtremeNetloginOnly = 0
	ExtremeNetloginOnly_Value_Enabled  ExtremeNetloginOnly = 1
)

var ExtremeNetloginOnly_Strings = map[ExtremeNetloginOnly]string{
	ExtremeNetloginOnly_Value_Disabled: "Disabled",
	ExtremeNetloginOnly_Value_Enabled:  "Enabled",
}

func (a ExtremeNetloginOnly) String() string {
	if str, ok := ExtremeNetloginOnly_Strings[a]; ok {
		return str
	}
	return "ExtremeNetloginOnly(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ExtremeNetloginOnly_Add(p *radius.Packet, value ExtremeNetloginOnly) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Extreme_AddVendor(p, 206, a)
}

func ExtremeNetloginOnly_Get(p *radius.Packet) (value ExtremeNetloginOnly) {
	value, _ = ExtremeNetloginOnly_Lookup(p)
	return
}

func ExtremeNetloginOnly_Gets(p *radius.Packet) (values []ExtremeNetloginOnly, err error) {
	var i uint32
	for _, attr := range _Extreme_GetsVendor(p, 206) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ExtremeNetloginOnly(i))
	}
	return
}

func ExtremeNetloginOnly_Lookup(p *radius.Packet) (value ExtremeNetloginOnly, err error) {
	a, ok := _Extreme_LookupVendor(p, 206)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ExtremeNetloginOnly(i)
	return
}

func ExtremeNetloginOnly_Set(p *radius.Packet, value ExtremeNetloginOnly) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Extreme_SetVendor(p, 206, a)
}

func ExtremeNetloginOnly_Del(p *radius.Packet) {
	_Extreme_DelVendor(p, 206)
}

func ExtremeUserLocation_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Extreme_AddVendor(p, 208, a)
}

func ExtremeUserLocation_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Extreme_AddVendor(p, 208, a)
}

func ExtremeUserLocation_Get(p *radius.Packet) (value []byte) {
	value, _ = ExtremeUserLocation_Lookup(p)
	return
}

func ExtremeUserLocation_GetString(p *radius.Packet) (value string) {
	value, _ = ExtremeUserLocation_LookupString(p)
	return
}

func ExtremeUserLocation_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Extreme_GetsVendor(p, 208) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ExtremeUserLocation_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Extreme_GetsVendor(p, 208) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ExtremeUserLocation_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Extreme_LookupVendor(p, 208)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ExtremeUserLocation_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Extreme_LookupVendor(p, 208)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ExtremeUserLocation_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Extreme_SetVendor(p, 208, a)
}

func ExtremeUserLocation_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Extreme_SetVendor(p, 208, a)
}

func ExtremeUserLocation_Del(p *radius.Packet) {
	_Extreme_DelVendor(p, 208)
}

type ExtremeNetloginVlanTag uint32

var ExtremeNetloginVlanTag_Strings = map[ExtremeNetloginVlanTag]string{}

func (a ExtremeNetloginVlanTag) String() string {
	if str, ok := ExtremeNetloginVlanTag_Strings[a]; ok {
		return str
	}
	return "ExtremeNetloginVlanTag(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ExtremeNetloginVlanTag_Add(p *radius.Packet, value ExtremeNetloginVlanTag) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Extreme_AddVendor(p, 209, a)
}

func ExtremeNetloginVlanTag_Get(p *radius.Packet) (value ExtremeNetloginVlanTag) {
	value, _ = ExtremeNetloginVlanTag_Lookup(p)
	return
}

func ExtremeNetloginVlanTag_Gets(p *radius.Packet) (values []ExtremeNetloginVlanTag, err error) {
	var i uint32
	for _, attr := range _Extreme_GetsVendor(p, 209) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ExtremeNetloginVlanTag(i))
	}
	return
}

func ExtremeNetloginVlanTag_Lookup(p *radius.Packet) (value ExtremeNetloginVlanTag, err error) {
	a, ok := _Extreme_LookupVendor(p, 209)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ExtremeNetloginVlanTag(i)
	return
}

func ExtremeNetloginVlanTag_Set(p *radius.Packet, value ExtremeNetloginVlanTag) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Extreme_SetVendor(p, 209, a)
}

func ExtremeNetloginVlanTag_Del(p *radius.Packet) {
	_Extreme_DelVendor(p, 209)
}

func ExtremeNetloginExtendedVlan_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Extreme_AddVendor(p, 211, a)
}

func ExtremeNetloginExtendedVlan_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Extreme_AddVendor(p, 211, a)
}

func ExtremeNetloginExtendedVlan_Get(p *radius.Packet) (value []byte) {
	value, _ = ExtremeNetloginExtendedVlan_Lookup(p)
	return
}

func ExtremeNetloginExtendedVlan_GetString(p *radius.Packet) (value string) {
	value, _ = ExtremeNetloginExtendedVlan_LookupString(p)
	return
}

func ExtremeNetloginExtendedVlan_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Extreme_GetsVendor(p, 211) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ExtremeNetloginExtendedVlan_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Extreme_GetsVendor(p, 211) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ExtremeNetloginExtendedVlan_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Extreme_LookupVendor(p, 211)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ExtremeNetloginExtendedVlan_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Extreme_LookupVendor(p, 211)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ExtremeNetloginExtendedVlan_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Extreme_SetVendor(p, 211, a)
}

func ExtremeNetloginExtendedVlan_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Extreme_SetVendor(p, 211, a)
}

func ExtremeNetloginExtendedVlan_Del(p *radius.Packet) {
	_Extreme_DelVendor(p, 211)
}

func ExtremeSecurityProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Extreme_AddVendor(p, 212, a)
}

func ExtremeSecurityProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Extreme_AddVendor(p, 212, a)
}

func ExtremeSecurityProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = ExtremeSecurityProfile_Lookup(p)
	return
}

func ExtremeSecurityProfile_GetString(p *radius.Packet) (value string) {
	value, _ = ExtremeSecurityProfile_LookupString(p)
	return
}

func ExtremeSecurityProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Extreme_GetsVendor(p, 212) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ExtremeSecurityProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Extreme_GetsVendor(p, 212) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ExtremeSecurityProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Extreme_LookupVendor(p, 212)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ExtremeSecurityProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Extreme_LookupVendor(p, 212)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ExtremeSecurityProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Extreme_SetVendor(p, 212, a)
}

func ExtremeSecurityProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Extreme_SetVendor(p, 212, a)
}

func ExtremeSecurityProfile_Del(p *radius.Packet) {
	_Extreme_DelVendor(p, 212)
}

func ExtremeVMName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Extreme_AddVendor(p, 213, a)
}

func ExtremeVMName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Extreme_AddVendor(p, 213, a)
}

func ExtremeVMName_Get(p *radius.Packet) (value []byte) {
	value, _ = ExtremeVMName_Lookup(p)
	return
}

func ExtremeVMName_GetString(p *radius.Packet) (value string) {
	value, _ = ExtremeVMName_LookupString(p)
	return
}

func ExtremeVMName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Extreme_GetsVendor(p, 213) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ExtremeVMName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Extreme_GetsVendor(p, 213) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ExtremeVMName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Extreme_LookupVendor(p, 213)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ExtremeVMName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Extreme_LookupVendor(p, 213)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ExtremeVMName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Extreme_SetVendor(p, 213, a)
}

func ExtremeVMName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Extreme_SetVendor(p, 213, a)
}

func ExtremeVMName_Del(p *radius.Packet) {
	_Extreme_DelVendor(p, 213)
}

func ExtremeVMVPPName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Extreme_AddVendor(p, 214, a)
}

func ExtremeVMVPPName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Extreme_AddVendor(p, 214, a)
}

func ExtremeVMVPPName_Get(p *radius.Packet) (value []byte) {
	value, _ = ExtremeVMVPPName_Lookup(p)
	return
}

func ExtremeVMVPPName_GetString(p *radius.Packet) (value string) {
	value, _ = ExtremeVMVPPName_LookupString(p)
	return
}

func ExtremeVMVPPName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Extreme_GetsVendor(p, 214) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ExtremeVMVPPName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Extreme_GetsVendor(p, 214) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ExtremeVMVPPName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Extreme_LookupVendor(p, 214)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ExtremeVMVPPName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Extreme_LookupVendor(p, 214)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ExtremeVMVPPName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Extreme_SetVendor(p, 214, a)
}

func ExtremeVMVPPName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Extreme_SetVendor(p, 214, a)
}

func ExtremeVMVPPName_Del(p *radius.Packet) {
	_Extreme_DelVendor(p, 214)
}

func ExtremeVMIPAddr_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Extreme_AddVendor(p, 215, a)
}

func ExtremeVMIPAddr_Get(p *radius.Packet) (value net.IP) {
	value, _ = ExtremeVMIPAddr_Lookup(p)
	return
}

func ExtremeVMIPAddr_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Extreme_GetsVendor(p, 215) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ExtremeVMIPAddr_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Extreme_LookupVendor(p, 215)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func ExtremeVMIPAddr_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Extreme_SetVendor(p, 215, a)
}

func ExtremeVMIPAddr_Del(p *radius.Packet) {
	_Extreme_DelVendor(p, 215)
}

type ExtremeVMVLANID uint32

var ExtremeVMVLANID_Strings = map[ExtremeVMVLANID]string{}

func (a ExtremeVMVLANID) String() string {
	if str, ok := ExtremeVMVLANID_Strings[a]; ok {
		return str
	}
	return "ExtremeVMVLANID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ExtremeVMVLANID_Add(p *radius.Packet, value ExtremeVMVLANID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Extreme_AddVendor(p, 216, a)
}

func ExtremeVMVLANID_Get(p *radius.Packet) (value ExtremeVMVLANID) {
	value, _ = ExtremeVMVLANID_Lookup(p)
	return
}

func ExtremeVMVLANID_Gets(p *radius.Packet) (values []ExtremeVMVLANID, err error) {
	var i uint32
	for _, attr := range _Extreme_GetsVendor(p, 216) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ExtremeVMVLANID(i))
	}
	return
}

func ExtremeVMVLANID_Lookup(p *radius.Packet) (value ExtremeVMVLANID, err error) {
	a, ok := _Extreme_LookupVendor(p, 216)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ExtremeVMVLANID(i)
	return
}

func ExtremeVMVLANID_Set(p *radius.Packet, value ExtremeVMVLANID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Extreme_SetVendor(p, 216, a)
}

func ExtremeVMVLANID_Del(p *radius.Packet) {
	_Extreme_DelVendor(p, 216)
}

func ExtremeVMVRName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Extreme_AddVendor(p, 217, a)
}

func ExtremeVMVRName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Extreme_AddVendor(p, 217, a)
}

func ExtremeVMVRName_Get(p *radius.Packet) (value []byte) {
	value, _ = ExtremeVMVRName_Lookup(p)
	return
}

func ExtremeVMVRName_GetString(p *radius.Packet) (value string) {
	value, _ = ExtremeVMVRName_LookupString(p)
	return
}

func ExtremeVMVRName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Extreme_GetsVendor(p, 217) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ExtremeVMVRName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Extreme_GetsVendor(p, 217) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ExtremeVMVRName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Extreme_LookupVendor(p, 217)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ExtremeVMVRName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Extreme_LookupVendor(p, 217)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ExtremeVMVRName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Extreme_SetVendor(p, 217, a)
}

func ExtremeVMVRName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Extreme_SetVendor(p, 217, a)
}

func ExtremeVMVRName_Del(p *radius.Packet) {
	_Extreme_DelVendor(p, 217)
}
