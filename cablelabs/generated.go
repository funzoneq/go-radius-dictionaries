// Code generated by radius-dict-gen. DO NOT EDIT.

package cablelabs

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_CableLabs_VendorID = 4491
)

func _CableLabs_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_CableLabs_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _CableLabs_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _CableLabs_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _CableLabs_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _CableLabs_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _CableLabs_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _CableLabs_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _CableLabs_AddVendor(p, typ, attr)
}

func _CableLabs_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _CableLabs_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

func CableLabsReserved_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 0, a)
}

func CableLabsReserved_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 0, a)
}

func CableLabsReserved_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsReserved_Lookup(p)
	return
}

func CableLabsReserved_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsReserved_LookupString(p)
	return
}

func CableLabsReserved_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 0) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsReserved_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 0) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsReserved_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 0)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsReserved_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 0)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsReserved_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 0, a)
}

func CableLabsReserved_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 0, a)
}

func CableLabsReserved_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 0)
}

func CableLabsEventMessage_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 1, a)
}

func CableLabsEventMessage_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 1, a)
}

func CableLabsEventMessage_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsEventMessage_Lookup(p)
	return
}

func CableLabsEventMessage_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsEventMessage_LookupString(p)
	return
}

func CableLabsEventMessage_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsEventMessage_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsEventMessage_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsEventMessage_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsEventMessage_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 1, a)
}

func CableLabsEventMessage_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 1, a)
}

func CableLabsEventMessage_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 1)
}

func CableLabsMTAEndpointName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 3, a)
}

func CableLabsMTAEndpointName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 3, a)
}

func CableLabsMTAEndpointName_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsMTAEndpointName_Lookup(p)
	return
}

func CableLabsMTAEndpointName_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsMTAEndpointName_LookupString(p)
	return
}

func CableLabsMTAEndpointName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsMTAEndpointName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsMTAEndpointName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsMTAEndpointName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsMTAEndpointName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 3, a)
}

func CableLabsMTAEndpointName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 3, a)
}

func CableLabsMTAEndpointName_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 3)
}

func CableLabsCallingPartyNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 4, a)
}

func CableLabsCallingPartyNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 4, a)
}

func CableLabsCallingPartyNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsCallingPartyNumber_Lookup(p)
	return
}

func CableLabsCallingPartyNumber_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsCallingPartyNumber_LookupString(p)
	return
}

func CableLabsCallingPartyNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsCallingPartyNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsCallingPartyNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsCallingPartyNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsCallingPartyNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 4, a)
}

func CableLabsCallingPartyNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 4, a)
}

func CableLabsCallingPartyNumber_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 4)
}

func CableLabsCalledPartyNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 5, a)
}

func CableLabsCalledPartyNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 5, a)
}

func CableLabsCalledPartyNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsCalledPartyNumber_Lookup(p)
	return
}

func CableLabsCalledPartyNumber_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsCalledPartyNumber_LookupString(p)
	return
}

func CableLabsCalledPartyNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsCalledPartyNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsCalledPartyNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsCalledPartyNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsCalledPartyNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 5, a)
}

func CableLabsCalledPartyNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 5, a)
}

func CableLabsCalledPartyNumber_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 5)
}

func CableLabsDatabaseID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 6, a)
}

func CableLabsDatabaseID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 6, a)
}

func CableLabsDatabaseID_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsDatabaseID_Lookup(p)
	return
}

func CableLabsDatabaseID_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsDatabaseID_LookupString(p)
	return
}

func CableLabsDatabaseID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsDatabaseID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsDatabaseID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsDatabaseID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsDatabaseID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 6, a)
}

func CableLabsDatabaseID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 6, a)
}

func CableLabsDatabaseID_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 6)
}

type CableLabsQueryType uint32

const (
	CableLabsQueryType_Value_Reserved                  CableLabsQueryType = 0
	CableLabsQueryType_Value_TollFreeNumberLooukp      CableLabsQueryType = 1
	CableLabsQueryType_Value_LNPNumberLookup           CableLabsQueryType = 2
	CableLabsQueryType_Value_CallingNameDeliveryLookup CableLabsQueryType = 3
)

var CableLabsQueryType_Strings = map[CableLabsQueryType]string{
	CableLabsQueryType_Value_Reserved:                  "Reserved",
	CableLabsQueryType_Value_TollFreeNumberLooukp:      "Toll-Free-Number-Looukp",
	CableLabsQueryType_Value_LNPNumberLookup:           "LNP-Number-Lookup",
	CableLabsQueryType_Value_CallingNameDeliveryLookup: "Calling-Name-Delivery-Lookup",
}

func (a CableLabsQueryType) String() string {
	if str, ok := CableLabsQueryType_Strings[a]; ok {
		return str
	}
	return "CableLabsQueryType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsQueryType_Add(p *radius.Packet, value CableLabsQueryType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 7, a)
}

func CableLabsQueryType_Get(p *radius.Packet) (value CableLabsQueryType) {
	value, _ = CableLabsQueryType_Lookup(p)
	return
}

func CableLabsQueryType_Gets(p *radius.Packet) (values []CableLabsQueryType, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 7) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsQueryType(i))
	}
	return
}

func CableLabsQueryType_Lookup(p *radius.Packet) (value CableLabsQueryType, err error) {
	a, ok := _CableLabs_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsQueryType(i)
	return
}

func CableLabsQueryType_Set(p *radius.Packet, value CableLabsQueryType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 7, a)
}

func CableLabsQueryType_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 7)
}

func CableLabsReturnedNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 9, a)
}

func CableLabsReturnedNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 9, a)
}

func CableLabsReturnedNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsReturnedNumber_Lookup(p)
	return
}

func CableLabsReturnedNumber_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsReturnedNumber_LookupString(p)
	return
}

func CableLabsReturnedNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsReturnedNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsReturnedNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsReturnedNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsReturnedNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 9, a)
}

func CableLabsReturnedNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 9, a)
}

func CableLabsReturnedNumber_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 9)
}

func CableLabsCallTerminationCause_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 11, a)
}

func CableLabsCallTerminationCause_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 11, a)
}

func CableLabsCallTerminationCause_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsCallTerminationCause_Lookup(p)
	return
}

func CableLabsCallTerminationCause_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsCallTerminationCause_LookupString(p)
	return
}

func CableLabsCallTerminationCause_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsCallTerminationCause_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsCallTerminationCause_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsCallTerminationCause_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsCallTerminationCause_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 11, a)
}

func CableLabsCallTerminationCause_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 11, a)
}

func CableLabsCallTerminationCause_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 11)
}

func CableLabsRelatedCallBillingCrlID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 13, a)
}

func CableLabsRelatedCallBillingCrlID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 13, a)
}

func CableLabsRelatedCallBillingCrlID_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsRelatedCallBillingCrlID_Lookup(p)
	return
}

func CableLabsRelatedCallBillingCrlID_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsRelatedCallBillingCrlID_LookupString(p)
	return
}

func CableLabsRelatedCallBillingCrlID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 13) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsRelatedCallBillingCrlID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 13) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsRelatedCallBillingCrlID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsRelatedCallBillingCrlID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsRelatedCallBillingCrlID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 13, a)
}

func CableLabsRelatedCallBillingCrlID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 13, a)
}

func CableLabsRelatedCallBillingCrlID_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 13)
}

func CableLabsFirstCallCallingPartyNum_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 14, a)
}

func CableLabsFirstCallCallingPartyNum_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 14, a)
}

func CableLabsFirstCallCallingPartyNum_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsFirstCallCallingPartyNum_Lookup(p)
	return
}

func CableLabsFirstCallCallingPartyNum_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsFirstCallCallingPartyNum_LookupString(p)
	return
}

func CableLabsFirstCallCallingPartyNum_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 14) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsFirstCallCallingPartyNum_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 14) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsFirstCallCallingPartyNum_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsFirstCallCallingPartyNum_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsFirstCallCallingPartyNum_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 14, a)
}

func CableLabsFirstCallCallingPartyNum_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 14, a)
}

func CableLabsFirstCallCallingPartyNum_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 14)
}

func CableLabsSecondCallCallingPartyNum_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 15, a)
}

func CableLabsSecondCallCallingPartyNum_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 15, a)
}

func CableLabsSecondCallCallingPartyNum_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsSecondCallCallingPartyNum_Lookup(p)
	return
}

func CableLabsSecondCallCallingPartyNum_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsSecondCallCallingPartyNum_LookupString(p)
	return
}

func CableLabsSecondCallCallingPartyNum_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 15) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsSecondCallCallingPartyNum_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 15) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsSecondCallCallingPartyNum_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsSecondCallCallingPartyNum_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsSecondCallCallingPartyNum_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 15, a)
}

func CableLabsSecondCallCallingPartyNum_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 15, a)
}

func CableLabsSecondCallCallingPartyNum_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 15)
}

func CableLabsChargeNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 16, a)
}

func CableLabsChargeNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 16, a)
}

func CableLabsChargeNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsChargeNumber_Lookup(p)
	return
}

func CableLabsChargeNumber_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsChargeNumber_LookupString(p)
	return
}

func CableLabsChargeNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 16) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsChargeNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 16) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsChargeNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsChargeNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsChargeNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 16, a)
}

func CableLabsChargeNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 16, a)
}

func CableLabsChargeNumber_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 16)
}

func CableLabsForwardedNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 17, a)
}

func CableLabsForwardedNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 17, a)
}

func CableLabsForwardedNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsForwardedNumber_Lookup(p)
	return
}

func CableLabsForwardedNumber_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsForwardedNumber_LookupString(p)
	return
}

func CableLabsForwardedNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 17) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsForwardedNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 17) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsForwardedNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsForwardedNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsForwardedNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 17, a)
}

func CableLabsForwardedNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 17, a)
}

func CableLabsForwardedNumber_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 17)
}

func CableLabsServiceName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 18, a)
}

func CableLabsServiceName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 18, a)
}

func CableLabsServiceName_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsServiceName_Lookup(p)
	return
}

func CableLabsServiceName_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsServiceName_LookupString(p)
	return
}

func CableLabsServiceName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 18) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsServiceName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 18) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsServiceName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsServiceName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsServiceName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 18, a)
}

func CableLabsServiceName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 18, a)
}

func CableLabsServiceName_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 18)
}

func CableLabsIntlCode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 20, a)
}

func CableLabsIntlCode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 20, a)
}

func CableLabsIntlCode_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsIntlCode_Lookup(p)
	return
}

func CableLabsIntlCode_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsIntlCode_LookupString(p)
	return
}

func CableLabsIntlCode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 20) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsIntlCode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 20) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsIntlCode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsIntlCode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsIntlCode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 20, a)
}

func CableLabsIntlCode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 20, a)
}

func CableLabsIntlCode_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 20)
}

func CableLabsDialAroundCode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 21, a)
}

func CableLabsDialAroundCode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 21, a)
}

func CableLabsDialAroundCode_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsDialAroundCode_Lookup(p)
	return
}

func CableLabsDialAroundCode_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsDialAroundCode_LookupString(p)
	return
}

func CableLabsDialAroundCode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 21) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsDialAroundCode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 21) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsDialAroundCode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsDialAroundCode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsDialAroundCode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 21, a)
}

func CableLabsDialAroundCode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 21, a)
}

func CableLabsDialAroundCode_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 21)
}

func CableLabsLocationRoutingNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 22, a)
}

func CableLabsLocationRoutingNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 22, a)
}

func CableLabsLocationRoutingNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsLocationRoutingNumber_Lookup(p)
	return
}

func CableLabsLocationRoutingNumber_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsLocationRoutingNumber_LookupString(p)
	return
}

func CableLabsLocationRoutingNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 22) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsLocationRoutingNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 22) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsLocationRoutingNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsLocationRoutingNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsLocationRoutingNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 22, a)
}

func CableLabsLocationRoutingNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 22, a)
}

func CableLabsLocationRoutingNumber_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 22)
}

func CableLabsCarrierIdentificationCode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 23, a)
}

func CableLabsCarrierIdentificationCode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 23, a)
}

func CableLabsCarrierIdentificationCode_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsCarrierIdentificationCode_Lookup(p)
	return
}

func CableLabsCarrierIdentificationCode_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsCarrierIdentificationCode_LookupString(p)
	return
}

func CableLabsCarrierIdentificationCode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 23) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsCarrierIdentificationCode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 23) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsCarrierIdentificationCode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsCarrierIdentificationCode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsCarrierIdentificationCode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 23, a)
}

func CableLabsCarrierIdentificationCode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 23, a)
}

func CableLabsCarrierIdentificationCode_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 23)
}

func CableLabsTrunkGroupID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 24, a)
}

func CableLabsTrunkGroupID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 24, a)
}

func CableLabsTrunkGroupID_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsTrunkGroupID_Lookup(p)
	return
}

func CableLabsTrunkGroupID_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsTrunkGroupID_LookupString(p)
	return
}

func CableLabsTrunkGroupID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 24) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsTrunkGroupID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 24) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsTrunkGroupID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsTrunkGroupID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsTrunkGroupID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 24, a)
}

func CableLabsTrunkGroupID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 24, a)
}

func CableLabsTrunkGroupID_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 24)
}

func CableLabsRoutingNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 25, a)
}

func CableLabsRoutingNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 25, a)
}

func CableLabsRoutingNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsRoutingNumber_Lookup(p)
	return
}

func CableLabsRoutingNumber_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsRoutingNumber_LookupString(p)
	return
}

func CableLabsRoutingNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 25) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsRoutingNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 25) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsRoutingNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsRoutingNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsRoutingNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 25, a)
}

func CableLabsRoutingNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 25, a)
}

func CableLabsRoutingNumber_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 25)
}

type CableLabsMTAUDPPortnum uint32

var CableLabsMTAUDPPortnum_Strings = map[CableLabsMTAUDPPortnum]string{}

func (a CableLabsMTAUDPPortnum) String() string {
	if str, ok := CableLabsMTAUDPPortnum_Strings[a]; ok {
		return str
	}
	return "CableLabsMTAUDPPortnum(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsMTAUDPPortnum_Add(p *radius.Packet, value CableLabsMTAUDPPortnum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 26, a)
}

func CableLabsMTAUDPPortnum_Get(p *radius.Packet) (value CableLabsMTAUDPPortnum) {
	value, _ = CableLabsMTAUDPPortnum_Lookup(p)
	return
}

func CableLabsMTAUDPPortnum_Gets(p *radius.Packet) (values []CableLabsMTAUDPPortnum, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 26) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsMTAUDPPortnum(i))
	}
	return
}

func CableLabsMTAUDPPortnum_Lookup(p *radius.Packet) (value CableLabsMTAUDPPortnum, err error) {
	a, ok := _CableLabs_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsMTAUDPPortnum(i)
	return
}

func CableLabsMTAUDPPortnum_Set(p *radius.Packet, value CableLabsMTAUDPPortnum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 26, a)
}

func CableLabsMTAUDPPortnum_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 26)
}

type CableLabsChannelState uint32

const (
	CableLabsChannelState_Value_Reserved CableLabsChannelState = 0
	CableLabsChannelState_Value_Open     CableLabsChannelState = 1
	CableLabsChannelState_Value_Change   CableLabsChannelState = 2
	CableLabsChannelState_Value_Close    CableLabsChannelState = 3
)

var CableLabsChannelState_Strings = map[CableLabsChannelState]string{
	CableLabsChannelState_Value_Reserved: "Reserved",
	CableLabsChannelState_Value_Open:     "Open",
	CableLabsChannelState_Value_Change:   "Change",
	CableLabsChannelState_Value_Close:    "Close",
}

func (a CableLabsChannelState) String() string {
	if str, ok := CableLabsChannelState_Strings[a]; ok {
		return str
	}
	return "CableLabsChannelState(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsChannelState_Add(p *radius.Packet, value CableLabsChannelState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 29, a)
}

func CableLabsChannelState_Get(p *radius.Packet) (value CableLabsChannelState) {
	value, _ = CableLabsChannelState_Lookup(p)
	return
}

func CableLabsChannelState_Gets(p *radius.Packet) (values []CableLabsChannelState, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 29) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsChannelState(i))
	}
	return
}

func CableLabsChannelState_Lookup(p *radius.Packet) (value CableLabsChannelState, err error) {
	a, ok := _CableLabs_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsChannelState(i)
	return
}

func CableLabsChannelState_Set(p *radius.Packet, value CableLabsChannelState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 29, a)
}

func CableLabsChannelState_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 29)
}

type CableLabsSFID uint32

var CableLabsSFID_Strings = map[CableLabsSFID]string{}

func (a CableLabsSFID) String() string {
	if str, ok := CableLabsSFID_Strings[a]; ok {
		return str
	}
	return "CableLabsSFID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsSFID_Add(p *radius.Packet, value CableLabsSFID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 30, a)
}

func CableLabsSFID_Get(p *radius.Packet) (value CableLabsSFID) {
	value, _ = CableLabsSFID_Lookup(p)
	return
}

func CableLabsSFID_Gets(p *radius.Packet) (values []CableLabsSFID, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 30) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsSFID(i))
	}
	return
}

func CableLabsSFID_Lookup(p *radius.Packet) (value CableLabsSFID, err error) {
	a, ok := _CableLabs_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsSFID(i)
	return
}

func CableLabsSFID_Set(p *radius.Packet, value CableLabsSFID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 30, a)
}

func CableLabsSFID_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 30)
}

func CableLabsErrorDescription_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 31, a)
}

func CableLabsErrorDescription_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 31, a)
}

func CableLabsErrorDescription_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsErrorDescription_Lookup(p)
	return
}

func CableLabsErrorDescription_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsErrorDescription_LookupString(p)
	return
}

func CableLabsErrorDescription_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 31) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsErrorDescription_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 31) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsErrorDescription_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsErrorDescription_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsErrorDescription_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 31, a)
}

func CableLabsErrorDescription_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 31, a)
}

func CableLabsErrorDescription_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 31)
}

func CableLabsQoSDescriptor_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 32, a)
}

func CableLabsQoSDescriptor_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 32, a)
}

func CableLabsQoSDescriptor_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsQoSDescriptor_Lookup(p)
	return
}

func CableLabsQoSDescriptor_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsQoSDescriptor_LookupString(p)
	return
}

func CableLabsQoSDescriptor_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 32) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsQoSDescriptor_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 32) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsQoSDescriptor_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsQoSDescriptor_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsQoSDescriptor_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 32, a)
}

func CableLabsQoSDescriptor_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 32, a)
}

func CableLabsQoSDescriptor_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 32)
}

type CableLabsDirectionIndicator uint32

const (
	CableLabsDirectionIndicator_Value_Undefined   CableLabsDirectionIndicator = 0
	CableLabsDirectionIndicator_Value_Originating CableLabsDirectionIndicator = 1
	CableLabsDirectionIndicator_Value_Terminating CableLabsDirectionIndicator = 2
)

var CableLabsDirectionIndicator_Strings = map[CableLabsDirectionIndicator]string{
	CableLabsDirectionIndicator_Value_Undefined:   "Undefined",
	CableLabsDirectionIndicator_Value_Originating: "Originating",
	CableLabsDirectionIndicator_Value_Terminating: "Terminating",
}

func (a CableLabsDirectionIndicator) String() string {
	if str, ok := CableLabsDirectionIndicator_Strings[a]; ok {
		return str
	}
	return "CableLabsDirectionIndicator(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsDirectionIndicator_Add(p *radius.Packet, value CableLabsDirectionIndicator) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 37, a)
}

func CableLabsDirectionIndicator_Get(p *radius.Packet) (value CableLabsDirectionIndicator) {
	value, _ = CableLabsDirectionIndicator_Lookup(p)
	return
}

func CableLabsDirectionIndicator_Gets(p *radius.Packet) (values []CableLabsDirectionIndicator, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 37) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsDirectionIndicator(i))
	}
	return
}

func CableLabsDirectionIndicator_Lookup(p *radius.Packet) (value CableLabsDirectionIndicator, err error) {
	a, ok := _CableLabs_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsDirectionIndicator(i)
	return
}

func CableLabsDirectionIndicator_Set(p *radius.Packet, value CableLabsDirectionIndicator) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 37, a)
}

func CableLabsDirectionIndicator_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 37)
}

func CableLabsTimeAdjustment_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 38, a)
}

func CableLabsTimeAdjustment_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 38, a)
}

func CableLabsTimeAdjustment_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsTimeAdjustment_Lookup(p)
	return
}

func CableLabsTimeAdjustment_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsTimeAdjustment_LookupString(p)
	return
}

func CableLabsTimeAdjustment_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 38) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsTimeAdjustment_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 38) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsTimeAdjustment_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsTimeAdjustment_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsTimeAdjustment_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 38, a)
}

func CableLabsTimeAdjustment_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 38, a)
}

func CableLabsTimeAdjustment_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 38)
}

func CableLabsSDPUpstream_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 39, a)
}

func CableLabsSDPUpstream_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 39, a)
}

func CableLabsSDPUpstream_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsSDPUpstream_Lookup(p)
	return
}

func CableLabsSDPUpstream_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsSDPUpstream_LookupString(p)
	return
}

func CableLabsSDPUpstream_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 39) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsSDPUpstream_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 39) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsSDPUpstream_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsSDPUpstream_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsSDPUpstream_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 39, a)
}

func CableLabsSDPUpstream_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 39, a)
}

func CableLabsSDPUpstream_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 39)
}

func CableLabsSDPDownstream_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 40, a)
}

func CableLabsSDPDownstream_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 40, a)
}

func CableLabsSDPDownstream_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsSDPDownstream_Lookup(p)
	return
}

func CableLabsSDPDownstream_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsSDPDownstream_LookupString(p)
	return
}

func CableLabsSDPDownstream_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 40) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsSDPDownstream_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 40) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsSDPDownstream_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsSDPDownstream_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsSDPDownstream_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 40, a)
}

func CableLabsSDPDownstream_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 40, a)
}

func CableLabsSDPDownstream_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 40)
}

func CableLabsUserInput_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 41, a)
}

func CableLabsUserInput_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 41, a)
}

func CableLabsUserInput_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsUserInput_Lookup(p)
	return
}

func CableLabsUserInput_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsUserInput_LookupString(p)
	return
}

func CableLabsUserInput_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 41) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsUserInput_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 41) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsUserInput_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsUserInput_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsUserInput_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 41, a)
}

func CableLabsUserInput_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 41, a)
}

func CableLabsUserInput_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 41)
}

func CableLabsTranslationInput_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 42, a)
}

func CableLabsTranslationInput_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 42, a)
}

func CableLabsTranslationInput_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsTranslationInput_Lookup(p)
	return
}

func CableLabsTranslationInput_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsTranslationInput_LookupString(p)
	return
}

func CableLabsTranslationInput_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 42) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsTranslationInput_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 42) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsTranslationInput_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 42)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsTranslationInput_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 42)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsTranslationInput_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 42, a)
}

func CableLabsTranslationInput_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 42, a)
}

func CableLabsTranslationInput_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 42)
}

func CableLabsRedirectedFromInfo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 43, a)
}

func CableLabsRedirectedFromInfo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 43, a)
}

func CableLabsRedirectedFromInfo_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsRedirectedFromInfo_Lookup(p)
	return
}

func CableLabsRedirectedFromInfo_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsRedirectedFromInfo_LookupString(p)
	return
}

func CableLabsRedirectedFromInfo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 43) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsRedirectedFromInfo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 43) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsRedirectedFromInfo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 43)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsRedirectedFromInfo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 43)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsRedirectedFromInfo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 43, a)
}

func CableLabsRedirectedFromInfo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 43, a)
}

func CableLabsRedirectedFromInfo_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 43)
}

func CableLabsElectronicSurveillanceInd_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 44, a)
}

func CableLabsElectronicSurveillanceInd_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 44, a)
}

func CableLabsElectronicSurveillanceInd_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsElectronicSurveillanceInd_Lookup(p)
	return
}

func CableLabsElectronicSurveillanceInd_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsElectronicSurveillanceInd_LookupString(p)
	return
}

func CableLabsElectronicSurveillanceInd_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 44) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsElectronicSurveillanceInd_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 44) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsElectronicSurveillanceInd_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsElectronicSurveillanceInd_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsElectronicSurveillanceInd_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 44, a)
}

func CableLabsElectronicSurveillanceInd_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 44, a)
}

func CableLabsElectronicSurveillanceInd_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 44)
}

func CableLabsRedirectedFromPartyNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 45, a)
}

func CableLabsRedirectedFromPartyNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 45, a)
}

func CableLabsRedirectedFromPartyNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsRedirectedFromPartyNumber_Lookup(p)
	return
}

func CableLabsRedirectedFromPartyNumber_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsRedirectedFromPartyNumber_LookupString(p)
	return
}

func CableLabsRedirectedFromPartyNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 45) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsRedirectedFromPartyNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 45) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsRedirectedFromPartyNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsRedirectedFromPartyNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsRedirectedFromPartyNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 45, a)
}

func CableLabsRedirectedFromPartyNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 45, a)
}

func CableLabsRedirectedFromPartyNumber_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 45)
}

func CableLabsRedirectedToPartyNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 46, a)
}

func CableLabsRedirectedToPartyNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 46, a)
}

func CableLabsRedirectedToPartyNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsRedirectedToPartyNumber_Lookup(p)
	return
}

func CableLabsRedirectedToPartyNumber_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsRedirectedToPartyNumber_LookupString(p)
	return
}

func CableLabsRedirectedToPartyNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 46) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsRedirectedToPartyNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 46) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsRedirectedToPartyNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsRedirectedToPartyNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsRedirectedToPartyNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 46, a)
}

func CableLabsRedirectedToPartyNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 46, a)
}

func CableLabsRedirectedToPartyNumber_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 46)
}

func CableLabsElSurveillanceDFSecurity_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 47, a)
}

func CableLabsElSurveillanceDFSecurity_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 47, a)
}

func CableLabsElSurveillanceDFSecurity_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsElSurveillanceDFSecurity_Lookup(p)
	return
}

func CableLabsElSurveillanceDFSecurity_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsElSurveillanceDFSecurity_LookupString(p)
	return
}

func CableLabsElSurveillanceDFSecurity_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 47) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsElSurveillanceDFSecurity_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 47) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsElSurveillanceDFSecurity_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 47)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsElSurveillanceDFSecurity_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 47)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsElSurveillanceDFSecurity_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 47, a)
}

func CableLabsElSurveillanceDFSecurity_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 47, a)
}

func CableLabsElSurveillanceDFSecurity_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 47)
}

func CableLabsCCCID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 48, a)
}

func CableLabsCCCID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 48, a)
}

func CableLabsCCCID_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsCCCID_Lookup(p)
	return
}

func CableLabsCCCID_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsCCCID_LookupString(p)
	return
}

func CableLabsCCCID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 48) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsCCCID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 48) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsCCCID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 48)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsCCCID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 48)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsCCCID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 48, a)
}

func CableLabsCCCID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 48, a)
}

func CableLabsCCCID_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 48)
}

func CableLabsFinancialEntityID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 49, a)
}

func CableLabsFinancialEntityID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 49, a)
}

func CableLabsFinancialEntityID_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsFinancialEntityID_Lookup(p)
	return
}

func CableLabsFinancialEntityID_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsFinancialEntityID_LookupString(p)
	return
}

func CableLabsFinancialEntityID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 49) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsFinancialEntityID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 49) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsFinancialEntityID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 49)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsFinancialEntityID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 49)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsFinancialEntityID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 49, a)
}

func CableLabsFinancialEntityID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 49, a)
}

func CableLabsFinancialEntityID_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 49)
}

type CableLabsFlowDirection uint32

const (
	CableLabsFlowDirection_Value_Reserved   CableLabsFlowDirection = 0
	CableLabsFlowDirection_Value_Upstream   CableLabsFlowDirection = 1
	CableLabsFlowDirection_Value_Downstream CableLabsFlowDirection = 2
)

var CableLabsFlowDirection_Strings = map[CableLabsFlowDirection]string{
	CableLabsFlowDirection_Value_Reserved:   "Reserved",
	CableLabsFlowDirection_Value_Upstream:   "Upstream",
	CableLabsFlowDirection_Value_Downstream: "Downstream",
}

func (a CableLabsFlowDirection) String() string {
	if str, ok := CableLabsFlowDirection_Strings[a]; ok {
		return str
	}
	return "CableLabsFlowDirection(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsFlowDirection_Add(p *radius.Packet, value CableLabsFlowDirection) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 50, a)
}

func CableLabsFlowDirection_Get(p *radius.Packet) (value CableLabsFlowDirection) {
	value, _ = CableLabsFlowDirection_Lookup(p)
	return
}

func CableLabsFlowDirection_Gets(p *radius.Packet) (values []CableLabsFlowDirection, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 50) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsFlowDirection(i))
	}
	return
}

func CableLabsFlowDirection_Lookup(p *radius.Packet) (value CableLabsFlowDirection, err error) {
	a, ok := _CableLabs_LookupVendor(p, 50)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsFlowDirection(i)
	return
}

func CableLabsFlowDirection_Set(p *radius.Packet, value CableLabsFlowDirection) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 50, a)
}

func CableLabsFlowDirection_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 50)
}

type CableLabsSignalType uint32

const (
	CableLabsSignalType_Value_Reserved      CableLabsSignalType = 0
	CableLabsSignalType_Value_NetworkSignal CableLabsSignalType = 1
	CableLabsSignalType_Value_SubjectSignal CableLabsSignalType = 2
)

var CableLabsSignalType_Strings = map[CableLabsSignalType]string{
	CableLabsSignalType_Value_Reserved:      "Reserved",
	CableLabsSignalType_Value_NetworkSignal: "Network-Signal",
	CableLabsSignalType_Value_SubjectSignal: "Subject-Signal",
}

func (a CableLabsSignalType) String() string {
	if str, ok := CableLabsSignalType_Strings[a]; ok {
		return str
	}
	return "CableLabsSignalType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsSignalType_Add(p *radius.Packet, value CableLabsSignalType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 51, a)
}

func CableLabsSignalType_Get(p *radius.Packet) (value CableLabsSignalType) {
	value, _ = CableLabsSignalType_Lookup(p)
	return
}

func CableLabsSignalType_Gets(p *radius.Packet) (values []CableLabsSignalType, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 51) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsSignalType(i))
	}
	return
}

func CableLabsSignalType_Lookup(p *radius.Packet) (value CableLabsSignalType, err error) {
	a, ok := _CableLabs_LookupVendor(p, 51)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsSignalType(i)
	return
}

func CableLabsSignalType_Set(p *radius.Packet, value CableLabsSignalType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 51, a)
}

func CableLabsSignalType_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 51)
}

type CableLabsAlertingSignal uint32

const (
	CableLabsAlertingSignal_Value_Reserved0           CableLabsAlertingSignal = 0
	CableLabsAlertingSignal_Value_Ringing             CableLabsAlertingSignal = 1
	CableLabsAlertingSignal_Value_DistinctiveRinging2 CableLabsAlertingSignal = 2
	CableLabsAlertingSignal_Value_DistinctiveRinging3 CableLabsAlertingSignal = 3
	CableLabsAlertingSignal_Value_DistinctiveRinging4 CableLabsAlertingSignal = 4
	CableLabsAlertingSignal_Value_Ringsplash          CableLabsAlertingSignal = 5
	CableLabsAlertingSignal_Value_CallWaitingTone1    CableLabsAlertingSignal = 6
	CableLabsAlertingSignal_Value_CallWaitingTone2    CableLabsAlertingSignal = 7
	CableLabsAlertingSignal_Value_CallWaitingTone3    CableLabsAlertingSignal = 8
	CableLabsAlertingSignal_Value_CallWaitingTone4    CableLabsAlertingSignal = 9
	CableLabsAlertingSignal_Value_Reserved10          CableLabsAlertingSignal = 10
	CableLabsAlertingSignal_Value_DistinctiveRinging0 CableLabsAlertingSignal = 11
	CableLabsAlertingSignal_Value_DistinctiveRinging1 CableLabsAlertingSignal = 12
	CableLabsAlertingSignal_Value_DistinctiveRinging5 CableLabsAlertingSignal = 13
	CableLabsAlertingSignal_Value_DistinctiveRinging6 CableLabsAlertingSignal = 14
	CableLabsAlertingSignal_Value_DistinctiveRinging7 CableLabsAlertingSignal = 15
)

var CableLabsAlertingSignal_Strings = map[CableLabsAlertingSignal]string{
	CableLabsAlertingSignal_Value_Reserved0:           "Reserved-0",
	CableLabsAlertingSignal_Value_Ringing:             "Ringing",
	CableLabsAlertingSignal_Value_DistinctiveRinging2: "Distinctive-Ringing-2",
	CableLabsAlertingSignal_Value_DistinctiveRinging3: "Distinctive-Ringing-3",
	CableLabsAlertingSignal_Value_DistinctiveRinging4: "Distinctive-Ringing-4",
	CableLabsAlertingSignal_Value_Ringsplash:          "Ringsplash",
	CableLabsAlertingSignal_Value_CallWaitingTone1:    "Call-Waiting-Tone-1",
	CableLabsAlertingSignal_Value_CallWaitingTone2:    "Call-Waiting-Tone-2",
	CableLabsAlertingSignal_Value_CallWaitingTone3:    "Call-Waiting-Tone-3",
	CableLabsAlertingSignal_Value_CallWaitingTone4:    "Call-Waiting-Tone-4",
	CableLabsAlertingSignal_Value_Reserved10:          "Reserved-10",
	CableLabsAlertingSignal_Value_DistinctiveRinging0: "Distinctive-Ringing-0",
	CableLabsAlertingSignal_Value_DistinctiveRinging1: "Distinctive-Ringing-1",
	CableLabsAlertingSignal_Value_DistinctiveRinging5: "Distinctive-Ringing-5",
	CableLabsAlertingSignal_Value_DistinctiveRinging6: "Distinctive-Ringing-6",
	CableLabsAlertingSignal_Value_DistinctiveRinging7: "Distinctive-Ringing-7",
}

func (a CableLabsAlertingSignal) String() string {
	if str, ok := CableLabsAlertingSignal_Strings[a]; ok {
		return str
	}
	return "CableLabsAlertingSignal(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsAlertingSignal_Add(p *radius.Packet, value CableLabsAlertingSignal) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 52, a)
}

func CableLabsAlertingSignal_Get(p *radius.Packet) (value CableLabsAlertingSignal) {
	value, _ = CableLabsAlertingSignal_Lookup(p)
	return
}

func CableLabsAlertingSignal_Gets(p *radius.Packet) (values []CableLabsAlertingSignal, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 52) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsAlertingSignal(i))
	}
	return
}

func CableLabsAlertingSignal_Lookup(p *radius.Packet) (value CableLabsAlertingSignal, err error) {
	a, ok := _CableLabs_LookupVendor(p, 52)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsAlertingSignal(i)
	return
}

func CableLabsAlertingSignal_Set(p *radius.Packet, value CableLabsAlertingSignal) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 52, a)
}

func CableLabsAlertingSignal_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 52)
}

type CableLabsSubjectAudibleSignal uint32

var CableLabsSubjectAudibleSignal_Strings = map[CableLabsSubjectAudibleSignal]string{}

func (a CableLabsSubjectAudibleSignal) String() string {
	if str, ok := CableLabsSubjectAudibleSignal_Strings[a]; ok {
		return str
	}
	return "CableLabsSubjectAudibleSignal(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsSubjectAudibleSignal_Add(p *radius.Packet, value CableLabsSubjectAudibleSignal) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 53, a)
}

func CableLabsSubjectAudibleSignal_Get(p *radius.Packet) (value CableLabsSubjectAudibleSignal) {
	value, _ = CableLabsSubjectAudibleSignal_Lookup(p)
	return
}

func CableLabsSubjectAudibleSignal_Gets(p *radius.Packet) (values []CableLabsSubjectAudibleSignal, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 53) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsSubjectAudibleSignal(i))
	}
	return
}

func CableLabsSubjectAudibleSignal_Lookup(p *radius.Packet) (value CableLabsSubjectAudibleSignal, err error) {
	a, ok := _CableLabs_LookupVendor(p, 53)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsSubjectAudibleSignal(i)
	return
}

func CableLabsSubjectAudibleSignal_Set(p *radius.Packet, value CableLabsSubjectAudibleSignal) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 53, a)
}

func CableLabsSubjectAudibleSignal_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 53)
}

func CableLabsTerminalDisplayInfo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 54, a)
}

func CableLabsTerminalDisplayInfo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 54, a)
}

func CableLabsTerminalDisplayInfo_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsTerminalDisplayInfo_Lookup(p)
	return
}

func CableLabsTerminalDisplayInfo_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsTerminalDisplayInfo_LookupString(p)
	return
}

func CableLabsTerminalDisplayInfo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 54) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsTerminalDisplayInfo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 54) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsTerminalDisplayInfo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 54)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsTerminalDisplayInfo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 54)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsTerminalDisplayInfo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 54, a)
}

func CableLabsTerminalDisplayInfo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 54, a)
}

func CableLabsTerminalDisplayInfo_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 54)
}

func CableLabsSwitchHookFlash_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 55, a)
}

func CableLabsSwitchHookFlash_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 55, a)
}

func CableLabsSwitchHookFlash_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsSwitchHookFlash_Lookup(p)
	return
}

func CableLabsSwitchHookFlash_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsSwitchHookFlash_LookupString(p)
	return
}

func CableLabsSwitchHookFlash_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 55) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsSwitchHookFlash_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 55) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsSwitchHookFlash_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 55)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsSwitchHookFlash_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 55)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsSwitchHookFlash_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 55, a)
}

func CableLabsSwitchHookFlash_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 55, a)
}

func CableLabsSwitchHookFlash_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 55)
}

func CableLabsDialedDigits_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 56, a)
}

func CableLabsDialedDigits_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 56, a)
}

func CableLabsDialedDigits_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsDialedDigits_Lookup(p)
	return
}

func CableLabsDialedDigits_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsDialedDigits_LookupString(p)
	return
}

func CableLabsDialedDigits_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 56) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsDialedDigits_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 56) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsDialedDigits_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 56)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsDialedDigits_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 56)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsDialedDigits_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 56, a)
}

func CableLabsDialedDigits_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 56, a)
}

func CableLabsDialedDigits_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 56)
}

func CableLabsMiscSignalingInformation_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 57, a)
}

func CableLabsMiscSignalingInformation_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 57, a)
}

func CableLabsMiscSignalingInformation_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsMiscSignalingInformation_Lookup(p)
	return
}

func CableLabsMiscSignalingInformation_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsMiscSignalingInformation_LookupString(p)
	return
}

func CableLabsMiscSignalingInformation_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 57) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsMiscSignalingInformation_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 57) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsMiscSignalingInformation_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 57)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsMiscSignalingInformation_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 57)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsMiscSignalingInformation_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 57, a)
}

func CableLabsMiscSignalingInformation_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 57, a)
}

func CableLabsMiscSignalingInformation_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 57)
}

type CableLabsAMOpaqueData uint32

const (
	CableLabsAMOpaqueData_Value_Reserved0               CableLabsAMOpaqueData = 0
	CableLabsAMOpaqueData_Value_DialTone                CableLabsAMOpaqueData = 1
	CableLabsAMOpaqueData_Value_StutterDialTone         CableLabsAMOpaqueData = 2
	CableLabsAMOpaqueData_Value_RingBackTone            CableLabsAMOpaqueData = 3
	CableLabsAMOpaqueData_Value_ReorderTone             CableLabsAMOpaqueData = 4
	CableLabsAMOpaqueData_Value_BusyTone                CableLabsAMOpaqueData = 5
	CableLabsAMOpaqueData_Value_ConfirmationTone        CableLabsAMOpaqueData = 6
	CableLabsAMOpaqueData_Value_Reserved7               CableLabsAMOpaqueData = 7
	CableLabsAMOpaqueData_Value_MessageWaitingIndicator CableLabsAMOpaqueData = 8
	CableLabsAMOpaqueData_Value_OffHookWarningTone      CableLabsAMOpaqueData = 9
)

var CableLabsAMOpaqueData_Strings = map[CableLabsAMOpaqueData]string{
	CableLabsAMOpaqueData_Value_Reserved0:               "Reserved-0",
	CableLabsAMOpaqueData_Value_DialTone:                "Dial-Tone",
	CableLabsAMOpaqueData_Value_StutterDialTone:         "Stutter-Dial-Tone",
	CableLabsAMOpaqueData_Value_RingBackTone:            "Ring-Back-Tone",
	CableLabsAMOpaqueData_Value_ReorderTone:             "Reorder-Tone",
	CableLabsAMOpaqueData_Value_BusyTone:                "Busy-Tone",
	CableLabsAMOpaqueData_Value_ConfirmationTone:        "Confirmation-Tone",
	CableLabsAMOpaqueData_Value_Reserved7:               "Reserved-7",
	CableLabsAMOpaqueData_Value_MessageWaitingIndicator: "Message-Waiting-Indicator",
	CableLabsAMOpaqueData_Value_OffHookWarningTone:      "Off-hook-Warning-Tone",
}

func (a CableLabsAMOpaqueData) String() string {
	if str, ok := CableLabsAMOpaqueData_Strings[a]; ok {
		return str
	}
	return "CableLabsAMOpaqueData(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsAMOpaqueData_Add(p *radius.Packet, value CableLabsAMOpaqueData) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 61, a)
}

func CableLabsAMOpaqueData_Get(p *radius.Packet) (value CableLabsAMOpaqueData) {
	value, _ = CableLabsAMOpaqueData_Lookup(p)
	return
}

func CableLabsAMOpaqueData_Gets(p *radius.Packet) (values []CableLabsAMOpaqueData, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 61) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsAMOpaqueData(i))
	}
	return
}

func CableLabsAMOpaqueData_Lookup(p *radius.Packet) (value CableLabsAMOpaqueData, err error) {
	a, ok := _CableLabs_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsAMOpaqueData(i)
	return
}

func CableLabsAMOpaqueData_Set(p *radius.Packet, value CableLabsAMOpaqueData) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 61, a)
}

func CableLabsAMOpaqueData_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 61)
}

type CableLabsSubscriberID uint32

var CableLabsSubscriberID_Strings = map[CableLabsSubscriberID]string{}

func (a CableLabsSubscriberID) String() string {
	if str, ok := CableLabsSubscriberID_Strings[a]; ok {
		return str
	}
	return "CableLabsSubscriberID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsSubscriberID_Add(p *radius.Packet, value CableLabsSubscriberID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 62, a)
}

func CableLabsSubscriberID_Get(p *radius.Packet) (value CableLabsSubscriberID) {
	value, _ = CableLabsSubscriberID_Lookup(p)
	return
}

func CableLabsSubscriberID_Gets(p *radius.Packet) (values []CableLabsSubscriberID, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 62) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsSubscriberID(i))
	}
	return
}

func CableLabsSubscriberID_Lookup(p *radius.Packet) (value CableLabsSubscriberID, err error) {
	a, ok := _CableLabs_LookupVendor(p, 62)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsSubscriberID(i)
	return
}

func CableLabsSubscriberID_Set(p *radius.Packet, value CableLabsSubscriberID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 62, a)
}

func CableLabsSubscriberID_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 62)
}

type CableLabsVolumeUsageLimit uint32

var CableLabsVolumeUsageLimit_Strings = map[CableLabsVolumeUsageLimit]string{}

func (a CableLabsVolumeUsageLimit) String() string {
	if str, ok := CableLabsVolumeUsageLimit_Strings[a]; ok {
		return str
	}
	return "CableLabsVolumeUsageLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsVolumeUsageLimit_Add(p *radius.Packet, value CableLabsVolumeUsageLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 63, a)
}

func CableLabsVolumeUsageLimit_Get(p *radius.Packet) (value CableLabsVolumeUsageLimit) {
	value, _ = CableLabsVolumeUsageLimit_Lookup(p)
	return
}

func CableLabsVolumeUsageLimit_Gets(p *radius.Packet) (values []CableLabsVolumeUsageLimit, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 63) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsVolumeUsageLimit(i))
	}
	return
}

func CableLabsVolumeUsageLimit_Lookup(p *radius.Packet) (value CableLabsVolumeUsageLimit, err error) {
	a, ok := _CableLabs_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsVolumeUsageLimit(i)
	return
}

func CableLabsVolumeUsageLimit_Set(p *radius.Packet, value CableLabsVolumeUsageLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 63, a)
}

func CableLabsVolumeUsageLimit_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 63)
}

type CableLabsGateUsageInfo uint32

var CableLabsGateUsageInfo_Strings = map[CableLabsGateUsageInfo]string{}

func (a CableLabsGateUsageInfo) String() string {
	if str, ok := CableLabsGateUsageInfo_Strings[a]; ok {
		return str
	}
	return "CableLabsGateUsageInfo(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsGateUsageInfo_Add(p *radius.Packet, value CableLabsGateUsageInfo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 64, a)
}

func CableLabsGateUsageInfo_Get(p *radius.Packet) (value CableLabsGateUsageInfo) {
	value, _ = CableLabsGateUsageInfo_Lookup(p)
	return
}

func CableLabsGateUsageInfo_Gets(p *radius.Packet) (values []CableLabsGateUsageInfo, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 64) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsGateUsageInfo(i))
	}
	return
}

func CableLabsGateUsageInfo_Lookup(p *radius.Packet) (value CableLabsGateUsageInfo, err error) {
	a, ok := _CableLabs_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsGateUsageInfo(i)
	return
}

func CableLabsGateUsageInfo_Set(p *radius.Packet, value CableLabsGateUsageInfo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 64, a)
}

func CableLabsGateUsageInfo_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 64)
}

type CableLabsElementRequestingQoS uint32

const (
	CableLabsElementRequestingQoS_Value_Client         CableLabsElementRequestingQoS = 0
	CableLabsElementRequestingQoS_Value_PolicyServer   CableLabsElementRequestingQoS = 1
	CableLabsElementRequestingQoS_Value_EmbeddedClient CableLabsElementRequestingQoS = 2
)

var CableLabsElementRequestingQoS_Strings = map[CableLabsElementRequestingQoS]string{
	CableLabsElementRequestingQoS_Value_Client:         "Client",
	CableLabsElementRequestingQoS_Value_PolicyServer:   "Policy-Server",
	CableLabsElementRequestingQoS_Value_EmbeddedClient: "Embedded-Client",
}

func (a CableLabsElementRequestingQoS) String() string {
	if str, ok := CableLabsElementRequestingQoS_Strings[a]; ok {
		return str
	}
	return "CableLabsElementRequestingQoS(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsElementRequestingQoS_Add(p *radius.Packet, value CableLabsElementRequestingQoS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 65, a)
}

func CableLabsElementRequestingQoS_Get(p *radius.Packet) (value CableLabsElementRequestingQoS) {
	value, _ = CableLabsElementRequestingQoS_Lookup(p)
	return
}

func CableLabsElementRequestingQoS_Gets(p *radius.Packet) (values []CableLabsElementRequestingQoS, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 65) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsElementRequestingQoS(i))
	}
	return
}

func CableLabsElementRequestingQoS_Lookup(p *radius.Packet) (value CableLabsElementRequestingQoS, err error) {
	a, ok := _CableLabs_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsElementRequestingQoS(i)
	return
}

func CableLabsElementRequestingQoS_Set(p *radius.Packet, value CableLabsElementRequestingQoS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 65, a)
}

func CableLabsElementRequestingQoS_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 65)
}

type CableLabsQoSReleaseReason uint32

const (
	CableLabsQoSReleaseReason_Value_GateClosedByPS                            CableLabsQoSReleaseReason = 1
	CableLabsQoSReleaseReason_Value_InactivityResourceRecoveryTimerExpiration CableLabsQoSReleaseReason = 2
	CableLabsQoSReleaseReason_Value_CMFailure                                 CableLabsQoSReleaseReason = 3
	CableLabsQoSReleaseReason_Value_PreEmpted                                 CableLabsQoSReleaseReason = 4
	CableLabsQoSReleaseReason_Value_RSVPPathTearRequest                       CableLabsQoSReleaseReason = 5
	CableLabsQoSReleaseReason_Value_CMRequest                                 CableLabsQoSReleaseReason = 6
	CableLabsQoSReleaseReason_Value_AdmittedTimerExpiration                   CableLabsQoSReleaseReason = 7
	CableLabsQoSReleaseReason_Value_Other                                     CableLabsQoSReleaseReason = 127
)

var CableLabsQoSReleaseReason_Strings = map[CableLabsQoSReleaseReason]string{
	CableLabsQoSReleaseReason_Value_GateClosedByPS:                            "Gate-Closed-By-PS",
	CableLabsQoSReleaseReason_Value_InactivityResourceRecoveryTimerExpiration: "Inactivity-Resource-Recovery-Timer-Expiration",
	CableLabsQoSReleaseReason_Value_CMFailure:                                 "CM-Failure",
	CableLabsQoSReleaseReason_Value_PreEmpted:                                 "Pre-Empted",
	CableLabsQoSReleaseReason_Value_RSVPPathTearRequest:                       "RSVP-PathTear-request",
	CableLabsQoSReleaseReason_Value_CMRequest:                                 "CM-Request",
	CableLabsQoSReleaseReason_Value_AdmittedTimerExpiration:                   "Admitted-Timer-Expiration",
	CableLabsQoSReleaseReason_Value_Other:                                     "Other",
}

func (a CableLabsQoSReleaseReason) String() string {
	if str, ok := CableLabsQoSReleaseReason_Strings[a]; ok {
		return str
	}
	return "CableLabsQoSReleaseReason(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsQoSReleaseReason_Add(p *radius.Packet, value CableLabsQoSReleaseReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 66, a)
}

func CableLabsQoSReleaseReason_Get(p *radius.Packet) (value CableLabsQoSReleaseReason) {
	value, _ = CableLabsQoSReleaseReason_Lookup(p)
	return
}

func CableLabsQoSReleaseReason_Gets(p *radius.Packet) (values []CableLabsQoSReleaseReason, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 66) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsQoSReleaseReason(i))
	}
	return
}

func CableLabsQoSReleaseReason_Lookup(p *radius.Packet) (value CableLabsQoSReleaseReason, err error) {
	a, ok := _CableLabs_LookupVendor(p, 66)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsQoSReleaseReason(i)
	return
}

func CableLabsQoSReleaseReason_Set(p *radius.Packet, value CableLabsQoSReleaseReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 66, a)
}

func CableLabsQoSReleaseReason_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 66)
}

type CableLabsPolicyDeniedReason uint32

const (
	CableLabsPolicyDeniedReason_Value_PolicyServerAdmissionControlFailure CableLabsPolicyDeniedReason = 1
	CableLabsPolicyDeniedReason_Value_InsufficientResources               CableLabsPolicyDeniedReason = 2
	CableLabsPolicyDeniedReason_Value_UnknownSubscriber                   CableLabsPolicyDeniedReason = 3
	CableLabsPolicyDeniedReason_Value_UnauthorizedAMID                    CableLabsPolicyDeniedReason = 4
	CableLabsPolicyDeniedReason_Value_UndefinedServiceClassName           CableLabsPolicyDeniedReason = 5
	CableLabsPolicyDeniedReason_Value_IncompatibleEnvelope                CableLabsPolicyDeniedReason = 6
	CableLabsPolicyDeniedReason_Value_Other                               CableLabsPolicyDeniedReason = 127
)

var CableLabsPolicyDeniedReason_Strings = map[CableLabsPolicyDeniedReason]string{
	CableLabsPolicyDeniedReason_Value_PolicyServerAdmissionControlFailure: "Policy-Server-Admission-Control-Failure",
	CableLabsPolicyDeniedReason_Value_InsufficientResources:               "Insufficient-Resources",
	CableLabsPolicyDeniedReason_Value_UnknownSubscriber:                   "Unknown-Subscriber",
	CableLabsPolicyDeniedReason_Value_UnauthorizedAMID:                    "Unauthorized-AMID",
	CableLabsPolicyDeniedReason_Value_UndefinedServiceClassName:           "Undefined-Service-Class-Name",
	CableLabsPolicyDeniedReason_Value_IncompatibleEnvelope:                "Incompatible-Envelope",
	CableLabsPolicyDeniedReason_Value_Other:                               "Other",
}

func (a CableLabsPolicyDeniedReason) String() string {
	if str, ok := CableLabsPolicyDeniedReason_Strings[a]; ok {
		return str
	}
	return "CableLabsPolicyDeniedReason(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsPolicyDeniedReason_Add(p *radius.Packet, value CableLabsPolicyDeniedReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 67, a)
}

func CableLabsPolicyDeniedReason_Get(p *radius.Packet) (value CableLabsPolicyDeniedReason) {
	value, _ = CableLabsPolicyDeniedReason_Lookup(p)
	return
}

func CableLabsPolicyDeniedReason_Gets(p *radius.Packet) (values []CableLabsPolicyDeniedReason, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 67) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsPolicyDeniedReason(i))
	}
	return
}

func CableLabsPolicyDeniedReason_Lookup(p *radius.Packet) (value CableLabsPolicyDeniedReason, err error) {
	a, ok := _CableLabs_LookupVendor(p, 67)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsPolicyDeniedReason(i)
	return
}

func CableLabsPolicyDeniedReason_Set(p *radius.Packet, value CableLabsPolicyDeniedReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 67, a)
}

func CableLabsPolicyDeniedReason_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 67)
}

type CableLabsPolicyDeletedReason uint32

const (
	CableLabsPolicyDeletedReason_Value_ApplicationManagerRequest CableLabsPolicyDeletedReason = 1
	CableLabsPolicyDeletedReason_Value_CMTSDecistion             CableLabsPolicyDeletedReason = 2
	CableLabsPolicyDeletedReason_Value_Other                     CableLabsPolicyDeletedReason = 127
)

var CableLabsPolicyDeletedReason_Strings = map[CableLabsPolicyDeletedReason]string{
	CableLabsPolicyDeletedReason_Value_ApplicationManagerRequest: "Application-Manager-Request",
	CableLabsPolicyDeletedReason_Value_CMTSDecistion:             "CMTS-Decistion",
	CableLabsPolicyDeletedReason_Value_Other:                     "Other",
}

func (a CableLabsPolicyDeletedReason) String() string {
	if str, ok := CableLabsPolicyDeletedReason_Strings[a]; ok {
		return str
	}
	return "CableLabsPolicyDeletedReason(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsPolicyDeletedReason_Add(p *radius.Packet, value CableLabsPolicyDeletedReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 68, a)
}

func CableLabsPolicyDeletedReason_Get(p *radius.Packet) (value CableLabsPolicyDeletedReason) {
	value, _ = CableLabsPolicyDeletedReason_Lookup(p)
	return
}

func CableLabsPolicyDeletedReason_Gets(p *radius.Packet) (values []CableLabsPolicyDeletedReason, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 68) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsPolicyDeletedReason(i))
	}
	return
}

func CableLabsPolicyDeletedReason_Lookup(p *radius.Packet) (value CableLabsPolicyDeletedReason, err error) {
	a, ok := _CableLabs_LookupVendor(p, 68)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsPolicyDeletedReason(i)
	return
}

func CableLabsPolicyDeletedReason_Set(p *radius.Packet, value CableLabsPolicyDeletedReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 68, a)
}

func CableLabsPolicyDeletedReason_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 68)
}

type CableLabsPolicyUpdateReason uint32

const (
	CableLabsPolicyUpdateReason_Value_TrafficProfile  CableLabsPolicyUpdateReason = 1
	CableLabsPolicyUpdateReason_Value_Classifier      CableLabsPolicyUpdateReason = 2
	CableLabsPolicyUpdateReason_Value_VolumeLimit     CableLabsPolicyUpdateReason = 3
	CableLabsPolicyUpdateReason_Value_TimeLimit       CableLabsPolicyUpdateReason = 4
	CableLabsPolicyUpdateReason_Value_OpaqueData      CableLabsPolicyUpdateReason = 5
	CableLabsPolicyUpdateReason_Value_MultipleUpdates CableLabsPolicyUpdateReason = 6
	CableLabsPolicyUpdateReason_Value_Other           CableLabsPolicyUpdateReason = 127
)

var CableLabsPolicyUpdateReason_Strings = map[CableLabsPolicyUpdateReason]string{
	CableLabsPolicyUpdateReason_Value_TrafficProfile:  "Traffic-Profile",
	CableLabsPolicyUpdateReason_Value_Classifier:      "Classifier",
	CableLabsPolicyUpdateReason_Value_VolumeLimit:     "Volume-Limit",
	CableLabsPolicyUpdateReason_Value_TimeLimit:       "Time-Limit",
	CableLabsPolicyUpdateReason_Value_OpaqueData:      "Opaque-Data",
	CableLabsPolicyUpdateReason_Value_MultipleUpdates: "Multiple-Updates",
	CableLabsPolicyUpdateReason_Value_Other:           "Other",
}

func (a CableLabsPolicyUpdateReason) String() string {
	if str, ok := CableLabsPolicyUpdateReason_Strings[a]; ok {
		return str
	}
	return "CableLabsPolicyUpdateReason(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsPolicyUpdateReason_Add(p *radius.Packet, value CableLabsPolicyUpdateReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 69, a)
}

func CableLabsPolicyUpdateReason_Get(p *radius.Packet) (value CableLabsPolicyUpdateReason) {
	value, _ = CableLabsPolicyUpdateReason_Lookup(p)
	return
}

func CableLabsPolicyUpdateReason_Gets(p *radius.Packet) (values []CableLabsPolicyUpdateReason, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 69) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsPolicyUpdateReason(i))
	}
	return
}

func CableLabsPolicyUpdateReason_Lookup(p *radius.Packet) (value CableLabsPolicyUpdateReason, err error) {
	a, ok := _CableLabs_LookupVendor(p, 69)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsPolicyUpdateReason(i)
	return
}

func CableLabsPolicyUpdateReason_Set(p *radius.Packet, value CableLabsPolicyUpdateReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 69, a)
}

func CableLabsPolicyUpdateReason_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 69)
}

type CableLabsPolicyDecisionStatus uint32

const (
	CableLabsPolicyDecisionStatus_Value_PolicyApproved CableLabsPolicyDecisionStatus = 1
	CableLabsPolicyDecisionStatus_Value_PolicyDenied   CableLabsPolicyDecisionStatus = 2
)

var CableLabsPolicyDecisionStatus_Strings = map[CableLabsPolicyDecisionStatus]string{
	CableLabsPolicyDecisionStatus_Value_PolicyApproved: "Policy-Approved",
	CableLabsPolicyDecisionStatus_Value_PolicyDenied:   "Policy-Denied",
}

func (a CableLabsPolicyDecisionStatus) String() string {
	if str, ok := CableLabsPolicyDecisionStatus_Strings[a]; ok {
		return str
	}
	return "CableLabsPolicyDecisionStatus(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsPolicyDecisionStatus_Add(p *radius.Packet, value CableLabsPolicyDecisionStatus) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 70, a)
}

func CableLabsPolicyDecisionStatus_Get(p *radius.Packet) (value CableLabsPolicyDecisionStatus) {
	value, _ = CableLabsPolicyDecisionStatus_Lookup(p)
	return
}

func CableLabsPolicyDecisionStatus_Gets(p *radius.Packet) (values []CableLabsPolicyDecisionStatus, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 70) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsPolicyDecisionStatus(i))
	}
	return
}

func CableLabsPolicyDecisionStatus_Lookup(p *radius.Packet) (value CableLabsPolicyDecisionStatus, err error) {
	a, ok := _CableLabs_LookupVendor(p, 70)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsPolicyDecisionStatus(i)
	return
}

func CableLabsPolicyDecisionStatus_Set(p *radius.Packet, value CableLabsPolicyDecisionStatus) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 70, a)
}

func CableLabsPolicyDecisionStatus_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 70)
}

type CableLabsApplicationManagerID uint32

var CableLabsApplicationManagerID_Strings = map[CableLabsApplicationManagerID]string{}

func (a CableLabsApplicationManagerID) String() string {
	if str, ok := CableLabsApplicationManagerID_Strings[a]; ok {
		return str
	}
	return "CableLabsApplicationManagerID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsApplicationManagerID_Add(p *radius.Packet, value CableLabsApplicationManagerID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 71, a)
}

func CableLabsApplicationManagerID_Get(p *radius.Packet) (value CableLabsApplicationManagerID) {
	value, _ = CableLabsApplicationManagerID_Lookup(p)
	return
}

func CableLabsApplicationManagerID_Gets(p *radius.Packet) (values []CableLabsApplicationManagerID, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 71) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsApplicationManagerID(i))
	}
	return
}

func CableLabsApplicationManagerID_Lookup(p *radius.Packet) (value CableLabsApplicationManagerID, err error) {
	a, ok := _CableLabs_LookupVendor(p, 71)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsApplicationManagerID(i)
	return
}

func CableLabsApplicationManagerID_Set(p *radius.Packet, value CableLabsApplicationManagerID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 71, a)
}

func CableLabsApplicationManagerID_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 71)
}

type CableLabsTimeUsageLimit uint32

var CableLabsTimeUsageLimit_Strings = map[CableLabsTimeUsageLimit]string{}

func (a CableLabsTimeUsageLimit) String() string {
	if str, ok := CableLabsTimeUsageLimit_Strings[a]; ok {
		return str
	}
	return "CableLabsTimeUsageLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsTimeUsageLimit_Add(p *radius.Packet, value CableLabsTimeUsageLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 72, a)
}

func CableLabsTimeUsageLimit_Get(p *radius.Packet) (value CableLabsTimeUsageLimit) {
	value, _ = CableLabsTimeUsageLimit_Lookup(p)
	return
}

func CableLabsTimeUsageLimit_Gets(p *radius.Packet) (values []CableLabsTimeUsageLimit, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 72) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsTimeUsageLimit(i))
	}
	return
}

func CableLabsTimeUsageLimit_Lookup(p *radius.Packet) (value CableLabsTimeUsageLimit, err error) {
	a, ok := _CableLabs_LookupVendor(p, 72)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsTimeUsageLimit(i)
	return
}

func CableLabsTimeUsageLimit_Set(p *radius.Packet, value CableLabsTimeUsageLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 72, a)
}

func CableLabsTimeUsageLimit_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 72)
}

type CableLabsGateTimeInfo uint32

var CableLabsGateTimeInfo_Strings = map[CableLabsGateTimeInfo]string{}

func (a CableLabsGateTimeInfo) String() string {
	if str, ok := CableLabsGateTimeInfo_Strings[a]; ok {
		return str
	}
	return "CableLabsGateTimeInfo(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CableLabsGateTimeInfo_Add(p *radius.Packet, value CableLabsGateTimeInfo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_AddVendor(p, 73, a)
}

func CableLabsGateTimeInfo_Get(p *radius.Packet) (value CableLabsGateTimeInfo) {
	value, _ = CableLabsGateTimeInfo_Lookup(p)
	return
}

func CableLabsGateTimeInfo_Gets(p *radius.Packet) (values []CableLabsGateTimeInfo, err error) {
	var i uint32
	for _, attr := range _CableLabs_GetsVendor(p, 73) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CableLabsGateTimeInfo(i))
	}
	return
}

func CableLabsGateTimeInfo_Lookup(p *radius.Packet) (value CableLabsGateTimeInfo, err error) {
	a, ok := _CableLabs_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CableLabsGateTimeInfo(i)
	return
}

func CableLabsGateTimeInfo_Set(p *radius.Packet, value CableLabsGateTimeInfo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _CableLabs_SetVendor(p, 73, a)
}

func CableLabsGateTimeInfo_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 73)
}

func CableLabsAccountCode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 80, a)
}

func CableLabsAccountCode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 80, a)
}

func CableLabsAccountCode_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsAccountCode_Lookup(p)
	return
}

func CableLabsAccountCode_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsAccountCode_LookupString(p)
	return
}

func CableLabsAccountCode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 80) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsAccountCode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 80) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsAccountCode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 80)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsAccountCode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 80)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsAccountCode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 80, a)
}

func CableLabsAccountCode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 80, a)
}

func CableLabsAccountCode_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 80)
}

func CableLabsAuthorizationCode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 81, a)
}

func CableLabsAuthorizationCode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_AddVendor(p, 81, a)
}

func CableLabsAuthorizationCode_Get(p *radius.Packet) (value []byte) {
	value, _ = CableLabsAuthorizationCode_Lookup(p)
	return
}

func CableLabsAuthorizationCode_GetString(p *radius.Packet) (value string) {
	value, _ = CableLabsAuthorizationCode_LookupString(p)
	return
}

func CableLabsAuthorizationCode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _CableLabs_GetsVendor(p, 81) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsAuthorizationCode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _CableLabs_GetsVendor(p, 81) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CableLabsAuthorizationCode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _CableLabs_LookupVendor(p, 81)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CableLabsAuthorizationCode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _CableLabs_LookupVendor(p, 81)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CableLabsAuthorizationCode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 81, a)
}

func CableLabsAuthorizationCode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _CableLabs_SetVendor(p, 81, a)
}

func CableLabsAuthorizationCode_Del(p *radius.Packet) {
	_CableLabs_DelVendor(p, 81)
}
