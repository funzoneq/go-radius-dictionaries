// Code generated by radius-dict-gen. DO NOT EDIT.

package xylan

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Xylan_VendorID = 800
)

func _Xylan_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Xylan_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Xylan_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Xylan_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Xylan_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Xylan_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Xylan_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Xylan_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Xylan_AddVendor(p, typ, attr)
}

func _Xylan_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Xylan_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

type XylanAuthGroup uint32

var XylanAuthGroup_Strings = map[XylanAuthGroup]string{}

func (a XylanAuthGroup) String() string {
	if str, ok := XylanAuthGroup_Strings[a]; ok {
		return str
	}
	return "XylanAuthGroup(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func XylanAuthGroup_Add(p *radius.Packet, value XylanAuthGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Xylan_AddVendor(p, 1, a)
}

func XylanAuthGroup_Get(p *radius.Packet) (value XylanAuthGroup) {
	value, _ = XylanAuthGroup_Lookup(p)
	return
}

func XylanAuthGroup_Gets(p *radius.Packet) (values []XylanAuthGroup, err error) {
	var i uint32
	for _, attr := range _Xylan_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, XylanAuthGroup(i))
	}
	return
}

func XylanAuthGroup_Lookup(p *radius.Packet) (value XylanAuthGroup, err error) {
	a, ok := _Xylan_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = XylanAuthGroup(i)
	return
}

func XylanAuthGroup_Set(p *radius.Packet, value XylanAuthGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Xylan_SetVendor(p, 1, a)
}

func XylanAuthGroup_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 1)
}

func XylanSlotPort_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 2, a)
}

func XylanSlotPort_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 2, a)
}

func XylanSlotPort_Get(p *radius.Packet) (value []byte) {
	value, _ = XylanSlotPort_Lookup(p)
	return
}

func XylanSlotPort_GetString(p *radius.Packet) (value string) {
	value, _ = XylanSlotPort_LookupString(p)
	return
}

func XylanSlotPort_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Xylan_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanSlotPort_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Xylan_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanSlotPort_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Xylan_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func XylanSlotPort_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Xylan_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func XylanSlotPort_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 2, a)
}

func XylanSlotPort_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 2, a)
}

func XylanSlotPort_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 2)
}

func XylanTimeOfDay_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 3, a)
}

func XylanTimeOfDay_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 3, a)
}

func XylanTimeOfDay_Get(p *radius.Packet) (value []byte) {
	value, _ = XylanTimeOfDay_Lookup(p)
	return
}

func XylanTimeOfDay_GetString(p *radius.Packet) (value string) {
	value, _ = XylanTimeOfDay_LookupString(p)
	return
}

func XylanTimeOfDay_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Xylan_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanTimeOfDay_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Xylan_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanTimeOfDay_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Xylan_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func XylanTimeOfDay_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Xylan_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func XylanTimeOfDay_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 3, a)
}

func XylanTimeOfDay_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 3, a)
}

func XylanTimeOfDay_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 3)
}

func XylanClientIPAddr_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 4, a)
}

func XylanClientIPAddr_Get(p *radius.Packet) (value net.IP) {
	value, _ = XylanClientIPAddr_Lookup(p)
	return
}

func XylanClientIPAddr_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Xylan_GetsVendor(p, 4) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanClientIPAddr_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Xylan_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func XylanClientIPAddr_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 4, a)
}

func XylanClientIPAddr_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 4)
}

func XylanGroupDesc_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 5, a)
}

func XylanGroupDesc_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 5, a)
}

func XylanGroupDesc_Get(p *radius.Packet) (value []byte) {
	value, _ = XylanGroupDesc_Lookup(p)
	return
}

func XylanGroupDesc_GetString(p *radius.Packet) (value string) {
	value, _ = XylanGroupDesc_LookupString(p)
	return
}

func XylanGroupDesc_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Xylan_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanGroupDesc_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Xylan_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanGroupDesc_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Xylan_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func XylanGroupDesc_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Xylan_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func XylanGroupDesc_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 5, a)
}

func XylanGroupDesc_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 5, a)
}

func XylanGroupDesc_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 5)
}

func XylanPortDesc_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 6, a)
}

func XylanPortDesc_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 6, a)
}

func XylanPortDesc_Get(p *radius.Packet) (value []byte) {
	value, _ = XylanPortDesc_Lookup(p)
	return
}

func XylanPortDesc_GetString(p *radius.Packet) (value string) {
	value, _ = XylanPortDesc_LookupString(p)
	return
}

func XylanPortDesc_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Xylan_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanPortDesc_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Xylan_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanPortDesc_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Xylan_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func XylanPortDesc_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Xylan_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func XylanPortDesc_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 6, a)
}

func XylanPortDesc_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 6, a)
}

func XylanPortDesc_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 6)
}

type XylanProfilNumb uint32

var XylanProfilNumb_Strings = map[XylanProfilNumb]string{}

func (a XylanProfilNumb) String() string {
	if str, ok := XylanProfilNumb_Strings[a]; ok {
		return str
	}
	return "XylanProfilNumb(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func XylanProfilNumb_Add(p *radius.Packet, value XylanProfilNumb) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Xylan_AddVendor(p, 7, a)
}

func XylanProfilNumb_Get(p *radius.Packet) (value XylanProfilNumb) {
	value, _ = XylanProfilNumb_Lookup(p)
	return
}

func XylanProfilNumb_Gets(p *radius.Packet) (values []XylanProfilNumb, err error) {
	var i uint32
	for _, attr := range _Xylan_GetsVendor(p, 7) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, XylanProfilNumb(i))
	}
	return
}

func XylanProfilNumb_Lookup(p *radius.Packet) (value XylanProfilNumb, err error) {
	a, ok := _Xylan_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = XylanProfilNumb(i)
	return
}

func XylanProfilNumb_Set(p *radius.Packet, value XylanProfilNumb) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Xylan_SetVendor(p, 7, a)
}

func XylanProfilNumb_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 7)
}

func XylanAuthGroupProtocol_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 8, a)
}

func XylanAuthGroupProtocol_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 8, a)
}

func XylanAuthGroupProtocol_Get(p *radius.Packet) (value []byte) {
	value, _ = XylanAuthGroupProtocol_Lookup(p)
	return
}

func XylanAuthGroupProtocol_GetString(p *radius.Packet) (value string) {
	value, _ = XylanAuthGroupProtocol_LookupString(p)
	return
}

func XylanAuthGroupProtocol_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Xylan_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAuthGroupProtocol_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Xylan_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAuthGroupProtocol_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Xylan_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func XylanAuthGroupProtocol_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Xylan_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func XylanAuthGroupProtocol_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 8, a)
}

func XylanAuthGroupProtocol_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 8, a)
}

func XylanAuthGroupProtocol_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 8)
}

func XylanAsaAccess_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 9, a)
}

func XylanAsaAccess_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 9, a)
}

func XylanAsaAccess_Get(p *radius.Packet) (value []byte) {
	value, _ = XylanAsaAccess_Lookup(p)
	return
}

func XylanAsaAccess_GetString(p *radius.Packet) (value string) {
	value, _ = XylanAsaAccess_LookupString(p)
	return
}

func XylanAsaAccess_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Xylan_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAsaAccess_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Xylan_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAsaAccess_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Xylan_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func XylanAsaAccess_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Xylan_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func XylanAsaAccess_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 9, a)
}

func XylanAsaAccess_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 9, a)
}

func XylanAsaAccess_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 9)
}

type XylanEndUserProfile uint32

var XylanEndUserProfile_Strings = map[XylanEndUserProfile]string{}

func (a XylanEndUserProfile) String() string {
	if str, ok := XylanEndUserProfile_Strings[a]; ok {
		return str
	}
	return "XylanEndUserProfile(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func XylanEndUserProfile_Add(p *radius.Packet, value XylanEndUserProfile) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Xylan_AddVendor(p, 10, a)
}

func XylanEndUserProfile_Get(p *radius.Packet) (value XylanEndUserProfile) {
	value, _ = XylanEndUserProfile_Lookup(p)
	return
}

func XylanEndUserProfile_Gets(p *radius.Packet) (values []XylanEndUserProfile, err error) {
	var i uint32
	for _, attr := range _Xylan_GetsVendor(p, 10) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, XylanEndUserProfile(i))
	}
	return
}

func XylanEndUserProfile_Lookup(p *radius.Packet) (value XylanEndUserProfile, err error) {
	a, ok := _Xylan_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = XylanEndUserProfile(i)
	return
}

func XylanEndUserProfile_Set(p *radius.Packet, value XylanEndUserProfile) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Xylan_SetVendor(p, 10, a)
}

func XylanEndUserProfile_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 10)
}

type XylanAccessPriv uint32

const (
	XylanAccessPriv_Value_XylanReadPriv  XylanAccessPriv = 1
	XylanAccessPriv_Value_XylanWritePriv XylanAccessPriv = 2
	XylanAccessPriv_Value_XylanAdminPriv XylanAccessPriv = 3
)

var XylanAccessPriv_Strings = map[XylanAccessPriv]string{
	XylanAccessPriv_Value_XylanReadPriv:  "Xylan-Read-Priv",
	XylanAccessPriv_Value_XylanWritePriv: "Xylan-Write-Priv",
	XylanAccessPriv_Value_XylanAdminPriv: "Xylan-Admin-Priv",
}

func (a XylanAccessPriv) String() string {
	if str, ok := XylanAccessPriv_Strings[a]; ok {
		return str
	}
	return "XylanAccessPriv(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func XylanAccessPriv_Add(p *radius.Packet, value XylanAccessPriv) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Xylan_AddVendor(p, 16, a)
}

func XylanAccessPriv_Get(p *radius.Packet) (value XylanAccessPriv) {
	value, _ = XylanAccessPriv_Lookup(p)
	return
}

func XylanAccessPriv_Gets(p *radius.Packet) (values []XylanAccessPriv, err error) {
	var i uint32
	for _, attr := range _Xylan_GetsVendor(p, 16) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, XylanAccessPriv(i))
	}
	return
}

func XylanAccessPriv_Lookup(p *radius.Packet) (value XylanAccessPriv, err error) {
	a, ok := _Xylan_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = XylanAccessPriv(i)
	return
}

func XylanAccessPriv_Set(p *radius.Packet, value XylanAccessPriv) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Xylan_SetVendor(p, 16, a)
}

func XylanAccessPriv_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 16)
}

func XylanNmsGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 20, a)
}

func XylanNmsGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 20, a)
}

func XylanNmsGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = XylanNmsGroup_Lookup(p)
	return
}

func XylanNmsGroup_GetString(p *radius.Packet) (value string) {
	value, _ = XylanNmsGroup_LookupString(p)
	return
}

func XylanNmsGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Xylan_GetsVendor(p, 20) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanNmsGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Xylan_GetsVendor(p, 20) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanNmsGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Xylan_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func XylanNmsGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Xylan_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func XylanNmsGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 20, a)
}

func XylanNmsGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 20, a)
}

func XylanNmsGroup_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 20)
}

func XylanNmsFirstName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 21, a)
}

func XylanNmsFirstName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 21, a)
}

func XylanNmsFirstName_Get(p *radius.Packet) (value []byte) {
	value, _ = XylanNmsFirstName_Lookup(p)
	return
}

func XylanNmsFirstName_GetString(p *radius.Packet) (value string) {
	value, _ = XylanNmsFirstName_LookupString(p)
	return
}

func XylanNmsFirstName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Xylan_GetsVendor(p, 21) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanNmsFirstName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Xylan_GetsVendor(p, 21) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanNmsFirstName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Xylan_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func XylanNmsFirstName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Xylan_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func XylanNmsFirstName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 21, a)
}

func XylanNmsFirstName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 21, a)
}

func XylanNmsFirstName_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 21)
}

func XylanNmsLastName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 22, a)
}

func XylanNmsLastName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 22, a)
}

func XylanNmsLastName_Get(p *radius.Packet) (value []byte) {
	value, _ = XylanNmsLastName_Lookup(p)
	return
}

func XylanNmsLastName_GetString(p *radius.Packet) (value string) {
	value, _ = XylanNmsLastName_LookupString(p)
	return
}

func XylanNmsLastName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Xylan_GetsVendor(p, 22) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanNmsLastName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Xylan_GetsVendor(p, 22) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanNmsLastName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Xylan_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func XylanNmsLastName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Xylan_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func XylanNmsLastName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 22, a)
}

func XylanNmsLastName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 22, a)
}

func XylanNmsLastName_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 22)
}

func XylanNmsDescription_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 23, a)
}

func XylanNmsDescription_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 23, a)
}

func XylanNmsDescription_Get(p *radius.Packet) (value []byte) {
	value, _ = XylanNmsDescription_Lookup(p)
	return
}

func XylanNmsDescription_GetString(p *radius.Packet) (value string) {
	value, _ = XylanNmsDescription_LookupString(p)
	return
}

func XylanNmsDescription_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Xylan_GetsVendor(p, 23) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanNmsDescription_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Xylan_GetsVendor(p, 23) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanNmsDescription_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Xylan_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func XylanNmsDescription_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Xylan_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func XylanNmsDescription_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 23, a)
}

func XylanNmsDescription_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 23, a)
}

func XylanNmsDescription_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 23)
}

func XylanAccePrivR1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 33, a)
}

func XylanAccePrivR1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 33, a)
}

func XylanAccePrivR1_Get(p *radius.Packet) (value []byte) {
	value, _ = XylanAccePrivR1_Lookup(p)
	return
}

func XylanAccePrivR1_GetString(p *radius.Packet) (value string) {
	value, _ = XylanAccePrivR1_LookupString(p)
	return
}

func XylanAccePrivR1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Xylan_GetsVendor(p, 33) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAccePrivR1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Xylan_GetsVendor(p, 33) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAccePrivR1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Xylan_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func XylanAccePrivR1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Xylan_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func XylanAccePrivR1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 33, a)
}

func XylanAccePrivR1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 33, a)
}

func XylanAccePrivR1_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 33)
}

func XylanAccePrivR2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 34, a)
}

func XylanAccePrivR2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 34, a)
}

func XylanAccePrivR2_Get(p *radius.Packet) (value []byte) {
	value, _ = XylanAccePrivR2_Lookup(p)
	return
}

func XylanAccePrivR2_GetString(p *radius.Packet) (value string) {
	value, _ = XylanAccePrivR2_LookupString(p)
	return
}

func XylanAccePrivR2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Xylan_GetsVendor(p, 34) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAccePrivR2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Xylan_GetsVendor(p, 34) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAccePrivR2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Xylan_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func XylanAccePrivR2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Xylan_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func XylanAccePrivR2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 34, a)
}

func XylanAccePrivR2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 34, a)
}

func XylanAccePrivR2_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 34)
}

func XylanAccePrivW1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 35, a)
}

func XylanAccePrivW1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 35, a)
}

func XylanAccePrivW1_Get(p *radius.Packet) (value []byte) {
	value, _ = XylanAccePrivW1_Lookup(p)
	return
}

func XylanAccePrivW1_GetString(p *radius.Packet) (value string) {
	value, _ = XylanAccePrivW1_LookupString(p)
	return
}

func XylanAccePrivW1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Xylan_GetsVendor(p, 35) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAccePrivW1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Xylan_GetsVendor(p, 35) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAccePrivW1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Xylan_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func XylanAccePrivW1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Xylan_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func XylanAccePrivW1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 35, a)
}

func XylanAccePrivW1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 35, a)
}

func XylanAccePrivW1_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 35)
}

func XylanAccePrivW2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 36, a)
}

func XylanAccePrivW2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 36, a)
}

func XylanAccePrivW2_Get(p *radius.Packet) (value []byte) {
	value, _ = XylanAccePrivW2_Lookup(p)
	return
}

func XylanAccePrivW2_GetString(p *radius.Packet) (value string) {
	value, _ = XylanAccePrivW2_LookupString(p)
	return
}

func XylanAccePrivW2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Xylan_GetsVendor(p, 36) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAccePrivW2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Xylan_GetsVendor(p, 36) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAccePrivW2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Xylan_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func XylanAccePrivW2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Xylan_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func XylanAccePrivW2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 36, a)
}

func XylanAccePrivW2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 36, a)
}

func XylanAccePrivW2_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 36)
}

func XylanAccePrivG1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 37, a)
}

func XylanAccePrivG1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 37, a)
}

func XylanAccePrivG1_Get(p *radius.Packet) (value []byte) {
	value, _ = XylanAccePrivG1_Lookup(p)
	return
}

func XylanAccePrivG1_GetString(p *radius.Packet) (value string) {
	value, _ = XylanAccePrivG1_LookupString(p)
	return
}

func XylanAccePrivG1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Xylan_GetsVendor(p, 37) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAccePrivG1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Xylan_GetsVendor(p, 37) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAccePrivG1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Xylan_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func XylanAccePrivG1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Xylan_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func XylanAccePrivG1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 37, a)
}

func XylanAccePrivG1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 37, a)
}

func XylanAccePrivG1_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 37)
}

func XylanAccePrivG2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 38, a)
}

func XylanAccePrivG2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 38, a)
}

func XylanAccePrivG2_Get(p *radius.Packet) (value []byte) {
	value, _ = XylanAccePrivG2_Lookup(p)
	return
}

func XylanAccePrivG2_GetString(p *radius.Packet) (value string) {
	value, _ = XylanAccePrivG2_LookupString(p)
	return
}

func XylanAccePrivG2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Xylan_GetsVendor(p, 38) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAccePrivG2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Xylan_GetsVendor(p, 38) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAccePrivG2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Xylan_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func XylanAccePrivG2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Xylan_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func XylanAccePrivG2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 38, a)
}

func XylanAccePrivG2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 38, a)
}

func XylanAccePrivG2_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 38)
}

func XylanAccePrivFR1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 39, a)
}

func XylanAccePrivFR1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 39, a)
}

func XylanAccePrivFR1_Get(p *radius.Packet) (value []byte) {
	value, _ = XylanAccePrivFR1_Lookup(p)
	return
}

func XylanAccePrivFR1_GetString(p *radius.Packet) (value string) {
	value, _ = XylanAccePrivFR1_LookupString(p)
	return
}

func XylanAccePrivFR1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Xylan_GetsVendor(p, 39) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAccePrivFR1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Xylan_GetsVendor(p, 39) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAccePrivFR1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Xylan_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func XylanAccePrivFR1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Xylan_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func XylanAccePrivFR1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 39, a)
}

func XylanAccePrivFR1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 39, a)
}

func XylanAccePrivFR1_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 39)
}

func XylanAccePrivFR2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 40, a)
}

func XylanAccePrivFR2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 40, a)
}

func XylanAccePrivFR2_Get(p *radius.Packet) (value []byte) {
	value, _ = XylanAccePrivFR2_Lookup(p)
	return
}

func XylanAccePrivFR2_GetString(p *radius.Packet) (value string) {
	value, _ = XylanAccePrivFR2_LookupString(p)
	return
}

func XylanAccePrivFR2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Xylan_GetsVendor(p, 40) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAccePrivFR2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Xylan_GetsVendor(p, 40) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAccePrivFR2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Xylan_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func XylanAccePrivFR2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Xylan_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func XylanAccePrivFR2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 40, a)
}

func XylanAccePrivFR2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 40, a)
}

func XylanAccePrivFR2_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 40)
}

func XylanAccePrivFW1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 41, a)
}

func XylanAccePrivFW1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 41, a)
}

func XylanAccePrivFW1_Get(p *radius.Packet) (value []byte) {
	value, _ = XylanAccePrivFW1_Lookup(p)
	return
}

func XylanAccePrivFW1_GetString(p *radius.Packet) (value string) {
	value, _ = XylanAccePrivFW1_LookupString(p)
	return
}

func XylanAccePrivFW1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Xylan_GetsVendor(p, 41) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAccePrivFW1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Xylan_GetsVendor(p, 41) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAccePrivFW1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Xylan_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func XylanAccePrivFW1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Xylan_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func XylanAccePrivFW1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 41, a)
}

func XylanAccePrivFW1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 41, a)
}

func XylanAccePrivFW1_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 41)
}

func XylanAccePrivFW2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 42, a)
}

func XylanAccePrivFW2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_AddVendor(p, 42, a)
}

func XylanAccePrivFW2_Get(p *radius.Packet) (value []byte) {
	value, _ = XylanAccePrivFW2_Lookup(p)
	return
}

func XylanAccePrivFW2_GetString(p *radius.Packet) (value string) {
	value, _ = XylanAccePrivFW2_LookupString(p)
	return
}

func XylanAccePrivFW2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Xylan_GetsVendor(p, 42) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAccePrivFW2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Xylan_GetsVendor(p, 42) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func XylanAccePrivFW2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Xylan_LookupVendor(p, 42)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func XylanAccePrivFW2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Xylan_LookupVendor(p, 42)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func XylanAccePrivFW2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 42, a)
}

func XylanAccePrivFW2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Xylan_SetVendor(p, 42, a)
}

func XylanAccePrivFW2_Del(p *radius.Packet) {
	_Xylan_DelVendor(p, 42)
}
