// Code generated by radius-dict-gen. DO NOT EDIT.

package azaire

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Azaire_VendorID = 7751
)

func _Azaire_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Azaire_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Azaire_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Azaire_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Azaire_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Azaire_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Azaire_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Azaire_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Azaire_AddVendor(p, typ, attr)
}

func _Azaire_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Azaire_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

func AzaireTriplets_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Azaire_AddVendor(p, 1, a)
}

func AzaireTriplets_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Azaire_AddVendor(p, 1, a)
}

func AzaireTriplets_Get(p *radius.Packet) (value []byte) {
	value, _ = AzaireTriplets_Lookup(p)
	return
}

func AzaireTriplets_GetString(p *radius.Packet) (value string) {
	value, _ = AzaireTriplets_LookupString(p)
	return
}

func AzaireTriplets_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Azaire_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AzaireTriplets_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Azaire_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AzaireTriplets_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Azaire_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AzaireTriplets_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Azaire_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AzaireTriplets_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Azaire_SetVendor(p, 1, a)
}

func AzaireTriplets_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Azaire_SetVendor(p, 1, a)
}

func AzaireTriplets_Del(p *radius.Packet) {
	_Azaire_DelVendor(p, 1)
}

func AzaireIMSI_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Azaire_AddVendor(p, 2, a)
}

func AzaireIMSI_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Azaire_AddVendor(p, 2, a)
}

func AzaireIMSI_Get(p *radius.Packet) (value []byte) {
	value, _ = AzaireIMSI_Lookup(p)
	return
}

func AzaireIMSI_GetString(p *radius.Packet) (value string) {
	value, _ = AzaireIMSI_LookupString(p)
	return
}

func AzaireIMSI_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Azaire_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AzaireIMSI_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Azaire_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AzaireIMSI_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Azaire_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AzaireIMSI_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Azaire_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AzaireIMSI_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Azaire_SetVendor(p, 2, a)
}

func AzaireIMSI_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Azaire_SetVendor(p, 2, a)
}

func AzaireIMSI_Del(p *radius.Packet) {
	_Azaire_DelVendor(p, 2)
}

func AzaireMSISDN_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Azaire_AddVendor(p, 3, a)
}

func AzaireMSISDN_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Azaire_AddVendor(p, 3, a)
}

func AzaireMSISDN_Get(p *radius.Packet) (value []byte) {
	value, _ = AzaireMSISDN_Lookup(p)
	return
}

func AzaireMSISDN_GetString(p *radius.Packet) (value string) {
	value, _ = AzaireMSISDN_LookupString(p)
	return
}

func AzaireMSISDN_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Azaire_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AzaireMSISDN_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Azaire_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AzaireMSISDN_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Azaire_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AzaireMSISDN_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Azaire_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AzaireMSISDN_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Azaire_SetVendor(p, 3, a)
}

func AzaireMSISDN_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Azaire_SetVendor(p, 3, a)
}

func AzaireMSISDN_Del(p *radius.Packet) {
	_Azaire_DelVendor(p, 3)
}

func AzaireAPN_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Azaire_AddVendor(p, 4, a)
}

func AzaireAPN_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Azaire_AddVendor(p, 4, a)
}

func AzaireAPN_Get(p *radius.Packet) (value []byte) {
	value, _ = AzaireAPN_Lookup(p)
	return
}

func AzaireAPN_GetString(p *radius.Packet) (value string) {
	value, _ = AzaireAPN_LookupString(p)
	return
}

func AzaireAPN_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Azaire_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AzaireAPN_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Azaire_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AzaireAPN_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Azaire_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AzaireAPN_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Azaire_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AzaireAPN_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Azaire_SetVendor(p, 4, a)
}

func AzaireAPN_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Azaire_SetVendor(p, 4, a)
}

func AzaireAPN_Del(p *radius.Packet) {
	_Azaire_DelVendor(p, 4)
}

func AzaireQoS_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Azaire_AddVendor(p, 5, a)
}

func AzaireQoS_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Azaire_AddVendor(p, 5, a)
}

func AzaireQoS_Get(p *radius.Packet) (value []byte) {
	value, _ = AzaireQoS_Lookup(p)
	return
}

func AzaireQoS_GetString(p *radius.Packet) (value string) {
	value, _ = AzaireQoS_LookupString(p)
	return
}

func AzaireQoS_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Azaire_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AzaireQoS_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Azaire_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AzaireQoS_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Azaire_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AzaireQoS_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Azaire_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AzaireQoS_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Azaire_SetVendor(p, 5, a)
}

func AzaireQoS_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Azaire_SetVendor(p, 5, a)
}

func AzaireQoS_Del(p *radius.Packet) {
	_Azaire_DelVendor(p, 5)
}

type AzaireSelectionMode uint32

const (
	AzaireSelectionMode_Value_Subscribed   AzaireSelectionMode = 0
	AzaireSelectionMode_Value_SentByMS     AzaireSelectionMode = 1
	AzaireSelectionMode_Value_ChosenBySGSN AzaireSelectionMode = 2
)

var AzaireSelectionMode_Strings = map[AzaireSelectionMode]string{
	AzaireSelectionMode_Value_Subscribed:   "Subscribed",
	AzaireSelectionMode_Value_SentByMS:     "Sent-By-MS",
	AzaireSelectionMode_Value_ChosenBySGSN: "Chosen-By-SGSN",
}

func (a AzaireSelectionMode) String() string {
	if str, ok := AzaireSelectionMode_Strings[a]; ok {
		return str
	}
	return "AzaireSelectionMode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AzaireSelectionMode_Add(p *radius.Packet, value AzaireSelectionMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Azaire_AddVendor(p, 6, a)
}

func AzaireSelectionMode_Get(p *radius.Packet) (value AzaireSelectionMode) {
	value, _ = AzaireSelectionMode_Lookup(p)
	return
}

func AzaireSelectionMode_Gets(p *radius.Packet) (values []AzaireSelectionMode, err error) {
	var i uint32
	for _, attr := range _Azaire_GetsVendor(p, 6) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AzaireSelectionMode(i))
	}
	return
}

func AzaireSelectionMode_Lookup(p *radius.Packet) (value AzaireSelectionMode, err error) {
	a, ok := _Azaire_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AzaireSelectionMode(i)
	return
}

func AzaireSelectionMode_Set(p *radius.Packet, value AzaireSelectionMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Azaire_SetVendor(p, 6, a)
}

func AzaireSelectionMode_Del(p *radius.Packet) {
	_Azaire_DelVendor(p, 6)
}

type AzaireAPNResolutionReq uint32

const (
	AzaireAPNResolutionReq_Value_NotRequired AzaireAPNResolutionReq = 0
	AzaireAPNResolutionReq_Value_Required    AzaireAPNResolutionReq = 1
)

var AzaireAPNResolutionReq_Strings = map[AzaireAPNResolutionReq]string{
	AzaireAPNResolutionReq_Value_NotRequired: "Not-Required",
	AzaireAPNResolutionReq_Value_Required:    "Required",
}

func (a AzaireAPNResolutionReq) String() string {
	if str, ok := AzaireAPNResolutionReq_Strings[a]; ok {
		return str
	}
	return "AzaireAPNResolutionReq(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AzaireAPNResolutionReq_Add(p *radius.Packet, value AzaireAPNResolutionReq) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Azaire_AddVendor(p, 7, a)
}

func AzaireAPNResolutionReq_Get(p *radius.Packet) (value AzaireAPNResolutionReq) {
	value, _ = AzaireAPNResolutionReq_Lookup(p)
	return
}

func AzaireAPNResolutionReq_Gets(p *radius.Packet) (values []AzaireAPNResolutionReq, err error) {
	var i uint32
	for _, attr := range _Azaire_GetsVendor(p, 7) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AzaireAPNResolutionReq(i))
	}
	return
}

func AzaireAPNResolutionReq_Lookup(p *radius.Packet) (value AzaireAPNResolutionReq, err error) {
	a, ok := _Azaire_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AzaireAPNResolutionReq(i)
	return
}

func AzaireAPNResolutionReq_Set(p *radius.Packet, value AzaireAPNResolutionReq) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Azaire_SetVendor(p, 7, a)
}

func AzaireAPNResolutionReq_Del(p *radius.Packet) {
	_Azaire_DelVendor(p, 7)
}

func AzaireStartTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Azaire_AddVendor(p, 8, a)
}

func AzaireStartTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Azaire_AddVendor(p, 8, a)
}

func AzaireStartTime_Get(p *radius.Packet) (value []byte) {
	value, _ = AzaireStartTime_Lookup(p)
	return
}

func AzaireStartTime_GetString(p *radius.Packet) (value string) {
	value, _ = AzaireStartTime_LookupString(p)
	return
}

func AzaireStartTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Azaire_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AzaireStartTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Azaire_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AzaireStartTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Azaire_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AzaireStartTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Azaire_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AzaireStartTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Azaire_SetVendor(p, 8, a)
}

func AzaireStartTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Azaire_SetVendor(p, 8, a)
}

func AzaireStartTime_Del(p *radius.Packet) {
	_Azaire_DelVendor(p, 8)
}

type AzaireNASType uint32

var AzaireNASType_Strings = map[AzaireNASType]string{}

func (a AzaireNASType) String() string {
	if str, ok := AzaireNASType_Strings[a]; ok {
		return str
	}
	return "AzaireNASType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AzaireNASType_Add(p *radius.Packet, value AzaireNASType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Azaire_AddVendor(p, 9, a)
}

func AzaireNASType_Get(p *radius.Packet) (value AzaireNASType) {
	value, _ = AzaireNASType_Lookup(p)
	return
}

func AzaireNASType_Gets(p *radius.Packet) (values []AzaireNASType, err error) {
	var i uint32
	for _, attr := range _Azaire_GetsVendor(p, 9) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AzaireNASType(i))
	}
	return
}

func AzaireNASType_Lookup(p *radius.Packet) (value AzaireNASType, err error) {
	a, ok := _Azaire_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AzaireNASType(i)
	return
}

func AzaireNASType_Set(p *radius.Packet, value AzaireNASType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Azaire_SetVendor(p, 9, a)
}

func AzaireNASType_Del(p *radius.Packet) {
	_Azaire_DelVendor(p, 9)
}

type AzaireStatus uint32

const (
	AzaireStatus_Value_Success AzaireStatus = 0
	AzaireStatus_Value_Failure AzaireStatus = 1
)

var AzaireStatus_Strings = map[AzaireStatus]string{
	AzaireStatus_Value_Success: "Success",
	AzaireStatus_Value_Failure: "Failure",
}

func (a AzaireStatus) String() string {
	if str, ok := AzaireStatus_Strings[a]; ok {
		return str
	}
	return "AzaireStatus(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AzaireStatus_Add(p *radius.Packet, value AzaireStatus) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Azaire_AddVendor(p, 10, a)
}

func AzaireStatus_Get(p *radius.Packet) (value AzaireStatus) {
	value, _ = AzaireStatus_Lookup(p)
	return
}

func AzaireStatus_Gets(p *radius.Packet) (values []AzaireStatus, err error) {
	var i uint32
	for _, attr := range _Azaire_GetsVendor(p, 10) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AzaireStatus(i))
	}
	return
}

func AzaireStatus_Lookup(p *radius.Packet) (value AzaireStatus, err error) {
	a, ok := _Azaire_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AzaireStatus(i)
	return
}

func AzaireStatus_Set(p *radius.Packet, value AzaireStatus) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Azaire_SetVendor(p, 10, a)
}

func AzaireStatus_Del(p *radius.Packet) {
	_Azaire_DelVendor(p, 10)
}

func AzaireAPNOI_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Azaire_AddVendor(p, 11, a)
}

func AzaireAPNOI_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Azaire_AddVendor(p, 11, a)
}

func AzaireAPNOI_Get(p *radius.Packet) (value []byte) {
	value, _ = AzaireAPNOI_Lookup(p)
	return
}

func AzaireAPNOI_GetString(p *radius.Packet) (value string) {
	value, _ = AzaireAPNOI_LookupString(p)
	return
}

func AzaireAPNOI_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Azaire_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AzaireAPNOI_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Azaire_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AzaireAPNOI_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Azaire_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AzaireAPNOI_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Azaire_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AzaireAPNOI_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Azaire_SetVendor(p, 11, a)
}

func AzaireAPNOI_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Azaire_SetVendor(p, 11, a)
}

func AzaireAPNOI_Del(p *radius.Packet) {
	_Azaire_DelVendor(p, 11)
}

type AzaireAuthType uint32

const (
	AzaireAuthType_Value_PPPSIM      AzaireAuthType = 1
	AzaireAuthType_Value_DummyIMSI   AzaireAuthType = 2
	AzaireAuthType_Value_SoftSIM     AzaireAuthType = 3
	AzaireAuthType_Value_RadiusSIM   AzaireAuthType = 4
	AzaireAuthType_Value_PostPaid    AzaireAuthType = 5
	AzaireAuthType_Value_PrePaid     AzaireAuthType = 6
	AzaireAuthType_Value_LocalRadius AzaireAuthType = 7
	AzaireAuthType_Value_ProxyRadius AzaireAuthType = 8
)

var AzaireAuthType_Strings = map[AzaireAuthType]string{
	AzaireAuthType_Value_PPPSIM:      "PPP-SIM",
	AzaireAuthType_Value_DummyIMSI:   "Dummy-IMSI",
	AzaireAuthType_Value_SoftSIM:     "Soft-SIM",
	AzaireAuthType_Value_RadiusSIM:   "Radius-SIM",
	AzaireAuthType_Value_PostPaid:    "Post-paid",
	AzaireAuthType_Value_PrePaid:     "Pre-paid",
	AzaireAuthType_Value_LocalRadius: "Local-Radius",
	AzaireAuthType_Value_ProxyRadius: "Proxy-Radius",
}

func (a AzaireAuthType) String() string {
	if str, ok := AzaireAuthType_Strings[a]; ok {
		return str
	}
	return "AzaireAuthType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AzaireAuthType_Add(p *radius.Packet, value AzaireAuthType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Azaire_AddVendor(p, 12, a)
}

func AzaireAuthType_Get(p *radius.Packet) (value AzaireAuthType) {
	value, _ = AzaireAuthType_Lookup(p)
	return
}

func AzaireAuthType_Gets(p *radius.Packet) (values []AzaireAuthType, err error) {
	var i uint32
	for _, attr := range _Azaire_GetsVendor(p, 12) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AzaireAuthType(i))
	}
	return
}

func AzaireAuthType_Lookup(p *radius.Packet) (value AzaireAuthType, err error) {
	a, ok := _Azaire_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AzaireAuthType(i)
	return
}

func AzaireAuthType_Set(p *radius.Packet, value AzaireAuthType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Azaire_SetVendor(p, 12, a)
}

func AzaireAuthType_Del(p *radius.Packet) {
	_Azaire_DelVendor(p, 12)
}

func AzaireGnUserName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Azaire_AddVendor(p, 13, a)
}

func AzaireGnUserName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Azaire_AddVendor(p, 13, a)
}

func AzaireGnUserName_Get(p *radius.Packet) (value []byte) {
	value, _ = AzaireGnUserName_Lookup(p)
	return
}

func AzaireGnUserName_GetString(p *radius.Packet) (value string) {
	value, _ = AzaireGnUserName_LookupString(p)
	return
}

func AzaireGnUserName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Azaire_GetsVendor(p, 13) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AzaireGnUserName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Azaire_GetsVendor(p, 13) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AzaireGnUserName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Azaire_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AzaireGnUserName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Azaire_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AzaireGnUserName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Azaire_SetVendor(p, 13, a)
}

func AzaireGnUserName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Azaire_SetVendor(p, 13, a)
}

func AzaireGnUserName_Del(p *radius.Packet) {
	_Azaire_DelVendor(p, 13)
}

func AzaireBrandCode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Azaire_AddVendor(p, 14, a)
}

func AzaireBrandCode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Azaire_AddVendor(p, 14, a)
}

func AzaireBrandCode_Get(p *radius.Packet) (value []byte) {
	value, _ = AzaireBrandCode_Lookup(p)
	return
}

func AzaireBrandCode_GetString(p *radius.Packet) (value string) {
	value, _ = AzaireBrandCode_LookupString(p)
	return
}

func AzaireBrandCode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Azaire_GetsVendor(p, 14) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AzaireBrandCode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Azaire_GetsVendor(p, 14) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AzaireBrandCode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Azaire_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AzaireBrandCode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Azaire_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AzaireBrandCode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Azaire_SetVendor(p, 14, a)
}

func AzaireBrandCode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Azaire_SetVendor(p, 14, a)
}

func AzaireBrandCode_Del(p *radius.Packet) {
	_Azaire_DelVendor(p, 14)
}

func AzairePolicyName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Azaire_AddVendor(p, 15, a)
}

func AzairePolicyName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Azaire_AddVendor(p, 15, a)
}

func AzairePolicyName_Get(p *radius.Packet) (value []byte) {
	value, _ = AzairePolicyName_Lookup(p)
	return
}

func AzairePolicyName_GetString(p *radius.Packet) (value string) {
	value, _ = AzairePolicyName_LookupString(p)
	return
}

func AzairePolicyName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Azaire_GetsVendor(p, 15) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AzairePolicyName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Azaire_GetsVendor(p, 15) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AzairePolicyName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Azaire_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AzairePolicyName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Azaire_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AzairePolicyName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Azaire_SetVendor(p, 15, a)
}

func AzairePolicyName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Azaire_SetVendor(p, 15, a)
}

func AzairePolicyName_Del(p *radius.Packet) {
	_Azaire_DelVendor(p, 15)
}

func AzaireClientLocalIP_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Azaire_AddVendor(p, 16, a)
}

func AzaireClientLocalIP_Get(p *radius.Packet) (value net.IP) {
	value, _ = AzaireClientLocalIP_Lookup(p)
	return
}

func AzaireClientLocalIP_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Azaire_GetsVendor(p, 16) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AzaireClientLocalIP_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Azaire_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AzaireClientLocalIP_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Azaire_SetVendor(p, 16, a)
}

func AzaireClientLocalIP_Del(p *radius.Packet) {
	_Azaire_DelVendor(p, 16)
}
