// Code generated by radius-dict-gen. DO NOT EDIT.

package travelping

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Travelping_VendorID = 18681
)

func _Travelping_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Travelping_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Travelping_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Travelping_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Travelping_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Travelping_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Travelping_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Travelping_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Travelping_AddVendor(p, typ, attr)
}

func _Travelping_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Travelping_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func TPGatewayVersion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 1, a)
}

func TPGatewayVersion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 1, a)
}

func TPGatewayVersion_Get(p *radius.Packet) (value []byte) {
	value, _ = TPGatewayVersion_Lookup(p)
	return
}

func TPGatewayVersion_GetString(p *radius.Packet) (value string) {
	value, _ = TPGatewayVersion_LookupString(p)
	return
}

func TPGatewayVersion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPGatewayVersion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPGatewayVersion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPGatewayVersion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPGatewayVersion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 1, a)
}

func TPGatewayVersion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 1, a)
}

func TPGatewayVersion_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 1)
}

func TPFirmwareVariant_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 2, a)
}

func TPFirmwareVariant_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 2, a)
}

func TPFirmwareVariant_Get(p *radius.Packet) (value []byte) {
	value, _ = TPFirmwareVariant_Lookup(p)
	return
}

func TPFirmwareVariant_GetString(p *radius.Packet) (value string) {
	value, _ = TPFirmwareVariant_LookupString(p)
	return
}

func TPFirmwareVariant_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPFirmwareVariant_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPFirmwareVariant_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPFirmwareVariant_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPFirmwareVariant_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 2, a)
}

func TPFirmwareVariant_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 2, a)
}

func TPFirmwareVariant_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 2)
}

func TPFirmwareVersion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 3, a)
}

func TPFirmwareVersion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 3, a)
}

func TPFirmwareVersion_Get(p *radius.Packet) (value []byte) {
	value, _ = TPFirmwareVersion_Lookup(p)
	return
}

func TPFirmwareVersion_GetString(p *radius.Packet) (value string) {
	value, _ = TPFirmwareVersion_LookupString(p)
	return
}

func TPFirmwareVersion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPFirmwareVersion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPFirmwareVersion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPFirmwareVersion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPFirmwareVersion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 3, a)
}

func TPFirmwareVersion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 3, a)
}

func TPFirmwareVersion_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 3)
}

func TPGatewayConfig_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 4, a)
}

func TPGatewayConfig_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 4, a)
}

func TPGatewayConfig_Get(p *radius.Packet) (value []byte) {
	value, _ = TPGatewayConfig_Lookup(p)
	return
}

func TPGatewayConfig_GetString(p *radius.Packet) (value string) {
	value, _ = TPGatewayConfig_LookupString(p)
	return
}

func TPGatewayConfig_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPGatewayConfig_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPGatewayConfig_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPGatewayConfig_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPGatewayConfig_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 4, a)
}

func TPGatewayConfig_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 4, a)
}

func TPGatewayConfig_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 4)
}

func TPENCIV_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 5, a)
}

func TPENCIV_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 5, a)
}

func TPENCIV_Get(p *radius.Packet) (value []byte) {
	value, _ = TPENCIV_Lookup(p)
	return
}

func TPENCIV_GetString(p *radius.Packet) (value string) {
	value, _ = TPENCIV_LookupString(p)
	return
}

func TPENCIV_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPENCIV_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPENCIV_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPENCIV_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPENCIV_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 5, a)
}

func TPENCIV_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 5, a)
}

func TPENCIV_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 5)
}

func TPPassword_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 6, a)
}

func TPPassword_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 6, a)
}

func TPPassword_Get(p *radius.Packet) (value []byte) {
	value, _ = TPPassword_Lookup(p)
	return
}

func TPPassword_GetString(p *radius.Packet) (value string) {
	value, _ = TPPassword_LookupString(p)
	return
}

func TPPassword_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPPassword_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPPassword_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPPassword_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPPassword_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 6, a)
}

func TPPassword_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 6, a)
}

func TPPassword_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 6)
}

func TPUserAgent_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 7, a)
}

func TPUserAgent_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 7, a)
}

func TPUserAgent_Get(p *radius.Packet) (value []byte) {
	value, _ = TPUserAgent_Lookup(p)
	return
}

func TPUserAgent_GetString(p *radius.Packet) (value string) {
	value, _ = TPUserAgent_LookupString(p)
	return
}

func TPUserAgent_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 7) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPUserAgent_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 7) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPUserAgent_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPUserAgent_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPUserAgent_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 7, a)
}

func TPUserAgent_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 7, a)
}

func TPUserAgent_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 7)
}

type TPAuthReply uint32

var TPAuthReply_Strings = map[TPAuthReply]string{}

func (a TPAuthReply) String() string {
	if str, ok := TPAuthReply_Strings[a]; ok {
		return str
	}
	return "TPAuthReply(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPAuthReply_Add(p *radius.Packet, value TPAuthReply) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_AddVendor(p, 8, a)
}

func TPAuthReply_Get(p *radius.Packet) (value TPAuthReply) {
	value, _ = TPAuthReply_Lookup(p)
	return
}

func TPAuthReply_Gets(p *radius.Packet) (values []TPAuthReply, err error) {
	var i uint32
	for _, attr := range _Travelping_GetsVendor(p, 8) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TPAuthReply(i))
	}
	return
}

func TPAuthReply_Lookup(p *radius.Packet) (value TPAuthReply, err error) {
	a, ok := _Travelping_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TPAuthReply(i)
	return
}

func TPAuthReply_Set(p *radius.Packet, value TPAuthReply) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_SetVendor(p, 8, a)
}

func TPAuthReply_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 8)
}

func TPAccessClassID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 9, a)
}

func TPAccessClassID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 9, a)
}

func TPAccessClassID_Get(p *radius.Packet) (value []byte) {
	value, _ = TPAccessClassID_Lookup(p)
	return
}

func TPAccessClassID_GetString(p *radius.Packet) (value string) {
	value, _ = TPAccessClassID_LookupString(p)
	return
}

func TPAccessClassID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPAccessClassID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPAccessClassID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPAccessClassID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPAccessClassID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 9, a)
}

func TPAccessClassID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 9, a)
}

func TPAccessClassID_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 9)
}

func TPHostName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 10, a)
}

func TPHostName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 10, a)
}

func TPHostName_Get(p *radius.Packet) (value []byte) {
	value, _ = TPHostName_Lookup(p)
	return
}

func TPHostName_GetString(p *radius.Packet) (value string) {
	value, _ = TPHostName_LookupString(p)
	return
}

func TPHostName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPHostName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPHostName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPHostName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPHostName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 10, a)
}

func TPHostName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 10, a)
}

func TPHostName_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 10)
}

func TPDHCPRequestOptionList_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 11, a)
}

func TPDHCPRequestOptionList_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 11, a)
}

func TPDHCPRequestOptionList_Get(p *radius.Packet) (value []byte) {
	value, _ = TPDHCPRequestOptionList_Lookup(p)
	return
}

func TPDHCPRequestOptionList_GetString(p *radius.Packet) (value string) {
	value, _ = TPDHCPRequestOptionList_LookupString(p)
	return
}

func TPDHCPRequestOptionList_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPDHCPRequestOptionList_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPDHCPRequestOptionList_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPDHCPRequestOptionList_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPDHCPRequestOptionList_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 11, a)
}

func TPDHCPRequestOptionList_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 11, a)
}

func TPDHCPRequestOptionList_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 11)
}

func TPDHCPParameterRequestList_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 12, a)
}

func TPDHCPParameterRequestList_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 12, a)
}

func TPDHCPParameterRequestList_Get(p *radius.Packet) (value []byte) {
	value, _ = TPDHCPParameterRequestList_Lookup(p)
	return
}

func TPDHCPParameterRequestList_GetString(p *radius.Packet) (value string) {
	value, _ = TPDHCPParameterRequestList_LookupString(p)
	return
}

func TPDHCPParameterRequestList_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPDHCPParameterRequestList_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPDHCPParameterRequestList_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPDHCPParameterRequestList_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPDHCPParameterRequestList_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 12, a)
}

func TPDHCPParameterRequestList_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 12, a)
}

func TPDHCPParameterRequestList_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 12)
}

func TPDHCPVendorClassID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 13, a)
}

func TPDHCPVendorClassID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 13, a)
}

func TPDHCPVendorClassID_Get(p *radius.Packet) (value []byte) {
	value, _ = TPDHCPVendorClassID_Lookup(p)
	return
}

func TPDHCPVendorClassID_GetString(p *radius.Packet) (value string) {
	value, _ = TPDHCPVendorClassID_LookupString(p)
	return
}

func TPDHCPVendorClassID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 13) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPDHCPVendorClassID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 13) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPDHCPVendorClassID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPDHCPVendorClassID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPDHCPVendorClassID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 13, a)
}

func TPDHCPVendorClassID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 13, a)
}

func TPDHCPVendorClassID_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 13)
}

func TPDHCPClientID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 14, a)
}

func TPDHCPClientID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 14, a)
}

func TPDHCPClientID_Get(p *radius.Packet) (value []byte) {
	value, _ = TPDHCPClientID_Lookup(p)
	return
}

func TPDHCPClientID_GetString(p *radius.Packet) (value string) {
	value, _ = TPDHCPClientID_LookupString(p)
	return
}

func TPDHCPClientID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 14) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPDHCPClientID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 14) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPDHCPClientID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPDHCPClientID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPDHCPClientID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 14, a)
}

func TPDHCPClientID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 14, a)
}

func TPDHCPClientID_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 14)
}

func TPLocationID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 15, a)
}

func TPLocationID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 15, a)
}

func TPLocationID_Get(p *radius.Packet) (value []byte) {
	value, _ = TPLocationID_Lookup(p)
	return
}

func TPLocationID_GetString(p *radius.Packet) (value string) {
	value, _ = TPLocationID_LookupString(p)
	return
}

func TPLocationID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 15) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPLocationID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 15) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPLocationID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPLocationID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPLocationID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 15, a)
}

func TPLocationID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 15, a)
}

func TPLocationID_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 15)
}

func TPNATIPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 16, a)
}

func TPNATIPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = TPNATIPAddress_Lookup(p)
	return
}

func TPNATIPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Travelping_GetsVendor(p, 16) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPNATIPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Travelping_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func TPNATIPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 16, a)
}

func TPNATIPAddress_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 16)
}

func TPZoneID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 17, a)
}

func TPZoneID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 17, a)
}

func TPZoneID_Get(p *radius.Packet) (value []byte) {
	value, _ = TPZoneID_Lookup(p)
	return
}

func TPZoneID_GetString(p *radius.Packet) (value string) {
	value, _ = TPZoneID_LookupString(p)
	return
}

func TPZoneID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 17) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPZoneID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 17) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPZoneID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPZoneID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPZoneID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 17, a)
}

func TPZoneID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 17, a)
}

func TPZoneID_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 17)
}

func TPMonitorID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 18, a)
}

func TPMonitorID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 18, a)
}

func TPMonitorID_Get(p *radius.Packet) (value []byte) {
	value, _ = TPMonitorID_Lookup(p)
	return
}

func TPMonitorID_GetString(p *radius.Packet) (value string) {
	value, _ = TPMonitorID_LookupString(p)
	return
}

func TPMonitorID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 18) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPMonitorID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 18) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPMonitorID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPMonitorID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPMonitorID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 18, a)
}

func TPMonitorID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 18, a)
}

func TPMonitorID_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 18)
}

func TPRelatedSessionID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 19, a)
}

func TPRelatedSessionID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 19, a)
}

func TPRelatedSessionID_Get(p *radius.Packet) (value []byte) {
	value, _ = TPRelatedSessionID_Lookup(p)
	return
}

func TPRelatedSessionID_GetString(p *radius.Packet) (value string) {
	value, _ = TPRelatedSessionID_LookupString(p)
	return
}

func TPRelatedSessionID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 19) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPRelatedSessionID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 19) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPRelatedSessionID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPRelatedSessionID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPRelatedSessionID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 19, a)
}

func TPRelatedSessionID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 19, a)
}

func TPRelatedSessionID_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 19)
}

type TPMonitorSessionID uint32

var TPMonitorSessionID_Strings = map[TPMonitorSessionID]string{}

func (a TPMonitorSessionID) String() string {
	if str, ok := TPMonitorSessionID_Strings[a]; ok {
		return str
	}
	return "TPMonitorSessionID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPMonitorSessionID_Add(p *radius.Packet, value TPMonitorSessionID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_AddVendor(p, 20, a)
}

func TPMonitorSessionID_Get(p *radius.Packet) (value TPMonitorSessionID) {
	value, _ = TPMonitorSessionID_Lookup(p)
	return
}

func TPMonitorSessionID_Gets(p *radius.Packet) (values []TPMonitorSessionID, err error) {
	var i uint32
	for _, attr := range _Travelping_GetsVendor(p, 20) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TPMonitorSessionID(i))
	}
	return
}

func TPMonitorSessionID_Lookup(p *radius.Packet) (value TPMonitorSessionID, err error) {
	a, ok := _Travelping_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TPMonitorSessionID(i)
	return
}

func TPMonitorSessionID_Set(p *radius.Packet, value TPMonitorSessionID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_SetVendor(p, 20, a)
}

func TPMonitorSessionID_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 20)
}

type TPMaxInputOctets uint64

var TPMaxInputOctets_Strings = map[TPMaxInputOctets]string{}

func (a TPMaxInputOctets) String() string {
	if str, ok := TPMaxInputOctets_Strings[a]; ok {
		return str
	}
	return "TPMaxInputOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPMaxInputOctets_Add(p *radius.Packet, value TPMaxInputOctets) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Travelping_AddVendor(p, 21, a)
}

func TPMaxInputOctets_Get(p *radius.Packet) (value TPMaxInputOctets) {
	value, _ = TPMaxInputOctets_Lookup(p)
	return
}

func TPMaxInputOctets_Gets(p *radius.Packet) (values []TPMaxInputOctets, err error) {
	var i uint64
	for _, attr := range _Travelping_GetsVendor(p, 21) {
		i, err = radius.Integer64(attr)
		if err != nil {
			return
		}
		values = append(values, TPMaxInputOctets(i))
	}
	return
}

func TPMaxInputOctets_Lookup(p *radius.Packet) (value TPMaxInputOctets, err error) {
	a, ok := _Travelping_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint64
	i, err = radius.Integer64(a)
	if err != nil {
		return
	}
	value = TPMaxInputOctets(i)
	return
}

func TPMaxInputOctets_Set(p *radius.Packet, value TPMaxInputOctets) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Travelping_SetVendor(p, 21, a)
}

func TPMaxInputOctets_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 21)
}

type TPMaxOutputOctets uint64

var TPMaxOutputOctets_Strings = map[TPMaxOutputOctets]string{}

func (a TPMaxOutputOctets) String() string {
	if str, ok := TPMaxOutputOctets_Strings[a]; ok {
		return str
	}
	return "TPMaxOutputOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPMaxOutputOctets_Add(p *radius.Packet, value TPMaxOutputOctets) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Travelping_AddVendor(p, 22, a)
}

func TPMaxOutputOctets_Get(p *radius.Packet) (value TPMaxOutputOctets) {
	value, _ = TPMaxOutputOctets_Lookup(p)
	return
}

func TPMaxOutputOctets_Gets(p *radius.Packet) (values []TPMaxOutputOctets, err error) {
	var i uint64
	for _, attr := range _Travelping_GetsVendor(p, 22) {
		i, err = radius.Integer64(attr)
		if err != nil {
			return
		}
		values = append(values, TPMaxOutputOctets(i))
	}
	return
}

func TPMaxOutputOctets_Lookup(p *radius.Packet) (value TPMaxOutputOctets, err error) {
	a, ok := _Travelping_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint64
	i, err = radius.Integer64(a)
	if err != nil {
		return
	}
	value = TPMaxOutputOctets(i)
	return
}

func TPMaxOutputOctets_Set(p *radius.Packet, value TPMaxOutputOctets) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Travelping_SetVendor(p, 22, a)
}

func TPMaxOutputOctets_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 22)
}

type TPMaxTotalOctets uint64

var TPMaxTotalOctets_Strings = map[TPMaxTotalOctets]string{}

func (a TPMaxTotalOctets) String() string {
	if str, ok := TPMaxTotalOctets_Strings[a]; ok {
		return str
	}
	return "TPMaxTotalOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPMaxTotalOctets_Add(p *radius.Packet, value TPMaxTotalOctets) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Travelping_AddVendor(p, 23, a)
}

func TPMaxTotalOctets_Get(p *radius.Packet) (value TPMaxTotalOctets) {
	value, _ = TPMaxTotalOctets_Lookup(p)
	return
}

func TPMaxTotalOctets_Gets(p *radius.Packet) (values []TPMaxTotalOctets, err error) {
	var i uint64
	for _, attr := range _Travelping_GetsVendor(p, 23) {
		i, err = radius.Integer64(attr)
		if err != nil {
			return
		}
		values = append(values, TPMaxTotalOctets(i))
	}
	return
}

func TPMaxTotalOctets_Lookup(p *radius.Packet) (value TPMaxTotalOctets, err error) {
	a, ok := _Travelping_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint64
	i, err = radius.Integer64(a)
	if err != nil {
		return
	}
	value = TPMaxTotalOctets(i)
	return
}

func TPMaxTotalOctets_Set(p *radius.Packet, value TPMaxTotalOctets) (err error) {
	a := radius.NewInteger64(uint64(value))
	return _Travelping_SetVendor(p, 23, a)
}

func TPMaxTotalOctets_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 23)
}

func TPExitAccessClassID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 24, a)
}

func TPExitAccessClassID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 24, a)
}

func TPExitAccessClassID_Get(p *radius.Packet) (value []byte) {
	value, _ = TPExitAccessClassID_Lookup(p)
	return
}

func TPExitAccessClassID_GetString(p *radius.Packet) (value string) {
	value, _ = TPExitAccessClassID_LookupString(p)
	return
}

func TPExitAccessClassID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 24) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPExitAccessClassID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 24) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPExitAccessClassID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPExitAccessClassID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPExitAccessClassID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 24, a)
}

func TPExitAccessClassID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 24, a)
}

func TPExitAccessClassID_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 24)
}

func TPAccessRule_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 25, a)
}

func TPAccessRule_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 25, a)
}

func TPAccessRule_Get(p *radius.Packet) (value []byte) {
	value, _ = TPAccessRule_Lookup(p)
	return
}

func TPAccessRule_GetString(p *radius.Packet) (value string) {
	value, _ = TPAccessRule_LookupString(p)
	return
}

func TPAccessRule_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 25) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPAccessRule_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 25) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPAccessRule_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPAccessRule_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPAccessRule_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 25, a)
}

func TPAccessRule_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 25, a)
}

func TPAccessRule_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 25)
}

func TPAccessGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 26, a)
}

func TPAccessGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 26, a)
}

func TPAccessGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = TPAccessGroup_Lookup(p)
	return
}

func TPAccessGroup_GetString(p *radius.Packet) (value string) {
	value, _ = TPAccessGroup_LookupString(p)
	return
}

func TPAccessGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 26) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPAccessGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 26) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPAccessGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPAccessGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPAccessGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 26, a)
}

func TPAccessGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 26, a)
}

func TPAccessGroup_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 26)
}

func TPNATPoolID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 27, a)
}

func TPNATPoolID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 27, a)
}

func TPNATPoolID_Get(p *radius.Packet) (value []byte) {
	value, _ = TPNATPoolID_Lookup(p)
	return
}

func TPNATPoolID_GetString(p *radius.Packet) (value string) {
	value, _ = TPNATPoolID_LookupString(p)
	return
}

func TPNATPoolID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 27) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPNATPoolID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 27) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPNATPoolID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPNATPoolID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPNATPoolID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 27, a)
}

func TPNATPoolID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 27, a)
}

func TPNATPoolID_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 27)
}

type TPNATPortStart uint32

var TPNATPortStart_Strings = map[TPNATPortStart]string{}

func (a TPNATPortStart) String() string {
	if str, ok := TPNATPortStart_Strings[a]; ok {
		return str
	}
	return "TPNATPortStart(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPNATPortStart_Add(p *radius.Packet, value TPNATPortStart) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_AddVendor(p, 28, a)
}

func TPNATPortStart_Get(p *radius.Packet) (value TPNATPortStart) {
	value, _ = TPNATPortStart_Lookup(p)
	return
}

func TPNATPortStart_Gets(p *radius.Packet) (values []TPNATPortStart, err error) {
	var i uint32
	for _, attr := range _Travelping_GetsVendor(p, 28) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TPNATPortStart(i))
	}
	return
}

func TPNATPortStart_Lookup(p *radius.Packet) (value TPNATPortStart, err error) {
	a, ok := _Travelping_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TPNATPortStart(i)
	return
}

func TPNATPortStart_Set(p *radius.Packet, value TPNATPortStart) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_SetVendor(p, 28, a)
}

func TPNATPortStart_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 28)
}

type TPNATPortEnd uint32

var TPNATPortEnd_Strings = map[TPNATPortEnd]string{}

func (a TPNATPortEnd) String() string {
	if str, ok := TPNATPortEnd_Strings[a]; ok {
		return str
	}
	return "TPNATPortEnd(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPNATPortEnd_Add(p *radius.Packet, value TPNATPortEnd) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_AddVendor(p, 29, a)
}

func TPNATPortEnd_Get(p *radius.Packet) (value TPNATPortEnd) {
	value, _ = TPNATPortEnd_Lookup(p)
	return
}

func TPNATPortEnd_Gets(p *radius.Packet) (values []TPNATPortEnd, err error) {
	var i uint32
	for _, attr := range _Travelping_GetsVendor(p, 29) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TPNATPortEnd(i))
	}
	return
}

func TPNATPortEnd_Lookup(p *radius.Packet) (value TPNATPortEnd, err error) {
	a, ok := _Travelping_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TPNATPortEnd(i)
	return
}

func TPNATPortEnd_Set(p *radius.Packet, value TPNATPortEnd) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_SetVendor(p, 29, a)
}

func TPNATPortEnd_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 29)
}

type TPKeepAliveTimeout uint32

var TPKeepAliveTimeout_Strings = map[TPKeepAliveTimeout]string{}

func (a TPKeepAliveTimeout) String() string {
	if str, ok := TPKeepAliveTimeout_Strings[a]; ok {
		return str
	}
	return "TPKeepAliveTimeout(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPKeepAliveTimeout_Add(p *radius.Packet, value TPKeepAliveTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_AddVendor(p, 30, a)
}

func TPKeepAliveTimeout_Get(p *radius.Packet) (value TPKeepAliveTimeout) {
	value, _ = TPKeepAliveTimeout_Lookup(p)
	return
}

func TPKeepAliveTimeout_Gets(p *radius.Packet) (values []TPKeepAliveTimeout, err error) {
	var i uint32
	for _, attr := range _Travelping_GetsVendor(p, 30) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TPKeepAliveTimeout(i))
	}
	return
}

func TPKeepAliveTimeout_Lookup(p *radius.Packet) (value TPKeepAliveTimeout, err error) {
	a, ok := _Travelping_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TPKeepAliveTimeout(i)
	return
}

func TPKeepAliveTimeout_Set(p *radius.Packet, value TPKeepAliveTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_SetVendor(p, 30, a)
}

func TPKeepAliveTimeout_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 30)
}

type TPTLSAuthType uint32

const (
	TPTLSAuthType_Value_PreSharedKey          TPTLSAuthType = 0
	TPTLSAuthType_Value_X509SubjectCommonName TPTLSAuthType = 1
)

var TPTLSAuthType_Strings = map[TPTLSAuthType]string{
	TPTLSAuthType_Value_PreSharedKey:          "Pre-Shared-Key",
	TPTLSAuthType_Value_X509SubjectCommonName: "X509-Subject-CommonName",
}

func (a TPTLSAuthType) String() string {
	if str, ok := TPTLSAuthType_Strings[a]; ok {
		return str
	}
	return "TPTLSAuthType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPTLSAuthType_Add(p *radius.Packet, value TPTLSAuthType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_AddVendor(p, 31, a)
}

func TPTLSAuthType_Get(p *radius.Packet) (value TPTLSAuthType) {
	value, _ = TPTLSAuthType_Lookup(p)
	return
}

func TPTLSAuthType_Gets(p *radius.Packet) (values []TPTLSAuthType, err error) {
	var i uint32
	for _, attr := range _Travelping_GetsVendor(p, 31) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TPTLSAuthType(i))
	}
	return
}

func TPTLSAuthType_Lookup(p *radius.Packet) (value TPTLSAuthType, err error) {
	a, ok := _Travelping_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TPTLSAuthType(i)
	return
}

func TPTLSAuthType_Set(p *radius.Packet, value TPTLSAuthType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_SetVendor(p, 31, a)
}

func TPTLSAuthType_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 31)
}

func TPTLSPreSharedKey_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 32, a)
}

func TPTLSPreSharedKey_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 32, a)
}

func TPTLSPreSharedKey_Get(p *radius.Packet) (value []byte) {
	value, _ = TPTLSPreSharedKey_Lookup(p)
	return
}

func TPTLSPreSharedKey_GetString(p *radius.Packet) (value string) {
	value, _ = TPTLSPreSharedKey_LookupString(p)
	return
}

func TPTLSPreSharedKey_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 32) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPTLSPreSharedKey_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 32) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPTLSPreSharedKey_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPTLSPreSharedKey_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPTLSPreSharedKey_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 32, a)
}

func TPTLSPreSharedKey_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 32, a)
}

func TPTLSPreSharedKey_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 32)
}

type TPCAPWAPTimestamp uint32

var TPCAPWAPTimestamp_Strings = map[TPCAPWAPTimestamp]string{}

func (a TPCAPWAPTimestamp) String() string {
	if str, ok := TPCAPWAPTimestamp_Strings[a]; ok {
		return str
	}
	return "TPCAPWAPTimestamp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPCAPWAPTimestamp_Add(p *radius.Packet, value TPCAPWAPTimestamp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_AddVendor(p, 33, a)
}

func TPCAPWAPTimestamp_Get(p *radius.Packet) (value TPCAPWAPTimestamp) {
	value, _ = TPCAPWAPTimestamp_Lookup(p)
	return
}

func TPCAPWAPTimestamp_Gets(p *radius.Packet) (values []TPCAPWAPTimestamp, err error) {
	var i uint32
	for _, attr := range _Travelping_GetsVendor(p, 33) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TPCAPWAPTimestamp(i))
	}
	return
}

func TPCAPWAPTimestamp_Lookup(p *radius.Packet) (value TPCAPWAPTimestamp, err error) {
	a, ok := _Travelping_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TPCAPWAPTimestamp(i)
	return
}

func TPCAPWAPTimestamp_Set(p *radius.Packet, value TPCAPWAPTimestamp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_SetVendor(p, 33, a)
}

func TPCAPWAPTimestamp_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 33)
}

func TPCAPWAPWTPVersion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 34, a)
}

func TPCAPWAPWTPVersion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 34, a)
}

func TPCAPWAPWTPVersion_Get(p *radius.Packet) (value []byte) {
	value, _ = TPCAPWAPWTPVersion_Lookup(p)
	return
}

func TPCAPWAPWTPVersion_GetString(p *radius.Packet) (value string) {
	value, _ = TPCAPWAPWTPVersion_LookupString(p)
	return
}

func TPCAPWAPWTPVersion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 34) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPWTPVersion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 34) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPWTPVersion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPCAPWAPWTPVersion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPCAPWAPWTPVersion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 34, a)
}

func TPCAPWAPWTPVersion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 34, a)
}

func TPCAPWAPWTPVersion_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 34)
}

func TPCAPWAPSessionID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 35, a)
}

func TPCAPWAPSessionID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 35, a)
}

func TPCAPWAPSessionID_Get(p *radius.Packet) (value []byte) {
	value, _ = TPCAPWAPSessionID_Lookup(p)
	return
}

func TPCAPWAPSessionID_GetString(p *radius.Packet) (value string) {
	value, _ = TPCAPWAPSessionID_LookupString(p)
	return
}

func TPCAPWAPSessionID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 35) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPSessionID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 35) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPSessionID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPCAPWAPSessionID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPCAPWAPSessionID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 35, a)
}

func TPCAPWAPSessionID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 35, a)
}

func TPCAPWAPSessionID_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 35)
}

type TPCAPWAPRadioID uint32

var TPCAPWAPRadioID_Strings = map[TPCAPWAPRadioID]string{}

func (a TPCAPWAPRadioID) String() string {
	if str, ok := TPCAPWAPRadioID_Strings[a]; ok {
		return str
	}
	return "TPCAPWAPRadioID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPCAPWAPRadioID_Add(p *radius.Packet, value TPCAPWAPRadioID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_AddVendor(p, 36, a)
}

func TPCAPWAPRadioID_Get(p *radius.Packet) (value TPCAPWAPRadioID) {
	value, _ = TPCAPWAPRadioID_Lookup(p)
	return
}

func TPCAPWAPRadioID_Gets(p *radius.Packet) (values []TPCAPWAPRadioID, err error) {
	var i uint32
	for _, attr := range _Travelping_GetsVendor(p, 36) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TPCAPWAPRadioID(i))
	}
	return
}

func TPCAPWAPRadioID_Lookup(p *radius.Packet) (value TPCAPWAPRadioID, err error) {
	a, ok := _Travelping_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TPCAPWAPRadioID(i)
	return
}

func TPCAPWAPRadioID_Set(p *radius.Packet, value TPCAPWAPRadioID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_SetVendor(p, 36, a)
}

func TPCAPWAPRadioID_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 36)
}

type TPCAPWAPWWANID uint32

var TPCAPWAPWWANID_Strings = map[TPCAPWAPWWANID]string{}

func (a TPCAPWAPWWANID) String() string {
	if str, ok := TPCAPWAPWWANID_Strings[a]; ok {
		return str
	}
	return "TPCAPWAPWWANID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPCAPWAPWWANID_Add(p *radius.Packet, value TPCAPWAPWWANID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_AddVendor(p, 37, a)
}

func TPCAPWAPWWANID_Get(p *radius.Packet) (value TPCAPWAPWWANID) {
	value, _ = TPCAPWAPWWANID_Lookup(p)
	return
}

func TPCAPWAPWWANID_Gets(p *radius.Packet) (values []TPCAPWAPWWANID, err error) {
	var i uint32
	for _, attr := range _Travelping_GetsVendor(p, 37) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TPCAPWAPWWANID(i))
	}
	return
}

func TPCAPWAPWWANID_Lookup(p *radius.Packet) (value TPCAPWAPWWANID, err error) {
	a, ok := _Travelping_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TPCAPWAPWWANID(i)
	return
}

func TPCAPWAPWWANID_Set(p *radius.Packet, value TPCAPWAPWWANID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_SetVendor(p, 37, a)
}

func TPCAPWAPWWANID_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 37)
}

type TPCAPWAPWWANRAT uint32

var TPCAPWAPWWANRAT_Strings = map[TPCAPWAPWWANRAT]string{}

func (a TPCAPWAPWWANRAT) String() string {
	if str, ok := TPCAPWAPWWANRAT_Strings[a]; ok {
		return str
	}
	return "TPCAPWAPWWANRAT(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPCAPWAPWWANRAT_Add(p *radius.Packet, value TPCAPWAPWWANRAT) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_AddVendor(p, 38, a)
}

func TPCAPWAPWWANRAT_Get(p *radius.Packet) (value TPCAPWAPWWANRAT) {
	value, _ = TPCAPWAPWWANRAT_Lookup(p)
	return
}

func TPCAPWAPWWANRAT_Gets(p *radius.Packet) (values []TPCAPWAPWWANRAT, err error) {
	var i uint32
	for _, attr := range _Travelping_GetsVendor(p, 38) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TPCAPWAPWWANRAT(i))
	}
	return
}

func TPCAPWAPWWANRAT_Lookup(p *radius.Packet) (value TPCAPWAPWWANRAT, err error) {
	a, ok := _Travelping_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TPCAPWAPWWANRAT(i)
	return
}

func TPCAPWAPWWANRAT_Set(p *radius.Packet, value TPCAPWAPWWANRAT) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_SetVendor(p, 38, a)
}

func TPCAPWAPWWANRAT_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 38)
}

type TPCAPWAPWWANRSSi uint32

var TPCAPWAPWWANRSSi_Strings = map[TPCAPWAPWWANRSSi]string{}

func (a TPCAPWAPWWANRSSi) String() string {
	if str, ok := TPCAPWAPWWANRSSi_Strings[a]; ok {
		return str
	}
	return "TPCAPWAPWWANRSSi(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPCAPWAPWWANRSSi_Add(p *radius.Packet, value TPCAPWAPWWANRSSi) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_AddVendor(p, 39, a)
}

func TPCAPWAPWWANRSSi_Get(p *radius.Packet) (value TPCAPWAPWWANRSSi) {
	value, _ = TPCAPWAPWWANRSSi_Lookup(p)
	return
}

func TPCAPWAPWWANRSSi_Gets(p *radius.Packet) (values []TPCAPWAPWWANRSSi, err error) {
	var i uint32
	for _, attr := range _Travelping_GetsVendor(p, 39) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TPCAPWAPWWANRSSi(i))
	}
	return
}

func TPCAPWAPWWANRSSi_Lookup(p *radius.Packet) (value TPCAPWAPWWANRSSi, err error) {
	a, ok := _Travelping_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TPCAPWAPWWANRSSi(i)
	return
}

func TPCAPWAPWWANRSSi_Set(p *radius.Packet, value TPCAPWAPWWANRSSi) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_SetVendor(p, 39, a)
}

func TPCAPWAPWWANRSSi_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 39)
}

type TPCAPWAPWWANCREG uint32

var TPCAPWAPWWANCREG_Strings = map[TPCAPWAPWWANCREG]string{}

func (a TPCAPWAPWWANCREG) String() string {
	if str, ok := TPCAPWAPWWANCREG_Strings[a]; ok {
		return str
	}
	return "TPCAPWAPWWANCREG(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPCAPWAPWWANCREG_Add(p *radius.Packet, value TPCAPWAPWWANCREG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_AddVendor(p, 40, a)
}

func TPCAPWAPWWANCREG_Get(p *radius.Packet) (value TPCAPWAPWWANCREG) {
	value, _ = TPCAPWAPWWANCREG_Lookup(p)
	return
}

func TPCAPWAPWWANCREG_Gets(p *radius.Packet) (values []TPCAPWAPWWANCREG, err error) {
	var i uint32
	for _, attr := range _Travelping_GetsVendor(p, 40) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TPCAPWAPWWANCREG(i))
	}
	return
}

func TPCAPWAPWWANCREG_Lookup(p *radius.Packet) (value TPCAPWAPWWANCREG, err error) {
	a, ok := _Travelping_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TPCAPWAPWWANCREG(i)
	return
}

func TPCAPWAPWWANCREG_Set(p *radius.Packet, value TPCAPWAPWWANCREG) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_SetVendor(p, 40, a)
}

func TPCAPWAPWWANCREG_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 40)
}

type TPCAPWAPWWANLAC uint32

var TPCAPWAPWWANLAC_Strings = map[TPCAPWAPWWANLAC]string{}

func (a TPCAPWAPWWANLAC) String() string {
	if str, ok := TPCAPWAPWWANLAC_Strings[a]; ok {
		return str
	}
	return "TPCAPWAPWWANLAC(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPCAPWAPWWANLAC_Add(p *radius.Packet, value TPCAPWAPWWANLAC) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_AddVendor(p, 41, a)
}

func TPCAPWAPWWANLAC_Get(p *radius.Packet) (value TPCAPWAPWWANLAC) {
	value, _ = TPCAPWAPWWANLAC_Lookup(p)
	return
}

func TPCAPWAPWWANLAC_Gets(p *radius.Packet) (values []TPCAPWAPWWANLAC, err error) {
	var i uint32
	for _, attr := range _Travelping_GetsVendor(p, 41) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TPCAPWAPWWANLAC(i))
	}
	return
}

func TPCAPWAPWWANLAC_Lookup(p *radius.Packet) (value TPCAPWAPWWANLAC, err error) {
	a, ok := _Travelping_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TPCAPWAPWWANLAC(i)
	return
}

func TPCAPWAPWWANLAC_Set(p *radius.Packet, value TPCAPWAPWWANLAC) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_SetVendor(p, 41, a)
}

func TPCAPWAPWWANLAC_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 41)
}

type TPCAPWAPWWANLatency uint32

var TPCAPWAPWWANLatency_Strings = map[TPCAPWAPWWANLatency]string{}

func (a TPCAPWAPWWANLatency) String() string {
	if str, ok := TPCAPWAPWWANLatency_Strings[a]; ok {
		return str
	}
	return "TPCAPWAPWWANLatency(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPCAPWAPWWANLatency_Add(p *radius.Packet, value TPCAPWAPWWANLatency) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_AddVendor(p, 42, a)
}

func TPCAPWAPWWANLatency_Get(p *radius.Packet) (value TPCAPWAPWWANLatency) {
	value, _ = TPCAPWAPWWANLatency_Lookup(p)
	return
}

func TPCAPWAPWWANLatency_Gets(p *radius.Packet) (values []TPCAPWAPWWANLatency, err error) {
	var i uint32
	for _, attr := range _Travelping_GetsVendor(p, 42) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TPCAPWAPWWANLatency(i))
	}
	return
}

func TPCAPWAPWWANLatency_Lookup(p *radius.Packet) (value TPCAPWAPWWANLatency, err error) {
	a, ok := _Travelping_LookupVendor(p, 42)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TPCAPWAPWWANLatency(i)
	return
}

func TPCAPWAPWWANLatency_Set(p *radius.Packet, value TPCAPWAPWWANLatency) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_SetVendor(p, 42, a)
}

func TPCAPWAPWWANLatency_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 42)
}

type TPCAPWAPWWANMCC uint32

var TPCAPWAPWWANMCC_Strings = map[TPCAPWAPWWANMCC]string{}

func (a TPCAPWAPWWANMCC) String() string {
	if str, ok := TPCAPWAPWWANMCC_Strings[a]; ok {
		return str
	}
	return "TPCAPWAPWWANMCC(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPCAPWAPWWANMCC_Add(p *radius.Packet, value TPCAPWAPWWANMCC) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_AddVendor(p, 43, a)
}

func TPCAPWAPWWANMCC_Get(p *radius.Packet) (value TPCAPWAPWWANMCC) {
	value, _ = TPCAPWAPWWANMCC_Lookup(p)
	return
}

func TPCAPWAPWWANMCC_Gets(p *radius.Packet) (values []TPCAPWAPWWANMCC, err error) {
	var i uint32
	for _, attr := range _Travelping_GetsVendor(p, 43) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TPCAPWAPWWANMCC(i))
	}
	return
}

func TPCAPWAPWWANMCC_Lookup(p *radius.Packet) (value TPCAPWAPWWANMCC, err error) {
	a, ok := _Travelping_LookupVendor(p, 43)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TPCAPWAPWWANMCC(i)
	return
}

func TPCAPWAPWWANMCC_Set(p *radius.Packet, value TPCAPWAPWWANMCC) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_SetVendor(p, 43, a)
}

func TPCAPWAPWWANMCC_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 43)
}

type TPCAPWAPWWANMNC uint32

var TPCAPWAPWWANMNC_Strings = map[TPCAPWAPWWANMNC]string{}

func (a TPCAPWAPWWANMNC) String() string {
	if str, ok := TPCAPWAPWWANMNC_Strings[a]; ok {
		return str
	}
	return "TPCAPWAPWWANMNC(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPCAPWAPWWANMNC_Add(p *radius.Packet, value TPCAPWAPWWANMNC) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_AddVendor(p, 44, a)
}

func TPCAPWAPWWANMNC_Get(p *radius.Packet) (value TPCAPWAPWWANMNC) {
	value, _ = TPCAPWAPWWANMNC_Lookup(p)
	return
}

func TPCAPWAPWWANMNC_Gets(p *radius.Packet) (values []TPCAPWAPWWANMNC, err error) {
	var i uint32
	for _, attr := range _Travelping_GetsVendor(p, 44) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TPCAPWAPWWANMNC(i))
	}
	return
}

func TPCAPWAPWWANMNC_Lookup(p *radius.Packet) (value TPCAPWAPWWANMNC, err error) {
	a, ok := _Travelping_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TPCAPWAPWWANMNC(i)
	return
}

func TPCAPWAPWWANMNC_Set(p *radius.Packet, value TPCAPWAPWWANMNC) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_SetVendor(p, 44, a)
}

func TPCAPWAPWWANMNC_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 44)
}

type TPCAPWAPWWANCellID uint32

var TPCAPWAPWWANCellID_Strings = map[TPCAPWAPWWANCellID]string{}

func (a TPCAPWAPWWANCellID) String() string {
	if str, ok := TPCAPWAPWWANCellID_Strings[a]; ok {
		return str
	}
	return "TPCAPWAPWWANCellID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPCAPWAPWWANCellID_Add(p *radius.Packet, value TPCAPWAPWWANCellID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_AddVendor(p, 45, a)
}

func TPCAPWAPWWANCellID_Get(p *radius.Packet) (value TPCAPWAPWWANCellID) {
	value, _ = TPCAPWAPWWANCellID_Lookup(p)
	return
}

func TPCAPWAPWWANCellID_Gets(p *radius.Packet) (values []TPCAPWAPWWANCellID, err error) {
	var i uint32
	for _, attr := range _Travelping_GetsVendor(p, 45) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TPCAPWAPWWANCellID(i))
	}
	return
}

func TPCAPWAPWWANCellID_Lookup(p *radius.Packet) (value TPCAPWAPWWANCellID, err error) {
	a, ok := _Travelping_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TPCAPWAPWWANCellID(i)
	return
}

func TPCAPWAPWWANCellID_Set(p *radius.Packet, value TPCAPWAPWWANCellID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_SetVendor(p, 45, a)
}

func TPCAPWAPWWANCellID_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 45)
}

type TPCAPWAPPOWERSAVEIDLETIMEOUT uint32

var TPCAPWAPPOWERSAVEIDLETIMEOUT_Strings = map[TPCAPWAPPOWERSAVEIDLETIMEOUT]string{}

func (a TPCAPWAPPOWERSAVEIDLETIMEOUT) String() string {
	if str, ok := TPCAPWAPPOWERSAVEIDLETIMEOUT_Strings[a]; ok {
		return str
	}
	return "TPCAPWAPPOWERSAVEIDLETIMEOUT(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPCAPWAPPOWERSAVEIDLETIMEOUT_Add(p *radius.Packet, value TPCAPWAPPOWERSAVEIDLETIMEOUT) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_AddVendor(p, 46, a)
}

func TPCAPWAPPOWERSAVEIDLETIMEOUT_Get(p *radius.Packet) (value TPCAPWAPPOWERSAVEIDLETIMEOUT) {
	value, _ = TPCAPWAPPOWERSAVEIDLETIMEOUT_Lookup(p)
	return
}

func TPCAPWAPPOWERSAVEIDLETIMEOUT_Gets(p *radius.Packet) (values []TPCAPWAPPOWERSAVEIDLETIMEOUT, err error) {
	var i uint32
	for _, attr := range _Travelping_GetsVendor(p, 46) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TPCAPWAPPOWERSAVEIDLETIMEOUT(i))
	}
	return
}

func TPCAPWAPPOWERSAVEIDLETIMEOUT_Lookup(p *radius.Packet) (value TPCAPWAPPOWERSAVEIDLETIMEOUT, err error) {
	a, ok := _Travelping_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TPCAPWAPPOWERSAVEIDLETIMEOUT(i)
	return
}

func TPCAPWAPPOWERSAVEIDLETIMEOUT_Set(p *radius.Packet, value TPCAPWAPPOWERSAVEIDLETIMEOUT) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_SetVendor(p, 46, a)
}

func TPCAPWAPPOWERSAVEIDLETIMEOUT_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 46)
}

type TPCAPWAPPOWERSAVEBUSYTIMEOUT uint32

var TPCAPWAPPOWERSAVEBUSYTIMEOUT_Strings = map[TPCAPWAPPOWERSAVEBUSYTIMEOUT]string{}

func (a TPCAPWAPPOWERSAVEBUSYTIMEOUT) String() string {
	if str, ok := TPCAPWAPPOWERSAVEBUSYTIMEOUT_Strings[a]; ok {
		return str
	}
	return "TPCAPWAPPOWERSAVEBUSYTIMEOUT(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPCAPWAPPOWERSAVEBUSYTIMEOUT_Add(p *radius.Packet, value TPCAPWAPPOWERSAVEBUSYTIMEOUT) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_AddVendor(p, 47, a)
}

func TPCAPWAPPOWERSAVEBUSYTIMEOUT_Get(p *radius.Packet) (value TPCAPWAPPOWERSAVEBUSYTIMEOUT) {
	value, _ = TPCAPWAPPOWERSAVEBUSYTIMEOUT_Lookup(p)
	return
}

func TPCAPWAPPOWERSAVEBUSYTIMEOUT_Gets(p *radius.Packet) (values []TPCAPWAPPOWERSAVEBUSYTIMEOUT, err error) {
	var i uint32
	for _, attr := range _Travelping_GetsVendor(p, 47) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TPCAPWAPPOWERSAVEBUSYTIMEOUT(i))
	}
	return
}

func TPCAPWAPPOWERSAVEBUSYTIMEOUT_Lookup(p *radius.Packet) (value TPCAPWAPPOWERSAVEBUSYTIMEOUT, err error) {
	a, ok := _Travelping_LookupVendor(p, 47)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TPCAPWAPPOWERSAVEBUSYTIMEOUT(i)
	return
}

func TPCAPWAPPOWERSAVEBUSYTIMEOUT_Set(p *radius.Packet, value TPCAPWAPPOWERSAVEBUSYTIMEOUT) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_SetVendor(p, 47, a)
}

func TPCAPWAPPOWERSAVEBUSYTIMEOUT_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 47)
}

func TPCAPWAPSSID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 48, a)
}

func TPCAPWAPSSID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 48, a)
}

func TPCAPWAPSSID_Get(p *radius.Packet) (value []byte) {
	value, _ = TPCAPWAPSSID_Lookup(p)
	return
}

func TPCAPWAPSSID_GetString(p *radius.Packet) (value string) {
	value, _ = TPCAPWAPSSID_LookupString(p)
	return
}

func TPCAPWAPSSID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 48) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPSSID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 48) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPSSID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 48)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPCAPWAPSSID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 48)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPCAPWAPSSID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 48, a)
}

func TPCAPWAPSSID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 48, a)
}

func TPCAPWAPSSID_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 48)
}

type TPCAPWAPMaxWIFIClients uint32

var TPCAPWAPMaxWIFIClients_Strings = map[TPCAPWAPMaxWIFIClients]string{}

func (a TPCAPWAPMaxWIFIClients) String() string {
	if str, ok := TPCAPWAPMaxWIFIClients_Strings[a]; ok {
		return str
	}
	return "TPCAPWAPMaxWIFIClients(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TPCAPWAPMaxWIFIClients_Add(p *radius.Packet, value TPCAPWAPMaxWIFIClients) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_AddVendor(p, 49, a)
}

func TPCAPWAPMaxWIFIClients_Get(p *radius.Packet) (value TPCAPWAPMaxWIFIClients) {
	value, _ = TPCAPWAPMaxWIFIClients_Lookup(p)
	return
}

func TPCAPWAPMaxWIFIClients_Gets(p *radius.Packet) (values []TPCAPWAPMaxWIFIClients, err error) {
	var i uint32
	for _, attr := range _Travelping_GetsVendor(p, 49) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TPCAPWAPMaxWIFIClients(i))
	}
	return
}

func TPCAPWAPMaxWIFIClients_Lookup(p *radius.Packet) (value TPCAPWAPMaxWIFIClients, err error) {
	a, ok := _Travelping_LookupVendor(p, 49)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TPCAPWAPMaxWIFIClients(i)
	return
}

func TPCAPWAPMaxWIFIClients_Set(p *radius.Packet, value TPCAPWAPMaxWIFIClients) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Travelping_SetVendor(p, 49, a)
}

func TPCAPWAPMaxWIFIClients_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 49)
}

func TPCAPWAPWalledGarden_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 50, a)
}

func TPCAPWAPWalledGarden_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 50, a)
}

func TPCAPWAPWalledGarden_Get(p *radius.Packet) (value []byte) {
	value, _ = TPCAPWAPWalledGarden_Lookup(p)
	return
}

func TPCAPWAPWalledGarden_GetString(p *radius.Packet) (value string) {
	value, _ = TPCAPWAPWalledGarden_LookupString(p)
	return
}

func TPCAPWAPWalledGarden_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 50) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPWalledGarden_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 50) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPWalledGarden_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 50)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPCAPWAPWalledGarden_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 50)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPCAPWAPWalledGarden_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 50, a)
}

func TPCAPWAPWalledGarden_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 50, a)
}

func TPCAPWAPWalledGarden_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 50)
}

func TPCAPWAPGPSLatitude_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 51, a)
}

func TPCAPWAPGPSLatitude_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 51, a)
}

func TPCAPWAPGPSLatitude_Get(p *radius.Packet) (value []byte) {
	value, _ = TPCAPWAPGPSLatitude_Lookup(p)
	return
}

func TPCAPWAPGPSLatitude_GetString(p *radius.Packet) (value string) {
	value, _ = TPCAPWAPGPSLatitude_LookupString(p)
	return
}

func TPCAPWAPGPSLatitude_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 51) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPGPSLatitude_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 51) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPGPSLatitude_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 51)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPCAPWAPGPSLatitude_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 51)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPCAPWAPGPSLatitude_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 51, a)
}

func TPCAPWAPGPSLatitude_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 51, a)
}

func TPCAPWAPGPSLatitude_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 51)
}

func TPCAPWAPGPSLongitude_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 52, a)
}

func TPCAPWAPGPSLongitude_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 52, a)
}

func TPCAPWAPGPSLongitude_Get(p *radius.Packet) (value []byte) {
	value, _ = TPCAPWAPGPSLongitude_Lookup(p)
	return
}

func TPCAPWAPGPSLongitude_GetString(p *radius.Packet) (value string) {
	value, _ = TPCAPWAPGPSLongitude_LookupString(p)
	return
}

func TPCAPWAPGPSLongitude_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 52) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPGPSLongitude_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 52) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPGPSLongitude_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 52)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPCAPWAPGPSLongitude_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 52)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPCAPWAPGPSLongitude_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 52, a)
}

func TPCAPWAPGPSLongitude_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 52, a)
}

func TPCAPWAPGPSLongitude_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 52)
}

func TPCAPWAPGPSAltitude_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 53, a)
}

func TPCAPWAPGPSAltitude_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 53, a)
}

func TPCAPWAPGPSAltitude_Get(p *radius.Packet) (value []byte) {
	value, _ = TPCAPWAPGPSAltitude_Lookup(p)
	return
}

func TPCAPWAPGPSAltitude_GetString(p *radius.Packet) (value string) {
	value, _ = TPCAPWAPGPSAltitude_LookupString(p)
	return
}

func TPCAPWAPGPSAltitude_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 53) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPGPSAltitude_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 53) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPGPSAltitude_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 53)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPCAPWAPGPSAltitude_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 53)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPCAPWAPGPSAltitude_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 53, a)
}

func TPCAPWAPGPSAltitude_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 53, a)
}

func TPCAPWAPGPSAltitude_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 53)
}

func TPCAPWAPGPSHdop_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 54, a)
}

func TPCAPWAPGPSHdop_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 54, a)
}

func TPCAPWAPGPSHdop_Get(p *radius.Packet) (value []byte) {
	value, _ = TPCAPWAPGPSHdop_Lookup(p)
	return
}

func TPCAPWAPGPSHdop_GetString(p *radius.Packet) (value string) {
	value, _ = TPCAPWAPGPSHdop_LookupString(p)
	return
}

func TPCAPWAPGPSHdop_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 54) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPGPSHdop_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 54) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPGPSHdop_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 54)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPCAPWAPGPSHdop_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 54)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPCAPWAPGPSHdop_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 54, a)
}

func TPCAPWAPGPSHdop_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 54, a)
}

func TPCAPWAPGPSHdop_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 54)
}

func TPCAPWAPGPSTimestamp_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 55, a)
}

func TPCAPWAPGPSTimestamp_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 55, a)
}

func TPCAPWAPGPSTimestamp_Get(p *radius.Packet) (value []byte) {
	value, _ = TPCAPWAPGPSTimestamp_Lookup(p)
	return
}

func TPCAPWAPGPSTimestamp_GetString(p *radius.Packet) (value string) {
	value, _ = TPCAPWAPGPSTimestamp_LookupString(p)
	return
}

func TPCAPWAPGPSTimestamp_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 55) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPGPSTimestamp_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 55) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPGPSTimestamp_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 55)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPCAPWAPGPSTimestamp_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 55)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPCAPWAPGPSTimestamp_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 55, a)
}

func TPCAPWAPGPSTimestamp_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 55, a)
}

func TPCAPWAPGPSTimestamp_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 55)
}

func TPCAPWAPHardwareVersion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 56, a)
}

func TPCAPWAPHardwareVersion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 56, a)
}

func TPCAPWAPHardwareVersion_Get(p *radius.Packet) (value []byte) {
	value, _ = TPCAPWAPHardwareVersion_Lookup(p)
	return
}

func TPCAPWAPHardwareVersion_GetString(p *radius.Packet) (value string) {
	value, _ = TPCAPWAPHardwareVersion_LookupString(p)
	return
}

func TPCAPWAPHardwareVersion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 56) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPHardwareVersion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 56) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPHardwareVersion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 56)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPCAPWAPHardwareVersion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 56)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPCAPWAPHardwareVersion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 56, a)
}

func TPCAPWAPHardwareVersion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 56, a)
}

func TPCAPWAPHardwareVersion_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 56)
}

func TPCAPWAPSoftwareVersion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 57, a)
}

func TPCAPWAPSoftwareVersion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 57, a)
}

func TPCAPWAPSoftwareVersion_Get(p *radius.Packet) (value []byte) {
	value, _ = TPCAPWAPSoftwareVersion_Lookup(p)
	return
}

func TPCAPWAPSoftwareVersion_GetString(p *radius.Packet) (value string) {
	value, _ = TPCAPWAPSoftwareVersion_LookupString(p)
	return
}

func TPCAPWAPSoftwareVersion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 57) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPSoftwareVersion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 57) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPSoftwareVersion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 57)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPCAPWAPSoftwareVersion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 57)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPCAPWAPSoftwareVersion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 57, a)
}

func TPCAPWAPSoftwareVersion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 57, a)
}

func TPCAPWAPSoftwareVersion_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 57)
}

func TPCAPWAPBootVersion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 58, a)
}

func TPCAPWAPBootVersion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 58, a)
}

func TPCAPWAPBootVersion_Get(p *radius.Packet) (value []byte) {
	value, _ = TPCAPWAPBootVersion_Lookup(p)
	return
}

func TPCAPWAPBootVersion_GetString(p *radius.Packet) (value string) {
	value, _ = TPCAPWAPBootVersion_LookupString(p)
	return
}

func TPCAPWAPBootVersion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 58) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPBootVersion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 58) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPBootVersion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 58)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPCAPWAPBootVersion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 58)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPCAPWAPBootVersion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 58, a)
}

func TPCAPWAPBootVersion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 58, a)
}

func TPCAPWAPBootVersion_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 58)
}

func TPCAPWAPOtherSoftwareVersion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 59, a)
}

func TPCAPWAPOtherSoftwareVersion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_AddVendor(p, 59, a)
}

func TPCAPWAPOtherSoftwareVersion_Get(p *radius.Packet) (value []byte) {
	value, _ = TPCAPWAPOtherSoftwareVersion_Lookup(p)
	return
}

func TPCAPWAPOtherSoftwareVersion_GetString(p *radius.Packet) (value string) {
	value, _ = TPCAPWAPOtherSoftwareVersion_LookupString(p)
	return
}

func TPCAPWAPOtherSoftwareVersion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Travelping_GetsVendor(p, 59) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPOtherSoftwareVersion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Travelping_GetsVendor(p, 59) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TPCAPWAPOtherSoftwareVersion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Travelping_LookupVendor(p, 59)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TPCAPWAPOtherSoftwareVersion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Travelping_LookupVendor(p, 59)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TPCAPWAPOtherSoftwareVersion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 59, a)
}

func TPCAPWAPOtherSoftwareVersion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Travelping_SetVendor(p, 59, a)
}

func TPCAPWAPOtherSoftwareVersion_Del(p *radius.Packet) {
	_Travelping_DelVendor(p, 59)
}
