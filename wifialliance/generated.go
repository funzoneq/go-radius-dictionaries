// Code generated by radius-dict-gen. DO NOT EDIT.

package wifialliance

import (
	"errors"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_WiFiAlliance_VendorID = 40808
)

func _WiFiAlliance_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_WiFiAlliance_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _WiFiAlliance_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _WiFiAlliance_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _WiFiAlliance_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _WiFiAlliance_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _WiFiAlliance_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _WiFiAlliance_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _WiFiAlliance_AddVendor(p, typ, attr)
}

func _WiFiAlliance_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _WiFiAlliance_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func HS20SubscriptionRemediationNeeded_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _WiFiAlliance_AddVendor(p, 1, a)
}

func HS20SubscriptionRemediationNeeded_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _WiFiAlliance_AddVendor(p, 1, a)
}

func HS20SubscriptionRemediationNeeded_Get(p *radius.Packet) (value []byte) {
	value, _ = HS20SubscriptionRemediationNeeded_Lookup(p)
	return
}

func HS20SubscriptionRemediationNeeded_GetString(p *radius.Packet) (value string) {
	value, _ = HS20SubscriptionRemediationNeeded_LookupString(p)
	return
}

func HS20SubscriptionRemediationNeeded_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _WiFiAlliance_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HS20SubscriptionRemediationNeeded_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _WiFiAlliance_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HS20SubscriptionRemediationNeeded_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _WiFiAlliance_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HS20SubscriptionRemediationNeeded_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _WiFiAlliance_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HS20SubscriptionRemediationNeeded_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _WiFiAlliance_SetVendor(p, 1, a)
}

func HS20SubscriptionRemediationNeeded_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _WiFiAlliance_SetVendor(p, 1, a)
}

func HS20SubscriptionRemediationNeeded_Del(p *radius.Packet) {
	_WiFiAlliance_DelVendor(p, 1)
}

func HS20APVersion_Add(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _WiFiAlliance_AddVendor(p, 2, a)
}

func HS20APVersion_Get(p *radius.Packet) (value byte) {
	value, _ = HS20APVersion_Lookup(p)
	return
}

func HS20APVersion_Gets(p *radius.Packet) (values []byte, err error) {
	for _, attr := range _WiFiAlliance_GetsVendor(p, 2) {
		if len(attr) != 1 {
			err = errors.New("invalid byte")
			return
		}
		values = append(values, attr[0])
	}
	return
}

func HS20APVersion_Lookup(p *radius.Packet) (value byte, err error) {
	a, ok := _WiFiAlliance_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) != 1 {
		err = errors.New("invalid byte")
		return
	}
	value = a[0]
	return
}

func HS20APVersion_Set(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _WiFiAlliance_SetVendor(p, 2, a)
}

func HS20APVersion_Del(p *radius.Packet) {
	_WiFiAlliance_DelVendor(p, 2)
}

func HS20MobileDeviceVersion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _WiFiAlliance_AddVendor(p, 3, a)
}

func HS20MobileDeviceVersion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _WiFiAlliance_AddVendor(p, 3, a)
}

func HS20MobileDeviceVersion_Get(p *radius.Packet) (value []byte) {
	value, _ = HS20MobileDeviceVersion_Lookup(p)
	return
}

func HS20MobileDeviceVersion_GetString(p *radius.Packet) (value string) {
	value, _ = HS20MobileDeviceVersion_LookupString(p)
	return
}

func HS20MobileDeviceVersion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _WiFiAlliance_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HS20MobileDeviceVersion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _WiFiAlliance_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HS20MobileDeviceVersion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _WiFiAlliance_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HS20MobileDeviceVersion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _WiFiAlliance_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HS20MobileDeviceVersion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _WiFiAlliance_SetVendor(p, 3, a)
}

func HS20MobileDeviceVersion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _WiFiAlliance_SetVendor(p, 3, a)
}

func HS20MobileDeviceVersion_Del(p *radius.Packet) {
	_WiFiAlliance_DelVendor(p, 3)
}

func HS20DeauthenticationRequest_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _WiFiAlliance_AddVendor(p, 4, a)
}

func HS20DeauthenticationRequest_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _WiFiAlliance_AddVendor(p, 4, a)
}

func HS20DeauthenticationRequest_Get(p *radius.Packet) (value []byte) {
	value, _ = HS20DeauthenticationRequest_Lookup(p)
	return
}

func HS20DeauthenticationRequest_GetString(p *radius.Packet) (value string) {
	value, _ = HS20DeauthenticationRequest_LookupString(p)
	return
}

func HS20DeauthenticationRequest_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _WiFiAlliance_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HS20DeauthenticationRequest_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _WiFiAlliance_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HS20DeauthenticationRequest_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _WiFiAlliance_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HS20DeauthenticationRequest_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _WiFiAlliance_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HS20DeauthenticationRequest_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _WiFiAlliance_SetVendor(p, 4, a)
}

func HS20DeauthenticationRequest_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _WiFiAlliance_SetVendor(p, 4, a)
}

func HS20DeauthenticationRequest_Del(p *radius.Packet) {
	_WiFiAlliance_DelVendor(p, 4)
}

func HS20SessionInformationURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _WiFiAlliance_AddVendor(p, 5, a)
}

func HS20SessionInformationURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _WiFiAlliance_AddVendor(p, 5, a)
}

func HS20SessionInformationURL_Get(p *radius.Packet) (value []byte) {
	value, _ = HS20SessionInformationURL_Lookup(p)
	return
}

func HS20SessionInformationURL_GetString(p *radius.Packet) (value string) {
	value, _ = HS20SessionInformationURL_LookupString(p)
	return
}

func HS20SessionInformationURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _WiFiAlliance_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HS20SessionInformationURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _WiFiAlliance_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HS20SessionInformationURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _WiFiAlliance_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HS20SessionInformationURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _WiFiAlliance_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HS20SessionInformationURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _WiFiAlliance_SetVendor(p, 5, a)
}

func HS20SessionInformationURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _WiFiAlliance_SetVendor(p, 5, a)
}

func HS20SessionInformationURL_Del(p *radius.Packet) {
	_WiFiAlliance_DelVendor(p, 5)
}
