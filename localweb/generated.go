// Code generated by radius-dict-gen. DO NOT EDIT.

package localweb

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_LocalWeb_VendorID = 19220
)

func _LocalWeb_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_LocalWeb_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _LocalWeb_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _LocalWeb_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _LocalWeb_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _LocalWeb_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _LocalWeb_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _LocalWeb_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _LocalWeb_AddVendor(p, typ, attr)
}

func _LocalWeb_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _LocalWeb_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

func LocalWebClientIP_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _LocalWeb_AddVendor(p, 192, a)
}

func LocalWebClientIP_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _LocalWeb_AddVendor(p, 192, a)
}

func LocalWebClientIP_Get(p *radius.Packet) (value []byte) {
	value, _ = LocalWebClientIP_Lookup(p)
	return
}

func LocalWebClientIP_GetString(p *radius.Packet) (value string) {
	value, _ = LocalWebClientIP_LookupString(p)
	return
}

func LocalWebClientIP_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _LocalWeb_GetsVendor(p, 192) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LocalWebClientIP_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _LocalWeb_GetsVendor(p, 192) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LocalWebClientIP_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _LocalWeb_LookupVendor(p, 192)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LocalWebClientIP_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _LocalWeb_LookupVendor(p, 192)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LocalWebClientIP_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _LocalWeb_SetVendor(p, 192, a)
}

func LocalWebClientIP_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _LocalWeb_SetVendor(p, 192, a)
}

func LocalWebClientIP_Del(p *radius.Packet) {
	_LocalWeb_DelVendor(p, 192)
}

func LocalWebBorderRouter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _LocalWeb_AddVendor(p, 193, a)
}

func LocalWebBorderRouter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _LocalWeb_AddVendor(p, 193, a)
}

func LocalWebBorderRouter_Get(p *radius.Packet) (value []byte) {
	value, _ = LocalWebBorderRouter_Lookup(p)
	return
}

func LocalWebBorderRouter_GetString(p *radius.Packet) (value string) {
	value, _ = LocalWebBorderRouter_LookupString(p)
	return
}

func LocalWebBorderRouter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _LocalWeb_GetsVendor(p, 193) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LocalWebBorderRouter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _LocalWeb_GetsVendor(p, 193) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LocalWebBorderRouter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _LocalWeb_LookupVendor(p, 193)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LocalWebBorderRouter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _LocalWeb_LookupVendor(p, 193)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LocalWebBorderRouter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _LocalWeb_SetVendor(p, 193, a)
}

func LocalWebBorderRouter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _LocalWeb_SetVendor(p, 193, a)
}

func LocalWebBorderRouter_Del(p *radius.Packet) {
	_LocalWeb_DelVendor(p, 193)
}

type LocalWebTxLimit uint32

var LocalWebTxLimit_Strings = map[LocalWebTxLimit]string{}

func (a LocalWebTxLimit) String() string {
	if str, ok := LocalWebTxLimit_Strings[a]; ok {
		return str
	}
	return "LocalWebTxLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LocalWebTxLimit_Add(p *radius.Packet, value LocalWebTxLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_AddVendor(p, 200, a)
}

func LocalWebTxLimit_Get(p *radius.Packet) (value LocalWebTxLimit) {
	value, _ = LocalWebTxLimit_Lookup(p)
	return
}

func LocalWebTxLimit_Gets(p *radius.Packet) (values []LocalWebTxLimit, err error) {
	var i uint32
	for _, attr := range _LocalWeb_GetsVendor(p, 200) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LocalWebTxLimit(i))
	}
	return
}

func LocalWebTxLimit_Lookup(p *radius.Packet) (value LocalWebTxLimit, err error) {
	a, ok := _LocalWeb_LookupVendor(p, 200)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LocalWebTxLimit(i)
	return
}

func LocalWebTxLimit_Set(p *radius.Packet, value LocalWebTxLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_SetVendor(p, 200, a)
}

func LocalWebTxLimit_Del(p *radius.Packet) {
	_LocalWeb_DelVendor(p, 200)
}

type LocalWebRxLimit uint32

var LocalWebRxLimit_Strings = map[LocalWebRxLimit]string{}

func (a LocalWebRxLimit) String() string {
	if str, ok := LocalWebRxLimit_Strings[a]; ok {
		return str
	}
	return "LocalWebRxLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LocalWebRxLimit_Add(p *radius.Packet, value LocalWebRxLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_AddVendor(p, 201, a)
}

func LocalWebRxLimit_Get(p *radius.Packet) (value LocalWebRxLimit) {
	value, _ = LocalWebRxLimit_Lookup(p)
	return
}

func LocalWebRxLimit_Gets(p *radius.Packet) (values []LocalWebRxLimit, err error) {
	var i uint32
	for _, attr := range _LocalWeb_GetsVendor(p, 201) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LocalWebRxLimit(i))
	}
	return
}

func LocalWebRxLimit_Lookup(p *radius.Packet) (value LocalWebRxLimit, err error) {
	a, ok := _LocalWeb_LookupVendor(p, 201)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LocalWebRxLimit(i)
	return
}

func LocalWebRxLimit_Set(p *radius.Packet, value LocalWebRxLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_SetVendor(p, 201, a)
}

func LocalWebRxLimit_Del(p *radius.Packet) {
	_LocalWeb_DelVendor(p, 201)
}

type LocalWebAcctTime uint32

var LocalWebAcctTime_Strings = map[LocalWebAcctTime]string{}

func (a LocalWebAcctTime) String() string {
	if str, ok := LocalWebAcctTime_Strings[a]; ok {
		return str
	}
	return "LocalWebAcctTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LocalWebAcctTime_Add(p *radius.Packet, value LocalWebAcctTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_AddVendor(p, 210, a)
}

func LocalWebAcctTime_Get(p *radius.Packet) (value LocalWebAcctTime) {
	value, _ = LocalWebAcctTime_Lookup(p)
	return
}

func LocalWebAcctTime_Gets(p *radius.Packet) (values []LocalWebAcctTime, err error) {
	var i uint32
	for _, attr := range _LocalWeb_GetsVendor(p, 210) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LocalWebAcctTime(i))
	}
	return
}

func LocalWebAcctTime_Lookup(p *radius.Packet) (value LocalWebAcctTime, err error) {
	a, ok := _LocalWeb_LookupVendor(p, 210)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LocalWebAcctTime(i)
	return
}

func LocalWebAcctTime_Set(p *radius.Packet, value LocalWebAcctTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_SetVendor(p, 210, a)
}

func LocalWebAcctTime_Del(p *radius.Packet) {
	_LocalWeb_DelVendor(p, 210)
}

type LocalWebAcctDuration uint32

var LocalWebAcctDuration_Strings = map[LocalWebAcctDuration]string{}

func (a LocalWebAcctDuration) String() string {
	if str, ok := LocalWebAcctDuration_Strings[a]; ok {
		return str
	}
	return "LocalWebAcctDuration(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LocalWebAcctDuration_Add(p *radius.Packet, value LocalWebAcctDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_AddVendor(p, 211, a)
}

func LocalWebAcctDuration_Get(p *radius.Packet) (value LocalWebAcctDuration) {
	value, _ = LocalWebAcctDuration_Lookup(p)
	return
}

func LocalWebAcctDuration_Gets(p *radius.Packet) (values []LocalWebAcctDuration, err error) {
	var i uint32
	for _, attr := range _LocalWeb_GetsVendor(p, 211) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LocalWebAcctDuration(i))
	}
	return
}

func LocalWebAcctDuration_Lookup(p *radius.Packet) (value LocalWebAcctDuration, err error) {
	a, ok := _LocalWeb_LookupVendor(p, 211)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LocalWebAcctDuration(i)
	return
}

func LocalWebAcctDuration_Set(p *radius.Packet, value LocalWebAcctDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_SetVendor(p, 211, a)
}

func LocalWebAcctDuration_Del(p *radius.Packet) {
	_LocalWeb_DelVendor(p, 211)
}

type LocalWebAcctInterimTxBytes uint32

var LocalWebAcctInterimTxBytes_Strings = map[LocalWebAcctInterimTxBytes]string{}

func (a LocalWebAcctInterimTxBytes) String() string {
	if str, ok := LocalWebAcctInterimTxBytes_Strings[a]; ok {
		return str
	}
	return "LocalWebAcctInterimTxBytes(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LocalWebAcctInterimTxBytes_Add(p *radius.Packet, value LocalWebAcctInterimTxBytes) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_AddVendor(p, 212, a)
}

func LocalWebAcctInterimTxBytes_Get(p *radius.Packet) (value LocalWebAcctInterimTxBytes) {
	value, _ = LocalWebAcctInterimTxBytes_Lookup(p)
	return
}

func LocalWebAcctInterimTxBytes_Gets(p *radius.Packet) (values []LocalWebAcctInterimTxBytes, err error) {
	var i uint32
	for _, attr := range _LocalWeb_GetsVendor(p, 212) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LocalWebAcctInterimTxBytes(i))
	}
	return
}

func LocalWebAcctInterimTxBytes_Lookup(p *radius.Packet) (value LocalWebAcctInterimTxBytes, err error) {
	a, ok := _LocalWeb_LookupVendor(p, 212)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LocalWebAcctInterimTxBytes(i)
	return
}

func LocalWebAcctInterimTxBytes_Set(p *radius.Packet, value LocalWebAcctInterimTxBytes) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_SetVendor(p, 212, a)
}

func LocalWebAcctInterimTxBytes_Del(p *radius.Packet) {
	_LocalWeb_DelVendor(p, 212)
}

type LocalWebAcctInterimRxBytes uint32

var LocalWebAcctInterimRxBytes_Strings = map[LocalWebAcctInterimRxBytes]string{}

func (a LocalWebAcctInterimRxBytes) String() string {
	if str, ok := LocalWebAcctInterimRxBytes_Strings[a]; ok {
		return str
	}
	return "LocalWebAcctInterimRxBytes(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LocalWebAcctInterimRxBytes_Add(p *radius.Packet, value LocalWebAcctInterimRxBytes) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_AddVendor(p, 213, a)
}

func LocalWebAcctInterimRxBytes_Get(p *radius.Packet) (value LocalWebAcctInterimRxBytes) {
	value, _ = LocalWebAcctInterimRxBytes_Lookup(p)
	return
}

func LocalWebAcctInterimRxBytes_Gets(p *radius.Packet) (values []LocalWebAcctInterimRxBytes, err error) {
	var i uint32
	for _, attr := range _LocalWeb_GetsVendor(p, 213) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LocalWebAcctInterimRxBytes(i))
	}
	return
}

func LocalWebAcctInterimRxBytes_Lookup(p *radius.Packet) (value LocalWebAcctInterimRxBytes, err error) {
	a, ok := _LocalWeb_LookupVendor(p, 213)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LocalWebAcctInterimRxBytes(i)
	return
}

func LocalWebAcctInterimRxBytes_Set(p *radius.Packet, value LocalWebAcctInterimRxBytes) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_SetVendor(p, 213, a)
}

func LocalWebAcctInterimRxBytes_Del(p *radius.Packet) {
	_LocalWeb_DelVendor(p, 213)
}

type LocalWebAcctInterimTxGigawords uint32

var LocalWebAcctInterimTxGigawords_Strings = map[LocalWebAcctInterimTxGigawords]string{}

func (a LocalWebAcctInterimTxGigawords) String() string {
	if str, ok := LocalWebAcctInterimTxGigawords_Strings[a]; ok {
		return str
	}
	return "LocalWebAcctInterimTxGigawords(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LocalWebAcctInterimTxGigawords_Add(p *radius.Packet, value LocalWebAcctInterimTxGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_AddVendor(p, 214, a)
}

func LocalWebAcctInterimTxGigawords_Get(p *radius.Packet) (value LocalWebAcctInterimTxGigawords) {
	value, _ = LocalWebAcctInterimTxGigawords_Lookup(p)
	return
}

func LocalWebAcctInterimTxGigawords_Gets(p *radius.Packet) (values []LocalWebAcctInterimTxGigawords, err error) {
	var i uint32
	for _, attr := range _LocalWeb_GetsVendor(p, 214) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LocalWebAcctInterimTxGigawords(i))
	}
	return
}

func LocalWebAcctInterimTxGigawords_Lookup(p *radius.Packet) (value LocalWebAcctInterimTxGigawords, err error) {
	a, ok := _LocalWeb_LookupVendor(p, 214)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LocalWebAcctInterimTxGigawords(i)
	return
}

func LocalWebAcctInterimTxGigawords_Set(p *radius.Packet, value LocalWebAcctInterimTxGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_SetVendor(p, 214, a)
}

func LocalWebAcctInterimTxGigawords_Del(p *radius.Packet) {
	_LocalWeb_DelVendor(p, 214)
}

type LocalWebAcctInterimRxGigawords uint32

var LocalWebAcctInterimRxGigawords_Strings = map[LocalWebAcctInterimRxGigawords]string{}

func (a LocalWebAcctInterimRxGigawords) String() string {
	if str, ok := LocalWebAcctInterimRxGigawords_Strings[a]; ok {
		return str
	}
	return "LocalWebAcctInterimRxGigawords(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LocalWebAcctInterimRxGigawords_Add(p *radius.Packet, value LocalWebAcctInterimRxGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_AddVendor(p, 215, a)
}

func LocalWebAcctInterimRxGigawords_Get(p *radius.Packet) (value LocalWebAcctInterimRxGigawords) {
	value, _ = LocalWebAcctInterimRxGigawords_Lookup(p)
	return
}

func LocalWebAcctInterimRxGigawords_Gets(p *radius.Packet) (values []LocalWebAcctInterimRxGigawords, err error) {
	var i uint32
	for _, attr := range _LocalWeb_GetsVendor(p, 215) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LocalWebAcctInterimRxGigawords(i))
	}
	return
}

func LocalWebAcctInterimRxGigawords_Lookup(p *radius.Packet) (value LocalWebAcctInterimRxGigawords, err error) {
	a, ok := _LocalWeb_LookupVendor(p, 215)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LocalWebAcctInterimRxGigawords(i)
	return
}

func LocalWebAcctInterimRxGigawords_Set(p *radius.Packet, value LocalWebAcctInterimRxGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_SetVendor(p, 215, a)
}

func LocalWebAcctInterimRxGigawords_Del(p *radius.Packet) {
	_LocalWeb_DelVendor(p, 215)
}

type LocalWebAcctInterimTxMgmt uint32

var LocalWebAcctInterimTxMgmt_Strings = map[LocalWebAcctInterimTxMgmt]string{}

func (a LocalWebAcctInterimTxMgmt) String() string {
	if str, ok := LocalWebAcctInterimTxMgmt_Strings[a]; ok {
		return str
	}
	return "LocalWebAcctInterimTxMgmt(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LocalWebAcctInterimTxMgmt_Add(p *radius.Packet, value LocalWebAcctInterimTxMgmt) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_AddVendor(p, 216, a)
}

func LocalWebAcctInterimTxMgmt_Get(p *radius.Packet) (value LocalWebAcctInterimTxMgmt) {
	value, _ = LocalWebAcctInterimTxMgmt_Lookup(p)
	return
}

func LocalWebAcctInterimTxMgmt_Gets(p *radius.Packet) (values []LocalWebAcctInterimTxMgmt, err error) {
	var i uint32
	for _, attr := range _LocalWeb_GetsVendor(p, 216) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LocalWebAcctInterimTxMgmt(i))
	}
	return
}

func LocalWebAcctInterimTxMgmt_Lookup(p *radius.Packet) (value LocalWebAcctInterimTxMgmt, err error) {
	a, ok := _LocalWeb_LookupVendor(p, 216)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LocalWebAcctInterimTxMgmt(i)
	return
}

func LocalWebAcctInterimTxMgmt_Set(p *radius.Packet, value LocalWebAcctInterimTxMgmt) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_SetVendor(p, 216, a)
}

func LocalWebAcctInterimTxMgmt_Del(p *radius.Packet) {
	_LocalWeb_DelVendor(p, 216)
}

type LocalWebAcctInterimRxMgmt uint32

var LocalWebAcctInterimRxMgmt_Strings = map[LocalWebAcctInterimRxMgmt]string{}

func (a LocalWebAcctInterimRxMgmt) String() string {
	if str, ok := LocalWebAcctInterimRxMgmt_Strings[a]; ok {
		return str
	}
	return "LocalWebAcctInterimRxMgmt(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LocalWebAcctInterimRxMgmt_Add(p *radius.Packet, value LocalWebAcctInterimRxMgmt) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_AddVendor(p, 217, a)
}

func LocalWebAcctInterimRxMgmt_Get(p *radius.Packet) (value LocalWebAcctInterimRxMgmt) {
	value, _ = LocalWebAcctInterimRxMgmt_Lookup(p)
	return
}

func LocalWebAcctInterimRxMgmt_Gets(p *radius.Packet) (values []LocalWebAcctInterimRxMgmt, err error) {
	var i uint32
	for _, attr := range _LocalWeb_GetsVendor(p, 217) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LocalWebAcctInterimRxMgmt(i))
	}
	return
}

func LocalWebAcctInterimRxMgmt_Lookup(p *radius.Packet) (value LocalWebAcctInterimRxMgmt, err error) {
	a, ok := _LocalWeb_LookupVendor(p, 217)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LocalWebAcctInterimRxMgmt(i)
	return
}

func LocalWebAcctInterimRxMgmt_Set(p *radius.Packet, value LocalWebAcctInterimRxMgmt) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_SetVendor(p, 217, a)
}

func LocalWebAcctInterimRxMgmt_Del(p *radius.Packet) {
	_LocalWeb_DelVendor(p, 217)
}

type LocalWebAcctTxMgmt uint32

var LocalWebAcctTxMgmt_Strings = map[LocalWebAcctTxMgmt]string{}

func (a LocalWebAcctTxMgmt) String() string {
	if str, ok := LocalWebAcctTxMgmt_Strings[a]; ok {
		return str
	}
	return "LocalWebAcctTxMgmt(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LocalWebAcctTxMgmt_Add(p *radius.Packet, value LocalWebAcctTxMgmt) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_AddVendor(p, 230, a)
}

func LocalWebAcctTxMgmt_Get(p *radius.Packet) (value LocalWebAcctTxMgmt) {
	value, _ = LocalWebAcctTxMgmt_Lookup(p)
	return
}

func LocalWebAcctTxMgmt_Gets(p *radius.Packet) (values []LocalWebAcctTxMgmt, err error) {
	var i uint32
	for _, attr := range _LocalWeb_GetsVendor(p, 230) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LocalWebAcctTxMgmt(i))
	}
	return
}

func LocalWebAcctTxMgmt_Lookup(p *radius.Packet) (value LocalWebAcctTxMgmt, err error) {
	a, ok := _LocalWeb_LookupVendor(p, 230)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LocalWebAcctTxMgmt(i)
	return
}

func LocalWebAcctTxMgmt_Set(p *radius.Packet, value LocalWebAcctTxMgmt) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_SetVendor(p, 230, a)
}

func LocalWebAcctTxMgmt_Del(p *radius.Packet) {
	_LocalWeb_DelVendor(p, 230)
}

type LocalWebAcctRxMgmt uint32

var LocalWebAcctRxMgmt_Strings = map[LocalWebAcctRxMgmt]string{}

func (a LocalWebAcctRxMgmt) String() string {
	if str, ok := LocalWebAcctRxMgmt_Strings[a]; ok {
		return str
	}
	return "LocalWebAcctRxMgmt(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LocalWebAcctRxMgmt_Add(p *radius.Packet, value LocalWebAcctRxMgmt) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_AddVendor(p, 231, a)
}

func LocalWebAcctRxMgmt_Get(p *radius.Packet) (value LocalWebAcctRxMgmt) {
	value, _ = LocalWebAcctRxMgmt_Lookup(p)
	return
}

func LocalWebAcctRxMgmt_Gets(p *radius.Packet) (values []LocalWebAcctRxMgmt, err error) {
	var i uint32
	for _, attr := range _LocalWeb_GetsVendor(p, 231) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LocalWebAcctRxMgmt(i))
	}
	return
}

func LocalWebAcctRxMgmt_Lookup(p *radius.Packet) (value LocalWebAcctRxMgmt, err error) {
	a, ok := _LocalWeb_LookupVendor(p, 231)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LocalWebAcctRxMgmt(i)
	return
}

func LocalWebAcctRxMgmt_Set(p *radius.Packet, value LocalWebAcctRxMgmt) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_SetVendor(p, 231, a)
}

func LocalWebAcctRxMgmt_Del(p *radius.Packet) {
	_LocalWeb_DelVendor(p, 231)
}

type LocalWebReauthCounter uint32

var LocalWebReauthCounter_Strings = map[LocalWebReauthCounter]string{}

func (a LocalWebReauthCounter) String() string {
	if str, ok := LocalWebReauthCounter_Strings[a]; ok {
		return str
	}
	return "LocalWebReauthCounter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LocalWebReauthCounter_Add(p *radius.Packet, value LocalWebReauthCounter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_AddVendor(p, 240, a)
}

func LocalWebReauthCounter_Get(p *radius.Packet) (value LocalWebReauthCounter) {
	value, _ = LocalWebReauthCounter_Lookup(p)
	return
}

func LocalWebReauthCounter_Gets(p *radius.Packet) (values []LocalWebReauthCounter, err error) {
	var i uint32
	for _, attr := range _LocalWeb_GetsVendor(p, 240) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LocalWebReauthCounter(i))
	}
	return
}

func LocalWebReauthCounter_Lookup(p *radius.Packet) (value LocalWebReauthCounter, err error) {
	a, ok := _LocalWeb_LookupVendor(p, 240)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LocalWebReauthCounter(i)
	return
}

func LocalWebReauthCounter_Set(p *radius.Packet, value LocalWebReauthCounter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _LocalWeb_SetVendor(p, 240, a)
}

func LocalWebReauthCounter_Del(p *radius.Packet) {
	_LocalWeb_DelVendor(p, 240)
}
