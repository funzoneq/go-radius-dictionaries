// Code generated by radius-dict-gen. DO NOT EDIT.

package versanet

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Versanet_VendorID = 2180
)

func _Versanet_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Versanet_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Versanet_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Versanet_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Versanet_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Versanet_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Versanet_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Versanet_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Versanet_AddVendor(p, typ, attr)
}

func _Versanet_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Versanet_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

type VersanetTerminationCause uint32

const (
	VersanetTerminationCause_Value_NormalHangupNoErrorOccurred  VersanetTerminationCause = 0
	VersanetTerminationCause_Value_CallWaitingCausedDisconnect  VersanetTerminationCause = 3
	VersanetTerminationCause_Value_PhysicalCarrierLoss          VersanetTerminationCause = 4
	VersanetTerminationCause_Value_NoErrCorrectionAtOtherEnd    VersanetTerminationCause = 5
	VersanetTerminationCause_Value_NoRespToFeatureNegotiation   VersanetTerminationCause = 6
	VersanetTerminationCause_Value_OnestModemAsyncOnly2ndSync   VersanetTerminationCause = 7
	VersanetTerminationCause_Value_NoFramingTechniqueInCommon   VersanetTerminationCause = 8
	VersanetTerminationCause_Value_NoProtocolInCommon           VersanetTerminationCause = 9
	VersanetTerminationCause_Value_BadRespToFeatureNegotiation  VersanetTerminationCause = 10
	VersanetTerminationCause_Value_NoSyncInfoFromRemoteModem    VersanetTerminationCause = 11
	VersanetTerminationCause_Value_NormalHangupByRemoteModem    VersanetTerminationCause = 12
	VersanetTerminationCause_Value_RetransmissionLimitReached   VersanetTerminationCause = 13
	VersanetTerminationCause_Value_ProtocolViolationOccurred    VersanetTerminationCause = 14
	VersanetTerminationCause_Value_LostDTR                      VersanetTerminationCause = 15
	VersanetTerminationCause_Value_ReceivedGSTNCleardown        VersanetTerminationCause = 16
	VersanetTerminationCause_Value_InactivityTimeout            VersanetTerminationCause = 17
	VersanetTerminationCause_Value_SpeedNotSupported            VersanetTerminationCause = 18
	VersanetTerminationCause_Value_LongSpaceDisconnect          VersanetTerminationCause = 19
	VersanetTerminationCause_Value_KeyAbortDisconnect           VersanetTerminationCause = 20
	VersanetTerminationCause_Value_ClearsPreviousDiscReason     VersanetTerminationCause = 21
	VersanetTerminationCause_Value_NoConnectionEstablished      VersanetTerminationCause = 22
	VersanetTerminationCause_Value_DisconnectAfterThreeRetrains VersanetTerminationCause = 23
)

var VersanetTerminationCause_Strings = map[VersanetTerminationCause]string{
	VersanetTerminationCause_Value_NormalHangupNoErrorOccurred:  "Normal-Hangup-No-Error-Occurred",
	VersanetTerminationCause_Value_CallWaitingCausedDisconnect:  "Call-Waiting-Caused-Disconnect",
	VersanetTerminationCause_Value_PhysicalCarrierLoss:          "Physical-Carrier-Loss",
	VersanetTerminationCause_Value_NoErrCorrectionAtOtherEnd:    "No-err-correction-at-other-end",
	VersanetTerminationCause_Value_NoRespToFeatureNegotiation:   "No-resp-to-feature-negotiation",
	VersanetTerminationCause_Value_OnestModemAsyncOnly2ndSync:   "1st-modem-async-only-2nd-sync",
	VersanetTerminationCause_Value_NoFramingTechniqueInCommon:   "No-framing-technique-in-common",
	VersanetTerminationCause_Value_NoProtocolInCommon:           "No-protocol-in-common",
	VersanetTerminationCause_Value_BadRespToFeatureNegotiation:  "Bad-resp-to-feature-negotiation",
	VersanetTerminationCause_Value_NoSyncInfoFromRemoteModem:    "No-sync-info-from-remote-modem",
	VersanetTerminationCause_Value_NormalHangupByRemoteModem:    "Normal-Hangup-by-Remote-modem",
	VersanetTerminationCause_Value_RetransmissionLimitReached:   "Retransmission-limit-reached",
	VersanetTerminationCause_Value_ProtocolViolationOccurred:    "Protocol-violation-occurred",
	VersanetTerminationCause_Value_LostDTR:                      "Lost-DTR",
	VersanetTerminationCause_Value_ReceivedGSTNCleardown:        "Received-GSTN-cleardown",
	VersanetTerminationCause_Value_InactivityTimeout:            "Inactivity-timeout",
	VersanetTerminationCause_Value_SpeedNotSupported:            "Speed-not-supported",
	VersanetTerminationCause_Value_LongSpaceDisconnect:          "Long-space-disconnect",
	VersanetTerminationCause_Value_KeyAbortDisconnect:           "Key-abort-disconnect",
	VersanetTerminationCause_Value_ClearsPreviousDiscReason:     "Clears-previous-disc-reason",
	VersanetTerminationCause_Value_NoConnectionEstablished:      "No-connection-established",
	VersanetTerminationCause_Value_DisconnectAfterThreeRetrains: "Disconnect-after-three-retrains",
}

func (a VersanetTerminationCause) String() string {
	if str, ok := VersanetTerminationCause_Strings[a]; ok {
		return str
	}
	return "VersanetTerminationCause(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func VersanetTerminationCause_Add(p *radius.Packet, value VersanetTerminationCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Versanet_AddVendor(p, 1, a)
}

func VersanetTerminationCause_Get(p *radius.Packet) (value VersanetTerminationCause) {
	value, _ = VersanetTerminationCause_Lookup(p)
	return
}

func VersanetTerminationCause_Gets(p *radius.Packet) (values []VersanetTerminationCause, err error) {
	var i uint32
	for _, attr := range _Versanet_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, VersanetTerminationCause(i))
	}
	return
}

func VersanetTerminationCause_Lookup(p *radius.Packet) (value VersanetTerminationCause, err error) {
	a, ok := _Versanet_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = VersanetTerminationCause(i)
	return
}

func VersanetTerminationCause_Set(p *radius.Packet, value VersanetTerminationCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Versanet_SetVendor(p, 1, a)
}

func VersanetTerminationCause_Del(p *radius.Packet) {
	_Versanet_DelVendor(p, 1)
}
