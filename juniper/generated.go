// Code generated by radius-dict-gen. DO NOT EDIT.

package juniper

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Juniper_VendorID = 2636
)

func _Juniper_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Juniper_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Juniper_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Juniper_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Juniper_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Juniper_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Juniper_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Juniper_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Juniper_AddVendor(p, typ, attr)
}

func _Juniper_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Juniper_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

func JuniperLocalUserName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 1, a)
}

func JuniperLocalUserName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 1, a)
}

func JuniperLocalUserName_Get(p *radius.Packet) (value []byte) {
	value, _ = JuniperLocalUserName_Lookup(p)
	return
}

func JuniperLocalUserName_GetString(p *radius.Packet) (value string) {
	value, _ = JuniperLocalUserName_LookupString(p)
	return
}

func JuniperLocalUserName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Juniper_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperLocalUserName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Juniper_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperLocalUserName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Juniper_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JuniperLocalUserName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Juniper_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JuniperLocalUserName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 1, a)
}

func JuniperLocalUserName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 1, a)
}

func JuniperLocalUserName_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 1)
}

func JuniperAllowCommands_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 2, a)
}

func JuniperAllowCommands_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 2, a)
}

func JuniperAllowCommands_Get(p *radius.Packet) (value []byte) {
	value, _ = JuniperAllowCommands_Lookup(p)
	return
}

func JuniperAllowCommands_GetString(p *radius.Packet) (value string) {
	value, _ = JuniperAllowCommands_LookupString(p)
	return
}

func JuniperAllowCommands_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Juniper_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperAllowCommands_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Juniper_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperAllowCommands_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Juniper_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JuniperAllowCommands_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Juniper_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JuniperAllowCommands_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 2, a)
}

func JuniperAllowCommands_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 2, a)
}

func JuniperAllowCommands_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 2)
}

func JuniperDenyCommands_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 3, a)
}

func JuniperDenyCommands_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 3, a)
}

func JuniperDenyCommands_Get(p *radius.Packet) (value []byte) {
	value, _ = JuniperDenyCommands_Lookup(p)
	return
}

func JuniperDenyCommands_GetString(p *radius.Packet) (value string) {
	value, _ = JuniperDenyCommands_LookupString(p)
	return
}

func JuniperDenyCommands_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Juniper_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperDenyCommands_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Juniper_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperDenyCommands_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Juniper_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JuniperDenyCommands_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Juniper_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JuniperDenyCommands_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 3, a)
}

func JuniperDenyCommands_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 3, a)
}

func JuniperDenyCommands_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 3)
}

func JuniperAllowConfiguration_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 4, a)
}

func JuniperAllowConfiguration_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 4, a)
}

func JuniperAllowConfiguration_Get(p *radius.Packet) (value []byte) {
	value, _ = JuniperAllowConfiguration_Lookup(p)
	return
}

func JuniperAllowConfiguration_GetString(p *radius.Packet) (value string) {
	value, _ = JuniperAllowConfiguration_LookupString(p)
	return
}

func JuniperAllowConfiguration_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Juniper_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperAllowConfiguration_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Juniper_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperAllowConfiguration_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Juniper_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JuniperAllowConfiguration_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Juniper_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JuniperAllowConfiguration_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 4, a)
}

func JuniperAllowConfiguration_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 4, a)
}

func JuniperAllowConfiguration_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 4)
}

func JuniperDenyConfiguration_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 5, a)
}

func JuniperDenyConfiguration_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 5, a)
}

func JuniperDenyConfiguration_Get(p *radius.Packet) (value []byte) {
	value, _ = JuniperDenyConfiguration_Lookup(p)
	return
}

func JuniperDenyConfiguration_GetString(p *radius.Packet) (value string) {
	value, _ = JuniperDenyConfiguration_LookupString(p)
	return
}

func JuniperDenyConfiguration_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Juniper_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperDenyConfiguration_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Juniper_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperDenyConfiguration_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Juniper_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JuniperDenyConfiguration_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Juniper_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JuniperDenyConfiguration_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 5, a)
}

func JuniperDenyConfiguration_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 5, a)
}

func JuniperDenyConfiguration_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 5)
}

func JuniperInteractiveCommand_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 8, a)
}

func JuniperInteractiveCommand_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 8, a)
}

func JuniperInteractiveCommand_Get(p *radius.Packet) (value []byte) {
	value, _ = JuniperInteractiveCommand_Lookup(p)
	return
}

func JuniperInteractiveCommand_GetString(p *radius.Packet) (value string) {
	value, _ = JuniperInteractiveCommand_LookupString(p)
	return
}

func JuniperInteractiveCommand_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Juniper_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperInteractiveCommand_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Juniper_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperInteractiveCommand_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Juniper_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JuniperInteractiveCommand_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Juniper_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JuniperInteractiveCommand_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 8, a)
}

func JuniperInteractiveCommand_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 8, a)
}

func JuniperInteractiveCommand_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 8)
}

func JuniperConfigurationChange_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 9, a)
}

func JuniperConfigurationChange_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 9, a)
}

func JuniperConfigurationChange_Get(p *radius.Packet) (value []byte) {
	value, _ = JuniperConfigurationChange_Lookup(p)
	return
}

func JuniperConfigurationChange_GetString(p *radius.Packet) (value string) {
	value, _ = JuniperConfigurationChange_LookupString(p)
	return
}

func JuniperConfigurationChange_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Juniper_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperConfigurationChange_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Juniper_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperConfigurationChange_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Juniper_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JuniperConfigurationChange_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Juniper_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JuniperConfigurationChange_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 9, a)
}

func JuniperConfigurationChange_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 9, a)
}

func JuniperConfigurationChange_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 9)
}

func JuniperUserPermissions_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 10, a)
}

func JuniperUserPermissions_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 10, a)
}

func JuniperUserPermissions_Get(p *radius.Packet) (value []byte) {
	value, _ = JuniperUserPermissions_Lookup(p)
	return
}

func JuniperUserPermissions_GetString(p *radius.Packet) (value string) {
	value, _ = JuniperUserPermissions_LookupString(p)
	return
}

func JuniperUserPermissions_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Juniper_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperUserPermissions_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Juniper_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperUserPermissions_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Juniper_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JuniperUserPermissions_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Juniper_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JuniperUserPermissions_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 10, a)
}

func JuniperUserPermissions_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 10, a)
}

func JuniperUserPermissions_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 10)
}

func JuniperJunosspaceProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 11, a)
}

func JuniperJunosspaceProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 11, a)
}

func JuniperJunosspaceProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = JuniperJunosspaceProfile_Lookup(p)
	return
}

func JuniperJunosspaceProfile_GetString(p *radius.Packet) (value string) {
	value, _ = JuniperJunosspaceProfile_LookupString(p)
	return
}

func JuniperJunosspaceProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Juniper_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperJunosspaceProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Juniper_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperJunosspaceProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Juniper_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JuniperJunosspaceProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Juniper_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JuniperJunosspaceProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 11, a)
}

func JuniperJunosspaceProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 11, a)
}

func JuniperJunosspaceProfile_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 11)
}

type JuniperCTPGroup uint32

const (
	JuniperCTPGroup_Value_ReadOnly        JuniperCTPGroup = 1
	JuniperCTPGroup_Value_Admin           JuniperCTPGroup = 2
	JuniperCTPGroup_Value_PrivilegedAdmin JuniperCTPGroup = 3
	JuniperCTPGroup_Value_Auditor         JuniperCTPGroup = 4
)

var JuniperCTPGroup_Strings = map[JuniperCTPGroup]string{
	JuniperCTPGroup_Value_ReadOnly:        "Read_Only",
	JuniperCTPGroup_Value_Admin:           "Admin",
	JuniperCTPGroup_Value_PrivilegedAdmin: "Privileged_Admin",
	JuniperCTPGroup_Value_Auditor:         "Auditor",
}

func (a JuniperCTPGroup) String() string {
	if str, ok := JuniperCTPGroup_Strings[a]; ok {
		return str
	}
	return "JuniperCTPGroup(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func JuniperCTPGroup_Add(p *radius.Packet, value JuniperCTPGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Juniper_AddVendor(p, 21, a)
}

func JuniperCTPGroup_Get(p *radius.Packet) (value JuniperCTPGroup) {
	value, _ = JuniperCTPGroup_Lookup(p)
	return
}

func JuniperCTPGroup_Gets(p *radius.Packet) (values []JuniperCTPGroup, err error) {
	var i uint32
	for _, attr := range _Juniper_GetsVendor(p, 21) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, JuniperCTPGroup(i))
	}
	return
}

func JuniperCTPGroup_Lookup(p *radius.Packet) (value JuniperCTPGroup, err error) {
	a, ok := _Juniper_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = JuniperCTPGroup(i)
	return
}

func JuniperCTPGroup_Set(p *radius.Packet, value JuniperCTPGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Juniper_SetVendor(p, 21, a)
}

func JuniperCTPGroup_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 21)
}

type JuniperCTPViewAPPGroup uint32

const (
	JuniperCTPViewAPPGroup_Value_NetView     JuniperCTPViewAPPGroup = 1
	JuniperCTPViewAPPGroup_Value_NetAdmin    JuniperCTPViewAPPGroup = 2
	JuniperCTPViewAPPGroup_Value_GlobalAdmin JuniperCTPViewAPPGroup = 3
)

var JuniperCTPViewAPPGroup_Strings = map[JuniperCTPViewAPPGroup]string{
	JuniperCTPViewAPPGroup_Value_NetView:     "Net_View",
	JuniperCTPViewAPPGroup_Value_NetAdmin:    "Net_Admin",
	JuniperCTPViewAPPGroup_Value_GlobalAdmin: "Global_Admin",
}

func (a JuniperCTPViewAPPGroup) String() string {
	if str, ok := JuniperCTPViewAPPGroup_Strings[a]; ok {
		return str
	}
	return "JuniperCTPViewAPPGroup(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func JuniperCTPViewAPPGroup_Add(p *radius.Packet, value JuniperCTPViewAPPGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Juniper_AddVendor(p, 22, a)
}

func JuniperCTPViewAPPGroup_Get(p *radius.Packet) (value JuniperCTPViewAPPGroup) {
	value, _ = JuniperCTPViewAPPGroup_Lookup(p)
	return
}

func JuniperCTPViewAPPGroup_Gets(p *radius.Packet) (values []JuniperCTPViewAPPGroup, err error) {
	var i uint32
	for _, attr := range _Juniper_GetsVendor(p, 22) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, JuniperCTPViewAPPGroup(i))
	}
	return
}

func JuniperCTPViewAPPGroup_Lookup(p *radius.Packet) (value JuniperCTPViewAPPGroup, err error) {
	a, ok := _Juniper_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = JuniperCTPViewAPPGroup(i)
	return
}

func JuniperCTPViewAPPGroup_Set(p *radius.Packet, value JuniperCTPViewAPPGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Juniper_SetVendor(p, 22, a)
}

func JuniperCTPViewAPPGroup_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 22)
}

type JuniperCTPViewOSGroup uint32

const (
	JuniperCTPViewOSGroup_Value_WebManager  JuniperCTPViewOSGroup = 1
	JuniperCTPViewOSGroup_Value_SystemAdmin JuniperCTPViewOSGroup = 2
	JuniperCTPViewOSGroup_Value_Auditor     JuniperCTPViewOSGroup = 3
)

var JuniperCTPViewOSGroup_Strings = map[JuniperCTPViewOSGroup]string{
	JuniperCTPViewOSGroup_Value_WebManager:  "Web_Manager",
	JuniperCTPViewOSGroup_Value_SystemAdmin: "System_Admin",
	JuniperCTPViewOSGroup_Value_Auditor:     "Auditor",
}

func (a JuniperCTPViewOSGroup) String() string {
	if str, ok := JuniperCTPViewOSGroup_Strings[a]; ok {
		return str
	}
	return "JuniperCTPViewOSGroup(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func JuniperCTPViewOSGroup_Add(p *radius.Packet, value JuniperCTPViewOSGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Juniper_AddVendor(p, 23, a)
}

func JuniperCTPViewOSGroup_Get(p *radius.Packet) (value JuniperCTPViewOSGroup) {
	value, _ = JuniperCTPViewOSGroup_Lookup(p)
	return
}

func JuniperCTPViewOSGroup_Gets(p *radius.Packet) (values []JuniperCTPViewOSGroup, err error) {
	var i uint32
	for _, attr := range _Juniper_GetsVendor(p, 23) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, JuniperCTPViewOSGroup(i))
	}
	return
}

func JuniperCTPViewOSGroup_Lookup(p *radius.Packet) (value JuniperCTPViewOSGroup, err error) {
	a, ok := _Juniper_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = JuniperCTPViewOSGroup(i)
	return
}

func JuniperCTPViewOSGroup_Set(p *radius.Packet, value JuniperCTPViewOSGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Juniper_SetVendor(p, 23, a)
}

func JuniperCTPViewOSGroup_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 23)
}

func JuniperPrimaryDNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 31, a)
}

func JuniperPrimaryDNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = JuniperPrimaryDNS_Lookup(p)
	return
}

func JuniperPrimaryDNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Juniper_GetsVendor(p, 31) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperPrimaryDNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Juniper_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func JuniperPrimaryDNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 31, a)
}

func JuniperPrimaryDNS_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 31)
}

func JuniperPrimaryWins_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 32, a)
}

func JuniperPrimaryWins_Get(p *radius.Packet) (value net.IP) {
	value, _ = JuniperPrimaryWins_Lookup(p)
	return
}

func JuniperPrimaryWins_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Juniper_GetsVendor(p, 32) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperPrimaryWins_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Juniper_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func JuniperPrimaryWins_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 32, a)
}

func JuniperPrimaryWins_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 32)
}

func JuniperSecondaryDNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 33, a)
}

func JuniperSecondaryDNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = JuniperSecondaryDNS_Lookup(p)
	return
}

func JuniperSecondaryDNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Juniper_GetsVendor(p, 33) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperSecondaryDNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Juniper_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func JuniperSecondaryDNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 33, a)
}

func JuniperSecondaryDNS_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 33)
}

func JuniperSecondaryWins_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 34, a)
}

func JuniperSecondaryWins_Get(p *radius.Packet) (value net.IP) {
	value, _ = JuniperSecondaryWins_Lookup(p)
	return
}

func JuniperSecondaryWins_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Juniper_GetsVendor(p, 34) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperSecondaryWins_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Juniper_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func JuniperSecondaryWins_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 34, a)
}

func JuniperSecondaryWins_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 34)
}

func JuniperInterfaceID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 35, a)
}

func JuniperInterfaceID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 35, a)
}

func JuniperInterfaceID_Get(p *radius.Packet) (value []byte) {
	value, _ = JuniperInterfaceID_Lookup(p)
	return
}

func JuniperInterfaceID_GetString(p *radius.Packet) (value string) {
	value, _ = JuniperInterfaceID_LookupString(p)
	return
}

func JuniperInterfaceID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Juniper_GetsVendor(p, 35) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperInterfaceID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Juniper_GetsVendor(p, 35) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperInterfaceID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Juniper_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JuniperInterfaceID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Juniper_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JuniperInterfaceID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 35, a)
}

func JuniperInterfaceID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 35, a)
}

func JuniperInterfaceID_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 35)
}

func JuniperIPPoolName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 36, a)
}

func JuniperIPPoolName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 36, a)
}

func JuniperIPPoolName_Get(p *radius.Packet) (value []byte) {
	value, _ = JuniperIPPoolName_Lookup(p)
	return
}

func JuniperIPPoolName_GetString(p *radius.Packet) (value string) {
	value, _ = JuniperIPPoolName_LookupString(p)
	return
}

func JuniperIPPoolName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Juniper_GetsVendor(p, 36) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperIPPoolName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Juniper_GetsVendor(p, 36) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperIPPoolName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Juniper_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JuniperIPPoolName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Juniper_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JuniperIPPoolName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 36, a)
}

func JuniperIPPoolName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 36, a)
}

func JuniperIPPoolName_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 36)
}

type JuniperKeepAlive uint32

var JuniperKeepAlive_Strings = map[JuniperKeepAlive]string{}

func (a JuniperKeepAlive) String() string {
	if str, ok := JuniperKeepAlive_Strings[a]; ok {
		return str
	}
	return "JuniperKeepAlive(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func JuniperKeepAlive_Add(p *radius.Packet, value JuniperKeepAlive) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Juniper_AddVendor(p, 37, a)
}

func JuniperKeepAlive_Get(p *radius.Packet) (value JuniperKeepAlive) {
	value, _ = JuniperKeepAlive_Lookup(p)
	return
}

func JuniperKeepAlive_Gets(p *radius.Packet) (values []JuniperKeepAlive, err error) {
	var i uint32
	for _, attr := range _Juniper_GetsVendor(p, 37) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, JuniperKeepAlive(i))
	}
	return
}

func JuniperKeepAlive_Lookup(p *radius.Packet) (value JuniperKeepAlive, err error) {
	a, ok := _Juniper_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = JuniperKeepAlive(i)
	return
}

func JuniperKeepAlive_Set(p *radius.Packet, value JuniperKeepAlive) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Juniper_SetVendor(p, 37, a)
}

func JuniperKeepAlive_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 37)
}

func JuniperCoSTrafficControlProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 38, a)
}

func JuniperCoSTrafficControlProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 38, a)
}

func JuniperCoSTrafficControlProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = JuniperCoSTrafficControlProfile_Lookup(p)
	return
}

func JuniperCoSTrafficControlProfile_GetString(p *radius.Packet) (value string) {
	value, _ = JuniperCoSTrafficControlProfile_LookupString(p)
	return
}

func JuniperCoSTrafficControlProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Juniper_GetsVendor(p, 38) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperCoSTrafficControlProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Juniper_GetsVendor(p, 38) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperCoSTrafficControlProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Juniper_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JuniperCoSTrafficControlProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Juniper_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JuniperCoSTrafficControlProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 38, a)
}

func JuniperCoSTrafficControlProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 38, a)
}

func JuniperCoSTrafficControlProfile_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 38)
}

func JuniperCoSParameter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 39, a)
}

func JuniperCoSParameter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 39, a)
}

func JuniperCoSParameter_Get(p *radius.Packet) (value []byte) {
	value, _ = JuniperCoSParameter_Lookup(p)
	return
}

func JuniperCoSParameter_GetString(p *radius.Packet) (value string) {
	value, _ = JuniperCoSParameter_LookupString(p)
	return
}

func JuniperCoSParameter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Juniper_GetsVendor(p, 39) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperCoSParameter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Juniper_GetsVendor(p, 39) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperCoSParameter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Juniper_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JuniperCoSParameter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Juniper_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JuniperCoSParameter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 39, a)
}

func JuniperCoSParameter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 39, a)
}

func JuniperCoSParameter_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 39)
}

type JuniperEncapsulationOverhead uint32

var JuniperEncapsulationOverhead_Strings = map[JuniperEncapsulationOverhead]string{}

func (a JuniperEncapsulationOverhead) String() string {
	if str, ok := JuniperEncapsulationOverhead_Strings[a]; ok {
		return str
	}
	return "JuniperEncapsulationOverhead(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func JuniperEncapsulationOverhead_Add(p *radius.Packet, value JuniperEncapsulationOverhead) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Juniper_AddVendor(p, 40, a)
}

func JuniperEncapsulationOverhead_Get(p *radius.Packet) (value JuniperEncapsulationOverhead) {
	value, _ = JuniperEncapsulationOverhead_Lookup(p)
	return
}

func JuniperEncapsulationOverhead_Gets(p *radius.Packet) (values []JuniperEncapsulationOverhead, err error) {
	var i uint32
	for _, attr := range _Juniper_GetsVendor(p, 40) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, JuniperEncapsulationOverhead(i))
	}
	return
}

func JuniperEncapsulationOverhead_Lookup(p *radius.Packet) (value JuniperEncapsulationOverhead, err error) {
	a, ok := _Juniper_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = JuniperEncapsulationOverhead(i)
	return
}

func JuniperEncapsulationOverhead_Set(p *radius.Packet, value JuniperEncapsulationOverhead) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Juniper_SetVendor(p, 40, a)
}

func JuniperEncapsulationOverhead_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 40)
}

type JuniperCellOverhead uint32

var JuniperCellOverhead_Strings = map[JuniperCellOverhead]string{}

func (a JuniperCellOverhead) String() string {
	if str, ok := JuniperCellOverhead_Strings[a]; ok {
		return str
	}
	return "JuniperCellOverhead(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func JuniperCellOverhead_Add(p *radius.Packet, value JuniperCellOverhead) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Juniper_AddVendor(p, 41, a)
}

func JuniperCellOverhead_Get(p *radius.Packet) (value JuniperCellOverhead) {
	value, _ = JuniperCellOverhead_Lookup(p)
	return
}

func JuniperCellOverhead_Gets(p *radius.Packet) (values []JuniperCellOverhead, err error) {
	var i uint32
	for _, attr := range _Juniper_GetsVendor(p, 41) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, JuniperCellOverhead(i))
	}
	return
}

func JuniperCellOverhead_Lookup(p *radius.Packet) (value JuniperCellOverhead, err error) {
	a, ok := _Juniper_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = JuniperCellOverhead(i)
	return
}

func JuniperCellOverhead_Set(p *radius.Packet, value JuniperCellOverhead) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Juniper_SetVendor(p, 41, a)
}

func JuniperCellOverhead_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 41)
}

type JuniperTxConnectSpeed uint32

var JuniperTxConnectSpeed_Strings = map[JuniperTxConnectSpeed]string{}

func (a JuniperTxConnectSpeed) String() string {
	if str, ok := JuniperTxConnectSpeed_Strings[a]; ok {
		return str
	}
	return "JuniperTxConnectSpeed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func JuniperTxConnectSpeed_Add(p *radius.Packet, value JuniperTxConnectSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Juniper_AddVendor(p, 42, a)
}

func JuniperTxConnectSpeed_Get(p *radius.Packet) (value JuniperTxConnectSpeed) {
	value, _ = JuniperTxConnectSpeed_Lookup(p)
	return
}

func JuniperTxConnectSpeed_Gets(p *radius.Packet) (values []JuniperTxConnectSpeed, err error) {
	var i uint32
	for _, attr := range _Juniper_GetsVendor(p, 42) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, JuniperTxConnectSpeed(i))
	}
	return
}

func JuniperTxConnectSpeed_Lookup(p *radius.Packet) (value JuniperTxConnectSpeed, err error) {
	a, ok := _Juniper_LookupVendor(p, 42)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = JuniperTxConnectSpeed(i)
	return
}

func JuniperTxConnectSpeed_Set(p *radius.Packet, value JuniperTxConnectSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Juniper_SetVendor(p, 42, a)
}

func JuniperTxConnectSpeed_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 42)
}

type JuniperRxConnectSpeed uint32

var JuniperRxConnectSpeed_Strings = map[JuniperRxConnectSpeed]string{}

func (a JuniperRxConnectSpeed) String() string {
	if str, ok := JuniperRxConnectSpeed_Strings[a]; ok {
		return str
	}
	return "JuniperRxConnectSpeed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func JuniperRxConnectSpeed_Add(p *radius.Packet, value JuniperRxConnectSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Juniper_AddVendor(p, 43, a)
}

func JuniperRxConnectSpeed_Get(p *radius.Packet) (value JuniperRxConnectSpeed) {
	value, _ = JuniperRxConnectSpeed_Lookup(p)
	return
}

func JuniperRxConnectSpeed_Gets(p *radius.Packet) (values []JuniperRxConnectSpeed, err error) {
	var i uint32
	for _, attr := range _Juniper_GetsVendor(p, 43) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, JuniperRxConnectSpeed(i))
	}
	return
}

func JuniperRxConnectSpeed_Lookup(p *radius.Packet) (value JuniperRxConnectSpeed, err error) {
	a, ok := _Juniper_LookupVendor(p, 43)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = JuniperRxConnectSpeed(i)
	return
}

func JuniperRxConnectSpeed_Set(p *radius.Packet, value JuniperRxConnectSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Juniper_SetVendor(p, 43, a)
}

func JuniperRxConnectSpeed_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 43)
}

func JuniperFirewallFilterName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 44, a)
}

func JuniperFirewallFilterName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 44, a)
}

func JuniperFirewallFilterName_Get(p *radius.Packet) (value []byte) {
	value, _ = JuniperFirewallFilterName_Lookup(p)
	return
}

func JuniperFirewallFilterName_GetString(p *radius.Packet) (value string) {
	value, _ = JuniperFirewallFilterName_LookupString(p)
	return
}

func JuniperFirewallFilterName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Juniper_GetsVendor(p, 44) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperFirewallFilterName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Juniper_GetsVendor(p, 44) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperFirewallFilterName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Juniper_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JuniperFirewallFilterName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Juniper_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JuniperFirewallFilterName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 44, a)
}

func JuniperFirewallFilterName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 44, a)
}

func JuniperFirewallFilterName_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 44)
}

func JuniperPolicerParameter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 45, a)
}

func JuniperPolicerParameter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 45, a)
}

func JuniperPolicerParameter_Get(p *radius.Packet) (value []byte) {
	value, _ = JuniperPolicerParameter_Lookup(p)
	return
}

func JuniperPolicerParameter_GetString(p *radius.Packet) (value string) {
	value, _ = JuniperPolicerParameter_LookupString(p)
	return
}

func JuniperPolicerParameter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Juniper_GetsVendor(p, 45) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperPolicerParameter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Juniper_GetsVendor(p, 45) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperPolicerParameter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Juniper_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JuniperPolicerParameter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Juniper_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JuniperPolicerParameter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 45, a)
}

func JuniperPolicerParameter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 45, a)
}

func JuniperPolicerParameter_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 45)
}

func JuniperLocalGroupName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 46, a)
}

func JuniperLocalGroupName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 46, a)
}

func JuniperLocalGroupName_Get(p *radius.Packet) (value []byte) {
	value, _ = JuniperLocalGroupName_Lookup(p)
	return
}

func JuniperLocalGroupName_GetString(p *radius.Packet) (value string) {
	value, _ = JuniperLocalGroupName_LookupString(p)
	return
}

func JuniperLocalGroupName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Juniper_GetsVendor(p, 46) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperLocalGroupName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Juniper_GetsVendor(p, 46) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperLocalGroupName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Juniper_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JuniperLocalGroupName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Juniper_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JuniperLocalGroupName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 46, a)
}

func JuniperLocalGroupName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 46, a)
}

func JuniperLocalGroupName_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 46)
}

func JuniperLocalInterface_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 47, a)
}

func JuniperLocalInterface_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 47, a)
}

func JuniperLocalInterface_Get(p *radius.Packet) (value []byte) {
	value, _ = JuniperLocalInterface_Lookup(p)
	return
}

func JuniperLocalInterface_GetString(p *radius.Packet) (value string) {
	value, _ = JuniperLocalInterface_LookupString(p)
	return
}

func JuniperLocalInterface_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Juniper_GetsVendor(p, 47) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperLocalInterface_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Juniper_GetsVendor(p, 47) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperLocalInterface_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Juniper_LookupVendor(p, 47)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JuniperLocalInterface_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Juniper_LookupVendor(p, 47)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JuniperLocalInterface_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 47, a)
}

func JuniperLocalInterface_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 47, a)
}

func JuniperLocalInterface_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 47)
}

func JuniperSwitchingFilter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 48, a)
}

func JuniperSwitchingFilter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 48, a)
}

func JuniperSwitchingFilter_Get(p *radius.Packet) (value []byte) {
	value, _ = JuniperSwitchingFilter_Lookup(p)
	return
}

func JuniperSwitchingFilter_GetString(p *radius.Packet) (value string) {
	value, _ = JuniperSwitchingFilter_LookupString(p)
	return
}

func JuniperSwitchingFilter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Juniper_GetsVendor(p, 48) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperSwitchingFilter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Juniper_GetsVendor(p, 48) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperSwitchingFilter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Juniper_LookupVendor(p, 48)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JuniperSwitchingFilter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Juniper_LookupVendor(p, 48)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JuniperSwitchingFilter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 48, a)
}

func JuniperSwitchingFilter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 48, a)
}

func JuniperSwitchingFilter_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 48)
}

func JuniperVoIPVlan_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 49, a)
}

func JuniperVoIPVlan_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_AddVendor(p, 49, a)
}

func JuniperVoIPVlan_Get(p *radius.Packet) (value []byte) {
	value, _ = JuniperVoIPVlan_Lookup(p)
	return
}

func JuniperVoIPVlan_GetString(p *radius.Packet) (value string) {
	value, _ = JuniperVoIPVlan_LookupString(p)
	return
}

func JuniperVoIPVlan_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Juniper_GetsVendor(p, 49) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperVoIPVlan_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Juniper_GetsVendor(p, 49) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JuniperVoIPVlan_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Juniper_LookupVendor(p, 49)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JuniperVoIPVlan_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Juniper_LookupVendor(p, 49)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JuniperVoIPVlan_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 49, a)
}

func JuniperVoIPVlan_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Juniper_SetVendor(p, 49, a)
}

func JuniperVoIPVlan_Del(p *radius.Packet) {
	_Juniper_DelVendor(p, 49)
}
