// Code generated by radius-dict-gen. DO NOT EDIT.

package equallogic

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Equallogic_VendorID = 12740
)

func _Equallogic_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Equallogic_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Equallogic_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Equallogic_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Equallogic_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Equallogic_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Equallogic_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Equallogic_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Equallogic_AddVendor(p, typ, attr)
}

func _Equallogic_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Equallogic_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

func EquallogicAdminFullName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Equallogic_AddVendor(p, 1, a)
}

func EquallogicAdminFullName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Equallogic_AddVendor(p, 1, a)
}

func EquallogicAdminFullName_Get(p *radius.Packet) (value []byte) {
	value, _ = EquallogicAdminFullName_Lookup(p)
	return
}

func EquallogicAdminFullName_GetString(p *radius.Packet) (value string) {
	value, _ = EquallogicAdminFullName_LookupString(p)
	return
}

func EquallogicAdminFullName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Equallogic_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EquallogicAdminFullName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Equallogic_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EquallogicAdminFullName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Equallogic_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EquallogicAdminFullName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Equallogic_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EquallogicAdminFullName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Equallogic_SetVendor(p, 1, a)
}

func EquallogicAdminFullName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Equallogic_SetVendor(p, 1, a)
}

func EquallogicAdminFullName_Del(p *radius.Packet) {
	_Equallogic_DelVendor(p, 1)
}

func EquallogicAdminEmail_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Equallogic_AddVendor(p, 2, a)
}

func EquallogicAdminEmail_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Equallogic_AddVendor(p, 2, a)
}

func EquallogicAdminEmail_Get(p *radius.Packet) (value []byte) {
	value, _ = EquallogicAdminEmail_Lookup(p)
	return
}

func EquallogicAdminEmail_GetString(p *radius.Packet) (value string) {
	value, _ = EquallogicAdminEmail_LookupString(p)
	return
}

func EquallogicAdminEmail_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Equallogic_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EquallogicAdminEmail_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Equallogic_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EquallogicAdminEmail_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Equallogic_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EquallogicAdminEmail_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Equallogic_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EquallogicAdminEmail_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Equallogic_SetVendor(p, 2, a)
}

func EquallogicAdminEmail_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Equallogic_SetVendor(p, 2, a)
}

func EquallogicAdminEmail_Del(p *radius.Packet) {
	_Equallogic_DelVendor(p, 2)
}

func EquallogicAdminPhone_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Equallogic_AddVendor(p, 3, a)
}

func EquallogicAdminPhone_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Equallogic_AddVendor(p, 3, a)
}

func EquallogicAdminPhone_Get(p *radius.Packet) (value []byte) {
	value, _ = EquallogicAdminPhone_Lookup(p)
	return
}

func EquallogicAdminPhone_GetString(p *radius.Packet) (value string) {
	value, _ = EquallogicAdminPhone_LookupString(p)
	return
}

func EquallogicAdminPhone_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Equallogic_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EquallogicAdminPhone_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Equallogic_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EquallogicAdminPhone_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Equallogic_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EquallogicAdminPhone_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Equallogic_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EquallogicAdminPhone_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Equallogic_SetVendor(p, 3, a)
}

func EquallogicAdminPhone_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Equallogic_SetVendor(p, 3, a)
}

func EquallogicAdminPhone_Del(p *radius.Packet) {
	_Equallogic_DelVendor(p, 3)
}

func EquallogicAdminMobile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Equallogic_AddVendor(p, 4, a)
}

func EquallogicAdminMobile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Equallogic_AddVendor(p, 4, a)
}

func EquallogicAdminMobile_Get(p *radius.Packet) (value []byte) {
	value, _ = EquallogicAdminMobile_Lookup(p)
	return
}

func EquallogicAdminMobile_GetString(p *radius.Packet) (value string) {
	value, _ = EquallogicAdminMobile_LookupString(p)
	return
}

func EquallogicAdminMobile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Equallogic_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EquallogicAdminMobile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Equallogic_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EquallogicAdminMobile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Equallogic_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EquallogicAdminMobile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Equallogic_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EquallogicAdminMobile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Equallogic_SetVendor(p, 4, a)
}

func EquallogicAdminMobile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Equallogic_SetVendor(p, 4, a)
}

func EquallogicAdminMobile_Del(p *radius.Packet) {
	_Equallogic_DelVendor(p, 4)
}

type EquallogicPollInterval uint32

var EquallogicPollInterval_Strings = map[EquallogicPollInterval]string{}

func (a EquallogicPollInterval) String() string {
	if str, ok := EquallogicPollInterval_Strings[a]; ok {
		return str
	}
	return "EquallogicPollInterval(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EquallogicPollInterval_Add(p *radius.Packet, value EquallogicPollInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Equallogic_AddVendor(p, 5, a)
}

func EquallogicPollInterval_Get(p *radius.Packet) (value EquallogicPollInterval) {
	value, _ = EquallogicPollInterval_Lookup(p)
	return
}

func EquallogicPollInterval_Gets(p *radius.Packet) (values []EquallogicPollInterval, err error) {
	var i uint32
	for _, attr := range _Equallogic_GetsVendor(p, 5) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EquallogicPollInterval(i))
	}
	return
}

func EquallogicPollInterval_Lookup(p *radius.Packet) (value EquallogicPollInterval, err error) {
	a, ok := _Equallogic_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EquallogicPollInterval(i)
	return
}

func EquallogicPollInterval_Set(p *radius.Packet, value EquallogicPollInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Equallogic_SetVendor(p, 5, a)
}

func EquallogicPollInterval_Del(p *radius.Packet) {
	_Equallogic_DelVendor(p, 5)
}

type EquallogicEQLAdminPrivilege uint32

const (
	EquallogicEQLAdminPrivilege_Value_GroupAdministrator             EquallogicEQLAdminPrivilege = 0
	EquallogicEQLAdminPrivilege_Value_PoolAdministrator              EquallogicEQLAdminPrivilege = 1
	EquallogicEQLAdminPrivilege_Value_PoolAdministratorRoEntireGroup EquallogicEQLAdminPrivilege = 2
	EquallogicEQLAdminPrivilege_Value_VolumeAdministrator            EquallogicEQLAdminPrivilege = 3
)

var EquallogicEQLAdminPrivilege_Strings = map[EquallogicEQLAdminPrivilege]string{
	EquallogicEQLAdminPrivilege_Value_GroupAdministrator:             "group-administrator",
	EquallogicEQLAdminPrivilege_Value_PoolAdministrator:              "pool-administrator",
	EquallogicEQLAdminPrivilege_Value_PoolAdministratorRoEntireGroup: "pool-administrator-ro-entire-group",
	EquallogicEQLAdminPrivilege_Value_VolumeAdministrator:            "volume-administrator",
}

func (a EquallogicEQLAdminPrivilege) String() string {
	if str, ok := EquallogicEQLAdminPrivilege_Strings[a]; ok {
		return str
	}
	return "EquallogicEQLAdminPrivilege(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EquallogicEQLAdminPrivilege_Add(p *radius.Packet, value EquallogicEQLAdminPrivilege) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Equallogic_AddVendor(p, 6, a)
}

func EquallogicEQLAdminPrivilege_Get(p *radius.Packet) (value EquallogicEQLAdminPrivilege) {
	value, _ = EquallogicEQLAdminPrivilege_Lookup(p)
	return
}

func EquallogicEQLAdminPrivilege_Gets(p *radius.Packet) (values []EquallogicEQLAdminPrivilege, err error) {
	var i uint32
	for _, attr := range _Equallogic_GetsVendor(p, 6) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EquallogicEQLAdminPrivilege(i))
	}
	return
}

func EquallogicEQLAdminPrivilege_Lookup(p *radius.Packet) (value EquallogicEQLAdminPrivilege, err error) {
	a, ok := _Equallogic_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EquallogicEQLAdminPrivilege(i)
	return
}

func EquallogicEQLAdminPrivilege_Set(p *radius.Packet, value EquallogicEQLAdminPrivilege) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Equallogic_SetVendor(p, 6, a)
}

func EquallogicEQLAdminPrivilege_Del(p *radius.Packet) {
	_Equallogic_DelVendor(p, 6)
}

func EquallogicAdminPoolAccess_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Equallogic_AddVendor(p, 7, a)
}

func EquallogicAdminPoolAccess_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Equallogic_AddVendor(p, 7, a)
}

func EquallogicAdminPoolAccess_Get(p *radius.Packet) (value []byte) {
	value, _ = EquallogicAdminPoolAccess_Lookup(p)
	return
}

func EquallogicAdminPoolAccess_GetString(p *radius.Packet) (value string) {
	value, _ = EquallogicAdminPoolAccess_LookupString(p)
	return
}

func EquallogicAdminPoolAccess_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Equallogic_GetsVendor(p, 7) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EquallogicAdminPoolAccess_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Equallogic_GetsVendor(p, 7) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EquallogicAdminPoolAccess_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Equallogic_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EquallogicAdminPoolAccess_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Equallogic_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EquallogicAdminPoolAccess_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Equallogic_SetVendor(p, 7, a)
}

func EquallogicAdminPoolAccess_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Equallogic_SetVendor(p, 7, a)
}

func EquallogicAdminPoolAccess_Del(p *radius.Packet) {
	_Equallogic_DelVendor(p, 7)
}

func EquallogicAdminReplSiteAccess_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Equallogic_AddVendor(p, 8, a)
}

func EquallogicAdminReplSiteAccess_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Equallogic_AddVendor(p, 8, a)
}

func EquallogicAdminReplSiteAccess_Get(p *radius.Packet) (value []byte) {
	value, _ = EquallogicAdminReplSiteAccess_Lookup(p)
	return
}

func EquallogicAdminReplSiteAccess_GetString(p *radius.Packet) (value string) {
	value, _ = EquallogicAdminReplSiteAccess_LookupString(p)
	return
}

func EquallogicAdminReplSiteAccess_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Equallogic_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EquallogicAdminReplSiteAccess_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Equallogic_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EquallogicAdminReplSiteAccess_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Equallogic_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EquallogicAdminReplSiteAccess_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Equallogic_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EquallogicAdminReplSiteAccess_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Equallogic_SetVendor(p, 8, a)
}

func EquallogicAdminReplSiteAccess_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Equallogic_SetVendor(p, 8, a)
}

func EquallogicAdminReplSiteAccess_Del(p *radius.Packet) {
	_Equallogic_DelVendor(p, 8)
}

func EquallogicAdminAccountType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Equallogic_AddVendor(p, 9, a)
}

func EquallogicAdminAccountType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Equallogic_AddVendor(p, 9, a)
}

func EquallogicAdminAccountType_Get(p *radius.Packet) (value []byte) {
	value, _ = EquallogicAdminAccountType_Lookup(p)
	return
}

func EquallogicAdminAccountType_GetString(p *radius.Packet) (value string) {
	value, _ = EquallogicAdminAccountType_LookupString(p)
	return
}

func EquallogicAdminAccountType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Equallogic_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EquallogicAdminAccountType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Equallogic_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EquallogicAdminAccountType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Equallogic_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EquallogicAdminAccountType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Equallogic_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EquallogicAdminAccountType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Equallogic_SetVendor(p, 9, a)
}

func EquallogicAdminAccountType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Equallogic_SetVendor(p, 9, a)
}

func EquallogicAdminAccountType_Del(p *radius.Packet) {
	_Equallogic_DelVendor(p, 9)
}
