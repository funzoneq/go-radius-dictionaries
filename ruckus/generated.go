// Code generated by radius-dict-gen. DO NOT EDIT.

package ruckus

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Ruckus_VendorID = 25053
)

func _Ruckus_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Ruckus_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Ruckus_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Ruckus_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Ruckus_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Ruckus_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Ruckus_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Ruckus_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Ruckus_AddVendor(p, typ, attr)
}

func _Ruckus_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Ruckus_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

func RuckusUserGroups_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 1, a)
}

func RuckusUserGroups_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 1, a)
}

func RuckusUserGroups_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusUserGroups_Lookup(p)
	return
}

func RuckusUserGroups_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusUserGroups_LookupString(p)
	return
}

func RuckusUserGroups_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusUserGroups_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusUserGroups_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusUserGroups_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusUserGroups_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 1, a)
}

func RuckusUserGroups_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 1, a)
}

func RuckusUserGroups_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 1)
}

type RuckusStaRSSI uint32

var RuckusStaRSSI_Strings = map[RuckusStaRSSI]string{}

func (a RuckusStaRSSI) String() string {
	if str, ok := RuckusStaRSSI_Strings[a]; ok {
		return str
	}
	return "RuckusStaRSSI(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RuckusStaRSSI_Add(p *radius.Packet, value RuckusStaRSSI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_AddVendor(p, 2, a)
}

func RuckusStaRSSI_Get(p *radius.Packet) (value RuckusStaRSSI) {
	value, _ = RuckusStaRSSI_Lookup(p)
	return
}

func RuckusStaRSSI_Gets(p *radius.Packet) (values []RuckusStaRSSI, err error) {
	var i uint32
	for _, attr := range _Ruckus_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RuckusStaRSSI(i))
	}
	return
}

func RuckusStaRSSI_Lookup(p *radius.Packet) (value RuckusStaRSSI, err error) {
	a, ok := _Ruckus_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RuckusStaRSSI(i)
	return
}

func RuckusStaRSSI_Set(p *radius.Packet, value RuckusStaRSSI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_SetVendor(p, 2, a)
}

func RuckusStaRSSI_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 2)
}

func RuckusSSID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 3, a)
}

func RuckusSSID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 3, a)
}

func RuckusSSID_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusSSID_Lookup(p)
	return
}

func RuckusSSID_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusSSID_LookupString(p)
	return
}

func RuckusSSID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusSSID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusSSID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusSSID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusSSID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 3, a)
}

func RuckusSSID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 3, a)
}

func RuckusSSID_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 3)
}

type RuckusWlanID uint32

var RuckusWlanID_Strings = map[RuckusWlanID]string{}

func (a RuckusWlanID) String() string {
	if str, ok := RuckusWlanID_Strings[a]; ok {
		return str
	}
	return "RuckusWlanID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RuckusWlanID_Add(p *radius.Packet, value RuckusWlanID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_AddVendor(p, 4, a)
}

func RuckusWlanID_Get(p *radius.Packet) (value RuckusWlanID) {
	value, _ = RuckusWlanID_Lookup(p)
	return
}

func RuckusWlanID_Gets(p *radius.Packet) (values []RuckusWlanID, err error) {
	var i uint32
	for _, attr := range _Ruckus_GetsVendor(p, 4) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RuckusWlanID(i))
	}
	return
}

func RuckusWlanID_Lookup(p *radius.Packet) (value RuckusWlanID, err error) {
	a, ok := _Ruckus_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RuckusWlanID(i)
	return
}

func RuckusWlanID_Set(p *radius.Packet, value RuckusWlanID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_SetVendor(p, 4, a)
}

func RuckusWlanID_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 4)
}

func RuckusLocation_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 5, a)
}

func RuckusLocation_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 5, a)
}

func RuckusLocation_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusLocation_Lookup(p)
	return
}

func RuckusLocation_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusLocation_LookupString(p)
	return
}

func RuckusLocation_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusLocation_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusLocation_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusLocation_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusLocation_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 5, a)
}

func RuckusLocation_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 5, a)
}

func RuckusLocation_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 5)
}

type RuckusGracePeriod uint32

var RuckusGracePeriod_Strings = map[RuckusGracePeriod]string{}

func (a RuckusGracePeriod) String() string {
	if str, ok := RuckusGracePeriod_Strings[a]; ok {
		return str
	}
	return "RuckusGracePeriod(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RuckusGracePeriod_Add(p *radius.Packet, value RuckusGracePeriod) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_AddVendor(p, 6, a)
}

func RuckusGracePeriod_Get(p *radius.Packet) (value RuckusGracePeriod) {
	value, _ = RuckusGracePeriod_Lookup(p)
	return
}

func RuckusGracePeriod_Gets(p *radius.Packet) (values []RuckusGracePeriod, err error) {
	var i uint32
	for _, attr := range _Ruckus_GetsVendor(p, 6) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RuckusGracePeriod(i))
	}
	return
}

func RuckusGracePeriod_Lookup(p *radius.Packet) (value RuckusGracePeriod, err error) {
	a, ok := _Ruckus_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RuckusGracePeriod(i)
	return
}

func RuckusGracePeriod_Set(p *radius.Packet, value RuckusGracePeriod) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_SetVendor(p, 6, a)
}

func RuckusGracePeriod_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 6)
}

type RuckusSCGCBladeIP uint32

var RuckusSCGCBladeIP_Strings = map[RuckusSCGCBladeIP]string{}

func (a RuckusSCGCBladeIP) String() string {
	if str, ok := RuckusSCGCBladeIP_Strings[a]; ok {
		return str
	}
	return "RuckusSCGCBladeIP(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RuckusSCGCBladeIP_Add(p *radius.Packet, value RuckusSCGCBladeIP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_AddVendor(p, 7, a)
}

func RuckusSCGCBladeIP_Get(p *radius.Packet) (value RuckusSCGCBladeIP) {
	value, _ = RuckusSCGCBladeIP_Lookup(p)
	return
}

func RuckusSCGCBladeIP_Gets(p *radius.Packet) (values []RuckusSCGCBladeIP, err error) {
	var i uint32
	for _, attr := range _Ruckus_GetsVendor(p, 7) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RuckusSCGCBladeIP(i))
	}
	return
}

func RuckusSCGCBladeIP_Lookup(p *radius.Packet) (value RuckusSCGCBladeIP, err error) {
	a, ok := _Ruckus_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RuckusSCGCBladeIP(i)
	return
}

func RuckusSCGCBladeIP_Set(p *radius.Packet, value RuckusSCGCBladeIP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_SetVendor(p, 7, a)
}

func RuckusSCGCBladeIP_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 7)
}

type RuckusSCGDBladeIP uint32

var RuckusSCGDBladeIP_Strings = map[RuckusSCGDBladeIP]string{}

func (a RuckusSCGDBladeIP) String() string {
	if str, ok := RuckusSCGDBladeIP_Strings[a]; ok {
		return str
	}
	return "RuckusSCGDBladeIP(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RuckusSCGDBladeIP_Add(p *radius.Packet, value RuckusSCGDBladeIP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_AddVendor(p, 8, a)
}

func RuckusSCGDBladeIP_Get(p *radius.Packet) (value RuckusSCGDBladeIP) {
	value, _ = RuckusSCGDBladeIP_Lookup(p)
	return
}

func RuckusSCGDBladeIP_Gets(p *radius.Packet) (values []RuckusSCGDBladeIP, err error) {
	var i uint32
	for _, attr := range _Ruckus_GetsVendor(p, 8) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RuckusSCGDBladeIP(i))
	}
	return
}

func RuckusSCGDBladeIP_Lookup(p *radius.Packet) (value RuckusSCGDBladeIP, err error) {
	a, ok := _Ruckus_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RuckusSCGDBladeIP(i)
	return
}

func RuckusSCGDBladeIP_Set(p *radius.Packet, value RuckusSCGDBladeIP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_SetVendor(p, 8, a)
}

func RuckusSCGDBladeIP_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 8)
}

type RuckusVLANID uint32

var RuckusVLANID_Strings = map[RuckusVLANID]string{}

func (a RuckusVLANID) String() string {
	if str, ok := RuckusVLANID_Strings[a]; ok {
		return str
	}
	return "RuckusVLANID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RuckusVLANID_Add(p *radius.Packet, value RuckusVLANID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_AddVendor(p, 9, a)
}

func RuckusVLANID_Get(p *radius.Packet) (value RuckusVLANID) {
	value, _ = RuckusVLANID_Lookup(p)
	return
}

func RuckusVLANID_Gets(p *radius.Packet) (values []RuckusVLANID, err error) {
	var i uint32
	for _, attr := range _Ruckus_GetsVendor(p, 9) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RuckusVLANID(i))
	}
	return
}

func RuckusVLANID_Lookup(p *radius.Packet) (value RuckusVLANID, err error) {
	a, ok := _Ruckus_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RuckusVLANID(i)
	return
}

func RuckusVLANID_Set(p *radius.Packet, value RuckusVLANID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_SetVendor(p, 9, a)
}

func RuckusVLANID_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 9)
}

type RuckusStaExpiration uint32

var RuckusStaExpiration_Strings = map[RuckusStaExpiration]string{}

func (a RuckusStaExpiration) String() string {
	if str, ok := RuckusStaExpiration_Strings[a]; ok {
		return str
	}
	return "RuckusStaExpiration(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RuckusStaExpiration_Add(p *radius.Packet, value RuckusStaExpiration) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_AddVendor(p, 10, a)
}

func RuckusStaExpiration_Get(p *radius.Packet) (value RuckusStaExpiration) {
	value, _ = RuckusStaExpiration_Lookup(p)
	return
}

func RuckusStaExpiration_Gets(p *radius.Packet) (values []RuckusStaExpiration, err error) {
	var i uint32
	for _, attr := range _Ruckus_GetsVendor(p, 10) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RuckusStaExpiration(i))
	}
	return
}

func RuckusStaExpiration_Lookup(p *radius.Packet) (value RuckusStaExpiration, err error) {
	a, ok := _Ruckus_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RuckusStaExpiration(i)
	return
}

func RuckusStaExpiration_Set(p *radius.Packet, value RuckusStaExpiration) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_SetVendor(p, 10, a)
}

func RuckusStaExpiration_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 10)
}

func RuckusStaUUID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 11, a)
}

func RuckusStaUUID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 11, a)
}

func RuckusStaUUID_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusStaUUID_Lookup(p)
	return
}

func RuckusStaUUID_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusStaUUID_LookupString(p)
	return
}

func RuckusStaUUID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusStaUUID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusStaUUID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusStaUUID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusStaUUID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 11, a)
}

func RuckusStaUUID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 11, a)
}

func RuckusStaUUID_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 11)
}

type RuckusAcceptEnhancementReason uint32

var RuckusAcceptEnhancementReason_Strings = map[RuckusAcceptEnhancementReason]string{}

func (a RuckusAcceptEnhancementReason) String() string {
	if str, ok := RuckusAcceptEnhancementReason_Strings[a]; ok {
		return str
	}
	return "RuckusAcceptEnhancementReason(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RuckusAcceptEnhancementReason_Add(p *radius.Packet, value RuckusAcceptEnhancementReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_AddVendor(p, 12, a)
}

func RuckusAcceptEnhancementReason_Get(p *radius.Packet) (value RuckusAcceptEnhancementReason) {
	value, _ = RuckusAcceptEnhancementReason_Lookup(p)
	return
}

func RuckusAcceptEnhancementReason_Gets(p *radius.Packet) (values []RuckusAcceptEnhancementReason, err error) {
	var i uint32
	for _, attr := range _Ruckus_GetsVendor(p, 12) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RuckusAcceptEnhancementReason(i))
	}
	return
}

func RuckusAcceptEnhancementReason_Lookup(p *radius.Packet) (value RuckusAcceptEnhancementReason, err error) {
	a, ok := _Ruckus_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RuckusAcceptEnhancementReason(i)
	return
}

func RuckusAcceptEnhancementReason_Set(p *radius.Packet, value RuckusAcceptEnhancementReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_SetVendor(p, 12, a)
}

func RuckusAcceptEnhancementReason_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 12)
}

func RuckusStaInnerID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 13, a)
}

func RuckusStaInnerID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 13, a)
}

func RuckusStaInnerID_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusStaInnerID_Lookup(p)
	return
}

func RuckusStaInnerID_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusStaInnerID_LookupString(p)
	return
}

func RuckusStaInnerID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 13) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusStaInnerID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 13) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusStaInnerID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusStaInnerID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusStaInnerID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 13, a)
}

func RuckusStaInnerID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 13, a)
}

func RuckusStaInnerID_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 13)
}

func RuckusBSSID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 14, a)
}

func RuckusBSSID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 14, a)
}

func RuckusBSSID_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusBSSID_Lookup(p)
	return
}

func RuckusBSSID_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusBSSID_LookupString(p)
	return
}

func RuckusBSSID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 14) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusBSSID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 14) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusBSSID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusBSSID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusBSSID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 14, a)
}

func RuckusBSSID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 14, a)
}

func RuckusBSSID_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 14)
}

func RuckusWSGUser_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 10, a)
}

func RuckusWSGUser_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 10, a)
}

func RuckusWSGUser_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusWSGUser_Lookup(p)
	return
}

func RuckusWSGUser_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusWSGUser_LookupString(p)
	return
}

func RuckusWSGUser_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusWSGUser_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusWSGUser_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusWSGUser_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusWSGUser_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 10, a)
}

func RuckusWSGUser_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 10, a)
}

func RuckusWSGUser_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 10)
}

func RuckusTriplets_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 101, a)
}

func RuckusTriplets_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 101, a)
}

func RuckusTriplets_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusTriplets_Lookup(p)
	return
}

func RuckusTriplets_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusTriplets_LookupString(p)
	return
}

func RuckusTriplets_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 101) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusTriplets_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 101) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusTriplets_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusTriplets_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusTriplets_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 101, a)
}

func RuckusTriplets_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 101, a)
}

func RuckusTriplets_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 101)
}

func RuckusIMSI_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 102, a)
}

func RuckusIMSI_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 102, a)
}

func RuckusIMSI_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusIMSI_Lookup(p)
	return
}

func RuckusIMSI_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusIMSI_LookupString(p)
	return
}

func RuckusIMSI_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 102) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusIMSI_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 102) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusIMSI_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusIMSI_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusIMSI_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 102, a)
}

func RuckusIMSI_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 102, a)
}

func RuckusIMSI_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 102)
}

func RuckusMSISDN_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 103, a)
}

func RuckusMSISDN_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 103, a)
}

func RuckusMSISDN_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusMSISDN_Lookup(p)
	return
}

func RuckusMSISDN_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusMSISDN_LookupString(p)
	return
}

func RuckusMSISDN_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 103) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusMSISDN_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 103) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusMSISDN_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusMSISDN_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusMSISDN_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 103, a)
}

func RuckusMSISDN_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 103, a)
}

func RuckusMSISDN_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 103)
}

func RuckusAPNNI_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 104, a)
}

func RuckusAPNNI_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 104, a)
}

func RuckusAPNNI_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusAPNNI_Lookup(p)
	return
}

func RuckusAPNNI_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusAPNNI_LookupString(p)
	return
}

func RuckusAPNNI_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 104) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusAPNNI_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 104) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusAPNNI_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusAPNNI_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusAPNNI_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 104, a)
}

func RuckusAPNNI_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 104, a)
}

func RuckusAPNNI_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 104)
}

func RuckusQoS_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 105, a)
}

func RuckusQoS_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 105, a)
}

func RuckusQoS_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusQoS_Lookup(p)
	return
}

func RuckusQoS_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusQoS_LookupString(p)
	return
}

func RuckusQoS_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 105) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusQoS_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 105) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusQoS_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusQoS_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusQoS_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 105, a)
}

func RuckusQoS_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 105, a)
}

func RuckusQoS_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 105)
}

type RuckusSelectionMode uint32

const (
	RuckusSelectionMode_Value_Subscribed   RuckusSelectionMode = 0
	RuckusSelectionMode_Value_SentByMS     RuckusSelectionMode = 1
	RuckusSelectionMode_Value_ChosenBySGSN RuckusSelectionMode = 2
)

var RuckusSelectionMode_Strings = map[RuckusSelectionMode]string{
	RuckusSelectionMode_Value_Subscribed:   "Subscribed",
	RuckusSelectionMode_Value_SentByMS:     "SentByMS",
	RuckusSelectionMode_Value_ChosenBySGSN: "ChosenBySGSN",
}

func (a RuckusSelectionMode) String() string {
	if str, ok := RuckusSelectionMode_Strings[a]; ok {
		return str
	}
	return "RuckusSelectionMode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RuckusSelectionMode_Add(p *radius.Packet, value RuckusSelectionMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_AddVendor(p, 106, a)
}

func RuckusSelectionMode_Get(p *radius.Packet) (value RuckusSelectionMode) {
	value, _ = RuckusSelectionMode_Lookup(p)
	return
}

func RuckusSelectionMode_Gets(p *radius.Packet) (values []RuckusSelectionMode, err error) {
	var i uint32
	for _, attr := range _Ruckus_GetsVendor(p, 106) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RuckusSelectionMode(i))
	}
	return
}

func RuckusSelectionMode_Lookup(p *radius.Packet) (value RuckusSelectionMode, err error) {
	a, ok := _Ruckus_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RuckusSelectionMode(i)
	return
}

func RuckusSelectionMode_Set(p *radius.Packet, value RuckusSelectionMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_SetVendor(p, 106, a)
}

func RuckusSelectionMode_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 106)
}

type RuckusAPNResolutionReq uint32

const (
	RuckusAPNResolutionReq_Value_NotRequired RuckusAPNResolutionReq = 0
	RuckusAPNResolutionReq_Value_Required    RuckusAPNResolutionReq = 1
)

var RuckusAPNResolutionReq_Strings = map[RuckusAPNResolutionReq]string{
	RuckusAPNResolutionReq_Value_NotRequired: "NotRequired",
	RuckusAPNResolutionReq_Value_Required:    "Required",
}

func (a RuckusAPNResolutionReq) String() string {
	if str, ok := RuckusAPNResolutionReq_Strings[a]; ok {
		return str
	}
	return "RuckusAPNResolutionReq(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RuckusAPNResolutionReq_Add(p *radius.Packet, value RuckusAPNResolutionReq) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_AddVendor(p, 107, a)
}

func RuckusAPNResolutionReq_Get(p *radius.Packet) (value RuckusAPNResolutionReq) {
	value, _ = RuckusAPNResolutionReq_Lookup(p)
	return
}

func RuckusAPNResolutionReq_Gets(p *radius.Packet) (values []RuckusAPNResolutionReq, err error) {
	var i uint32
	for _, attr := range _Ruckus_GetsVendor(p, 107) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RuckusAPNResolutionReq(i))
	}
	return
}

func RuckusAPNResolutionReq_Lookup(p *radius.Packet) (value RuckusAPNResolutionReq, err error) {
	a, ok := _Ruckus_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RuckusAPNResolutionReq(i)
	return
}

func RuckusAPNResolutionReq_Set(p *radius.Packet, value RuckusAPNResolutionReq) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_SetVendor(p, 107, a)
}

func RuckusAPNResolutionReq_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 107)
}

func RuckusStartTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 108, a)
}

func RuckusStartTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 108, a)
}

func RuckusStartTime_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusStartTime_Lookup(p)
	return
}

func RuckusStartTime_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusStartTime_LookupString(p)
	return
}

func RuckusStartTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 108) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusStartTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 108) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusStartTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusStartTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusStartTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 108, a)
}

func RuckusStartTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 108, a)
}

func RuckusStartTime_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 108)
}

type RuckusNASType uint32

const (
	RuckusNASType_Value_SCG    RuckusNASType = 1
	RuckusNASType_Value_Others RuckusNASType = 2
)

var RuckusNASType_Strings = map[RuckusNASType]string{
	RuckusNASType_Value_SCG:    "SCG",
	RuckusNASType_Value_Others: "Others",
}

func (a RuckusNASType) String() string {
	if str, ok := RuckusNASType_Strings[a]; ok {
		return str
	}
	return "RuckusNASType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RuckusNASType_Add(p *radius.Packet, value RuckusNASType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_AddVendor(p, 109, a)
}

func RuckusNASType_Get(p *radius.Packet) (value RuckusNASType) {
	value, _ = RuckusNASType_Lookup(p)
	return
}

func RuckusNASType_Gets(p *radius.Packet) (values []RuckusNASType, err error) {
	var i uint32
	for _, attr := range _Ruckus_GetsVendor(p, 109) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RuckusNASType(i))
	}
	return
}

func RuckusNASType_Lookup(p *radius.Packet) (value RuckusNASType, err error) {
	a, ok := _Ruckus_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RuckusNASType(i)
	return
}

func RuckusNASType_Set(p *radius.Packet, value RuckusNASType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_SetVendor(p, 109, a)
}

func RuckusNASType_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 109)
}

type RuckusStatus uint32

const (
	RuckusStatus_Value_Success RuckusStatus = 0
	RuckusStatus_Value_Failure RuckusStatus = 1
)

var RuckusStatus_Strings = map[RuckusStatus]string{
	RuckusStatus_Value_Success: "Success",
	RuckusStatus_Value_Failure: "Failure",
}

func (a RuckusStatus) String() string {
	if str, ok := RuckusStatus_Strings[a]; ok {
		return str
	}
	return "RuckusStatus(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RuckusStatus_Add(p *radius.Packet, value RuckusStatus) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_AddVendor(p, 110, a)
}

func RuckusStatus_Get(p *radius.Packet) (value RuckusStatus) {
	value, _ = RuckusStatus_Lookup(p)
	return
}

func RuckusStatus_Gets(p *radius.Packet) (values []RuckusStatus, err error) {
	var i uint32
	for _, attr := range _Ruckus_GetsVendor(p, 110) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RuckusStatus(i))
	}
	return
}

func RuckusStatus_Lookup(p *radius.Packet) (value RuckusStatus, err error) {
	a, ok := _Ruckus_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RuckusStatus(i)
	return
}

func RuckusStatus_Set(p *radius.Packet, value RuckusStatus) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_SetVendor(p, 110, a)
}

func RuckusStatus_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 110)
}

func RuckusAPNOI_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 111, a)
}

func RuckusAPNOI_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 111, a)
}

func RuckusAPNOI_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusAPNOI_Lookup(p)
	return
}

func RuckusAPNOI_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusAPNOI_LookupString(p)
	return
}

func RuckusAPNOI_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 111) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusAPNOI_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 111) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusAPNOI_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusAPNOI_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusAPNOI_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 111, a)
}

func RuckusAPNOI_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 111, a)
}

func RuckusAPNOI_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 111)
}

type RuckusAuthType uint32

const (
	RuckusAuthType_Value_PPPSIM      RuckusAuthType = 1
	RuckusAuthType_Value_DummyIMSI   RuckusAuthType = 2
	RuckusAuthType_Value_SoftSIM     RuckusAuthType = 3
	RuckusAuthType_Value_RadiusSIM   RuckusAuthType = 4
	RuckusAuthType_Value_Postpaid    RuckusAuthType = 5
	RuckusAuthType_Value_Prepaid     RuckusAuthType = 6
	RuckusAuthType_Value_LocalRadius RuckusAuthType = 7
	RuckusAuthType_Value_ProxyRadius RuckusAuthType = 8
	RuckusAuthType_Value_Voucher     RuckusAuthType = 9
	RuckusAuthType_Value_EAPSIM      RuckusAuthType = 10
)

var RuckusAuthType_Strings = map[RuckusAuthType]string{
	RuckusAuthType_Value_PPPSIM:      "PPP-SIM",
	RuckusAuthType_Value_DummyIMSI:   "DummyIMSI",
	RuckusAuthType_Value_SoftSIM:     "SoftSIM",
	RuckusAuthType_Value_RadiusSIM:   "RadiusSIM",
	RuckusAuthType_Value_Postpaid:    "Postpaid",
	RuckusAuthType_Value_Prepaid:     "Prepaid",
	RuckusAuthType_Value_LocalRadius: "LocalRadius",
	RuckusAuthType_Value_ProxyRadius: "ProxyRadius",
	RuckusAuthType_Value_Voucher:     "Voucher",
	RuckusAuthType_Value_EAPSIM:      "EAP-SIM",
}

func (a RuckusAuthType) String() string {
	if str, ok := RuckusAuthType_Strings[a]; ok {
		return str
	}
	return "RuckusAuthType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RuckusAuthType_Add(p *radius.Packet, value RuckusAuthType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_AddVendor(p, 112, a)
}

func RuckusAuthType_Get(p *radius.Packet) (value RuckusAuthType) {
	value, _ = RuckusAuthType_Lookup(p)
	return
}

func RuckusAuthType_Gets(p *radius.Packet) (values []RuckusAuthType, err error) {
	var i uint32
	for _, attr := range _Ruckus_GetsVendor(p, 112) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RuckusAuthType(i))
	}
	return
}

func RuckusAuthType_Lookup(p *radius.Packet) (value RuckusAuthType, err error) {
	a, ok := _Ruckus_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RuckusAuthType(i)
	return
}

func RuckusAuthType_Set(p *radius.Packet, value RuckusAuthType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_SetVendor(p, 112, a)
}

func RuckusAuthType_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 112)
}

func RuckusGnUserName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 113, a)
}

func RuckusGnUserName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 113, a)
}

func RuckusGnUserName_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusGnUserName_Lookup(p)
	return
}

func RuckusGnUserName_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusGnUserName_LookupString(p)
	return
}

func RuckusGnUserName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 113) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusGnUserName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 113) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusGnUserName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusGnUserName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusGnUserName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 113, a)
}

func RuckusGnUserName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 113, a)
}

func RuckusGnUserName_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 113)
}

func RuckusBrandCode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 114, a)
}

func RuckusBrandCode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 114, a)
}

func RuckusBrandCode_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusBrandCode_Lookup(p)
	return
}

func RuckusBrandCode_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusBrandCode_LookupString(p)
	return
}

func RuckusBrandCode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 114) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusBrandCode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 114) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusBrandCode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusBrandCode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusBrandCode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 114, a)
}

func RuckusBrandCode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 114, a)
}

func RuckusBrandCode_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 114)
}

func RuckusPolicyName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 115, a)
}

func RuckusPolicyName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 115, a)
}

func RuckusPolicyName_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusPolicyName_Lookup(p)
	return
}

func RuckusPolicyName_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusPolicyName_LookupString(p)
	return
}

func RuckusPolicyName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 115) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusPolicyName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 115) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusPolicyName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 115)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusPolicyName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 115)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusPolicyName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 115, a)
}

func RuckusPolicyName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 115, a)
}

func RuckusPolicyName_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 115)
}

func RuckusClientLocalIP_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 116, a)
}

func RuckusClientLocalIP_Get(p *radius.Packet) (value net.IP) {
	value, _ = RuckusClientLocalIP_Lookup(p)
	return
}

func RuckusClientLocalIP_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ruckus_GetsVendor(p, 116) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusClientLocalIP_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ruckus_LookupVendor(p, 116)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func RuckusClientLocalIP_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 116, a)
}

func RuckusClientLocalIP_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 116)
}

func RuckusSGSNIP_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 117, a)
}

func RuckusSGSNIP_Get(p *radius.Packet) (value net.IP) {
	value, _ = RuckusSGSNIP_Lookup(p)
	return
}

func RuckusSGSNIP_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ruckus_GetsVendor(p, 117) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusSGSNIP_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ruckus_LookupVendor(p, 117)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func RuckusSGSNIP_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 117, a)
}

func RuckusSGSNIP_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 117)
}

func RuckusChargingCharac_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 118, a)
}

func RuckusChargingCharac_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 118, a)
}

func RuckusChargingCharac_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusChargingCharac_Lookup(p)
	return
}

func RuckusChargingCharac_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusChargingCharac_LookupString(p)
	return
}

func RuckusChargingCharac_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 118) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusChargingCharac_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 118) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusChargingCharac_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 118)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusChargingCharac_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 118)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusChargingCharac_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 118, a)
}

func RuckusChargingCharac_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 118, a)
}

func RuckusChargingCharac_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 118)
}

func RuckusPDPType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 119, a)
}

func RuckusPDPType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 119, a)
}

func RuckusPDPType_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusPDPType_Lookup(p)
	return
}

func RuckusPDPType_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusPDPType_LookupString(p)
	return
}

func RuckusPDPType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 119) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusPDPType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 119) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusPDPType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 119)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusPDPType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 119)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusPDPType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 119, a)
}

func RuckusPDPType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 119, a)
}

func RuckusPDPType_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 119)
}

func RuckusDynamicAddressFlag_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 120, a)
}

func RuckusDynamicAddressFlag_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 120, a)
}

func RuckusDynamicAddressFlag_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusDynamicAddressFlag_Lookup(p)
	return
}

func RuckusDynamicAddressFlag_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusDynamicAddressFlag_LookupString(p)
	return
}

func RuckusDynamicAddressFlag_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 120) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusDynamicAddressFlag_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 120) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusDynamicAddressFlag_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 120)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusDynamicAddressFlag_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 120)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusDynamicAddressFlag_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 120, a)
}

func RuckusDynamicAddressFlag_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 120, a)
}

func RuckusDynamicAddressFlag_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 120)
}

func RuckusChChSelectionMode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 121, a)
}

func RuckusChChSelectionMode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 121, a)
}

func RuckusChChSelectionMode_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusChChSelectionMode_Lookup(p)
	return
}

func RuckusChChSelectionMode_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusChChSelectionMode_LookupString(p)
	return
}

func RuckusChChSelectionMode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 121) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusChChSelectionMode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 121) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusChChSelectionMode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 121)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusChChSelectionMode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 121)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusChChSelectionMode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 121, a)
}

func RuckusChChSelectionMode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 121, a)
}

func RuckusChChSelectionMode_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 121)
}

func RuckusAAAIP_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 122, a)
}

func RuckusAAAIP_Get(p *radius.Packet) (value net.IP) {
	value, _ = RuckusAAAIP_Lookup(p)
	return
}

func RuckusAAAIP_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ruckus_GetsVendor(p, 122) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusAAAIP_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ruckus_LookupVendor(p, 122)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func RuckusAAAIP_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 122, a)
}

func RuckusAAAIP_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 122)
}

type RuckusCDRTYPE uint32

var RuckusCDRTYPE_Strings = map[RuckusCDRTYPE]string{}

func (a RuckusCDRTYPE) String() string {
	if str, ok := RuckusCDRTYPE_Strings[a]; ok {
		return str
	}
	return "RuckusCDRTYPE(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RuckusCDRTYPE_Add(p *radius.Packet, value RuckusCDRTYPE) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_AddVendor(p, 123, a)
}

func RuckusCDRTYPE_Get(p *radius.Packet) (value RuckusCDRTYPE) {
	value, _ = RuckusCDRTYPE_Lookup(p)
	return
}

func RuckusCDRTYPE_Gets(p *radius.Packet) (values []RuckusCDRTYPE, err error) {
	var i uint32
	for _, attr := range _Ruckus_GetsVendor(p, 123) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RuckusCDRTYPE(i))
	}
	return
}

func RuckusCDRTYPE_Lookup(p *radius.Packet) (value RuckusCDRTYPE, err error) {
	a, ok := _Ruckus_LookupVendor(p, 123)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RuckusCDRTYPE(i)
	return
}

func RuckusCDRTYPE_Set(p *radius.Packet, value RuckusCDRTYPE) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_SetVendor(p, 123, a)
}

func RuckusCDRTYPE_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 123)
}

func RuckusSGSNNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 124, a)
}

func RuckusSGSNNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 124, a)
}

func RuckusSGSNNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusSGSNNumber_Lookup(p)
	return
}

func RuckusSGSNNumber_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusSGSNNumber_LookupString(p)
	return
}

func RuckusSGSNNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 124) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusSGSNNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 124) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusSGSNNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 124)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusSGSNNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 124)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusSGSNNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 124, a)
}

func RuckusSGSNNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 124, a)
}

func RuckusSGSNNumber_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 124)
}

type RuckusSessionType uint32

const (
	RuckusSessionType_Value_TTG             RuckusSessionType = 2
	RuckusSessionType_Value_LocalBreakout   RuckusSessionType = 3
	RuckusSessionType_Value_LocalBreakoutAP RuckusSessionType = 4
	RuckusSessionType_Value_L3GRE           RuckusSessionType = 5
	RuckusSessionType_Value_L2GRE           RuckusSessionType = 6
	RuckusSessionType_Value_QinQL3          RuckusSessionType = 7
	RuckusSessionType_Value_PMIP            RuckusSessionType = 8
)

var RuckusSessionType_Strings = map[RuckusSessionType]string{
	RuckusSessionType_Value_TTG:             "TTG",
	RuckusSessionType_Value_LocalBreakout:   "Local-Breakout",
	RuckusSessionType_Value_LocalBreakoutAP: "Local-Breakout-AP",
	RuckusSessionType_Value_L3GRE:           "L3GRE",
	RuckusSessionType_Value_L2GRE:           "L2GRE",
	RuckusSessionType_Value_QinQL3:          "QinQL3",
	RuckusSessionType_Value_PMIP:            "PMIP",
}

func (a RuckusSessionType) String() string {
	if str, ok := RuckusSessionType_Strings[a]; ok {
		return str
	}
	return "RuckusSessionType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RuckusSessionType_Add(p *radius.Packet, value RuckusSessionType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_AddVendor(p, 125, a)
}

func RuckusSessionType_Get(p *radius.Packet) (value RuckusSessionType) {
	value, _ = RuckusSessionType_Lookup(p)
	return
}

func RuckusSessionType_Gets(p *radius.Packet) (values []RuckusSessionType, err error) {
	var i uint32
	for _, attr := range _Ruckus_GetsVendor(p, 125) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RuckusSessionType(i))
	}
	return
}

func RuckusSessionType_Lookup(p *radius.Packet) (value RuckusSessionType, err error) {
	a, ok := _Ruckus_LookupVendor(p, 125)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RuckusSessionType(i)
	return
}

func RuckusSessionType_Set(p *radius.Packet, value RuckusSessionType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_SetVendor(p, 125, a)
}

func RuckusSessionType_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 125)
}

type RuckusAccountingStatus uint32

const (
	RuckusAccountingStatus_Value_AccountingOff RuckusAccountingStatus = 0
	RuckusAccountingStatus_Value_AccountingOn  RuckusAccountingStatus = 1
)

var RuckusAccountingStatus_Strings = map[RuckusAccountingStatus]string{
	RuckusAccountingStatus_Value_AccountingOff: "Accounting-Off",
	RuckusAccountingStatus_Value_AccountingOn:  "Accounting-On",
}

func (a RuckusAccountingStatus) String() string {
	if str, ok := RuckusAccountingStatus_Strings[a]; ok {
		return str
	}
	return "RuckusAccountingStatus(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RuckusAccountingStatus_Add(p *radius.Packet, value RuckusAccountingStatus) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_AddVendor(p, 126, a)
}

func RuckusAccountingStatus_Get(p *radius.Packet) (value RuckusAccountingStatus) {
	value, _ = RuckusAccountingStatus_Lookup(p)
	return
}

func RuckusAccountingStatus_Gets(p *radius.Packet) (values []RuckusAccountingStatus, err error) {
	var i uint32
	for _, attr := range _Ruckus_GetsVendor(p, 126) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RuckusAccountingStatus(i))
	}
	return
}

func RuckusAccountingStatus_Lookup(p *radius.Packet) (value RuckusAccountingStatus, err error) {
	a, ok := _Ruckus_LookupVendor(p, 126)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RuckusAccountingStatus(i)
	return
}

func RuckusAccountingStatus_Set(p *radius.Packet, value RuckusAccountingStatus) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_SetVendor(p, 126, a)
}

func RuckusAccountingStatus_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 126)
}

func RuckusZoneID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 127, a)
}

func RuckusZoneID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 127, a)
}

func RuckusZoneID_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusZoneID_Lookup(p)
	return
}

func RuckusZoneID_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusZoneID_LookupString(p)
	return
}

func RuckusZoneID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 127) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusZoneID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 127) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusZoneID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 127)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusZoneID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 127)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusZoneID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 127, a)
}

func RuckusZoneID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 127, a)
}

func RuckusZoneID_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 127)
}

func RuckusAuthServerID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 128, a)
}

func RuckusAuthServerID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 128, a)
}

func RuckusAuthServerID_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusAuthServerID_Lookup(p)
	return
}

func RuckusAuthServerID_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusAuthServerID_LookupString(p)
	return
}

func RuckusAuthServerID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 128) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusAuthServerID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 128) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusAuthServerID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 128)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusAuthServerID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 128)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusAuthServerID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 128, a)
}

func RuckusAuthServerID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 128, a)
}

func RuckusAuthServerID_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 128)
}

func RuckusUtpID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 129, a)
}

func RuckusUtpID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 129, a)
}

func RuckusUtpID_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusUtpID_Lookup(p)
	return
}

func RuckusUtpID_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusUtpID_LookupString(p)
	return
}

func RuckusUtpID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 129) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusUtpID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 129) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusUtpID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 129)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusUtpID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 129)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusUtpID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 129, a)
}

func RuckusUtpID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 129, a)
}

func RuckusUtpID_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 129)
}

func RuckusAreaCode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 130, a)
}

func RuckusAreaCode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 130, a)
}

func RuckusAreaCode_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusAreaCode_Lookup(p)
	return
}

func RuckusAreaCode_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusAreaCode_LookupString(p)
	return
}

func RuckusAreaCode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 130) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusAreaCode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 130) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusAreaCode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 130)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusAreaCode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 130)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusAreaCode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 130, a)
}

func RuckusAreaCode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 130, a)
}

func RuckusAreaCode_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 130)
}

func RuckusCellIdentifier_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 131, a)
}

func RuckusCellIdentifier_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 131, a)
}

func RuckusCellIdentifier_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusCellIdentifier_Lookup(p)
	return
}

func RuckusCellIdentifier_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusCellIdentifier_LookupString(p)
	return
}

func RuckusCellIdentifier_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 131) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusCellIdentifier_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 131) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusCellIdentifier_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 131)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusCellIdentifier_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 131)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusCellIdentifier_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 131, a)
}

func RuckusCellIdentifier_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 131, a)
}

func RuckusCellIdentifier_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 131)
}

func RuckusWisprRedirectPolicy_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 132, a)
}

func RuckusWisprRedirectPolicy_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 132, a)
}

func RuckusWisprRedirectPolicy_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusWisprRedirectPolicy_Lookup(p)
	return
}

func RuckusWisprRedirectPolicy_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusWisprRedirectPolicy_LookupString(p)
	return
}

func RuckusWisprRedirectPolicy_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 132) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusWisprRedirectPolicy_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 132) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusWisprRedirectPolicy_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 132)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusWisprRedirectPolicy_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 132)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusWisprRedirectPolicy_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 132, a)
}

func RuckusWisprRedirectPolicy_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 132, a)
}

func RuckusWisprRedirectPolicy_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 132)
}

type RuckusEthProfileID uint32

var RuckusEthProfileID_Strings = map[RuckusEthProfileID]string{}

func (a RuckusEthProfileID) String() string {
	if str, ok := RuckusEthProfileID_Strings[a]; ok {
		return str
	}
	return "RuckusEthProfileID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func RuckusEthProfileID_Add(p *radius.Packet, value RuckusEthProfileID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_AddVendor(p, 133, a)
}

func RuckusEthProfileID_Get(p *radius.Packet) (value RuckusEthProfileID) {
	value, _ = RuckusEthProfileID_Lookup(p)
	return
}

func RuckusEthProfileID_Gets(p *radius.Packet) (values []RuckusEthProfileID, err error) {
	var i uint32
	for _, attr := range _Ruckus_GetsVendor(p, 133) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, RuckusEthProfileID(i))
	}
	return
}

func RuckusEthProfileID_Lookup(p *radius.Packet) (value RuckusEthProfileID, err error) {
	a, ok := _Ruckus_LookupVendor(p, 133)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = RuckusEthProfileID(i)
	return
}

func RuckusEthProfileID_Set(p *radius.Packet, value RuckusEthProfileID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ruckus_SetVendor(p, 133, a)
}

func RuckusEthProfileID_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 133)
}

func RuckusZoneName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 134, a)
}

func RuckusZoneName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 134, a)
}

func RuckusZoneName_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusZoneName_Lookup(p)
	return
}

func RuckusZoneName_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusZoneName_LookupString(p)
	return
}

func RuckusZoneName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 134) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusZoneName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 134) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusZoneName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 134)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusZoneName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 134)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusZoneName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 134, a)
}

func RuckusZoneName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 134, a)
}

func RuckusZoneName_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 134)
}

func RuckusWlanName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 135, a)
}

func RuckusWlanName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_AddVendor(p, 135, a)
}

func RuckusWlanName_Get(p *radius.Packet) (value []byte) {
	value, _ = RuckusWlanName_Lookup(p)
	return
}

func RuckusWlanName_GetString(p *radius.Packet) (value string) {
	value, _ = RuckusWlanName_LookupString(p)
	return
}

func RuckusWlanName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ruckus_GetsVendor(p, 135) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusWlanName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ruckus_GetsVendor(p, 135) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RuckusWlanName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ruckus_LookupVendor(p, 135)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RuckusWlanName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ruckus_LookupVendor(p, 135)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RuckusWlanName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 135, a)
}

func RuckusWlanName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ruckus_SetVendor(p, 135, a)
}

func RuckusWlanName_Del(p *radius.Packet) {
	_Ruckus_DelVendor(p, 135)
}
