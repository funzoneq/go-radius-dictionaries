// Code generated by radius-dict-gen. DO NOT EDIT.

package epygi

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Epygi_VendorID = 16459
)

func _Epygi_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Epygi_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Epygi_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Epygi_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Epygi_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Epygi_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Epygi_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Epygi_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Epygi_AddVendor(p, typ, attr)
}

func _Epygi_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Epygi_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func EpygiAVPair_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 1, a)
}

func EpygiAVPair_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 1, a)
}

func EpygiAVPair_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiAVPair_Lookup(p)
	return
}

func EpygiAVPair_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiAVPair_LookupString(p)
	return
}

func EpygiAVPair_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiAVPair_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiAVPair_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiAVPair_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiAVPair_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 1, a)
}

func EpygiAVPair_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 1, a)
}

func EpygiAVPair_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 1)
}

func EpygiNASPort_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 2, a)
}

func EpygiNASPort_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 2, a)
}

func EpygiNASPort_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiNASPort_Lookup(p)
	return
}

func EpygiNASPort_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiNASPort_LookupString(p)
	return
}

func EpygiNASPort_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiNASPort_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiNASPort_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiNASPort_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiNASPort_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 2, a)
}

func EpygiNASPort_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 2, a)
}

func EpygiNASPort_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 2)
}

func EpygiH323RemoteAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 23, a)
}

func EpygiH323RemoteAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 23, a)
}

func EpygiH323RemoteAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiH323RemoteAddress_Lookup(p)
	return
}

func EpygiH323RemoteAddress_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiH323RemoteAddress_LookupString(p)
	return
}

func EpygiH323RemoteAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 23) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323RemoteAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 23) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323RemoteAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiH323RemoteAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiH323RemoteAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 23, a)
}

func EpygiH323RemoteAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 23, a)
}

func EpygiH323RemoteAddress_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 23)
}

func EpygiH323ConfID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 24, a)
}

func EpygiH323ConfID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 24, a)
}

func EpygiH323ConfID_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiH323ConfID_Lookup(p)
	return
}

func EpygiH323ConfID_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiH323ConfID_LookupString(p)
	return
}

func EpygiH323ConfID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 24) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323ConfID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 24) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323ConfID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiH323ConfID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiH323ConfID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 24, a)
}

func EpygiH323ConfID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 24, a)
}

func EpygiH323ConfID_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 24)
}

func EpygiH323SetupTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 25, a)
}

func EpygiH323SetupTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 25, a)
}

func EpygiH323SetupTime_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiH323SetupTime_Lookup(p)
	return
}

func EpygiH323SetupTime_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiH323SetupTime_LookupString(p)
	return
}

func EpygiH323SetupTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 25) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323SetupTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 25) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323SetupTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiH323SetupTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiH323SetupTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 25, a)
}

func EpygiH323SetupTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 25, a)
}

func EpygiH323SetupTime_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 25)
}

func EpygiH323CallOrigin_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 26, a)
}

func EpygiH323CallOrigin_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 26, a)
}

func EpygiH323CallOrigin_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiH323CallOrigin_Lookup(p)
	return
}

func EpygiH323CallOrigin_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiH323CallOrigin_LookupString(p)
	return
}

func EpygiH323CallOrigin_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 26) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323CallOrigin_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 26) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323CallOrigin_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiH323CallOrigin_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiH323CallOrigin_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 26, a)
}

func EpygiH323CallOrigin_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 26, a)
}

func EpygiH323CallOrigin_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 26)
}

func EpygiH323CallType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 27, a)
}

func EpygiH323CallType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 27, a)
}

func EpygiH323CallType_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiH323CallType_Lookup(p)
	return
}

func EpygiH323CallType_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiH323CallType_LookupString(p)
	return
}

func EpygiH323CallType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 27) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323CallType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 27) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323CallType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiH323CallType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiH323CallType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 27, a)
}

func EpygiH323CallType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 27, a)
}

func EpygiH323CallType_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 27)
}

func EpygiH323ConnectTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 28, a)
}

func EpygiH323ConnectTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 28, a)
}

func EpygiH323ConnectTime_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiH323ConnectTime_Lookup(p)
	return
}

func EpygiH323ConnectTime_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiH323ConnectTime_LookupString(p)
	return
}

func EpygiH323ConnectTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 28) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323ConnectTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 28) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323ConnectTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiH323ConnectTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiH323ConnectTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 28, a)
}

func EpygiH323ConnectTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 28, a)
}

func EpygiH323ConnectTime_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 28)
}

func EpygiH323DisconnectTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 29, a)
}

func EpygiH323DisconnectTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 29, a)
}

func EpygiH323DisconnectTime_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiH323DisconnectTime_Lookup(p)
	return
}

func EpygiH323DisconnectTime_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiH323DisconnectTime_LookupString(p)
	return
}

func EpygiH323DisconnectTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 29) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323DisconnectTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 29) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323DisconnectTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiH323DisconnectTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiH323DisconnectTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 29, a)
}

func EpygiH323DisconnectTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 29, a)
}

func EpygiH323DisconnectTime_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 29)
}

func EpygiH323DisconnectCause_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 30, a)
}

func EpygiH323DisconnectCause_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 30, a)
}

func EpygiH323DisconnectCause_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiH323DisconnectCause_Lookup(p)
	return
}

func EpygiH323DisconnectCause_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiH323DisconnectCause_LookupString(p)
	return
}

func EpygiH323DisconnectCause_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 30) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323DisconnectCause_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 30) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323DisconnectCause_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiH323DisconnectCause_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiH323DisconnectCause_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 30, a)
}

func EpygiH323DisconnectCause_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 30, a)
}

func EpygiH323DisconnectCause_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 30)
}

func EpygiH323VoiceQuality_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 31, a)
}

func EpygiH323VoiceQuality_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 31, a)
}

func EpygiH323VoiceQuality_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiH323VoiceQuality_Lookup(p)
	return
}

func EpygiH323VoiceQuality_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiH323VoiceQuality_LookupString(p)
	return
}

func EpygiH323VoiceQuality_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 31) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323VoiceQuality_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 31) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323VoiceQuality_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiH323VoiceQuality_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiH323VoiceQuality_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 31, a)
}

func EpygiH323VoiceQuality_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 31, a)
}

func EpygiH323VoiceQuality_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 31)
}

func EpygiH323GwID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 33, a)
}

func EpygiH323GwID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 33, a)
}

func EpygiH323GwID_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiH323GwID_Lookup(p)
	return
}

func EpygiH323GwID_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiH323GwID_LookupString(p)
	return
}

func EpygiH323GwID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 33) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323GwID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 33) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323GwID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiH323GwID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiH323GwID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 33, a)
}

func EpygiH323GwID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 33, a)
}

func EpygiH323GwID_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 33)
}

func EpygiH323IncomingConfID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 35, a)
}

func EpygiH323IncomingConfID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 35, a)
}

func EpygiH323IncomingConfID_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiH323IncomingConfID_Lookup(p)
	return
}

func EpygiH323IncomingConfID_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiH323IncomingConfID_LookupString(p)
	return
}

func EpygiH323IncomingConfID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 35) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323IncomingConfID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 35) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323IncomingConfID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiH323IncomingConfID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiH323IncomingConfID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 35, a)
}

func EpygiH323IncomingConfID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 35, a)
}

func EpygiH323IncomingConfID_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 35)
}

func EpygiH323CreditAmount_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 101, a)
}

func EpygiH323CreditAmount_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 101, a)
}

func EpygiH323CreditAmount_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiH323CreditAmount_Lookup(p)
	return
}

func EpygiH323CreditAmount_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiH323CreditAmount_LookupString(p)
	return
}

func EpygiH323CreditAmount_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 101) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323CreditAmount_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 101) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323CreditAmount_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiH323CreditAmount_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiH323CreditAmount_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 101, a)
}

func EpygiH323CreditAmount_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 101, a)
}

func EpygiH323CreditAmount_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 101)
}

func EpygiH323CreditTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 102, a)
}

func EpygiH323CreditTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 102, a)
}

func EpygiH323CreditTime_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiH323CreditTime_Lookup(p)
	return
}

func EpygiH323CreditTime_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiH323CreditTime_LookupString(p)
	return
}

func EpygiH323CreditTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 102) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323CreditTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 102) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323CreditTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiH323CreditTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiH323CreditTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 102, a)
}

func EpygiH323CreditTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 102, a)
}

func EpygiH323CreditTime_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 102)
}

func EpygiH323ReturnCode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 103, a)
}

func EpygiH323ReturnCode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 103, a)
}

func EpygiH323ReturnCode_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiH323ReturnCode_Lookup(p)
	return
}

func EpygiH323ReturnCode_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiH323ReturnCode_LookupString(p)
	return
}

func EpygiH323ReturnCode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 103) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323ReturnCode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 103) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323ReturnCode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiH323ReturnCode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiH323ReturnCode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 103, a)
}

func EpygiH323ReturnCode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 103, a)
}

func EpygiH323ReturnCode_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 103)
}

func EpygiH323PromptID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 104, a)
}

func EpygiH323PromptID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 104, a)
}

func EpygiH323PromptID_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiH323PromptID_Lookup(p)
	return
}

func EpygiH323PromptID_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiH323PromptID_LookupString(p)
	return
}

func EpygiH323PromptID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 104) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323PromptID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 104) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323PromptID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiH323PromptID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiH323PromptID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 104, a)
}

func EpygiH323PromptID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 104, a)
}

func EpygiH323PromptID_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 104)
}

func EpygiH323TimeAndDay_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 105, a)
}

func EpygiH323TimeAndDay_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 105, a)
}

func EpygiH323TimeAndDay_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiH323TimeAndDay_Lookup(p)
	return
}

func EpygiH323TimeAndDay_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiH323TimeAndDay_LookupString(p)
	return
}

func EpygiH323TimeAndDay_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 105) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323TimeAndDay_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 105) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323TimeAndDay_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiH323TimeAndDay_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiH323TimeAndDay_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 105, a)
}

func EpygiH323TimeAndDay_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 105, a)
}

func EpygiH323TimeAndDay_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 105)
}

func EpygiH323RedirectNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 106, a)
}

func EpygiH323RedirectNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 106, a)
}

func EpygiH323RedirectNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiH323RedirectNumber_Lookup(p)
	return
}

func EpygiH323RedirectNumber_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiH323RedirectNumber_LookupString(p)
	return
}

func EpygiH323RedirectNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 106) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323RedirectNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 106) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323RedirectNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiH323RedirectNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiH323RedirectNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 106, a)
}

func EpygiH323RedirectNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 106, a)
}

func EpygiH323RedirectNumber_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 106)
}

func EpygiH323PreferredLang_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 107, a)
}

func EpygiH323PreferredLang_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 107, a)
}

func EpygiH323PreferredLang_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiH323PreferredLang_Lookup(p)
	return
}

func EpygiH323PreferredLang_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiH323PreferredLang_LookupString(p)
	return
}

func EpygiH323PreferredLang_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 107) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323PreferredLang_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 107) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323PreferredLang_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiH323PreferredLang_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiH323PreferredLang_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 107, a)
}

func EpygiH323PreferredLang_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 107, a)
}

func EpygiH323PreferredLang_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 107)
}

func EpygiH323RedirectIPAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 108, a)
}

func EpygiH323RedirectIPAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 108, a)
}

func EpygiH323RedirectIPAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiH323RedirectIPAddress_Lookup(p)
	return
}

func EpygiH323RedirectIPAddress_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiH323RedirectIPAddress_LookupString(p)
	return
}

func EpygiH323RedirectIPAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 108) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323RedirectIPAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 108) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323RedirectIPAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiH323RedirectIPAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiH323RedirectIPAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 108, a)
}

func EpygiH323RedirectIPAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 108, a)
}

func EpygiH323RedirectIPAddress_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 108)
}

func EpygiH323BillingModel_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 109, a)
}

func EpygiH323BillingModel_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 109, a)
}

func EpygiH323BillingModel_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiH323BillingModel_Lookup(p)
	return
}

func EpygiH323BillingModel_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiH323BillingModel_LookupString(p)
	return
}

func EpygiH323BillingModel_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 109) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323BillingModel_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 109) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323BillingModel_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiH323BillingModel_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiH323BillingModel_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 109, a)
}

func EpygiH323BillingModel_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 109, a)
}

func EpygiH323BillingModel_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 109)
}

func EpygiH323Currency_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 110, a)
}

func EpygiH323Currency_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 110, a)
}

func EpygiH323Currency_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiH323Currency_Lookup(p)
	return
}

func EpygiH323Currency_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiH323Currency_LookupString(p)
	return
}

func EpygiH323Currency_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 110) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323Currency_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 110) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiH323Currency_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiH323Currency_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiH323Currency_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 110, a)
}

func EpygiH323Currency_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 110, a)
}

func EpygiH323Currency_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 110)
}

func EpygiRegExpDate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 150, a)
}

func EpygiRegExpDate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 150, a)
}

func EpygiRegExpDate_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiRegExpDate_Lookup(p)
	return
}

func EpygiRegExpDate_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiRegExpDate_LookupString(p)
	return
}

func EpygiRegExpDate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 150) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiRegExpDate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 150) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiRegExpDate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 150)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiRegExpDate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 150)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiRegExpDate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 150, a)
}

func EpygiRegExpDate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 150, a)
}

func EpygiRegExpDate_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 150)
}

func EpygiFiadID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 151, a)
}

func EpygiFiadID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 151, a)
}

func EpygiFiadID_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiFiadID_Lookup(p)
	return
}

func EpygiFiadID_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiFiadID_LookupString(p)
	return
}

func EpygiFiadID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 151) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiFiadID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 151) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiFiadID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 151)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiFiadID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 151)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiFiadID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 151, a)
}

func EpygiFiadID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 151, a)
}

func EpygiFiadID_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 151)
}

func EpygiPortID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 152, a)
}

func EpygiPortID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 152, a)
}

func EpygiPortID_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiPortID_Lookup(p)
	return
}

func EpygiPortID_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiPortID_LookupString(p)
	return
}

func EpygiPortID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 152) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiPortID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 152) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiPortID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 152)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiPortID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 152)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiPortID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 152, a)
}

func EpygiPortID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 152, a)
}

func EpygiPortID_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 152)
}

func EpygiAccessType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 153, a)
}

func EpygiAccessType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 153, a)
}

func EpygiAccessType_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiAccessType_Lookup(p)
	return
}

func EpygiAccessType_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiAccessType_LookupString(p)
	return
}

func EpygiAccessType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 153) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiAccessType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 153) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiAccessType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 153)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiAccessType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 153)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiAccessType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 153, a)
}

func EpygiAccessType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 153, a)
}

func EpygiAccessType_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 153)
}

func EpygiCallInfo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 154, a)
}

func EpygiCallInfo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 154, a)
}

func EpygiCallInfo_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiCallInfo_Lookup(p)
	return
}

func EpygiCallInfo_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiCallInfo_LookupString(p)
	return
}

func EpygiCallInfo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 154) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiCallInfo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 154) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiCallInfo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 154)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiCallInfo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 154)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiCallInfo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 154, a)
}

func EpygiCallInfo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 154, a)
}

func EpygiCallInfo_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 154)
}

func EpygiOrigCallID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 170, a)
}

func EpygiOrigCallID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 170, a)
}

func EpygiOrigCallID_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiOrigCallID_Lookup(p)
	return
}

func EpygiOrigCallID_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiOrigCallID_LookupString(p)
	return
}

func EpygiOrigCallID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 170) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiOrigCallID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 170) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiOrigCallID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 170)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiOrigCallID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 170)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiOrigCallID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 170, a)
}

func EpygiOrigCallID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 170, a)
}

func EpygiOrigCallID_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 170)
}

func EpygiParentCallID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 171, a)
}

func EpygiParentCallID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 171, a)
}

func EpygiParentCallID_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiParentCallID_Lookup(p)
	return
}

func EpygiParentCallID_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiParentCallID_LookupString(p)
	return
}

func EpygiParentCallID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 171) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiParentCallID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 171) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiParentCallID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 171)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiParentCallID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 171)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiParentCallID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 171, a)
}

func EpygiParentCallID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 171, a)
}

func EpygiParentCallID_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 171)
}

type EpygiCallType uint32

const (
	EpygiCallType_Value_Internal EpygiCallType = 0
	EpygiCallType_Value_SIP      EpygiCallType = 1
	EpygiCallType_Value_H323     EpygiCallType = 2
	EpygiCallType_Value_FXO      EpygiCallType = 3
	EpygiCallType_Value_T1E1CAS  EpygiCallType = 4
	EpygiCallType_Value_T1E1CCS  EpygiCallType = 5
	EpygiCallType_Value_ISDNPRI  EpygiCallType = 6
)

var EpygiCallType_Strings = map[EpygiCallType]string{
	EpygiCallType_Value_Internal: "Internal",
	EpygiCallType_Value_SIP:      "SIP",
	EpygiCallType_Value_H323:     "H.323",
	EpygiCallType_Value_FXO:      "FXO",
	EpygiCallType_Value_T1E1CAS:  "T1-E1-CAS",
	EpygiCallType_Value_T1E1CCS:  "T1-E1-CCS",
	EpygiCallType_Value_ISDNPRI:  "ISDN-PRI",
}

func (a EpygiCallType) String() string {
	if str, ok := EpygiCallType_Strings[a]; ok {
		return str
	}
	return "EpygiCallType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiCallType_Add(p *radius.Packet, value EpygiCallType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 172, a)
}

func EpygiCallType_Get(p *radius.Packet) (value EpygiCallType) {
	value, _ = EpygiCallType_Lookup(p)
	return
}

func EpygiCallType_Gets(p *radius.Packet) (values []EpygiCallType, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 172) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiCallType(i))
	}
	return
}

func EpygiCallType_Lookup(p *radius.Packet) (value EpygiCallType, err error) {
	a, ok := _Epygi_LookupVendor(p, 172)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiCallType(i)
	return
}

func EpygiCallType_Set(p *radius.Packet, value EpygiCallType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 172, a)
}

func EpygiCallType_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 172)
}

func EpygiDeviceName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 173, a)
}

func EpygiDeviceName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 173, a)
}

func EpygiDeviceName_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiDeviceName_Lookup(p)
	return
}

func EpygiDeviceName_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiDeviceName_LookupString(p)
	return
}

func EpygiDeviceName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 173) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiDeviceName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 173) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiDeviceName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 173)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiDeviceName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 173)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiDeviceName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 173, a)
}

func EpygiDeviceName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 173, a)
}

func EpygiDeviceName_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 173)
}

type EpygiInterfaceName uint32

const (
	EpygiInterfaceName_Value_Ethernet    EpygiInterfaceName = 0
	EpygiInterfaceName_Value_FXO         EpygiInterfaceName = 1
	EpygiInterfaceName_Value_T1E1User    EpygiInterfaceName = 2
	EpygiInterfaceName_Value_T1E1Network EpygiInterfaceName = 3
	EpygiInterfaceName_Value_ISDN        EpygiInterfaceName = 4
)

var EpygiInterfaceName_Strings = map[EpygiInterfaceName]string{
	EpygiInterfaceName_Value_Ethernet:    "Ethernet",
	EpygiInterfaceName_Value_FXO:         "FXO",
	EpygiInterfaceName_Value_T1E1User:    "T1-E1-User",
	EpygiInterfaceName_Value_T1E1Network: "T1-E1-Network",
	EpygiInterfaceName_Value_ISDN:        "ISDN",
}

func (a EpygiInterfaceName) String() string {
	if str, ok := EpygiInterfaceName_Strings[a]; ok {
		return str
	}
	return "EpygiInterfaceName(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiInterfaceName_Add(p *radius.Packet, value EpygiInterfaceName) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 174, a)
}

func EpygiInterfaceName_Get(p *radius.Packet) (value EpygiInterfaceName) {
	value, _ = EpygiInterfaceName_Lookup(p)
	return
}

func EpygiInterfaceName_Gets(p *radius.Packet) (values []EpygiInterfaceName, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 174) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiInterfaceName(i))
	}
	return
}

func EpygiInterfaceName_Lookup(p *radius.Packet) (value EpygiInterfaceName, err error) {
	a, ok := _Epygi_LookupVendor(p, 174)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiInterfaceName(i)
	return
}

func EpygiInterfaceName_Set(p *radius.Packet, value EpygiInterfaceName) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 174, a)
}

func EpygiInterfaceName_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 174)
}

type EpygiInterfaceNumber uint32

var EpygiInterfaceNumber_Strings = map[EpygiInterfaceNumber]string{}

func (a EpygiInterfaceNumber) String() string {
	if str, ok := EpygiInterfaceNumber_Strings[a]; ok {
		return str
	}
	return "EpygiInterfaceNumber(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiInterfaceNumber_Add(p *radius.Packet, value EpygiInterfaceNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 175, a)
}

func EpygiInterfaceNumber_Get(p *radius.Packet) (value EpygiInterfaceNumber) {
	value, _ = EpygiInterfaceNumber_Lookup(p)
	return
}

func EpygiInterfaceNumber_Gets(p *radius.Packet) (values []EpygiInterfaceNumber, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 175) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiInterfaceNumber(i))
	}
	return
}

func EpygiInterfaceNumber_Lookup(p *radius.Packet) (value EpygiInterfaceNumber, err error) {
	a, ok := _Epygi_LookupVendor(p, 175)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiInterfaceNumber(i)
	return
}

func EpygiInterfaceNumber_Set(p *radius.Packet, value EpygiInterfaceNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 175, a)
}

func EpygiInterfaceNumber_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 175)
}

type EpygiTimeslotNumber uint32

var EpygiTimeslotNumber_Strings = map[EpygiTimeslotNumber]string{}

func (a EpygiTimeslotNumber) String() string {
	if str, ok := EpygiTimeslotNumber_Strings[a]; ok {
		return str
	}
	return "EpygiTimeslotNumber(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiTimeslotNumber_Add(p *radius.Packet, value EpygiTimeslotNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 176, a)
}

func EpygiTimeslotNumber_Get(p *radius.Packet) (value EpygiTimeslotNumber) {
	value, _ = EpygiTimeslotNumber_Lookup(p)
	return
}

func EpygiTimeslotNumber_Gets(p *radius.Packet) (values []EpygiTimeslotNumber, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 176) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiTimeslotNumber(i))
	}
	return
}

func EpygiTimeslotNumber_Lookup(p *radius.Packet) (value EpygiTimeslotNumber, err error) {
	a, ok := _Epygi_LookupVendor(p, 176)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiTimeslotNumber(i)
	return
}

func EpygiTimeslotNumber_Set(p *radius.Packet, value EpygiTimeslotNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 176, a)
}

func EpygiTimeslotNumber_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 176)
}

type EpygiOrigIpAddr uint32

var EpygiOrigIpAddr_Strings = map[EpygiOrigIpAddr]string{}

func (a EpygiOrigIpAddr) String() string {
	if str, ok := EpygiOrigIpAddr_Strings[a]; ok {
		return str
	}
	return "EpygiOrigIpAddr(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiOrigIpAddr_Add(p *radius.Packet, value EpygiOrigIpAddr) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 177, a)
}

func EpygiOrigIpAddr_Get(p *radius.Packet) (value EpygiOrigIpAddr) {
	value, _ = EpygiOrigIpAddr_Lookup(p)
	return
}

func EpygiOrigIpAddr_Gets(p *radius.Packet) (values []EpygiOrigIpAddr, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 177) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiOrigIpAddr(i))
	}
	return
}

func EpygiOrigIpAddr_Lookup(p *radius.Packet) (value EpygiOrigIpAddr, err error) {
	a, ok := _Epygi_LookupVendor(p, 177)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiOrigIpAddr(i)
	return
}

func EpygiOrigIpAddr_Set(p *radius.Packet, value EpygiOrigIpAddr) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 177, a)
}

func EpygiOrigIpAddr_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 177)
}

type EpygiDestIpAddr uint32

var EpygiDestIpAddr_Strings = map[EpygiDestIpAddr]string{}

func (a EpygiDestIpAddr) String() string {
	if str, ok := EpygiDestIpAddr_Strings[a]; ok {
		return str
	}
	return "EpygiDestIpAddr(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiDestIpAddr_Add(p *radius.Packet, value EpygiDestIpAddr) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 178, a)
}

func EpygiDestIpAddr_Get(p *radius.Packet) (value EpygiDestIpAddr) {
	value, _ = EpygiDestIpAddr_Lookup(p)
	return
}

func EpygiDestIpAddr_Gets(p *radius.Packet) (values []EpygiDestIpAddr, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 178) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiDestIpAddr(i))
	}
	return
}

func EpygiDestIpAddr_Lookup(p *radius.Packet) (value EpygiDestIpAddr, err error) {
	a, ok := _Epygi_LookupVendor(p, 178)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiDestIpAddr(i)
	return
}

func EpygiDestIpAddr_Set(p *radius.Packet, value EpygiDestIpAddr) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 178, a)
}

func EpygiDestIpAddr_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 178)
}

type EpygiOrigIpPort uint32

var EpygiOrigIpPort_Strings = map[EpygiOrigIpPort]string{}

func (a EpygiOrigIpPort) String() string {
	if str, ok := EpygiOrigIpPort_Strings[a]; ok {
		return str
	}
	return "EpygiOrigIpPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiOrigIpPort_Add(p *radius.Packet, value EpygiOrigIpPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 179, a)
}

func EpygiOrigIpPort_Get(p *radius.Packet) (value EpygiOrigIpPort) {
	value, _ = EpygiOrigIpPort_Lookup(p)
	return
}

func EpygiOrigIpPort_Gets(p *radius.Packet) (values []EpygiOrigIpPort, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 179) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiOrigIpPort(i))
	}
	return
}

func EpygiOrigIpPort_Lookup(p *radius.Packet) (value EpygiOrigIpPort, err error) {
	a, ok := _Epygi_LookupVendor(p, 179)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiOrigIpPort(i)
	return
}

func EpygiOrigIpPort_Set(p *radius.Packet, value EpygiOrigIpPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 179, a)
}

func EpygiOrigIpPort_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 179)
}

type EpygiDestIpPort uint32

var EpygiDestIpPort_Strings = map[EpygiDestIpPort]string{}

func (a EpygiDestIpPort) String() string {
	if str, ok := EpygiDestIpPort_Strings[a]; ok {
		return str
	}
	return "EpygiDestIpPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiDestIpPort_Add(p *radius.Packet, value EpygiDestIpPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 180, a)
}

func EpygiDestIpPort_Get(p *radius.Packet) (value EpygiDestIpPort) {
	value, _ = EpygiDestIpPort_Lookup(p)
	return
}

func EpygiDestIpPort_Gets(p *radius.Packet) (values []EpygiDestIpPort, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 180) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiDestIpPort(i))
	}
	return
}

func EpygiDestIpPort_Lookup(p *radius.Packet) (value EpygiDestIpPort, err error) {
	a, ok := _Epygi_LookupVendor(p, 180)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiDestIpPort(i)
	return
}

func EpygiDestIpPort_Set(p *radius.Packet, value EpygiDestIpPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 180, a)
}

func EpygiDestIpPort_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 180)
}

func EpygiCallingPartyNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 181, a)
}

func EpygiCallingPartyNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 181, a)
}

func EpygiCallingPartyNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiCallingPartyNumber_Lookup(p)
	return
}

func EpygiCallingPartyNumber_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiCallingPartyNumber_LookupString(p)
	return
}

func EpygiCallingPartyNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 181) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiCallingPartyNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 181) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiCallingPartyNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 181)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiCallingPartyNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 181)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiCallingPartyNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 181, a)
}

func EpygiCallingPartyNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 181, a)
}

func EpygiCallingPartyNumber_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 181)
}

func EpygiCalledPartyNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 182, a)
}

func EpygiCalledPartyNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_AddVendor(p, 182, a)
}

func EpygiCalledPartyNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = EpygiCalledPartyNumber_Lookup(p)
	return
}

func EpygiCalledPartyNumber_GetString(p *radius.Packet) (value string) {
	value, _ = EpygiCalledPartyNumber_LookupString(p)
	return
}

func EpygiCalledPartyNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Epygi_GetsVendor(p, 182) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiCalledPartyNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Epygi_GetsVendor(p, 182) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EpygiCalledPartyNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Epygi_LookupVendor(p, 182)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EpygiCalledPartyNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Epygi_LookupVendor(p, 182)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EpygiCalledPartyNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 182, a)
}

func EpygiCalledPartyNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Epygi_SetVendor(p, 182, a)
}

func EpygiCalledPartyNumber_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 182)
}

type EpygiDateTimeOrigination uint32

var EpygiDateTimeOrigination_Strings = map[EpygiDateTimeOrigination]string{}

func (a EpygiDateTimeOrigination) String() string {
	if str, ok := EpygiDateTimeOrigination_Strings[a]; ok {
		return str
	}
	return "EpygiDateTimeOrigination(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiDateTimeOrigination_Add(p *radius.Packet, value EpygiDateTimeOrigination) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 183, a)
}

func EpygiDateTimeOrigination_Get(p *radius.Packet) (value EpygiDateTimeOrigination) {
	value, _ = EpygiDateTimeOrigination_Lookup(p)
	return
}

func EpygiDateTimeOrigination_Gets(p *radius.Packet) (values []EpygiDateTimeOrigination, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 183) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiDateTimeOrigination(i))
	}
	return
}

func EpygiDateTimeOrigination_Lookup(p *radius.Packet) (value EpygiDateTimeOrigination, err error) {
	a, ok := _Epygi_LookupVendor(p, 183)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiDateTimeOrigination(i)
	return
}

func EpygiDateTimeOrigination_Set(p *radius.Packet, value EpygiDateTimeOrigination) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 183, a)
}

func EpygiDateTimeOrigination_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 183)
}

type EpygiDateTimeConnect uint32

var EpygiDateTimeConnect_Strings = map[EpygiDateTimeConnect]string{}

func (a EpygiDateTimeConnect) String() string {
	if str, ok := EpygiDateTimeConnect_Strings[a]; ok {
		return str
	}
	return "EpygiDateTimeConnect(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiDateTimeConnect_Add(p *radius.Packet, value EpygiDateTimeConnect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 184, a)
}

func EpygiDateTimeConnect_Get(p *radius.Packet) (value EpygiDateTimeConnect) {
	value, _ = EpygiDateTimeConnect_Lookup(p)
	return
}

func EpygiDateTimeConnect_Gets(p *radius.Packet) (values []EpygiDateTimeConnect, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 184) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiDateTimeConnect(i))
	}
	return
}

func EpygiDateTimeConnect_Lookup(p *radius.Packet) (value EpygiDateTimeConnect, err error) {
	a, ok := _Epygi_LookupVendor(p, 184)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiDateTimeConnect(i)
	return
}

func EpygiDateTimeConnect_Set(p *radius.Packet, value EpygiDateTimeConnect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 184, a)
}

func EpygiDateTimeConnect_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 184)
}

type EpygiDateTimeDisconnect uint32

var EpygiDateTimeDisconnect_Strings = map[EpygiDateTimeDisconnect]string{}

func (a EpygiDateTimeDisconnect) String() string {
	if str, ok := EpygiDateTimeDisconnect_Strings[a]; ok {
		return str
	}
	return "EpygiDateTimeDisconnect(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiDateTimeDisconnect_Add(p *radius.Packet, value EpygiDateTimeDisconnect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 185, a)
}

func EpygiDateTimeDisconnect_Get(p *radius.Packet) (value EpygiDateTimeDisconnect) {
	value, _ = EpygiDateTimeDisconnect_Lookup(p)
	return
}

func EpygiDateTimeDisconnect_Gets(p *radius.Packet) (values []EpygiDateTimeDisconnect, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 185) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiDateTimeDisconnect(i))
	}
	return
}

func EpygiDateTimeDisconnect_Lookup(p *radius.Packet) (value EpygiDateTimeDisconnect, err error) {
	a, ok := _Epygi_LookupVendor(p, 185)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiDateTimeDisconnect(i)
	return
}

func EpygiDateTimeDisconnect_Set(p *radius.Packet, value EpygiDateTimeDisconnect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 185, a)
}

func EpygiDateTimeDisconnect_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 185)
}

type EpygiDuration uint32

var EpygiDuration_Strings = map[EpygiDuration]string{}

func (a EpygiDuration) String() string {
	if str, ok := EpygiDuration_Strings[a]; ok {
		return str
	}
	return "EpygiDuration(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiDuration_Add(p *radius.Packet, value EpygiDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 186, a)
}

func EpygiDuration_Get(p *radius.Packet) (value EpygiDuration) {
	value, _ = EpygiDuration_Lookup(p)
	return
}

func EpygiDuration_Gets(p *radius.Packet) (values []EpygiDuration, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 186) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiDuration(i))
	}
	return
}

func EpygiDuration_Lookup(p *radius.Packet) (value EpygiDuration, err error) {
	a, ok := _Epygi_LookupVendor(p, 186)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiDuration(i)
	return
}

func EpygiDuration_Set(p *radius.Packet, value EpygiDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 186, a)
}

func EpygiDuration_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 186)
}

type EpygiOutSourceRTPIP uint32

var EpygiOutSourceRTPIP_Strings = map[EpygiOutSourceRTPIP]string{}

func (a EpygiOutSourceRTPIP) String() string {
	if str, ok := EpygiOutSourceRTPIP_Strings[a]; ok {
		return str
	}
	return "EpygiOutSourceRTPIP(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiOutSourceRTPIP_Add(p *radius.Packet, value EpygiOutSourceRTPIP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 187, a)
}

func EpygiOutSourceRTPIP_Get(p *radius.Packet) (value EpygiOutSourceRTPIP) {
	value, _ = EpygiOutSourceRTPIP_Lookup(p)
	return
}

func EpygiOutSourceRTPIP_Gets(p *radius.Packet) (values []EpygiOutSourceRTPIP, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 187) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiOutSourceRTPIP(i))
	}
	return
}

func EpygiOutSourceRTPIP_Lookup(p *radius.Packet) (value EpygiOutSourceRTPIP, err error) {
	a, ok := _Epygi_LookupVendor(p, 187)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiOutSourceRTPIP(i)
	return
}

func EpygiOutSourceRTPIP_Set(p *radius.Packet, value EpygiOutSourceRTPIP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 187, a)
}

func EpygiOutSourceRTPIP_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 187)
}

type EpygiOutDestRTPIP uint32

var EpygiOutDestRTPIP_Strings = map[EpygiOutDestRTPIP]string{}

func (a EpygiOutDestRTPIP) String() string {
	if str, ok := EpygiOutDestRTPIP_Strings[a]; ok {
		return str
	}
	return "EpygiOutDestRTPIP(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiOutDestRTPIP_Add(p *radius.Packet, value EpygiOutDestRTPIP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 188, a)
}

func EpygiOutDestRTPIP_Get(p *radius.Packet) (value EpygiOutDestRTPIP) {
	value, _ = EpygiOutDestRTPIP_Lookup(p)
	return
}

func EpygiOutDestRTPIP_Gets(p *radius.Packet) (values []EpygiOutDestRTPIP, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 188) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiOutDestRTPIP(i))
	}
	return
}

func EpygiOutDestRTPIP_Lookup(p *radius.Packet) (value EpygiOutDestRTPIP, err error) {
	a, ok := _Epygi_LookupVendor(p, 188)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiOutDestRTPIP(i)
	return
}

func EpygiOutDestRTPIP_Set(p *radius.Packet, value EpygiOutDestRTPIP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 188, a)
}

func EpygiOutDestRTPIP_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 188)
}

type EpygiInSourceRTPIP uint32

var EpygiInSourceRTPIP_Strings = map[EpygiInSourceRTPIP]string{}

func (a EpygiInSourceRTPIP) String() string {
	if str, ok := EpygiInSourceRTPIP_Strings[a]; ok {
		return str
	}
	return "EpygiInSourceRTPIP(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiInSourceRTPIP_Add(p *radius.Packet, value EpygiInSourceRTPIP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 189, a)
}

func EpygiInSourceRTPIP_Get(p *radius.Packet) (value EpygiInSourceRTPIP) {
	value, _ = EpygiInSourceRTPIP_Lookup(p)
	return
}

func EpygiInSourceRTPIP_Gets(p *radius.Packet) (values []EpygiInSourceRTPIP, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 189) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiInSourceRTPIP(i))
	}
	return
}

func EpygiInSourceRTPIP_Lookup(p *radius.Packet) (value EpygiInSourceRTPIP, err error) {
	a, ok := _Epygi_LookupVendor(p, 189)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiInSourceRTPIP(i)
	return
}

func EpygiInSourceRTPIP_Set(p *radius.Packet, value EpygiInSourceRTPIP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 189, a)
}

func EpygiInSourceRTPIP_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 189)
}

type EpygiInDestRTPIP uint32

var EpygiInDestRTPIP_Strings = map[EpygiInDestRTPIP]string{}

func (a EpygiInDestRTPIP) String() string {
	if str, ok := EpygiInDestRTPIP_Strings[a]; ok {
		return str
	}
	return "EpygiInDestRTPIP(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiInDestRTPIP_Add(p *radius.Packet, value EpygiInDestRTPIP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 190, a)
}

func EpygiInDestRTPIP_Get(p *radius.Packet) (value EpygiInDestRTPIP) {
	value, _ = EpygiInDestRTPIP_Lookup(p)
	return
}

func EpygiInDestRTPIP_Gets(p *radius.Packet) (values []EpygiInDestRTPIP, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 190) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiInDestRTPIP(i))
	}
	return
}

func EpygiInDestRTPIP_Lookup(p *radius.Packet) (value EpygiInDestRTPIP, err error) {
	a, ok := _Epygi_LookupVendor(p, 190)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiInDestRTPIP(i)
	return
}

func EpygiInDestRTPIP_Set(p *radius.Packet, value EpygiInDestRTPIP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 190, a)
}

func EpygiInDestRTPIP_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 190)
}

type EpygiOutSourceRTPPort uint32

var EpygiOutSourceRTPPort_Strings = map[EpygiOutSourceRTPPort]string{}

func (a EpygiOutSourceRTPPort) String() string {
	if str, ok := EpygiOutSourceRTPPort_Strings[a]; ok {
		return str
	}
	return "EpygiOutSourceRTPPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiOutSourceRTPPort_Add(p *radius.Packet, value EpygiOutSourceRTPPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 191, a)
}

func EpygiOutSourceRTPPort_Get(p *radius.Packet) (value EpygiOutSourceRTPPort) {
	value, _ = EpygiOutSourceRTPPort_Lookup(p)
	return
}

func EpygiOutSourceRTPPort_Gets(p *radius.Packet) (values []EpygiOutSourceRTPPort, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 191) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiOutSourceRTPPort(i))
	}
	return
}

func EpygiOutSourceRTPPort_Lookup(p *radius.Packet) (value EpygiOutSourceRTPPort, err error) {
	a, ok := _Epygi_LookupVendor(p, 191)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiOutSourceRTPPort(i)
	return
}

func EpygiOutSourceRTPPort_Set(p *radius.Packet, value EpygiOutSourceRTPPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 191, a)
}

func EpygiOutSourceRTPPort_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 191)
}

type EpygiOutDestRTPPort uint32

var EpygiOutDestRTPPort_Strings = map[EpygiOutDestRTPPort]string{}

func (a EpygiOutDestRTPPort) String() string {
	if str, ok := EpygiOutDestRTPPort_Strings[a]; ok {
		return str
	}
	return "EpygiOutDestRTPPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiOutDestRTPPort_Add(p *radius.Packet, value EpygiOutDestRTPPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 192, a)
}

func EpygiOutDestRTPPort_Get(p *radius.Packet) (value EpygiOutDestRTPPort) {
	value, _ = EpygiOutDestRTPPort_Lookup(p)
	return
}

func EpygiOutDestRTPPort_Gets(p *radius.Packet) (values []EpygiOutDestRTPPort, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 192) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiOutDestRTPPort(i))
	}
	return
}

func EpygiOutDestRTPPort_Lookup(p *radius.Packet) (value EpygiOutDestRTPPort, err error) {
	a, ok := _Epygi_LookupVendor(p, 192)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiOutDestRTPPort(i)
	return
}

func EpygiOutDestRTPPort_Set(p *radius.Packet, value EpygiOutDestRTPPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 192, a)
}

func EpygiOutDestRTPPort_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 192)
}

type EpygiInSourceRTPPort uint32

var EpygiInSourceRTPPort_Strings = map[EpygiInSourceRTPPort]string{}

func (a EpygiInSourceRTPPort) String() string {
	if str, ok := EpygiInSourceRTPPort_Strings[a]; ok {
		return str
	}
	return "EpygiInSourceRTPPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiInSourceRTPPort_Add(p *radius.Packet, value EpygiInSourceRTPPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 193, a)
}

func EpygiInSourceRTPPort_Get(p *radius.Packet) (value EpygiInSourceRTPPort) {
	value, _ = EpygiInSourceRTPPort_Lookup(p)
	return
}

func EpygiInSourceRTPPort_Gets(p *radius.Packet) (values []EpygiInSourceRTPPort, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 193) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiInSourceRTPPort(i))
	}
	return
}

func EpygiInSourceRTPPort_Lookup(p *radius.Packet) (value EpygiInSourceRTPPort, err error) {
	a, ok := _Epygi_LookupVendor(p, 193)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiInSourceRTPPort(i)
	return
}

func EpygiInSourceRTPPort_Set(p *radius.Packet, value EpygiInSourceRTPPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 193, a)
}

func EpygiInSourceRTPPort_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 193)
}

type EpygiInDestRTPPort uint32

var EpygiInDestRTPPort_Strings = map[EpygiInDestRTPPort]string{}

func (a EpygiInDestRTPPort) String() string {
	if str, ok := EpygiInDestRTPPort_Strings[a]; ok {
		return str
	}
	return "EpygiInDestRTPPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiInDestRTPPort_Add(p *radius.Packet, value EpygiInDestRTPPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 194, a)
}

func EpygiInDestRTPPort_Get(p *radius.Packet) (value EpygiInDestRTPPort) {
	value, _ = EpygiInDestRTPPort_Lookup(p)
	return
}

func EpygiInDestRTPPort_Gets(p *radius.Packet) (values []EpygiInDestRTPPort, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 194) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiInDestRTPPort(i))
	}
	return
}

func EpygiInDestRTPPort_Lookup(p *radius.Packet) (value EpygiInDestRTPPort, err error) {
	a, ok := _Epygi_LookupVendor(p, 194)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiInDestRTPPort(i)
	return
}

func EpygiInDestRTPPort_Set(p *radius.Packet, value EpygiInDestRTPPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 194, a)
}

func EpygiInDestRTPPort_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 194)
}

type EpygiCallRedirectReason uint32

const (
	EpygiCallRedirectReason_Value_NoReason             EpygiCallRedirectReason = 0
	EpygiCallRedirectReason_Value_CallForwardUncondit  EpygiCallRedirectReason = 1
	EpygiCallRedirectReason_Value_CallForwardBusy      EpygiCallRedirectReason = 2
	EpygiCallRedirectReason_Value_CallForwardNoAnswer  EpygiCallRedirectReason = 3
	EpygiCallRedirectReason_Value_CallTranfer          EpygiCallRedirectReason = 4
	EpygiCallRedirectReason_Value_CallPark             EpygiCallRedirectReason = 5
	EpygiCallRedirectReason_Value_CallPickup           EpygiCallRedirectReason = 6
	EpygiCallRedirectReason_Value_ManyExtensionRinging EpygiCallRedirectReason = 7
	EpygiCallRedirectReason_Value_HuntGroup            EpygiCallRedirectReason = 8
)

var EpygiCallRedirectReason_Strings = map[EpygiCallRedirectReason]string{
	EpygiCallRedirectReason_Value_NoReason:             "No-Reason",
	EpygiCallRedirectReason_Value_CallForwardUncondit:  "Call-Forward-Uncondit",
	EpygiCallRedirectReason_Value_CallForwardBusy:      "Call-Forward-Busy",
	EpygiCallRedirectReason_Value_CallForwardNoAnswer:  "Call-Forward-NoAnswer",
	EpygiCallRedirectReason_Value_CallTranfer:          "Call-Tranfer",
	EpygiCallRedirectReason_Value_CallPark:             "Call-Park",
	EpygiCallRedirectReason_Value_CallPickup:           "Call-Pickup",
	EpygiCallRedirectReason_Value_ManyExtensionRinging: "ManyExtension-Ringing",
	EpygiCallRedirectReason_Value_HuntGroup:            "Hunt-Group",
}

func (a EpygiCallRedirectReason) String() string {
	if str, ok := EpygiCallRedirectReason_Strings[a]; ok {
		return str
	}
	return "EpygiCallRedirectReason(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiCallRedirectReason_Add(p *radius.Packet, value EpygiCallRedirectReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 195, a)
}

func EpygiCallRedirectReason_Get(p *radius.Packet) (value EpygiCallRedirectReason) {
	value, _ = EpygiCallRedirectReason_Lookup(p)
	return
}

func EpygiCallRedirectReason_Gets(p *radius.Packet) (values []EpygiCallRedirectReason, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 195) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiCallRedirectReason(i))
	}
	return
}

func EpygiCallRedirectReason_Lookup(p *radius.Packet) (value EpygiCallRedirectReason, err error) {
	a, ok := _Epygi_LookupVendor(p, 195)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiCallRedirectReason(i)
	return
}

func EpygiCallRedirectReason_Set(p *radius.Packet, value EpygiCallRedirectReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 195, a)
}

func EpygiCallRedirectReason_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 195)
}

type EpygiCallDisconnectReason uint32

const (
	EpygiCallDisconnectReason_Value_CallIsRedirected EpygiCallDisconnectReason = 0
	EpygiCallDisconnectReason_Value_CallOriginOnHook EpygiCallDisconnectReason = 1
	EpygiCallDisconnectReason_Value_CallTeminOnHook  EpygiCallDisconnectReason = 2
	EpygiCallDisconnectReason_Value_DisconectedByCAC EpygiCallDisconnectReason = 3
	EpygiCallDisconnectReason_Value_Other            EpygiCallDisconnectReason = 4
)

var EpygiCallDisconnectReason_Strings = map[EpygiCallDisconnectReason]string{
	EpygiCallDisconnectReason_Value_CallIsRedirected: "Call-Is-Redirected",
	EpygiCallDisconnectReason_Value_CallOriginOnHook: "Call-Origin-OnHook",
	EpygiCallDisconnectReason_Value_CallTeminOnHook:  "Call-Temin-OnHook",
	EpygiCallDisconnectReason_Value_DisconectedByCAC: "Disconected-by-CAC",
	EpygiCallDisconnectReason_Value_Other:            "Other",
}

func (a EpygiCallDisconnectReason) String() string {
	if str, ok := EpygiCallDisconnectReason_Strings[a]; ok {
		return str
	}
	return "EpygiCallDisconnectReason(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiCallDisconnectReason_Add(p *radius.Packet, value EpygiCallDisconnectReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 196, a)
}

func EpygiCallDisconnectReason_Get(p *radius.Packet) (value EpygiCallDisconnectReason) {
	value, _ = EpygiCallDisconnectReason_Lookup(p)
	return
}

func EpygiCallDisconnectReason_Gets(p *radius.Packet) (values []EpygiCallDisconnectReason, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 196) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiCallDisconnectReason(i))
	}
	return
}

func EpygiCallDisconnectReason_Lookup(p *radius.Packet) (value EpygiCallDisconnectReason, err error) {
	a, ok := _Epygi_LookupVendor(p, 196)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiCallDisconnectReason(i)
	return
}

func EpygiCallDisconnectReason_Set(p *radius.Packet, value EpygiCallDisconnectReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 196, a)
}

func EpygiCallDisconnectReason_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 196)
}

type EpygiOutRTPPayload uint32

var EpygiOutRTPPayload_Strings = map[EpygiOutRTPPayload]string{}

func (a EpygiOutRTPPayload) String() string {
	if str, ok := EpygiOutRTPPayload_Strings[a]; ok {
		return str
	}
	return "EpygiOutRTPPayload(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiOutRTPPayload_Add(p *radius.Packet, value EpygiOutRTPPayload) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 197, a)
}

func EpygiOutRTPPayload_Get(p *radius.Packet) (value EpygiOutRTPPayload) {
	value, _ = EpygiOutRTPPayload_Lookup(p)
	return
}

func EpygiOutRTPPayload_Gets(p *radius.Packet) (values []EpygiOutRTPPayload, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 197) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiOutRTPPayload(i))
	}
	return
}

func EpygiOutRTPPayload_Lookup(p *radius.Packet) (value EpygiOutRTPPayload, err error) {
	a, ok := _Epygi_LookupVendor(p, 197)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiOutRTPPayload(i)
	return
}

func EpygiOutRTPPayload_Set(p *radius.Packet, value EpygiOutRTPPayload) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 197, a)
}

func EpygiOutRTPPayload_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 197)
}

type EpygiOutRTPPacketSize uint32

var EpygiOutRTPPacketSize_Strings = map[EpygiOutRTPPacketSize]string{}

func (a EpygiOutRTPPacketSize) String() string {
	if str, ok := EpygiOutRTPPacketSize_Strings[a]; ok {
		return str
	}
	return "EpygiOutRTPPacketSize(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiOutRTPPacketSize_Add(p *radius.Packet, value EpygiOutRTPPacketSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 198, a)
}

func EpygiOutRTPPacketSize_Get(p *radius.Packet) (value EpygiOutRTPPacketSize) {
	value, _ = EpygiOutRTPPacketSize_Lookup(p)
	return
}

func EpygiOutRTPPacketSize_Gets(p *radius.Packet) (values []EpygiOutRTPPacketSize, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 198) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiOutRTPPacketSize(i))
	}
	return
}

func EpygiOutRTPPacketSize_Lookup(p *radius.Packet) (value EpygiOutRTPPacketSize, err error) {
	a, ok := _Epygi_LookupVendor(p, 198)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiOutRTPPacketSize(i)
	return
}

func EpygiOutRTPPacketSize_Set(p *radius.Packet, value EpygiOutRTPPacketSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 198, a)
}

func EpygiOutRTPPacketSize_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 198)
}

type EpygiOutRTPPackets uint32

var EpygiOutRTPPackets_Strings = map[EpygiOutRTPPackets]string{}

func (a EpygiOutRTPPackets) String() string {
	if str, ok := EpygiOutRTPPackets_Strings[a]; ok {
		return str
	}
	return "EpygiOutRTPPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiOutRTPPackets_Add(p *radius.Packet, value EpygiOutRTPPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 199, a)
}

func EpygiOutRTPPackets_Get(p *radius.Packet) (value EpygiOutRTPPackets) {
	value, _ = EpygiOutRTPPackets_Lookup(p)
	return
}

func EpygiOutRTPPackets_Gets(p *radius.Packet) (values []EpygiOutRTPPackets, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 199) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiOutRTPPackets(i))
	}
	return
}

func EpygiOutRTPPackets_Lookup(p *radius.Packet) (value EpygiOutRTPPackets, err error) {
	a, ok := _Epygi_LookupVendor(p, 199)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiOutRTPPackets(i)
	return
}

func EpygiOutRTPPackets_Set(p *radius.Packet, value EpygiOutRTPPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 199, a)
}

func EpygiOutRTPPackets_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 199)
}

type EpygiOutRTPOctets uint32

var EpygiOutRTPOctets_Strings = map[EpygiOutRTPOctets]string{}

func (a EpygiOutRTPOctets) String() string {
	if str, ok := EpygiOutRTPOctets_Strings[a]; ok {
		return str
	}
	return "EpygiOutRTPOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiOutRTPOctets_Add(p *radius.Packet, value EpygiOutRTPOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 200, a)
}

func EpygiOutRTPOctets_Get(p *radius.Packet) (value EpygiOutRTPOctets) {
	value, _ = EpygiOutRTPOctets_Lookup(p)
	return
}

func EpygiOutRTPOctets_Gets(p *radius.Packet) (values []EpygiOutRTPOctets, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 200) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiOutRTPOctets(i))
	}
	return
}

func EpygiOutRTPOctets_Lookup(p *radius.Packet) (value EpygiOutRTPOctets, err error) {
	a, ok := _Epygi_LookupVendor(p, 200)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiOutRTPOctets(i)
	return
}

func EpygiOutRTPOctets_Set(p *radius.Packet, value EpygiOutRTPOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 200, a)
}

func EpygiOutRTPOctets_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 200)
}

type EpygiInRTPPayload uint32

var EpygiInRTPPayload_Strings = map[EpygiInRTPPayload]string{}

func (a EpygiInRTPPayload) String() string {
	if str, ok := EpygiInRTPPayload_Strings[a]; ok {
		return str
	}
	return "EpygiInRTPPayload(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiInRTPPayload_Add(p *radius.Packet, value EpygiInRTPPayload) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 201, a)
}

func EpygiInRTPPayload_Get(p *radius.Packet) (value EpygiInRTPPayload) {
	value, _ = EpygiInRTPPayload_Lookup(p)
	return
}

func EpygiInRTPPayload_Gets(p *radius.Packet) (values []EpygiInRTPPayload, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 201) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiInRTPPayload(i))
	}
	return
}

func EpygiInRTPPayload_Lookup(p *radius.Packet) (value EpygiInRTPPayload, err error) {
	a, ok := _Epygi_LookupVendor(p, 201)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiInRTPPayload(i)
	return
}

func EpygiInRTPPayload_Set(p *radius.Packet, value EpygiInRTPPayload) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 201, a)
}

func EpygiInRTPPayload_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 201)
}

type EpygiInRTPPacketSize uint32

var EpygiInRTPPacketSize_Strings = map[EpygiInRTPPacketSize]string{}

func (a EpygiInRTPPacketSize) String() string {
	if str, ok := EpygiInRTPPacketSize_Strings[a]; ok {
		return str
	}
	return "EpygiInRTPPacketSize(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiInRTPPacketSize_Add(p *radius.Packet, value EpygiInRTPPacketSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 202, a)
}

func EpygiInRTPPacketSize_Get(p *radius.Packet) (value EpygiInRTPPacketSize) {
	value, _ = EpygiInRTPPacketSize_Lookup(p)
	return
}

func EpygiInRTPPacketSize_Gets(p *radius.Packet) (values []EpygiInRTPPacketSize, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 202) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiInRTPPacketSize(i))
	}
	return
}

func EpygiInRTPPacketSize_Lookup(p *radius.Packet) (value EpygiInRTPPacketSize, err error) {
	a, ok := _Epygi_LookupVendor(p, 202)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiInRTPPacketSize(i)
	return
}

func EpygiInRTPPacketSize_Set(p *radius.Packet, value EpygiInRTPPacketSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 202, a)
}

func EpygiInRTPPacketSize_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 202)
}

type EpygiInRTPPackets uint32

var EpygiInRTPPackets_Strings = map[EpygiInRTPPackets]string{}

func (a EpygiInRTPPackets) String() string {
	if str, ok := EpygiInRTPPackets_Strings[a]; ok {
		return str
	}
	return "EpygiInRTPPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiInRTPPackets_Add(p *radius.Packet, value EpygiInRTPPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 203, a)
}

func EpygiInRTPPackets_Get(p *radius.Packet) (value EpygiInRTPPackets) {
	value, _ = EpygiInRTPPackets_Lookup(p)
	return
}

func EpygiInRTPPackets_Gets(p *radius.Packet) (values []EpygiInRTPPackets, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 203) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiInRTPPackets(i))
	}
	return
}

func EpygiInRTPPackets_Lookup(p *radius.Packet) (value EpygiInRTPPackets, err error) {
	a, ok := _Epygi_LookupVendor(p, 203)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiInRTPPackets(i)
	return
}

func EpygiInRTPPackets_Set(p *radius.Packet, value EpygiInRTPPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 203, a)
}

func EpygiInRTPPackets_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 203)
}

type EpygiInRTPOctets uint32

var EpygiInRTPOctets_Strings = map[EpygiInRTPOctets]string{}

func (a EpygiInRTPOctets) String() string {
	if str, ok := EpygiInRTPOctets_Strings[a]; ok {
		return str
	}
	return "EpygiInRTPOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiInRTPOctets_Add(p *radius.Packet, value EpygiInRTPOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 204, a)
}

func EpygiInRTPOctets_Get(p *radius.Packet) (value EpygiInRTPOctets) {
	value, _ = EpygiInRTPOctets_Lookup(p)
	return
}

func EpygiInRTPOctets_Gets(p *radius.Packet) (values []EpygiInRTPOctets, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 204) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiInRTPOctets(i))
	}
	return
}

func EpygiInRTPOctets_Lookup(p *radius.Packet) (value EpygiInRTPOctets, err error) {
	a, ok := _Epygi_LookupVendor(p, 204)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiInRTPOctets(i)
	return
}

func EpygiInRTPOctets_Set(p *radius.Packet, value EpygiInRTPOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 204, a)
}

func EpygiInRTPOctets_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 204)
}

type EpygiInRTPPacketsLost uint32

var EpygiInRTPPacketsLost_Strings = map[EpygiInRTPPacketsLost]string{}

func (a EpygiInRTPPacketsLost) String() string {
	if str, ok := EpygiInRTPPacketsLost_Strings[a]; ok {
		return str
	}
	return "EpygiInRTPPacketsLost(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiInRTPPacketsLost_Add(p *radius.Packet, value EpygiInRTPPacketsLost) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 205, a)
}

func EpygiInRTPPacketsLost_Get(p *radius.Packet) (value EpygiInRTPPacketsLost) {
	value, _ = EpygiInRTPPacketsLost_Lookup(p)
	return
}

func EpygiInRTPPacketsLost_Gets(p *radius.Packet) (values []EpygiInRTPPacketsLost, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 205) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiInRTPPacketsLost(i))
	}
	return
}

func EpygiInRTPPacketsLost_Lookup(p *radius.Packet) (value EpygiInRTPPacketsLost, err error) {
	a, ok := _Epygi_LookupVendor(p, 205)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiInRTPPacketsLost(i)
	return
}

func EpygiInRTPPacketsLost_Set(p *radius.Packet, value EpygiInRTPPacketsLost) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 205, a)
}

func EpygiInRTPPacketsLost_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 205)
}

type EpygiInRTPPacketsDupl uint32

var EpygiInRTPPacketsDupl_Strings = map[EpygiInRTPPacketsDupl]string{}

func (a EpygiInRTPPacketsDupl) String() string {
	if str, ok := EpygiInRTPPacketsDupl_Strings[a]; ok {
		return str
	}
	return "EpygiInRTPPacketsDupl(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiInRTPPacketsDupl_Add(p *radius.Packet, value EpygiInRTPPacketsDupl) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 206, a)
}

func EpygiInRTPPacketsDupl_Get(p *radius.Packet) (value EpygiInRTPPacketsDupl) {
	value, _ = EpygiInRTPPacketsDupl_Lookup(p)
	return
}

func EpygiInRTPPacketsDupl_Gets(p *radius.Packet) (values []EpygiInRTPPacketsDupl, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 206) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiInRTPPacketsDupl(i))
	}
	return
}

func EpygiInRTPPacketsDupl_Lookup(p *radius.Packet) (value EpygiInRTPPacketsDupl, err error) {
	a, ok := _Epygi_LookupVendor(p, 206)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiInRTPPacketsDupl(i)
	return
}

func EpygiInRTPPacketsDupl_Set(p *radius.Packet, value EpygiInRTPPacketsDupl) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 206, a)
}

func EpygiInRTPPacketsDupl_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 206)
}

type EpygiInRTPJitter uint32

var EpygiInRTPJitter_Strings = map[EpygiInRTPJitter]string{}

func (a EpygiInRTPJitter) String() string {
	if str, ok := EpygiInRTPJitter_Strings[a]; ok {
		return str
	}
	return "EpygiInRTPJitter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiInRTPJitter_Add(p *radius.Packet, value EpygiInRTPJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 207, a)
}

func EpygiInRTPJitter_Get(p *radius.Packet) (value EpygiInRTPJitter) {
	value, _ = EpygiInRTPJitter_Lookup(p)
	return
}

func EpygiInRTPJitter_Gets(p *radius.Packet) (values []EpygiInRTPJitter, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 207) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiInRTPJitter(i))
	}
	return
}

func EpygiInRTPJitter_Lookup(p *radius.Packet) (value EpygiInRTPJitter, err error) {
	a, ok := _Epygi_LookupVendor(p, 207)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiInRTPJitter(i)
	return
}

func EpygiInRTPJitter_Set(p *radius.Packet, value EpygiInRTPJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 207, a)
}

func EpygiInRTPJitter_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 207)
}

type EpygiInRTPLatency uint32

var EpygiInRTPLatency_Strings = map[EpygiInRTPLatency]string{}

func (a EpygiInRTPLatency) String() string {
	if str, ok := EpygiInRTPLatency_Strings[a]; ok {
		return str
	}
	return "EpygiInRTPLatency(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EpygiInRTPLatency_Add(p *radius.Packet, value EpygiInRTPLatency) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_AddVendor(p, 208, a)
}

func EpygiInRTPLatency_Get(p *radius.Packet) (value EpygiInRTPLatency) {
	value, _ = EpygiInRTPLatency_Lookup(p)
	return
}

func EpygiInRTPLatency_Gets(p *radius.Packet) (values []EpygiInRTPLatency, err error) {
	var i uint32
	for _, attr := range _Epygi_GetsVendor(p, 208) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EpygiInRTPLatency(i))
	}
	return
}

func EpygiInRTPLatency_Lookup(p *radius.Packet) (value EpygiInRTPLatency, err error) {
	a, ok := _Epygi_LookupVendor(p, 208)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EpygiInRTPLatency(i)
	return
}

func EpygiInRTPLatency_Set(p *radius.Packet, value EpygiInRTPLatency) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Epygi_SetVendor(p, 208, a)
}

func EpygiInRTPLatency_Del(p *radius.Packet) {
	_Epygi_DelVendor(p, 208)
}
