// Code generated by radius-dict-gen. DO NOT EDIT.

package net

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_NET_VendorID = 177
)

func _NET_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_NET_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _NET_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _NET_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _NET_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _NET_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _NET_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _NET_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _NET_AddVendor(p, typ, attr)
}

func _NET_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _NET_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func NETFwdFlowInRealm_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 11, a)
}

func NETFwdFlowInRealm_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 11, a)
}

func NETFwdFlowInRealm_Get(p *radius.Packet) (value []byte) {
	value, _ = NETFwdFlowInRealm_Lookup(p)
	return
}

func NETFwdFlowInRealm_GetString(p *radius.Packet) (value string) {
	value, _ = NETFwdFlowInRealm_LookupString(p)
	return
}

func NETFwdFlowInRealm_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETFwdFlowInRealm_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETFwdFlowInRealm_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETFwdFlowInRealm_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETFwdFlowInRealm_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 11, a)
}

func NETFwdFlowInRealm_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 11, a)
}

func NETFwdFlowInRealm_Del(p *radius.Packet) {
	_NET_DelVendor(p, 11)
}

func NETFwdFlowInSrcAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 12, a)
}

func NETFwdFlowInSrcAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 12, a)
}

func NETFwdFlowInSrcAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = NETFwdFlowInSrcAddr_Lookup(p)
	return
}

func NETFwdFlowInSrcAddr_GetString(p *radius.Packet) (value string) {
	value, _ = NETFwdFlowInSrcAddr_LookupString(p)
	return
}

func NETFwdFlowInSrcAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETFwdFlowInSrcAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETFwdFlowInSrcAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETFwdFlowInSrcAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETFwdFlowInSrcAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 12, a)
}

func NETFwdFlowInSrcAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 12, a)
}

func NETFwdFlowInSrcAddr_Del(p *radius.Packet) {
	_NET_DelVendor(p, 12)
}

type NETFwdFlowInSrcPort uint32

var NETFwdFlowInSrcPort_Strings = map[NETFwdFlowInSrcPort]string{}

func (a NETFwdFlowInSrcPort) String() string {
	if str, ok := NETFwdFlowInSrcPort_Strings[a]; ok {
		return str
	}
	return "NETFwdFlowInSrcPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETFwdFlowInSrcPort_Add(p *radius.Packet, value NETFwdFlowInSrcPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 13, a)
}

func NETFwdFlowInSrcPort_Get(p *radius.Packet) (value NETFwdFlowInSrcPort) {
	value, _ = NETFwdFlowInSrcPort_Lookup(p)
	return
}

func NETFwdFlowInSrcPort_Gets(p *radius.Packet) (values []NETFwdFlowInSrcPort, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 13) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETFwdFlowInSrcPort(i))
	}
	return
}

func NETFwdFlowInSrcPort_Lookup(p *radius.Packet) (value NETFwdFlowInSrcPort, err error) {
	a, ok := _NET_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETFwdFlowInSrcPort(i)
	return
}

func NETFwdFlowInSrcPort_Set(p *radius.Packet, value NETFwdFlowInSrcPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 13, a)
}

func NETFwdFlowInSrcPort_Del(p *radius.Packet) {
	_NET_DelVendor(p, 13)
}

func NETFwdFlowInDstAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 14, a)
}

func NETFwdFlowInDstAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 14, a)
}

func NETFwdFlowInDstAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = NETFwdFlowInDstAddr_Lookup(p)
	return
}

func NETFwdFlowInDstAddr_GetString(p *radius.Packet) (value string) {
	value, _ = NETFwdFlowInDstAddr_LookupString(p)
	return
}

func NETFwdFlowInDstAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 14) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETFwdFlowInDstAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 14) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETFwdFlowInDstAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETFwdFlowInDstAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETFwdFlowInDstAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 14, a)
}

func NETFwdFlowInDstAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 14, a)
}

func NETFwdFlowInDstAddr_Del(p *radius.Packet) {
	_NET_DelVendor(p, 14)
}

type NETFwdFlowInDstPort uint32

var NETFwdFlowInDstPort_Strings = map[NETFwdFlowInDstPort]string{}

func (a NETFwdFlowInDstPort) String() string {
	if str, ok := NETFwdFlowInDstPort_Strings[a]; ok {
		return str
	}
	return "NETFwdFlowInDstPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETFwdFlowInDstPort_Add(p *radius.Packet, value NETFwdFlowInDstPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 15, a)
}

func NETFwdFlowInDstPort_Get(p *radius.Packet) (value NETFwdFlowInDstPort) {
	value, _ = NETFwdFlowInDstPort_Lookup(p)
	return
}

func NETFwdFlowInDstPort_Gets(p *radius.Packet) (values []NETFwdFlowInDstPort, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 15) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETFwdFlowInDstPort(i))
	}
	return
}

func NETFwdFlowInDstPort_Lookup(p *radius.Packet) (value NETFwdFlowInDstPort, err error) {
	a, ok := _NET_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETFwdFlowInDstPort(i)
	return
}

func NETFwdFlowInDstPort_Set(p *radius.Packet, value NETFwdFlowInDstPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 15, a)
}

func NETFwdFlowInDstPort_Del(p *radius.Packet) {
	_NET_DelVendor(p, 15)
}

func NETFwdFlowOutRealm_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 16, a)
}

func NETFwdFlowOutRealm_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 16, a)
}

func NETFwdFlowOutRealm_Get(p *radius.Packet) (value []byte) {
	value, _ = NETFwdFlowOutRealm_Lookup(p)
	return
}

func NETFwdFlowOutRealm_GetString(p *radius.Packet) (value string) {
	value, _ = NETFwdFlowOutRealm_LookupString(p)
	return
}

func NETFwdFlowOutRealm_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 16) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETFwdFlowOutRealm_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 16) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETFwdFlowOutRealm_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETFwdFlowOutRealm_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETFwdFlowOutRealm_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 16, a)
}

func NETFwdFlowOutRealm_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 16, a)
}

func NETFwdFlowOutRealm_Del(p *radius.Packet) {
	_NET_DelVendor(p, 16)
}

func NETFwdFlowOutSrcAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 17, a)
}

func NETFwdFlowOutSrcAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 17, a)
}

func NETFwdFlowOutSrcAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = NETFwdFlowOutSrcAddr_Lookup(p)
	return
}

func NETFwdFlowOutSrcAddr_GetString(p *radius.Packet) (value string) {
	value, _ = NETFwdFlowOutSrcAddr_LookupString(p)
	return
}

func NETFwdFlowOutSrcAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 17) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETFwdFlowOutSrcAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 17) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETFwdFlowOutSrcAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETFwdFlowOutSrcAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETFwdFlowOutSrcAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 17, a)
}

func NETFwdFlowOutSrcAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 17, a)
}

func NETFwdFlowOutSrcAddr_Del(p *radius.Packet) {
	_NET_DelVendor(p, 17)
}

type NETFwdFlowOutSrcPort uint32

var NETFwdFlowOutSrcPort_Strings = map[NETFwdFlowOutSrcPort]string{}

func (a NETFwdFlowOutSrcPort) String() string {
	if str, ok := NETFwdFlowOutSrcPort_Strings[a]; ok {
		return str
	}
	return "NETFwdFlowOutSrcPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETFwdFlowOutSrcPort_Add(p *radius.Packet, value NETFwdFlowOutSrcPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 18, a)
}

func NETFwdFlowOutSrcPort_Get(p *radius.Packet) (value NETFwdFlowOutSrcPort) {
	value, _ = NETFwdFlowOutSrcPort_Lookup(p)
	return
}

func NETFwdFlowOutSrcPort_Gets(p *radius.Packet) (values []NETFwdFlowOutSrcPort, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 18) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETFwdFlowOutSrcPort(i))
	}
	return
}

func NETFwdFlowOutSrcPort_Lookup(p *radius.Packet) (value NETFwdFlowOutSrcPort, err error) {
	a, ok := _NET_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETFwdFlowOutSrcPort(i)
	return
}

func NETFwdFlowOutSrcPort_Set(p *radius.Packet, value NETFwdFlowOutSrcPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 18, a)
}

func NETFwdFlowOutSrcPort_Del(p *radius.Packet) {
	_NET_DelVendor(p, 18)
}

func NETFwdFlowOutDstAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 19, a)
}

func NETFwdFlowOutDstAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 19, a)
}

func NETFwdFlowOutDstAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = NETFwdFlowOutDstAddr_Lookup(p)
	return
}

func NETFwdFlowOutDstAddr_GetString(p *radius.Packet) (value string) {
	value, _ = NETFwdFlowOutDstAddr_LookupString(p)
	return
}

func NETFwdFlowOutDstAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 19) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETFwdFlowOutDstAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 19) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETFwdFlowOutDstAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETFwdFlowOutDstAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETFwdFlowOutDstAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 19, a)
}

func NETFwdFlowOutDstAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 19, a)
}

func NETFwdFlowOutDstAddr_Del(p *radius.Packet) {
	_NET_DelVendor(p, 19)
}

type NETFwdFlowOutDstPort uint32

var NETFwdFlowOutDstPort_Strings = map[NETFwdFlowOutDstPort]string{}

func (a NETFwdFlowOutDstPort) String() string {
	if str, ok := NETFwdFlowOutDstPort_Strings[a]; ok {
		return str
	}
	return "NETFwdFlowOutDstPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETFwdFlowOutDstPort_Add(p *radius.Packet, value NETFwdFlowOutDstPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 20, a)
}

func NETFwdFlowOutDstPort_Get(p *radius.Packet) (value NETFwdFlowOutDstPort) {
	value, _ = NETFwdFlowOutDstPort_Lookup(p)
	return
}

func NETFwdFlowOutDstPort_Gets(p *radius.Packet) (values []NETFwdFlowOutDstPort, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 20) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETFwdFlowOutDstPort(i))
	}
	return
}

func NETFwdFlowOutDstPort_Lookup(p *radius.Packet) (value NETFwdFlowOutDstPort, err error) {
	a, ok := _NET_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETFwdFlowOutDstPort(i)
	return
}

func NETFwdFlowOutDstPort_Set(p *radius.Packet, value NETFwdFlowOutDstPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 20, a)
}

func NETFwdFlowOutDstPort_Del(p *radius.Packet) {
	_NET_DelVendor(p, 20)
}

func NETBwdFlowInRealm_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 21, a)
}

func NETBwdFlowInRealm_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 21, a)
}

func NETBwdFlowInRealm_Get(p *radius.Packet) (value []byte) {
	value, _ = NETBwdFlowInRealm_Lookup(p)
	return
}

func NETBwdFlowInRealm_GetString(p *radius.Packet) (value string) {
	value, _ = NETBwdFlowInRealm_LookupString(p)
	return
}

func NETBwdFlowInRealm_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 21) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETBwdFlowInRealm_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 21) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETBwdFlowInRealm_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETBwdFlowInRealm_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETBwdFlowInRealm_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 21, a)
}

func NETBwdFlowInRealm_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 21, a)
}

func NETBwdFlowInRealm_Del(p *radius.Packet) {
	_NET_DelVendor(p, 21)
}

func NETBwdFlowInSrcAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 22, a)
}

func NETBwdFlowInSrcAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 22, a)
}

func NETBwdFlowInSrcAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = NETBwdFlowInSrcAddr_Lookup(p)
	return
}

func NETBwdFlowInSrcAddr_GetString(p *radius.Packet) (value string) {
	value, _ = NETBwdFlowInSrcAddr_LookupString(p)
	return
}

func NETBwdFlowInSrcAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 22) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETBwdFlowInSrcAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 22) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETBwdFlowInSrcAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETBwdFlowInSrcAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETBwdFlowInSrcAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 22, a)
}

func NETBwdFlowInSrcAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 22, a)
}

func NETBwdFlowInSrcAddr_Del(p *radius.Packet) {
	_NET_DelVendor(p, 22)
}

type NETBwdFlowInSrcPort uint32

var NETBwdFlowInSrcPort_Strings = map[NETBwdFlowInSrcPort]string{}

func (a NETBwdFlowInSrcPort) String() string {
	if str, ok := NETBwdFlowInSrcPort_Strings[a]; ok {
		return str
	}
	return "NETBwdFlowInSrcPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETBwdFlowInSrcPort_Add(p *radius.Packet, value NETBwdFlowInSrcPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 23, a)
}

func NETBwdFlowInSrcPort_Get(p *radius.Packet) (value NETBwdFlowInSrcPort) {
	value, _ = NETBwdFlowInSrcPort_Lookup(p)
	return
}

func NETBwdFlowInSrcPort_Gets(p *radius.Packet) (values []NETBwdFlowInSrcPort, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 23) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETBwdFlowInSrcPort(i))
	}
	return
}

func NETBwdFlowInSrcPort_Lookup(p *radius.Packet) (value NETBwdFlowInSrcPort, err error) {
	a, ok := _NET_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETBwdFlowInSrcPort(i)
	return
}

func NETBwdFlowInSrcPort_Set(p *radius.Packet, value NETBwdFlowInSrcPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 23, a)
}

func NETBwdFlowInSrcPort_Del(p *radius.Packet) {
	_NET_DelVendor(p, 23)
}

func NETBwdFlowInDstAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 24, a)
}

func NETBwdFlowInDstAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 24, a)
}

func NETBwdFlowInDstAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = NETBwdFlowInDstAddr_Lookup(p)
	return
}

func NETBwdFlowInDstAddr_GetString(p *radius.Packet) (value string) {
	value, _ = NETBwdFlowInDstAddr_LookupString(p)
	return
}

func NETBwdFlowInDstAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 24) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETBwdFlowInDstAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 24) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETBwdFlowInDstAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETBwdFlowInDstAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETBwdFlowInDstAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 24, a)
}

func NETBwdFlowInDstAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 24, a)
}

func NETBwdFlowInDstAddr_Del(p *radius.Packet) {
	_NET_DelVendor(p, 24)
}

type NETBwdFlowInDstPort uint32

var NETBwdFlowInDstPort_Strings = map[NETBwdFlowInDstPort]string{}

func (a NETBwdFlowInDstPort) String() string {
	if str, ok := NETBwdFlowInDstPort_Strings[a]; ok {
		return str
	}
	return "NETBwdFlowInDstPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETBwdFlowInDstPort_Add(p *radius.Packet, value NETBwdFlowInDstPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 25, a)
}

func NETBwdFlowInDstPort_Get(p *radius.Packet) (value NETBwdFlowInDstPort) {
	value, _ = NETBwdFlowInDstPort_Lookup(p)
	return
}

func NETBwdFlowInDstPort_Gets(p *radius.Packet) (values []NETBwdFlowInDstPort, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 25) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETBwdFlowInDstPort(i))
	}
	return
}

func NETBwdFlowInDstPort_Lookup(p *radius.Packet) (value NETBwdFlowInDstPort, err error) {
	a, ok := _NET_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETBwdFlowInDstPort(i)
	return
}

func NETBwdFlowInDstPort_Set(p *radius.Packet, value NETBwdFlowInDstPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 25, a)
}

func NETBwdFlowInDstPort_Del(p *radius.Packet) {
	_NET_DelVendor(p, 25)
}

func NETBwdFlowOutRealm_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 26, a)
}

func NETBwdFlowOutRealm_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 26, a)
}

func NETBwdFlowOutRealm_Get(p *radius.Packet) (value []byte) {
	value, _ = NETBwdFlowOutRealm_Lookup(p)
	return
}

func NETBwdFlowOutRealm_GetString(p *radius.Packet) (value string) {
	value, _ = NETBwdFlowOutRealm_LookupString(p)
	return
}

func NETBwdFlowOutRealm_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 26) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETBwdFlowOutRealm_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 26) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETBwdFlowOutRealm_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETBwdFlowOutRealm_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETBwdFlowOutRealm_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 26, a)
}

func NETBwdFlowOutRealm_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 26, a)
}

func NETBwdFlowOutRealm_Del(p *radius.Packet) {
	_NET_DelVendor(p, 26)
}

func NETBwdFlowOutSrcAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 27, a)
}

func NETBwdFlowOutSrcAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 27, a)
}

func NETBwdFlowOutSrcAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = NETBwdFlowOutSrcAddr_Lookup(p)
	return
}

func NETBwdFlowOutSrcAddr_GetString(p *radius.Packet) (value string) {
	value, _ = NETBwdFlowOutSrcAddr_LookupString(p)
	return
}

func NETBwdFlowOutSrcAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 27) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETBwdFlowOutSrcAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 27) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETBwdFlowOutSrcAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETBwdFlowOutSrcAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETBwdFlowOutSrcAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 27, a)
}

func NETBwdFlowOutSrcAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 27, a)
}

func NETBwdFlowOutSrcAddr_Del(p *radius.Packet) {
	_NET_DelVendor(p, 27)
}

type NETBwdFlowOutSrcPort uint32

var NETBwdFlowOutSrcPort_Strings = map[NETBwdFlowOutSrcPort]string{}

func (a NETBwdFlowOutSrcPort) String() string {
	if str, ok := NETBwdFlowOutSrcPort_Strings[a]; ok {
		return str
	}
	return "NETBwdFlowOutSrcPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETBwdFlowOutSrcPort_Add(p *radius.Packet, value NETBwdFlowOutSrcPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 28, a)
}

func NETBwdFlowOutSrcPort_Get(p *radius.Packet) (value NETBwdFlowOutSrcPort) {
	value, _ = NETBwdFlowOutSrcPort_Lookup(p)
	return
}

func NETBwdFlowOutSrcPort_Gets(p *radius.Packet) (values []NETBwdFlowOutSrcPort, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 28) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETBwdFlowOutSrcPort(i))
	}
	return
}

func NETBwdFlowOutSrcPort_Lookup(p *radius.Packet) (value NETBwdFlowOutSrcPort, err error) {
	a, ok := _NET_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETBwdFlowOutSrcPort(i)
	return
}

func NETBwdFlowOutSrcPort_Set(p *radius.Packet, value NETBwdFlowOutSrcPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 28, a)
}

func NETBwdFlowOutSrcPort_Del(p *radius.Packet) {
	_NET_DelVendor(p, 28)
}

func NETBwdFlowOutDstAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 29, a)
}

func NETBwdFlowOutDstAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 29, a)
}

func NETBwdFlowOutDstAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = NETBwdFlowOutDstAddr_Lookup(p)
	return
}

func NETBwdFlowOutDstAddr_GetString(p *radius.Packet) (value string) {
	value, _ = NETBwdFlowOutDstAddr_LookupString(p)
	return
}

func NETBwdFlowOutDstAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 29) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETBwdFlowOutDstAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 29) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETBwdFlowOutDstAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETBwdFlowOutDstAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETBwdFlowOutDstAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 29, a)
}

func NETBwdFlowOutDstAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 29, a)
}

func NETBwdFlowOutDstAddr_Del(p *radius.Packet) {
	_NET_DelVendor(p, 29)
}

type NETBwdFlowOutDstPort uint32

var NETBwdFlowOutDstPort_Strings = map[NETBwdFlowOutDstPort]string{}

func (a NETBwdFlowOutDstPort) String() string {
	if str, ok := NETBwdFlowOutDstPort_Strings[a]; ok {
		return str
	}
	return "NETBwdFlowOutDstPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETBwdFlowOutDstPort_Add(p *radius.Packet, value NETBwdFlowOutDstPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 30, a)
}

func NETBwdFlowOutDstPort_Get(p *radius.Packet) (value NETBwdFlowOutDstPort) {
	value, _ = NETBwdFlowOutDstPort_Lookup(p)
	return
}

func NETBwdFlowOutDstPort_Gets(p *radius.Packet) (values []NETBwdFlowOutDstPort, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 30) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETBwdFlowOutDstPort(i))
	}
	return
}

func NETBwdFlowOutDstPort_Lookup(p *radius.Packet) (value NETBwdFlowOutDstPort, err error) {
	a, ok := _NET_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETBwdFlowOutDstPort(i)
	return
}

func NETBwdFlowOutDstPort_Set(p *radius.Packet, value NETBwdFlowOutDstPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 30, a)
}

func NETBwdFlowOutDstPort_Del(p *radius.Packet) {
	_NET_DelVendor(p, 30)
}

func NETFwdFlowMediaType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 31, a)
}

func NETFwdFlowMediaType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 31, a)
}

func NETFwdFlowMediaType_Get(p *radius.Packet) (value []byte) {
	value, _ = NETFwdFlowMediaType_Lookup(p)
	return
}

func NETFwdFlowMediaType_GetString(p *radius.Packet) (value string) {
	value, _ = NETFwdFlowMediaType_LookupString(p)
	return
}

func NETFwdFlowMediaType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 31) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETFwdFlowMediaType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 31) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETFwdFlowMediaType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETFwdFlowMediaType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETFwdFlowMediaType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 31, a)
}

func NETFwdFlowMediaType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 31, a)
}

func NETFwdFlowMediaType_Del(p *radius.Packet) {
	_NET_DelVendor(p, 31)
}

type NETFwdFlowPTime uint32

var NETFwdFlowPTime_Strings = map[NETFwdFlowPTime]string{}

func (a NETFwdFlowPTime) String() string {
	if str, ok := NETFwdFlowPTime_Strings[a]; ok {
		return str
	}
	return "NETFwdFlowPTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETFwdFlowPTime_Add(p *radius.Packet, value NETFwdFlowPTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 32, a)
}

func NETFwdFlowPTime_Get(p *radius.Packet) (value NETFwdFlowPTime) {
	value, _ = NETFwdFlowPTime_Lookup(p)
	return
}

func NETFwdFlowPTime_Gets(p *radius.Packet) (values []NETFwdFlowPTime, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 32) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETFwdFlowPTime(i))
	}
	return
}

func NETFwdFlowPTime_Lookup(p *radius.Packet) (value NETFwdFlowPTime, err error) {
	a, ok := _NET_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETFwdFlowPTime(i)
	return
}

func NETFwdFlowPTime_Set(p *radius.Packet, value NETFwdFlowPTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 32, a)
}

func NETFwdFlowPTime_Del(p *radius.Packet) {
	_NET_DelVendor(p, 32)
}

type NETFwdOctets uint32

var NETFwdOctets_Strings = map[NETFwdOctets]string{}

func (a NETFwdOctets) String() string {
	if str, ok := NETFwdOctets_Strings[a]; ok {
		return str
	}
	return "NETFwdOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETFwdOctets_Add(p *radius.Packet, value NETFwdOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 33, a)
}

func NETFwdOctets_Get(p *radius.Packet) (value NETFwdOctets) {
	value, _ = NETFwdOctets_Lookup(p)
	return
}

func NETFwdOctets_Gets(p *radius.Packet) (values []NETFwdOctets, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 33) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETFwdOctets(i))
	}
	return
}

func NETFwdOctets_Lookup(p *radius.Packet) (value NETFwdOctets, err error) {
	a, ok := _NET_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETFwdOctets(i)
	return
}

func NETFwdOctets_Set(p *radius.Packet, value NETFwdOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 33, a)
}

func NETFwdOctets_Del(p *radius.Packet) {
	_NET_DelVendor(p, 33)
}

type NETFwdPackets uint32

var NETFwdPackets_Strings = map[NETFwdPackets]string{}

func (a NETFwdPackets) String() string {
	if str, ok := NETFwdPackets_Strings[a]; ok {
		return str
	}
	return "NETFwdPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETFwdPackets_Add(p *radius.Packet, value NETFwdPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 34, a)
}

func NETFwdPackets_Get(p *radius.Packet) (value NETFwdPackets) {
	value, _ = NETFwdPackets_Lookup(p)
	return
}

func NETFwdPackets_Gets(p *radius.Packet) (values []NETFwdPackets, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 34) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETFwdPackets(i))
	}
	return
}

func NETFwdPackets_Lookup(p *radius.Packet) (value NETFwdPackets, err error) {
	a, ok := _NET_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETFwdPackets(i)
	return
}

func NETFwdPackets_Set(p *radius.Packet, value NETFwdPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 34, a)
}

func NETFwdPackets_Del(p *radius.Packet) {
	_NET_DelVendor(p, 34)
}

type NETFwdRTCPPacketsLost uint32

var NETFwdRTCPPacketsLost_Strings = map[NETFwdRTCPPacketsLost]string{}

func (a NETFwdRTCPPacketsLost) String() string {
	if str, ok := NETFwdRTCPPacketsLost_Strings[a]; ok {
		return str
	}
	return "NETFwdRTCPPacketsLost(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETFwdRTCPPacketsLost_Add(p *radius.Packet, value NETFwdRTCPPacketsLost) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 35, a)
}

func NETFwdRTCPPacketsLost_Get(p *radius.Packet) (value NETFwdRTCPPacketsLost) {
	value, _ = NETFwdRTCPPacketsLost_Lookup(p)
	return
}

func NETFwdRTCPPacketsLost_Gets(p *radius.Packet) (values []NETFwdRTCPPacketsLost, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 35) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETFwdRTCPPacketsLost(i))
	}
	return
}

func NETFwdRTCPPacketsLost_Lookup(p *radius.Packet) (value NETFwdRTCPPacketsLost, err error) {
	a, ok := _NET_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETFwdRTCPPacketsLost(i)
	return
}

func NETFwdRTCPPacketsLost_Set(p *radius.Packet, value NETFwdRTCPPacketsLost) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 35, a)
}

func NETFwdRTCPPacketsLost_Del(p *radius.Packet) {
	_NET_DelVendor(p, 35)
}

type NETFwdRTCPAvgJitter uint32

var NETFwdRTCPAvgJitter_Strings = map[NETFwdRTCPAvgJitter]string{}

func (a NETFwdRTCPAvgJitter) String() string {
	if str, ok := NETFwdRTCPAvgJitter_Strings[a]; ok {
		return str
	}
	return "NETFwdRTCPAvgJitter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETFwdRTCPAvgJitter_Add(p *radius.Packet, value NETFwdRTCPAvgJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 36, a)
}

func NETFwdRTCPAvgJitter_Get(p *radius.Packet) (value NETFwdRTCPAvgJitter) {
	value, _ = NETFwdRTCPAvgJitter_Lookup(p)
	return
}

func NETFwdRTCPAvgJitter_Gets(p *radius.Packet) (values []NETFwdRTCPAvgJitter, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 36) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETFwdRTCPAvgJitter(i))
	}
	return
}

func NETFwdRTCPAvgJitter_Lookup(p *radius.Packet) (value NETFwdRTCPAvgJitter, err error) {
	a, ok := _NET_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETFwdRTCPAvgJitter(i)
	return
}

func NETFwdRTCPAvgJitter_Set(p *radius.Packet, value NETFwdRTCPAvgJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 36, a)
}

func NETFwdRTCPAvgJitter_Del(p *radius.Packet) {
	_NET_DelVendor(p, 36)
}

type NETFwdRTPAvgLatency uint32

var NETFwdRTPAvgLatency_Strings = map[NETFwdRTPAvgLatency]string{}

func (a NETFwdRTPAvgLatency) String() string {
	if str, ok := NETFwdRTPAvgLatency_Strings[a]; ok {
		return str
	}
	return "NETFwdRTPAvgLatency(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETFwdRTPAvgLatency_Add(p *radius.Packet, value NETFwdRTPAvgLatency) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 37, a)
}

func NETFwdRTPAvgLatency_Get(p *radius.Packet) (value NETFwdRTPAvgLatency) {
	value, _ = NETFwdRTPAvgLatency_Lookup(p)
	return
}

func NETFwdRTPAvgLatency_Gets(p *radius.Packet) (values []NETFwdRTPAvgLatency, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 37) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETFwdRTPAvgLatency(i))
	}
	return
}

func NETFwdRTPAvgLatency_Lookup(p *radius.Packet) (value NETFwdRTPAvgLatency, err error) {
	a, ok := _NET_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETFwdRTPAvgLatency(i)
	return
}

func NETFwdRTPAvgLatency_Set(p *radius.Packet, value NETFwdRTPAvgLatency) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 37, a)
}

func NETFwdRTPAvgLatency_Del(p *radius.Packet) {
	_NET_DelVendor(p, 37)
}

type NETFwdRTCPMaxJitter uint32

var NETFwdRTCPMaxJitter_Strings = map[NETFwdRTCPMaxJitter]string{}

func (a NETFwdRTCPMaxJitter) String() string {
	if str, ok := NETFwdRTCPMaxJitter_Strings[a]; ok {
		return str
	}
	return "NETFwdRTCPMaxJitter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETFwdRTCPMaxJitter_Add(p *radius.Packet, value NETFwdRTCPMaxJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 38, a)
}

func NETFwdRTCPMaxJitter_Get(p *radius.Packet) (value NETFwdRTCPMaxJitter) {
	value, _ = NETFwdRTCPMaxJitter_Lookup(p)
	return
}

func NETFwdRTCPMaxJitter_Gets(p *radius.Packet) (values []NETFwdRTCPMaxJitter, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 38) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETFwdRTCPMaxJitter(i))
	}
	return
}

func NETFwdRTCPMaxJitter_Lookup(p *radius.Packet) (value NETFwdRTCPMaxJitter, err error) {
	a, ok := _NET_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETFwdRTCPMaxJitter(i)
	return
}

func NETFwdRTCPMaxJitter_Set(p *radius.Packet, value NETFwdRTCPMaxJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 38, a)
}

func NETFwdRTCPMaxJitter_Del(p *radius.Packet) {
	_NET_DelVendor(p, 38)
}

type NETFwdRTPMaxLatency uint32

var NETFwdRTPMaxLatency_Strings = map[NETFwdRTPMaxLatency]string{}

func (a NETFwdRTPMaxLatency) String() string {
	if str, ok := NETFwdRTPMaxLatency_Strings[a]; ok {
		return str
	}
	return "NETFwdRTPMaxLatency(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETFwdRTPMaxLatency_Add(p *radius.Packet, value NETFwdRTPMaxLatency) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 39, a)
}

func NETFwdRTPMaxLatency_Get(p *radius.Packet) (value NETFwdRTPMaxLatency) {
	value, _ = NETFwdRTPMaxLatency_Lookup(p)
	return
}

func NETFwdRTPMaxLatency_Gets(p *radius.Packet) (values []NETFwdRTPMaxLatency, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 39) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETFwdRTPMaxLatency(i))
	}
	return
}

func NETFwdRTPMaxLatency_Lookup(p *radius.Packet) (value NETFwdRTPMaxLatency, err error) {
	a, ok := _NET_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETFwdRTPMaxLatency(i)
	return
}

func NETFwdRTPMaxLatency_Set(p *radius.Packet, value NETFwdRTPMaxLatency) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 39, a)
}

func NETFwdRTPMaxLatency_Del(p *radius.Packet) {
	_NET_DelVendor(p, 39)
}

type NETFwdRTPPacketsLost uint32

var NETFwdRTPPacketsLost_Strings = map[NETFwdRTPPacketsLost]string{}

func (a NETFwdRTPPacketsLost) String() string {
	if str, ok := NETFwdRTPPacketsLost_Strings[a]; ok {
		return str
	}
	return "NETFwdRTPPacketsLost(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETFwdRTPPacketsLost_Add(p *radius.Packet, value NETFwdRTPPacketsLost) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 40, a)
}

func NETFwdRTPPacketsLost_Get(p *radius.Packet) (value NETFwdRTPPacketsLost) {
	value, _ = NETFwdRTPPacketsLost_Lookup(p)
	return
}

func NETFwdRTPPacketsLost_Gets(p *radius.Packet) (values []NETFwdRTPPacketsLost, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 40) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETFwdRTPPacketsLost(i))
	}
	return
}

func NETFwdRTPPacketsLost_Lookup(p *radius.Packet) (value NETFwdRTPPacketsLost, err error) {
	a, ok := _NET_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETFwdRTPPacketsLost(i)
	return
}

func NETFwdRTPPacketsLost_Set(p *radius.Packet, value NETFwdRTPPacketsLost) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 40, a)
}

func NETFwdRTPPacketsLost_Del(p *radius.Packet) {
	_NET_DelVendor(p, 40)
}

type NETFwdRTPAvgJitter uint32

var NETFwdRTPAvgJitter_Strings = map[NETFwdRTPAvgJitter]string{}

func (a NETFwdRTPAvgJitter) String() string {
	if str, ok := NETFwdRTPAvgJitter_Strings[a]; ok {
		return str
	}
	return "NETFwdRTPAvgJitter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETFwdRTPAvgJitter_Add(p *radius.Packet, value NETFwdRTPAvgJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 41, a)
}

func NETFwdRTPAvgJitter_Get(p *radius.Packet) (value NETFwdRTPAvgJitter) {
	value, _ = NETFwdRTPAvgJitter_Lookup(p)
	return
}

func NETFwdRTPAvgJitter_Gets(p *radius.Packet) (values []NETFwdRTPAvgJitter, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 41) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETFwdRTPAvgJitter(i))
	}
	return
}

func NETFwdRTPAvgJitter_Lookup(p *radius.Packet) (value NETFwdRTPAvgJitter, err error) {
	a, ok := _NET_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETFwdRTPAvgJitter(i)
	return
}

func NETFwdRTPAvgJitter_Set(p *radius.Packet, value NETFwdRTPAvgJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 41, a)
}

func NETFwdRTPAvgJitter_Del(p *radius.Packet) {
	_NET_DelVendor(p, 41)
}

type NETFwdRTPMaxJitter uint32

var NETFwdRTPMaxJitter_Strings = map[NETFwdRTPMaxJitter]string{}

func (a NETFwdRTPMaxJitter) String() string {
	if str, ok := NETFwdRTPMaxJitter_Strings[a]; ok {
		return str
	}
	return "NETFwdRTPMaxJitter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETFwdRTPMaxJitter_Add(p *radius.Packet, value NETFwdRTPMaxJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 42, a)
}

func NETFwdRTPMaxJitter_Get(p *radius.Packet) (value NETFwdRTPMaxJitter) {
	value, _ = NETFwdRTPMaxJitter_Lookup(p)
	return
}

func NETFwdRTPMaxJitter_Gets(p *radius.Packet) (values []NETFwdRTPMaxJitter, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 42) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETFwdRTPMaxJitter(i))
	}
	return
}

func NETFwdRTPMaxJitter_Lookup(p *radius.Packet) (value NETFwdRTPMaxJitter, err error) {
	a, ok := _NET_LookupVendor(p, 42)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETFwdRTPMaxJitter(i)
	return
}

func NETFwdRTPMaxJitter_Set(p *radius.Packet, value NETFwdRTPMaxJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 42, a)
}

func NETFwdRTPMaxJitter_Del(p *radius.Packet) {
	_NET_DelVendor(p, 42)
}

type NETBwdOctets uint32

var NETBwdOctets_Strings = map[NETBwdOctets]string{}

func (a NETBwdOctets) String() string {
	if str, ok := NETBwdOctets_Strings[a]; ok {
		return str
	}
	return "NETBwdOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETBwdOctets_Add(p *radius.Packet, value NETBwdOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 43, a)
}

func NETBwdOctets_Get(p *radius.Packet) (value NETBwdOctets) {
	value, _ = NETBwdOctets_Lookup(p)
	return
}

func NETBwdOctets_Gets(p *radius.Packet) (values []NETBwdOctets, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 43) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETBwdOctets(i))
	}
	return
}

func NETBwdOctets_Lookup(p *radius.Packet) (value NETBwdOctets, err error) {
	a, ok := _NET_LookupVendor(p, 43)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETBwdOctets(i)
	return
}

func NETBwdOctets_Set(p *radius.Packet, value NETBwdOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 43, a)
}

func NETBwdOctets_Del(p *radius.Packet) {
	_NET_DelVendor(p, 43)
}

type NETBwdPackets uint32

var NETBwdPackets_Strings = map[NETBwdPackets]string{}

func (a NETBwdPackets) String() string {
	if str, ok := NETBwdPackets_Strings[a]; ok {
		return str
	}
	return "NETBwdPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETBwdPackets_Add(p *radius.Packet, value NETBwdPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 44, a)
}

func NETBwdPackets_Get(p *radius.Packet) (value NETBwdPackets) {
	value, _ = NETBwdPackets_Lookup(p)
	return
}

func NETBwdPackets_Gets(p *radius.Packet) (values []NETBwdPackets, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 44) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETBwdPackets(i))
	}
	return
}

func NETBwdPackets_Lookup(p *radius.Packet) (value NETBwdPackets, err error) {
	a, ok := _NET_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETBwdPackets(i)
	return
}

func NETBwdPackets_Set(p *radius.Packet, value NETBwdPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 44, a)
}

func NETBwdPackets_Del(p *radius.Packet) {
	_NET_DelVendor(p, 44)
}

type NETBwdRTCPPacketsLost uint32

var NETBwdRTCPPacketsLost_Strings = map[NETBwdRTCPPacketsLost]string{}

func (a NETBwdRTCPPacketsLost) String() string {
	if str, ok := NETBwdRTCPPacketsLost_Strings[a]; ok {
		return str
	}
	return "NETBwdRTCPPacketsLost(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETBwdRTCPPacketsLost_Add(p *radius.Packet, value NETBwdRTCPPacketsLost) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 45, a)
}

func NETBwdRTCPPacketsLost_Get(p *radius.Packet) (value NETBwdRTCPPacketsLost) {
	value, _ = NETBwdRTCPPacketsLost_Lookup(p)
	return
}

func NETBwdRTCPPacketsLost_Gets(p *radius.Packet) (values []NETBwdRTCPPacketsLost, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 45) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETBwdRTCPPacketsLost(i))
	}
	return
}

func NETBwdRTCPPacketsLost_Lookup(p *radius.Packet) (value NETBwdRTCPPacketsLost, err error) {
	a, ok := _NET_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETBwdRTCPPacketsLost(i)
	return
}

func NETBwdRTCPPacketsLost_Set(p *radius.Packet, value NETBwdRTCPPacketsLost) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 45, a)
}

func NETBwdRTCPPacketsLost_Del(p *radius.Packet) {
	_NET_DelVendor(p, 45)
}

type NETBwdRTCPAvgJitter uint32

var NETBwdRTCPAvgJitter_Strings = map[NETBwdRTCPAvgJitter]string{}

func (a NETBwdRTCPAvgJitter) String() string {
	if str, ok := NETBwdRTCPAvgJitter_Strings[a]; ok {
		return str
	}
	return "NETBwdRTCPAvgJitter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETBwdRTCPAvgJitter_Add(p *radius.Packet, value NETBwdRTCPAvgJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 46, a)
}

func NETBwdRTCPAvgJitter_Get(p *radius.Packet) (value NETBwdRTCPAvgJitter) {
	value, _ = NETBwdRTCPAvgJitter_Lookup(p)
	return
}

func NETBwdRTCPAvgJitter_Gets(p *radius.Packet) (values []NETBwdRTCPAvgJitter, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 46) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETBwdRTCPAvgJitter(i))
	}
	return
}

func NETBwdRTCPAvgJitter_Lookup(p *radius.Packet) (value NETBwdRTCPAvgJitter, err error) {
	a, ok := _NET_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETBwdRTCPAvgJitter(i)
	return
}

func NETBwdRTCPAvgJitter_Set(p *radius.Packet, value NETBwdRTCPAvgJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 46, a)
}

func NETBwdRTCPAvgJitter_Del(p *radius.Packet) {
	_NET_DelVendor(p, 46)
}

type NETBwdRTPAvgLatency uint32

var NETBwdRTPAvgLatency_Strings = map[NETBwdRTPAvgLatency]string{}

func (a NETBwdRTPAvgLatency) String() string {
	if str, ok := NETBwdRTPAvgLatency_Strings[a]; ok {
		return str
	}
	return "NETBwdRTPAvgLatency(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETBwdRTPAvgLatency_Add(p *radius.Packet, value NETBwdRTPAvgLatency) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 47, a)
}

func NETBwdRTPAvgLatency_Get(p *radius.Packet) (value NETBwdRTPAvgLatency) {
	value, _ = NETBwdRTPAvgLatency_Lookup(p)
	return
}

func NETBwdRTPAvgLatency_Gets(p *radius.Packet) (values []NETBwdRTPAvgLatency, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 47) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETBwdRTPAvgLatency(i))
	}
	return
}

func NETBwdRTPAvgLatency_Lookup(p *radius.Packet) (value NETBwdRTPAvgLatency, err error) {
	a, ok := _NET_LookupVendor(p, 47)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETBwdRTPAvgLatency(i)
	return
}

func NETBwdRTPAvgLatency_Set(p *radius.Packet, value NETBwdRTPAvgLatency) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 47, a)
}

func NETBwdRTPAvgLatency_Del(p *radius.Packet) {
	_NET_DelVendor(p, 47)
}

type NETBwdRTCPMaxJitter uint32

var NETBwdRTCPMaxJitter_Strings = map[NETBwdRTCPMaxJitter]string{}

func (a NETBwdRTCPMaxJitter) String() string {
	if str, ok := NETBwdRTCPMaxJitter_Strings[a]; ok {
		return str
	}
	return "NETBwdRTCPMaxJitter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETBwdRTCPMaxJitter_Add(p *radius.Packet, value NETBwdRTCPMaxJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 48, a)
}

func NETBwdRTCPMaxJitter_Get(p *radius.Packet) (value NETBwdRTCPMaxJitter) {
	value, _ = NETBwdRTCPMaxJitter_Lookup(p)
	return
}

func NETBwdRTCPMaxJitter_Gets(p *radius.Packet) (values []NETBwdRTCPMaxJitter, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 48) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETBwdRTCPMaxJitter(i))
	}
	return
}

func NETBwdRTCPMaxJitter_Lookup(p *radius.Packet) (value NETBwdRTCPMaxJitter, err error) {
	a, ok := _NET_LookupVendor(p, 48)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETBwdRTCPMaxJitter(i)
	return
}

func NETBwdRTCPMaxJitter_Set(p *radius.Packet, value NETBwdRTCPMaxJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 48, a)
}

func NETBwdRTCPMaxJitter_Del(p *radius.Packet) {
	_NET_DelVendor(p, 48)
}

type NETBwdRTPMaxLatency uint32

var NETBwdRTPMaxLatency_Strings = map[NETBwdRTPMaxLatency]string{}

func (a NETBwdRTPMaxLatency) String() string {
	if str, ok := NETBwdRTPMaxLatency_Strings[a]; ok {
		return str
	}
	return "NETBwdRTPMaxLatency(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETBwdRTPMaxLatency_Add(p *radius.Packet, value NETBwdRTPMaxLatency) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 49, a)
}

func NETBwdRTPMaxLatency_Get(p *radius.Packet) (value NETBwdRTPMaxLatency) {
	value, _ = NETBwdRTPMaxLatency_Lookup(p)
	return
}

func NETBwdRTPMaxLatency_Gets(p *radius.Packet) (values []NETBwdRTPMaxLatency, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 49) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETBwdRTPMaxLatency(i))
	}
	return
}

func NETBwdRTPMaxLatency_Lookup(p *radius.Packet) (value NETBwdRTPMaxLatency, err error) {
	a, ok := _NET_LookupVendor(p, 49)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETBwdRTPMaxLatency(i)
	return
}

func NETBwdRTPMaxLatency_Set(p *radius.Packet, value NETBwdRTPMaxLatency) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 49, a)
}

func NETBwdRTPMaxLatency_Del(p *radius.Packet) {
	_NET_DelVendor(p, 49)
}

type NETBwdRTPPacketsLost uint32

var NETBwdRTPPacketsLost_Strings = map[NETBwdRTPPacketsLost]string{}

func (a NETBwdRTPPacketsLost) String() string {
	if str, ok := NETBwdRTPPacketsLost_Strings[a]; ok {
		return str
	}
	return "NETBwdRTPPacketsLost(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETBwdRTPPacketsLost_Add(p *radius.Packet, value NETBwdRTPPacketsLost) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 50, a)
}

func NETBwdRTPPacketsLost_Get(p *radius.Packet) (value NETBwdRTPPacketsLost) {
	value, _ = NETBwdRTPPacketsLost_Lookup(p)
	return
}

func NETBwdRTPPacketsLost_Gets(p *radius.Packet) (values []NETBwdRTPPacketsLost, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 50) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETBwdRTPPacketsLost(i))
	}
	return
}

func NETBwdRTPPacketsLost_Lookup(p *radius.Packet) (value NETBwdRTPPacketsLost, err error) {
	a, ok := _NET_LookupVendor(p, 50)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETBwdRTPPacketsLost(i)
	return
}

func NETBwdRTPPacketsLost_Set(p *radius.Packet, value NETBwdRTPPacketsLost) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 50, a)
}

func NETBwdRTPPacketsLost_Del(p *radius.Packet) {
	_NET_DelVendor(p, 50)
}

type NETBwdRTPAvgJitter uint32

var NETBwdRTPAvgJitter_Strings = map[NETBwdRTPAvgJitter]string{}

func (a NETBwdRTPAvgJitter) String() string {
	if str, ok := NETBwdRTPAvgJitter_Strings[a]; ok {
		return str
	}
	return "NETBwdRTPAvgJitter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETBwdRTPAvgJitter_Add(p *radius.Packet, value NETBwdRTPAvgJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 51, a)
}

func NETBwdRTPAvgJitter_Get(p *radius.Packet) (value NETBwdRTPAvgJitter) {
	value, _ = NETBwdRTPAvgJitter_Lookup(p)
	return
}

func NETBwdRTPAvgJitter_Gets(p *radius.Packet) (values []NETBwdRTPAvgJitter, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 51) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETBwdRTPAvgJitter(i))
	}
	return
}

func NETBwdRTPAvgJitter_Lookup(p *radius.Packet) (value NETBwdRTPAvgJitter, err error) {
	a, ok := _NET_LookupVendor(p, 51)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETBwdRTPAvgJitter(i)
	return
}

func NETBwdRTPAvgJitter_Set(p *radius.Packet, value NETBwdRTPAvgJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 51, a)
}

func NETBwdRTPAvgJitter_Del(p *radius.Packet) {
	_NET_DelVendor(p, 51)
}

type NETBwdRTPMaxJitter uint32

var NETBwdRTPMaxJitter_Strings = map[NETBwdRTPMaxJitter]string{}

func (a NETBwdRTPMaxJitter) String() string {
	if str, ok := NETBwdRTPMaxJitter_Strings[a]; ok {
		return str
	}
	return "NETBwdRTPMaxJitter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETBwdRTPMaxJitter_Add(p *radius.Packet, value NETBwdRTPMaxJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 52, a)
}

func NETBwdRTPMaxJitter_Get(p *radius.Packet) (value NETBwdRTPMaxJitter) {
	value, _ = NETBwdRTPMaxJitter_Lookup(p)
	return
}

func NETBwdRTPMaxJitter_Gets(p *radius.Packet) (values []NETBwdRTPMaxJitter, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 52) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETBwdRTPMaxJitter(i))
	}
	return
}

func NETBwdRTPMaxJitter_Lookup(p *radius.Packet) (value NETBwdRTPMaxJitter, err error) {
	a, ok := _NET_LookupVendor(p, 52)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETBwdRTPMaxJitter(i)
	return
}

func NETBwdRTPMaxJitter_Set(p *radius.Packet, value NETBwdRTPMaxJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 52, a)
}

func NETBwdRTPMaxJitter_Del(p *radius.Packet) {
	_NET_DelVendor(p, 52)
}

type NETSessionIngressCallId uint32

var NETSessionIngressCallId_Strings = map[NETSessionIngressCallId]string{}

func (a NETSessionIngressCallId) String() string {
	if str, ok := NETSessionIngressCallId_Strings[a]; ok {
		return str
	}
	return "NETSessionIngressCallId(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETSessionIngressCallId_Add(p *radius.Packet, value NETSessionIngressCallId) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 60, a)
}

func NETSessionIngressCallId_Get(p *radius.Packet) (value NETSessionIngressCallId) {
	value, _ = NETSessionIngressCallId_Lookup(p)
	return
}

func NETSessionIngressCallId_Gets(p *radius.Packet) (values []NETSessionIngressCallId, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 60) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETSessionIngressCallId(i))
	}
	return
}

func NETSessionIngressCallId_Lookup(p *radius.Packet) (value NETSessionIngressCallId, err error) {
	a, ok := _NET_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETSessionIngressCallId(i)
	return
}

func NETSessionIngressCallId_Set(p *radius.Packet, value NETSessionIngressCallId) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 60, a)
}

func NETSessionIngressCallId_Del(p *radius.Packet) {
	_NET_DelVendor(p, 60)
}

type NETSessionEgressCallId uint32

var NETSessionEgressCallId_Strings = map[NETSessionEgressCallId]string{}

func (a NETSessionEgressCallId) String() string {
	if str, ok := NETSessionEgressCallId_Strings[a]; ok {
		return str
	}
	return "NETSessionEgressCallId(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETSessionEgressCallId_Add(p *radius.Packet, value NETSessionEgressCallId) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 61, a)
}

func NETSessionEgressCallId_Get(p *radius.Packet) (value NETSessionEgressCallId) {
	value, _ = NETSessionEgressCallId_Lookup(p)
	return
}

func NETSessionEgressCallId_Gets(p *radius.Packet) (values []NETSessionEgressCallId, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 61) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETSessionEgressCallId(i))
	}
	return
}

func NETSessionEgressCallId_Lookup(p *radius.Packet) (value NETSessionEgressCallId, err error) {
	a, ok := _NET_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETSessionEgressCallId(i)
	return
}

func NETSessionEgressCallId_Set(p *radius.Packet, value NETSessionEgressCallId) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 61, a)
}

func NETSessionEgressCallId_Del(p *radius.Packet) {
	_NET_DelVendor(p, 61)
}

type NETSessionGenericID uint32

var NETSessionGenericID_Strings = map[NETSessionGenericID]string{}

func (a NETSessionGenericID) String() string {
	if str, ok := NETSessionGenericID_Strings[a]; ok {
		return str
	}
	return "NETSessionGenericID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETSessionGenericID_Add(p *radius.Packet, value NETSessionGenericID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 62, a)
}

func NETSessionGenericID_Get(p *radius.Packet) (value NETSessionGenericID) {
	value, _ = NETSessionGenericID_Lookup(p)
	return
}

func NETSessionGenericID_Gets(p *radius.Packet) (values []NETSessionGenericID, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 62) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETSessionGenericID(i))
	}
	return
}

func NETSessionGenericID_Lookup(p *radius.Packet) (value NETSessionGenericID, err error) {
	a, ok := _NET_LookupVendor(p, 62)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETSessionGenericID(i)
	return
}

func NETSessionGenericID_Set(p *radius.Packet, value NETSessionGenericID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 62, a)
}

func NETSessionGenericID_Del(p *radius.Packet) {
	_NET_DelVendor(p, 62)
}

type NETRoutingTableNumber uint32

var NETRoutingTableNumber_Strings = map[NETRoutingTableNumber]string{}

func (a NETRoutingTableNumber) String() string {
	if str, ok := NETRoutingTableNumber_Strings[a]; ok {
		return str
	}
	return "NETRoutingTableNumber(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETRoutingTableNumber_Add(p *radius.Packet, value NETRoutingTableNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 63, a)
}

func NETRoutingTableNumber_Get(p *radius.Packet) (value NETRoutingTableNumber) {
	value, _ = NETRoutingTableNumber_Lookup(p)
	return
}

func NETRoutingTableNumber_Gets(p *radius.Packet) (values []NETRoutingTableNumber, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 63) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETRoutingTableNumber(i))
	}
	return
}

func NETRoutingTableNumber_Lookup(p *radius.Packet) (value NETRoutingTableNumber, err error) {
	a, ok := _NET_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETRoutingTableNumber(i)
	return
}

func NETRoutingTableNumber_Set(p *radius.Packet, value NETRoutingTableNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 63, a)
}

func NETRoutingTableNumber_Del(p *radius.Packet) {
	_NET_DelVendor(p, 63)
}

type NETIngressSignalingGroup uint32

var NETIngressSignalingGroup_Strings = map[NETIngressSignalingGroup]string{}

func (a NETIngressSignalingGroup) String() string {
	if str, ok := NETIngressSignalingGroup_Strings[a]; ok {
		return str
	}
	return "NETIngressSignalingGroup(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETIngressSignalingGroup_Add(p *radius.Packet, value NETIngressSignalingGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 64, a)
}

func NETIngressSignalingGroup_Get(p *radius.Packet) (value NETIngressSignalingGroup) {
	value, _ = NETIngressSignalingGroup_Lookup(p)
	return
}

func NETIngressSignalingGroup_Gets(p *radius.Packet) (values []NETIngressSignalingGroup, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 64) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETIngressSignalingGroup(i))
	}
	return
}

func NETIngressSignalingGroup_Lookup(p *radius.Packet) (value NETIngressSignalingGroup, err error) {
	a, ok := _NET_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETIngressSignalingGroup(i)
	return
}

func NETIngressSignalingGroup_Set(p *radius.Packet, value NETIngressSignalingGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 64, a)
}

func NETIngressSignalingGroup_Del(p *radius.Packet) {
	_NET_DelVendor(p, 64)
}

type NETEgressSignalingGroup uint32

var NETEgressSignalingGroup_Strings = map[NETEgressSignalingGroup]string{}

func (a NETEgressSignalingGroup) String() string {
	if str, ok := NETEgressSignalingGroup_Strings[a]; ok {
		return str
	}
	return "NETEgressSignalingGroup(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETEgressSignalingGroup_Add(p *radius.Packet, value NETEgressSignalingGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 65, a)
}

func NETEgressSignalingGroup_Get(p *radius.Packet) (value NETEgressSignalingGroup) {
	value, _ = NETEgressSignalingGroup_Lookup(p)
	return
}

func NETEgressSignalingGroup_Gets(p *radius.Packet) (values []NETEgressSignalingGroup, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 65) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETEgressSignalingGroup(i))
	}
	return
}

func NETEgressSignalingGroup_Lookup(p *radius.Packet) (value NETEgressSignalingGroup, err error) {
	a, ok := _NET_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETEgressSignalingGroup(i)
	return
}

func NETEgressSignalingGroup_Set(p *radius.Packet, value NETEgressSignalingGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 65, a)
}

func NETEgressSignalingGroup_Del(p *radius.Packet) {
	_NET_DelVendor(p, 65)
}

func NETPrimaryRoutingNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 66, a)
}

func NETPrimaryRoutingNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 66, a)
}

func NETPrimaryRoutingNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = NETPrimaryRoutingNumber_Lookup(p)
	return
}

func NETPrimaryRoutingNumber_GetString(p *radius.Packet) (value string) {
	value, _ = NETPrimaryRoutingNumber_LookupString(p)
	return
}

func NETPrimaryRoutingNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 66) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETPrimaryRoutingNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 66) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETPrimaryRoutingNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 66)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETPrimaryRoutingNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 66)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETPrimaryRoutingNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 66, a)
}

func NETPrimaryRoutingNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 66, a)
}

func NETPrimaryRoutingNumber_Del(p *radius.Packet) {
	_NET_DelVendor(p, 66)
}

func NETEgressFinalRoutingNum_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 67, a)
}

func NETEgressFinalRoutingNum_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 67, a)
}

func NETEgressFinalRoutingNum_Get(p *radius.Packet) (value []byte) {
	value, _ = NETEgressFinalRoutingNum_Lookup(p)
	return
}

func NETEgressFinalRoutingNum_GetString(p *radius.Packet) (value string) {
	value, _ = NETEgressFinalRoutingNum_LookupString(p)
	return
}

func NETEgressFinalRoutingNum_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 67) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETEgressFinalRoutingNum_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 67) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETEgressFinalRoutingNum_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 67)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETEgressFinalRoutingNum_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 67)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETEgressFinalRoutingNum_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 67, a)
}

func NETEgressFinalRoutingNum_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 67, a)
}

func NETEgressFinalRoutingNum_Del(p *radius.Packet) {
	_NET_DelVendor(p, 67)
}

type NETIngressChannelNumber uint32

var NETIngressChannelNumber_Strings = map[NETIngressChannelNumber]string{}

func (a NETIngressChannelNumber) String() string {
	if str, ok := NETIngressChannelNumber_Strings[a]; ok {
		return str
	}
	return "NETIngressChannelNumber(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETIngressChannelNumber_Add(p *radius.Packet, value NETIngressChannelNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 68, a)
}

func NETIngressChannelNumber_Get(p *radius.Packet) (value NETIngressChannelNumber) {
	value, _ = NETIngressChannelNumber_Lookup(p)
	return
}

func NETIngressChannelNumber_Gets(p *radius.Packet) (values []NETIngressChannelNumber, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 68) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETIngressChannelNumber(i))
	}
	return
}

func NETIngressChannelNumber_Lookup(p *radius.Packet) (value NETIngressChannelNumber, err error) {
	a, ok := _NET_LookupVendor(p, 68)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETIngressChannelNumber(i)
	return
}

func NETIngressChannelNumber_Set(p *radius.Packet, value NETIngressChannelNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 68, a)
}

func NETIngressChannelNumber_Del(p *radius.Packet) {
	_NET_DelVendor(p, 68)
}

type NETEgressChannelNumber uint32

var NETEgressChannelNumber_Strings = map[NETEgressChannelNumber]string{}

func (a NETEgressChannelNumber) String() string {
	if str, ok := NETEgressChannelNumber_Strings[a]; ok {
		return str
	}
	return "NETEgressChannelNumber(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETEgressChannelNumber_Add(p *radius.Packet, value NETEgressChannelNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 69, a)
}

func NETEgressChannelNumber_Get(p *radius.Packet) (value NETEgressChannelNumber) {
	value, _ = NETEgressChannelNumber_Lookup(p)
	return
}

func NETEgressChannelNumber_Gets(p *radius.Packet) (values []NETEgressChannelNumber, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 69) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETEgressChannelNumber(i))
	}
	return
}

func NETEgressChannelNumber_Lookup(p *radius.Packet) (value NETEgressChannelNumber, err error) {
	a, ok := _NET_LookupVendor(p, 69)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETEgressChannelNumber(i)
	return
}

func NETEgressChannelNumber_Set(p *radius.Packet, value NETEgressChannelNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 69, a)
}

func NETEgressChannelNumber_Del(p *radius.Packet) {
	_NET_DelVendor(p, 69)
}

type NETCallType uint32

var NETCallType_Strings = map[NETCallType]string{}

func (a NETCallType) String() string {
	if str, ok := NETCallType_Strings[a]; ok {
		return str
	}
	return "NETCallType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETCallType_Add(p *radius.Packet, value NETCallType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 70, a)
}

func NETCallType_Get(p *radius.Packet) (value NETCallType) {
	value, _ = NETCallType_Lookup(p)
	return
}

func NETCallType_Gets(p *radius.Packet) (values []NETCallType, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 70) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETCallType(i))
	}
	return
}

func NETCallType_Lookup(p *radius.Packet) (value NETCallType, err error) {
	a, ok := _NET_LookupVendor(p, 70)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETCallType(i)
	return
}

func NETCallType_Set(p *radius.Packet, value NETCallType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 70, a)
}

func NETCallType_Del(p *radius.Packet) {
	_NET_DelVendor(p, 70)
}

type NETCallOrigin uint32

var NETCallOrigin_Strings = map[NETCallOrigin]string{}

func (a NETCallOrigin) String() string {
	if str, ok := NETCallOrigin_Strings[a]; ok {
		return str
	}
	return "NETCallOrigin(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETCallOrigin_Add(p *radius.Packet, value NETCallOrigin) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 71, a)
}

func NETCallOrigin_Get(p *radius.Packet) (value NETCallOrigin) {
	value, _ = NETCallOrigin_Lookup(p)
	return
}

func NETCallOrigin_Gets(p *radius.Packet) (values []NETCallOrigin, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 71) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETCallOrigin(i))
	}
	return
}

func NETCallOrigin_Lookup(p *radius.Packet) (value NETCallOrigin, err error) {
	a, ok := _NET_LookupVendor(p, 71)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETCallOrigin(i)
	return
}

func NETCallOrigin_Set(p *radius.Packet, value NETCallOrigin) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 71, a)
}

func NETCallOrigin_Del(p *radius.Packet) {
	_NET_DelVendor(p, 71)
}

func NETCallingNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 72, a)
}

func NETCallingNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 72, a)
}

func NETCallingNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = NETCallingNumber_Lookup(p)
	return
}

func NETCallingNumber_GetString(p *radius.Packet) (value string) {
	value, _ = NETCallingNumber_LookupString(p)
	return
}

func NETCallingNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 72) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETCallingNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 72) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETCallingNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 72)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETCallingNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 72)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETCallingNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 72, a)
}

func NETCallingNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 72, a)
}

func NETCallingNumber_Del(p *radius.Packet) {
	_NET_DelVendor(p, 72)
}

func NETCalledNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 73, a)
}

func NETCalledNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 73, a)
}

func NETCalledNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = NETCalledNumber_Lookup(p)
	return
}

func NETCalledNumber_GetString(p *radius.Packet) (value string) {
	value, _ = NETCalledNumber_LookupString(p)
	return
}

func NETCalledNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 73) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETCalledNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 73) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETCalledNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETCalledNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETCalledNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 73, a)
}

func NETCalledNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 73, a)
}

func NETCalledNumber_Del(p *radius.Packet) {
	_NET_DelVendor(p, 73)
}

func NETCallingName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 74, a)
}

func NETCallingName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 74, a)
}

func NETCallingName_Get(p *radius.Packet) (value []byte) {
	value, _ = NETCallingName_Lookup(p)
	return
}

func NETCallingName_GetString(p *radius.Packet) (value string) {
	value, _ = NETCallingName_LookupString(p)
	return
}

func NETCallingName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 74) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETCallingName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 74) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETCallingName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 74)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETCallingName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 74)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETCallingName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 74, a)
}

func NETCallingName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 74, a)
}

func NETCallingName_Del(p *radius.Packet) {
	_NET_DelVendor(p, 74)
}

type NETDisconnectCause uint32

var NETDisconnectCause_Strings = map[NETDisconnectCause]string{}

func (a NETDisconnectCause) String() string {
	if str, ok := NETDisconnectCause_Strings[a]; ok {
		return str
	}
	return "NETDisconnectCause(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETDisconnectCause_Add(p *radius.Packet, value NETDisconnectCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 75, a)
}

func NETDisconnectCause_Get(p *radius.Packet) (value NETDisconnectCause) {
	value, _ = NETDisconnectCause_Lookup(p)
	return
}

func NETDisconnectCause_Gets(p *radius.Packet) (values []NETDisconnectCause, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 75) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETDisconnectCause(i))
	}
	return
}

func NETDisconnectCause_Lookup(p *radius.Packet) (value NETDisconnectCause, err error) {
	a, ok := _NET_LookupVendor(p, 75)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETDisconnectCause(i)
	return
}

func NETDisconnectCause_Set(p *radius.Packet, value NETDisconnectCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 75, a)
}

func NETDisconnectCause_Del(p *radius.Packet) {
	_NET_DelVendor(p, 75)
}

type NETAbortCause uint32

var NETAbortCause_Strings = map[NETAbortCause]string{}

func (a NETAbortCause) String() string {
	if str, ok := NETAbortCause_Strings[a]; ok {
		return str
	}
	return "NETAbortCause(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETAbortCause_Add(p *radius.Packet, value NETAbortCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 76, a)
}

func NETAbortCause_Get(p *radius.Packet) (value NETAbortCause) {
	value, _ = NETAbortCause_Lookup(p)
	return
}

func NETAbortCause_Gets(p *radius.Packet) (values []NETAbortCause, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 76) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETAbortCause(i))
	}
	return
}

func NETAbortCause_Lookup(p *radius.Packet) (value NETAbortCause, err error) {
	a, ok := _NET_LookupVendor(p, 76)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETAbortCause(i)
	return
}

func NETAbortCause_Set(p *radius.Packet, value NETAbortCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 76, a)
}

func NETAbortCause_Del(p *radius.Packet) {
	_NET_DelVendor(p, 76)
}

func NETIngressChannelID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 77, a)
}

func NETIngressChannelID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 77, a)
}

func NETIngressChannelID_Get(p *radius.Packet) (value []byte) {
	value, _ = NETIngressChannelID_Lookup(p)
	return
}

func NETIngressChannelID_GetString(p *radius.Packet) (value string) {
	value, _ = NETIngressChannelID_LookupString(p)
	return
}

func NETIngressChannelID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 77) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETIngressChannelID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 77) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETIngressChannelID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 77)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETIngressChannelID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 77)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETIngressChannelID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 77, a)
}

func NETIngressChannelID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 77, a)
}

func NETIngressChannelID_Del(p *radius.Packet) {
	_NET_DelVendor(p, 77)
}

func NETEgressChannelID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 78, a)
}

func NETEgressChannelID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 78, a)
}

func NETEgressChannelID_Get(p *radius.Packet) (value []byte) {
	value, _ = NETEgressChannelID_Lookup(p)
	return
}

func NETEgressChannelID_GetString(p *radius.Packet) (value string) {
	value, _ = NETEgressChannelID_LookupString(p)
	return
}

func NETEgressChannelID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 78) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETEgressChannelID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 78) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETEgressChannelID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 78)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETEgressChannelID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 78)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETEgressChannelID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 78, a)
}

func NETEgressChannelID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 78, a)
}

func NETEgressChannelID_Del(p *radius.Packet) {
	_NET_DelVendor(p, 78)
}

func NETCallPriority_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 79, a)
}

func NETCallPriority_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 79, a)
}

func NETCallPriority_Get(p *radius.Packet) (value []byte) {
	value, _ = NETCallPriority_Lookup(p)
	return
}

func NETCallPriority_GetString(p *radius.Packet) (value string) {
	value, _ = NETCallPriority_LookupString(p)
	return
}

func NETCallPriority_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 79) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETCallPriority_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 79) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETCallPriority_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 79)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETCallPriority_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 79)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETCallPriority_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 79, a)
}

func NETCallPriority_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 79, a)
}

func NETCallPriority_Del(p *radius.Packet) {
	_NET_DelVendor(p, 79)
}

func NETCallNumberType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 90, a)
}

func NETCallNumberType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 90, a)
}

func NETCallNumberType_Get(p *radius.Packet) (value []byte) {
	value, _ = NETCallNumberType_Lookup(p)
	return
}

func NETCallNumberType_GetString(p *radius.Packet) (value string) {
	value, _ = NETCallNumberType_LookupString(p)
	return
}

func NETCallNumberType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 90) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETCallNumberType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 90) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETCallNumberType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 90)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETCallNumberType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 90)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETCallNumberType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 90, a)
}

func NETCallNumberType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 90, a)
}

func NETCallNumberType_Del(p *radius.Packet) {
	_NET_DelVendor(p, 90)
}

func NETCallPlan_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 91, a)
}

func NETCallPlan_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 91, a)
}

func NETCallPlan_Get(p *radius.Packet) (value []byte) {
	value, _ = NETCallPlan_Lookup(p)
	return
}

func NETCallPlan_GetString(p *radius.Packet) (value string) {
	value, _ = NETCallPlan_LookupString(p)
	return
}

func NETCallPlan_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 91) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETCallPlan_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 91) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETCallPlan_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETCallPlan_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETCallPlan_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 91, a)
}

func NETCallPlan_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 91, a)
}

func NETCallPlan_Del(p *radius.Packet) {
	_NET_DelVendor(p, 91)
}

func NETOriginalCalledNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 92, a)
}

func NETOriginalCalledNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 92, a)
}

func NETOriginalCalledNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = NETOriginalCalledNumber_Lookup(p)
	return
}

func NETOriginalCalledNumber_GetString(p *radius.Packet) (value string) {
	value, _ = NETOriginalCalledNumber_LookupString(p)
	return
}

func NETOriginalCalledNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 92) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETOriginalCalledNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 92) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETOriginalCalledNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 92)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETOriginalCalledNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 92)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETOriginalCalledNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 92, a)
}

func NETOriginalCalledNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 92, a)
}

func NETOriginalCalledNumber_Del(p *radius.Packet) {
	_NET_DelVendor(p, 92)
}

func NETOriginalCalledType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 93, a)
}

func NETOriginalCalledType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 93, a)
}

func NETOriginalCalledType_Get(p *radius.Packet) (value []byte) {
	value, _ = NETOriginalCalledType_Lookup(p)
	return
}

func NETOriginalCalledType_GetString(p *radius.Packet) (value string) {
	value, _ = NETOriginalCalledType_LookupString(p)
	return
}

func NETOriginalCalledType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 93) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETOriginalCalledType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 93) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETOriginalCalledType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 93)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETOriginalCalledType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 93)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETOriginalCalledType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 93, a)
}

func NETOriginalCalledType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 93, a)
}

func NETOriginalCalledType_Del(p *radius.Packet) {
	_NET_DelVendor(p, 93)
}

func NETOriginalCalledPlan_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 94, a)
}

func NETOriginalCalledPlan_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 94, a)
}

func NETOriginalCalledPlan_Get(p *radius.Packet) (value []byte) {
	value, _ = NETOriginalCalledPlan_Lookup(p)
	return
}

func NETOriginalCalledPlan_GetString(p *radius.Packet) (value string) {
	value, _ = NETOriginalCalledPlan_LookupString(p)
	return
}

func NETOriginalCalledPlan_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 94) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETOriginalCalledPlan_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 94) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETOriginalCalledPlan_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 94)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETOriginalCalledPlan_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 94)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETOriginalCalledPlan_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 94, a)
}

func NETOriginalCalledPlan_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 94, a)
}

func NETOriginalCalledPlan_Del(p *radius.Packet) {
	_NET_DelVendor(p, 94)
}

func NETCalledName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 95, a)
}

func NETCalledName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 95, a)
}

func NETCalledName_Get(p *radius.Packet) (value []byte) {
	value, _ = NETCalledName_Lookup(p)
	return
}

func NETCalledName_GetString(p *radius.Packet) (value string) {
	value, _ = NETCalledName_LookupString(p)
	return
}

func NETCalledName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 95) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETCalledName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 95) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETCalledName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 95)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETCalledName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 95)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETCalledName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 95, a)
}

func NETCalledName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 95, a)
}

func NETCalledName_Del(p *radius.Packet) {
	_NET_DelVendor(p, 95)
}

func NETNamespace_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 96, a)
}

func NETNamespace_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 96, a)
}

func NETNamespace_Get(p *radius.Packet) (value []byte) {
	value, _ = NETNamespace_Lookup(p)
	return
}

func NETNamespace_GetString(p *radius.Packet) (value string) {
	value, _ = NETNamespace_LookupString(p)
	return
}

func NETNamespace_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 96) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETNamespace_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 96) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETNamespace_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 96)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETNamespace_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 96)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETNamespace_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 96, a)
}

func NETNamespace_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 96, a)
}

func NETNamespace_Del(p *radius.Packet) {
	_NET_DelVendor(p, 96)
}

func NETPrecedence_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 97, a)
}

func NETPrecedence_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 97, a)
}

func NETPrecedence_Get(p *radius.Packet) (value []byte) {
	value, _ = NETPrecedence_Lookup(p)
	return
}

func NETPrecedence_GetString(p *radius.Packet) (value string) {
	value, _ = NETPrecedence_LookupString(p)
	return
}

func NETPrecedence_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 97) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETPrecedence_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 97) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETPrecedence_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 97)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETPrecedence_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 97)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETPrecedence_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 97, a)
}

func NETPrecedence_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 97, a)
}

func NETPrecedence_Del(p *radius.Packet) {
	_NET_DelVendor(p, 97)
}

func NETPresentation_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 98, a)
}

func NETPresentation_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 98, a)
}

func NETPresentation_Get(p *radius.Packet) (value []byte) {
	value, _ = NETPresentation_Lookup(p)
	return
}

func NETPresentation_GetString(p *radius.Packet) (value string) {
	value, _ = NETPresentation_LookupString(p)
	return
}

func NETPresentation_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 98) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETPresentation_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 98) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETPresentation_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 98)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETPresentation_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 98)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETPresentation_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 98, a)
}

func NETPresentation_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 98, a)
}

func NETPresentation_Del(p *radius.Packet) {
	_NET_DelVendor(p, 98)
}

func NETScreening_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 99, a)
}

func NETScreening_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 99, a)
}

func NETScreening_Get(p *radius.Packet) (value []byte) {
	value, _ = NETScreening_Lookup(p)
	return
}

func NETScreening_GetString(p *radius.Packet) (value string) {
	value, _ = NETScreening_LookupString(p)
	return
}

func NETScreening_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 99) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETScreening_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 99) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETScreening_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 99)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETScreening_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 99)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETScreening_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 99, a)
}

func NETScreening_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 99, a)
}

func NETScreening_Del(p *radius.Packet) {
	_NET_DelVendor(p, 99)
}

func NETTransferCapability_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 100, a)
}

func NETTransferCapability_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 100, a)
}

func NETTransferCapability_Get(p *radius.Packet) (value []byte) {
	value, _ = NETTransferCapability_Lookup(p)
	return
}

func NETTransferCapability_GetString(p *radius.Packet) (value string) {
	value, _ = NETTransferCapability_LookupString(p)
	return
}

func NETTransferCapability_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 100) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETTransferCapability_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 100) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETTransferCapability_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETTransferCapability_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETTransferCapability_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 100, a)
}

func NETTransferCapability_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 100, a)
}

func NETTransferCapability_Del(p *radius.Packet) {
	_NET_DelVendor(p, 100)
}

func NETTransferMode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 101, a)
}

func NETTransferMode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 101, a)
}

func NETTransferMode_Get(p *radius.Packet) (value []byte) {
	value, _ = NETTransferMode_Lookup(p)
	return
}

func NETTransferMode_GetString(p *radius.Packet) (value string) {
	value, _ = NETTransferMode_LookupString(p)
	return
}

func NETTransferMode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 101) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETTransferMode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 101) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETTransferMode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETTransferMode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETTransferMode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 101, a)
}

func NETTransferMode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 101, a)
}

func NETTransferMode_Del(p *radius.Packet) {
	_NET_DelVendor(p, 101)
}

func NETTransferRate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 102, a)
}

func NETTransferRate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 102, a)
}

func NETTransferRate_Get(p *radius.Packet) (value []byte) {
	value, _ = NETTransferRate_Lookup(p)
	return
}

func NETTransferRate_GetString(p *radius.Packet) (value string) {
	value, _ = NETTransferRate_LookupString(p)
	return
}

func NETTransferRate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 102) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETTransferRate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 102) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETTransferRate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETTransferRate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETTransferRate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 102, a)
}

func NETTransferRate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 102, a)
}

func NETTransferRate_Del(p *radius.Packet) {
	_NET_DelVendor(p, 102)
}

func NETUserRate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 103, a)
}

func NETUserRate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 103, a)
}

func NETUserRate_Get(p *radius.Packet) (value []byte) {
	value, _ = NETUserRate_Lookup(p)
	return
}

func NETUserRate_GetString(p *radius.Packet) (value string) {
	value, _ = NETUserRate_LookupString(p)
	return
}

func NETUserRate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 103) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETUserRate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 103) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETUserRate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETUserRate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETUserRate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 103, a)
}

func NETUserRate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 103, a)
}

func NETUserRate_Del(p *radius.Packet) {
	_NET_DelVendor(p, 103)
}

func NETSetupTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 110, a)
}

func NETSetupTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 110, a)
}

func NETSetupTime_Get(p *radius.Packet) (value []byte) {
	value, _ = NETSetupTime_Lookup(p)
	return
}

func NETSetupTime_GetString(p *radius.Packet) (value string) {
	value, _ = NETSetupTime_LookupString(p)
	return
}

func NETSetupTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 110) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETSetupTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 110) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETSetupTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETSetupTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETSetupTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 110, a)
}

func NETSetupTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 110, a)
}

func NETSetupTime_Del(p *radius.Packet) {
	_NET_DelVendor(p, 110)
}

func NETAlertTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 111, a)
}

func NETAlertTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 111, a)
}

func NETAlertTime_Get(p *radius.Packet) (value []byte) {
	value, _ = NETAlertTime_Lookup(p)
	return
}

func NETAlertTime_GetString(p *radius.Packet) (value string) {
	value, _ = NETAlertTime_LookupString(p)
	return
}

func NETAlertTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 111) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETAlertTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 111) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETAlertTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETAlertTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETAlertTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 111, a)
}

func NETAlertTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 111, a)
}

func NETAlertTime_Del(p *radius.Packet) {
	_NET_DelVendor(p, 111)
}

func NETConnectTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 112, a)
}

func NETConnectTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 112, a)
}

func NETConnectTime_Get(p *radius.Packet) (value []byte) {
	value, _ = NETConnectTime_Lookup(p)
	return
}

func NETConnectTime_GetString(p *radius.Packet) (value string) {
	value, _ = NETConnectTime_LookupString(p)
	return
}

func NETConnectTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 112) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETConnectTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 112) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETConnectTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETConnectTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETConnectTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 112, a)
}

func NETConnectTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 112, a)
}

func NETConnectTime_Del(p *radius.Packet) {
	_NET_DelVendor(p, 112)
}

func NETDisconnectTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 113, a)
}

func NETDisconnectTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 113, a)
}

func NETDisconnectTime_Get(p *radius.Packet) (value []byte) {
	value, _ = NETDisconnectTime_Lookup(p)
	return
}

func NETDisconnectTime_GetString(p *radius.Packet) (value string) {
	value, _ = NETDisconnectTime_LookupString(p)
	return
}

func NETDisconnectTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 113) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETDisconnectTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 113) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETDisconnectTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETDisconnectTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETDisconnectTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 113, a)
}

func NETDisconnectTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 113, a)
}

func NETDisconnectTime_Del(p *radius.Packet) {
	_NET_DelVendor(p, 113)
}

func NETInboundSeizeTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 114, a)
}

func NETInboundSeizeTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 114, a)
}

func NETInboundSeizeTime_Get(p *radius.Packet) (value []byte) {
	value, _ = NETInboundSeizeTime_Lookup(p)
	return
}

func NETInboundSeizeTime_GetString(p *radius.Packet) (value string) {
	value, _ = NETInboundSeizeTime_LookupString(p)
	return
}

func NETInboundSeizeTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 114) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETInboundSeizeTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 114) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETInboundSeizeTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETInboundSeizeTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETInboundSeizeTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 114, a)
}

func NETInboundSeizeTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 114, a)
}

func NETInboundSeizeTime_Del(p *radius.Packet) {
	_NET_DelVendor(p, 114)
}

func NETOutboundSeizeTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 115, a)
}

func NETOutboundSeizeTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 115, a)
}

func NETOutboundSeizeTime_Get(p *radius.Packet) (value []byte) {
	value, _ = NETOutboundSeizeTime_Lookup(p)
	return
}

func NETOutboundSeizeTime_GetString(p *radius.Packet) (value string) {
	value, _ = NETOutboundSeizeTime_LookupString(p)
	return
}

func NETOutboundSeizeTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 115) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETOutboundSeizeTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 115) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETOutboundSeizeTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 115)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETOutboundSeizeTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 115)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETOutboundSeizeTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 115, a)
}

func NETOutboundSeizeTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 115, a)
}

func NETOutboundSeizeTime_Del(p *radius.Packet) {
	_NET_DelVendor(p, 115)
}

type NETCallDuration uint32

var NETCallDuration_Strings = map[NETCallDuration]string{}

func (a NETCallDuration) String() string {
	if str, ok := NETCallDuration_Strings[a]; ok {
		return str
	}
	return "NETCallDuration(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETCallDuration_Add(p *radius.Packet, value NETCallDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 116, a)
}

func NETCallDuration_Get(p *radius.Packet) (value NETCallDuration) {
	value, _ = NETCallDuration_Lookup(p)
	return
}

func NETCallDuration_Gets(p *radius.Packet) (values []NETCallDuration, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 116) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETCallDuration(i))
	}
	return
}

func NETCallDuration_Lookup(p *radius.Packet) (value NETCallDuration, err error) {
	a, ok := _NET_LookupVendor(p, 116)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETCallDuration(i)
	return
}

func NETCallDuration_Set(p *radius.Packet, value NETCallDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 116, a)
}

func NETCallDuration_Del(p *radius.Packet) {
	_NET_DelVendor(p, 116)
}

type NETPostDialDelay uint32

var NETPostDialDelay_Strings = map[NETPostDialDelay]string{}

func (a NETPostDialDelay) String() string {
	if str, ok := NETPostDialDelay_Strings[a]; ok {
		return str
	}
	return "NETPostDialDelay(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETPostDialDelay_Add(p *radius.Packet, value NETPostDialDelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 117, a)
}

func NETPostDialDelay_Get(p *radius.Packet) (value NETPostDialDelay) {
	value, _ = NETPostDialDelay_Lookup(p)
	return
}

func NETPostDialDelay_Gets(p *radius.Packet) (values []NETPostDialDelay, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 117) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETPostDialDelay(i))
	}
	return
}

func NETPostDialDelay_Lookup(p *radius.Packet) (value NETPostDialDelay, err error) {
	a, ok := _NET_LookupVendor(p, 117)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETPostDialDelay(i)
	return
}

func NETPostDialDelay_Set(p *radius.Packet, value NETPostDialDelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 117, a)
}

func NETPostDialDelay_Del(p *radius.Packet) {
	_NET_DelVendor(p, 117)
}

type NETDisconnectInitiator uint32

var NETDisconnectInitiator_Strings = map[NETDisconnectInitiator]string{}

func (a NETDisconnectInitiator) String() string {
	if str, ok := NETDisconnectInitiator_Strings[a]; ok {
		return str
	}
	return "NETDisconnectInitiator(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETDisconnectInitiator_Add(p *radius.Packet, value NETDisconnectInitiator) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 118, a)
}

func NETDisconnectInitiator_Get(p *radius.Packet) (value NETDisconnectInitiator) {
	value, _ = NETDisconnectInitiator_Lookup(p)
	return
}

func NETDisconnectInitiator_Gets(p *radius.Packet) (values []NETDisconnectInitiator, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 118) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETDisconnectInitiator(i))
	}
	return
}

func NETDisconnectInitiator_Lookup(p *radius.Packet) (value NETDisconnectInitiator, err error) {
	a, ok := _NET_LookupVendor(p, 118)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETDisconnectInitiator(i)
	return
}

func NETDisconnectInitiator_Set(p *radius.Packet, value NETDisconnectInitiator) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 118, a)
}

func NETDisconnectInitiator_Del(p *radius.Packet) {
	_NET_DelVendor(p, 118)
}

func NETPAssertedID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 130, a)
}

func NETPAssertedID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 130, a)
}

func NETPAssertedID_Get(p *radius.Packet) (value []byte) {
	value, _ = NETPAssertedID_Lookup(p)
	return
}

func NETPAssertedID_GetString(p *radius.Packet) (value string) {
	value, _ = NETPAssertedID_LookupString(p)
	return
}

func NETPAssertedID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 130) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETPAssertedID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 130) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETPAssertedID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 130)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETPAssertedID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 130)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETPAssertedID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 130, a)
}

func NETPAssertedID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 130, a)
}

func NETPAssertedID_Del(p *radius.Packet) {
	_NET_DelVendor(p, 130)
}

func NETSIPDiversion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 131, a)
}

func NETSIPDiversion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 131, a)
}

func NETSIPDiversion_Get(p *radius.Packet) (value []byte) {
	value, _ = NETSIPDiversion_Lookup(p)
	return
}

func NETSIPDiversion_GetString(p *radius.Packet) (value string) {
	value, _ = NETSIPDiversion_LookupString(p)
	return
}

func NETSIPDiversion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 131) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETSIPDiversion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 131) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETSIPDiversion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 131)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETSIPDiversion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 131)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETSIPDiversion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 131, a)
}

func NETSIPDiversion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 131, a)
}

func NETSIPDiversion_Del(p *radius.Packet) {
	_NET_DelVendor(p, 131)
}

func NETIngressLocalAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 132, a)
}

func NETIngressLocalAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 132, a)
}

func NETIngressLocalAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = NETIngressLocalAddr_Lookup(p)
	return
}

func NETIngressLocalAddr_GetString(p *radius.Packet) (value string) {
	value, _ = NETIngressLocalAddr_LookupString(p)
	return
}

func NETIngressLocalAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 132) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETIngressLocalAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 132) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETIngressLocalAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 132)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETIngressLocalAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 132)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETIngressLocalAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 132, a)
}

func NETIngressLocalAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 132, a)
}

func NETIngressLocalAddr_Del(p *radius.Packet) {
	_NET_DelVendor(p, 132)
}

func NETIngressRemoteAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 133, a)
}

func NETIngressRemoteAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 133, a)
}

func NETIngressRemoteAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = NETIngressRemoteAddr_Lookup(p)
	return
}

func NETIngressRemoteAddr_GetString(p *radius.Packet) (value string) {
	value, _ = NETIngressRemoteAddr_LookupString(p)
	return
}

func NETIngressRemoteAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 133) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETIngressRemoteAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 133) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETIngressRemoteAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 133)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETIngressRemoteAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 133)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETIngressRemoteAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 133, a)
}

func NETIngressRemoteAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 133, a)
}

func NETIngressRemoteAddr_Del(p *radius.Packet) {
	_NET_DelVendor(p, 133)
}

func NETEgressLocalAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 134, a)
}

func NETEgressLocalAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 134, a)
}

func NETEgressLocalAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = NETEgressLocalAddr_Lookup(p)
	return
}

func NETEgressLocalAddr_GetString(p *radius.Packet) (value string) {
	value, _ = NETEgressLocalAddr_LookupString(p)
	return
}

func NETEgressLocalAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 134) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETEgressLocalAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 134) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETEgressLocalAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 134)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETEgressLocalAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 134)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETEgressLocalAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 134, a)
}

func NETEgressLocalAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 134, a)
}

func NETEgressLocalAddr_Del(p *radius.Packet) {
	_NET_DelVendor(p, 134)
}

func NETEgressRemoteAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 135, a)
}

func NETEgressRemoteAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 135, a)
}

func NETEgressRemoteAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = NETEgressRemoteAddr_Lookup(p)
	return
}

func NETEgressRemoteAddr_GetString(p *radius.Packet) (value string) {
	value, _ = NETEgressRemoteAddr_LookupString(p)
	return
}

func NETEgressRemoteAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 135) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETEgressRemoteAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 135) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETEgressRemoteAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 135)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETEgressRemoteAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 135)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETEgressRemoteAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 135, a)
}

func NETEgressRemoteAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 135, a)
}

func NETEgressRemoteAddr_Del(p *radius.Packet) {
	_NET_DelVendor(p, 135)
}

type NETIngressNetInterfaceID uint32

var NETIngressNetInterfaceID_Strings = map[NETIngressNetInterfaceID]string{}

func (a NETIngressNetInterfaceID) String() string {
	if str, ok := NETIngressNetInterfaceID_Strings[a]; ok {
		return str
	}
	return "NETIngressNetInterfaceID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETIngressNetInterfaceID_Add(p *radius.Packet, value NETIngressNetInterfaceID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 136, a)
}

func NETIngressNetInterfaceID_Get(p *radius.Packet) (value NETIngressNetInterfaceID) {
	value, _ = NETIngressNetInterfaceID_Lookup(p)
	return
}

func NETIngressNetInterfaceID_Gets(p *radius.Packet) (values []NETIngressNetInterfaceID, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 136) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETIngressNetInterfaceID(i))
	}
	return
}

func NETIngressNetInterfaceID_Lookup(p *radius.Packet) (value NETIngressNetInterfaceID, err error) {
	a, ok := _NET_LookupVendor(p, 136)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETIngressNetInterfaceID(i)
	return
}

func NETIngressNetInterfaceID_Set(p *radius.Packet, value NETIngressNetInterfaceID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 136, a)
}

func NETIngressNetInterfaceID_Del(p *radius.Packet) {
	_NET_DelVendor(p, 136)
}

type NETEgressNetInterfaceID uint32

var NETEgressNetInterfaceID_Strings = map[NETEgressNetInterfaceID]string{}

func (a NETEgressNetInterfaceID) String() string {
	if str, ok := NETEgressNetInterfaceID_Strings[a]; ok {
		return str
	}
	return "NETEgressNetInterfaceID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETEgressNetInterfaceID_Add(p *radius.Packet, value NETEgressNetInterfaceID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 137, a)
}

func NETEgressNetInterfaceID_Get(p *radius.Packet) (value NETEgressNetInterfaceID) {
	value, _ = NETEgressNetInterfaceID_Lookup(p)
	return
}

func NETEgressNetInterfaceID_Gets(p *radius.Packet) (values []NETEgressNetInterfaceID, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 137) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETEgressNetInterfaceID(i))
	}
	return
}

func NETEgressNetInterfaceID_Lookup(p *radius.Packet) (value NETEgressNetInterfaceID, err error) {
	a, ok := _NET_LookupVendor(p, 137)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETEgressNetInterfaceID(i)
	return
}

func NETEgressNetInterfaceID_Set(p *radius.Packet, value NETEgressNetInterfaceID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 137, a)
}

func NETEgressNetInterfaceID_Del(p *radius.Packet) {
	_NET_DelVendor(p, 137)
}

func NETReferCallTransferID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 138, a)
}

func NETReferCallTransferID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 138, a)
}

func NETReferCallTransferID_Get(p *radius.Packet) (value []byte) {
	value, _ = NETReferCallTransferID_Lookup(p)
	return
}

func NETReferCallTransferID_GetString(p *radius.Packet) (value string) {
	value, _ = NETReferCallTransferID_LookupString(p)
	return
}

func NETReferCallTransferID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 138) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETReferCallTransferID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 138) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETReferCallTransferID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 138)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETReferCallTransferID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 138)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETReferCallTransferID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 138, a)
}

func NETReferCallTransferID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 138, a)
}

func NETReferCallTransferID_Del(p *radius.Packet) {
	_NET_DelVendor(p, 138)
}

func NETSessionForkedCallID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 139, a)
}

func NETSessionForkedCallID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 139, a)
}

func NETSessionForkedCallID_Get(p *radius.Packet) (value []byte) {
	value, _ = NETSessionForkedCallID_Lookup(p)
	return
}

func NETSessionForkedCallID_GetString(p *radius.Packet) (value string) {
	value, _ = NETSessionForkedCallID_LookupString(p)
	return
}

func NETSessionForkedCallID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 139) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETSessionForkedCallID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 139) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETSessionForkedCallID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 139)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETSessionForkedCallID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 139)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETSessionForkedCallID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 139, a)
}

func NETSessionForkedCallID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 139, a)
}

func NETSessionForkedCallID_Del(p *radius.Packet) {
	_NET_DelVendor(p, 139)
}

func NETRedirectNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 140, a)
}

func NETRedirectNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 140, a)
}

func NETRedirectNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = NETRedirectNumber_Lookup(p)
	return
}

func NETRedirectNumber_GetString(p *radius.Packet) (value string) {
	value, _ = NETRedirectNumber_LookupString(p)
	return
}

func NETRedirectNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 140) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETRedirectNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 140) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETRedirectNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 140)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETRedirectNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 140)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETRedirectNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 140, a)
}

func NETRedirectNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 140, a)
}

func NETRedirectNumber_Del(p *radius.Packet) {
	_NET_DelVendor(p, 140)
}

func NETRedirectIPAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 141, a)
}

func NETRedirectIPAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 141, a)
}

func NETRedirectIPAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = NETRedirectIPAddress_Lookup(p)
	return
}

func NETRedirectIPAddress_GetString(p *radius.Packet) (value string) {
	value, _ = NETRedirectIPAddress_LookupString(p)
	return
}

func NETRedirectIPAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 141) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETRedirectIPAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 141) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETRedirectIPAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETRedirectIPAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETRedirectIPAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 141, a)
}

func NETRedirectIPAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 141, a)
}

func NETRedirectIPAddress_Del(p *radius.Packet) {
	_NET_DelVendor(p, 141)
}

func NETSessionIngressRealm_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 142, a)
}

func NETSessionIngressRealm_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 142, a)
}

func NETSessionIngressRealm_Get(p *radius.Packet) (value []byte) {
	value, _ = NETSessionIngressRealm_Lookup(p)
	return
}

func NETSessionIngressRealm_GetString(p *radius.Packet) (value string) {
	value, _ = NETSessionIngressRealm_LookupString(p)
	return
}

func NETSessionIngressRealm_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 142) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETSessionIngressRealm_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 142) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETSessionIngressRealm_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 142)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETSessionIngressRealm_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 142)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETSessionIngressRealm_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 142, a)
}

func NETSessionIngressRealm_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 142, a)
}

func NETSessionIngressRealm_Del(p *radius.Packet) {
	_NET_DelVendor(p, 142)
}

func NETSessionEgressRealm_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 143, a)
}

func NETSessionEgressRealm_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 143, a)
}

func NETSessionEgressRealm_Get(p *radius.Packet) (value []byte) {
	value, _ = NETSessionEgressRealm_Lookup(p)
	return
}

func NETSessionEgressRealm_GetString(p *radius.Packet) (value string) {
	value, _ = NETSessionEgressRealm_LookupString(p)
	return
}

func NETSessionEgressRealm_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 143) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETSessionEgressRealm_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 143) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETSessionEgressRealm_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 143)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETSessionEgressRealm_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 143)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETSessionEgressRealm_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 143, a)
}

func NETSessionEgressRealm_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 143, a)
}

func NETSessionEgressRealm_Del(p *radius.Packet) {
	_NET_DelVendor(p, 143)
}

type NETIngressSignalingPortNum uint32

var NETIngressSignalingPortNum_Strings = map[NETIngressSignalingPortNum]string{}

func (a NETIngressSignalingPortNum) String() string {
	if str, ok := NETIngressSignalingPortNum_Strings[a]; ok {
		return str
	}
	return "NETIngressSignalingPortNum(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETIngressSignalingPortNum_Add(p *radius.Packet, value NETIngressSignalingPortNum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 144, a)
}

func NETIngressSignalingPortNum_Get(p *radius.Packet) (value NETIngressSignalingPortNum) {
	value, _ = NETIngressSignalingPortNum_Lookup(p)
	return
}

func NETIngressSignalingPortNum_Gets(p *radius.Packet) (values []NETIngressSignalingPortNum, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 144) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETIngressSignalingPortNum(i))
	}
	return
}

func NETIngressSignalingPortNum_Lookup(p *radius.Packet) (value NETIngressSignalingPortNum, err error) {
	a, ok := _NET_LookupVendor(p, 144)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETIngressSignalingPortNum(i)
	return
}

func NETIngressSignalingPortNum_Set(p *radius.Packet, value NETIngressSignalingPortNum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 144, a)
}

func NETIngressSignalingPortNum_Del(p *radius.Packet) {
	_NET_DelVendor(p, 144)
}

type NETEgressSignalingPortNum uint32

var NETEgressSignalingPortNum_Strings = map[NETEgressSignalingPortNum]string{}

func (a NETEgressSignalingPortNum) String() string {
	if str, ok := NETEgressSignalingPortNum_Strings[a]; ok {
		return str
	}
	return "NETEgressSignalingPortNum(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETEgressSignalingPortNum_Add(p *radius.Packet, value NETEgressSignalingPortNum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 145, a)
}

func NETEgressSignalingPortNum_Get(p *radius.Packet) (value NETEgressSignalingPortNum) {
	value, _ = NETEgressSignalingPortNum_Lookup(p)
	return
}

func NETEgressSignalingPortNum_Gets(p *radius.Packet) (values []NETEgressSignalingPortNum, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 145) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETEgressSignalingPortNum(i))
	}
	return
}

func NETEgressSignalingPortNum_Lookup(p *radius.Packet) (value NETEgressSignalingPortNum, err error) {
	a, ok := _NET_LookupVendor(p, 145)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETEgressSignalingPortNum(i)
	return
}

func NETEgressSignalingPortNum_Set(p *radius.Packet, value NETEgressSignalingPortNum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 145, a)
}

func NETEgressSignalingPortNum_Del(p *radius.Packet) {
	_NET_DelVendor(p, 145)
}

type NETTransportType uint32

var NETTransportType_Strings = map[NETTransportType]string{}

func (a NETTransportType) String() string {
	if str, ok := NETTransportType_Strings[a]; ok {
		return str
	}
	return "NETTransportType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NETTransportType_Add(p *radius.Packet, value NETTransportType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_AddVendor(p, 146, a)
}

func NETTransportType_Get(p *radius.Packet) (value NETTransportType) {
	value, _ = NETTransportType_Lookup(p)
	return
}

func NETTransportType_Gets(p *radius.Packet) (values []NETTransportType, err error) {
	var i uint32
	for _, attr := range _NET_GetsVendor(p, 146) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NETTransportType(i))
	}
	return
}

func NETTransportType_Lookup(p *radius.Packet) (value NETTransportType, err error) {
	a, ok := _NET_LookupVendor(p, 146)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NETTransportType(i)
	return
}

func NETTransportType_Set(p *radius.Packet, value NETTransportType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NET_SetVendor(p, 146, a)
}

func NETTransportType_Del(p *radius.Packet) {
	_NET_DelVendor(p, 146)
}

func NETPPreferredID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 147, a)
}

func NETPPreferredID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 147, a)
}

func NETPPreferredID_Get(p *radius.Packet) (value []byte) {
	value, _ = NETPPreferredID_Lookup(p)
	return
}

func NETPPreferredID_GetString(p *radius.Packet) (value string) {
	value, _ = NETPPreferredID_LookupString(p)
	return
}

func NETPPreferredID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 147) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETPPreferredID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 147) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETPPreferredID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 147)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETPPreferredID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 147)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETPPreferredID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 147, a)
}

func NETPPreferredID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 147, a)
}

func NETPPreferredID_Del(p *radius.Packet) {
	_NET_DelVendor(p, 147)
}

func NETReplacedHeader_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 148, a)
}

func NETReplacedHeader_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 148, a)
}

func NETReplacedHeader_Get(p *radius.Packet) (value []byte) {
	value, _ = NETReplacedHeader_Lookup(p)
	return
}

func NETReplacedHeader_GetString(p *radius.Packet) (value string) {
	value, _ = NETReplacedHeader_LookupString(p)
	return
}

func NETReplacedHeader_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 148) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETReplacedHeader_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 148) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETReplacedHeader_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 148)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETReplacedHeader_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 148)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETReplacedHeader_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 148, a)
}

func NETReplacedHeader_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 148, a)
}

func NETReplacedHeader_Del(p *radius.Packet) {
	_NET_DelVendor(p, 148)
}

func NETFirmwareVersion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 160, a)
}

func NETFirmwareVersion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 160, a)
}

func NETFirmwareVersion_Get(p *radius.Packet) (value []byte) {
	value, _ = NETFirmwareVersion_Lookup(p)
	return
}

func NETFirmwareVersion_GetString(p *radius.Packet) (value string) {
	value, _ = NETFirmwareVersion_LookupString(p)
	return
}

func NETFirmwareVersion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 160) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETFirmwareVersion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 160) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETFirmwareVersion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 160)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETFirmwareVersion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 160)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETFirmwareVersion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 160, a)
}

func NETFirmwareVersion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 160, a)
}

func NETFirmwareVersion_Del(p *radius.Packet) {
	_NET_DelVendor(p, 160)
}

func NETLocalTimeZone_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 161, a)
}

func NETLocalTimeZone_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 161, a)
}

func NETLocalTimeZone_Get(p *radius.Packet) (value []byte) {
	value, _ = NETLocalTimeZone_Lookup(p)
	return
}

func NETLocalTimeZone_GetString(p *radius.Packet) (value string) {
	value, _ = NETLocalTimeZone_LookupString(p)
	return
}

func NETLocalTimeZone_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 161) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETLocalTimeZone_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 161) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETLocalTimeZone_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 161)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETLocalTimeZone_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 161)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETLocalTimeZone_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 161, a)
}

func NETLocalTimeZone_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 161, a)
}

func NETLocalTimeZone_Del(p *radius.Packet) {
	_NET_DelVendor(p, 161)
}

func NETGwID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 162, a)
}

func NETGwID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 162, a)
}

func NETGwID_Get(p *radius.Packet) (value []byte) {
	value, _ = NETGwID_Lookup(p)
	return
}

func NETGwID_GetString(p *radius.Packet) (value string) {
	value, _ = NETGwID_LookupString(p)
	return
}

func NETGwID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 162) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETGwID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 162) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETGwID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 162)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETGwID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 162)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETGwID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 162, a)
}

func NETGwID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 162, a)
}

func NETGwID_Del(p *radius.Packet) {
	_NET_DelVendor(p, 162)
}

func NETTimeAndDay_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 163, a)
}

func NETTimeAndDay_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 163, a)
}

func NETTimeAndDay_Get(p *radius.Packet) (value []byte) {
	value, _ = NETTimeAndDay_Lookup(p)
	return
}

func NETTimeAndDay_GetString(p *radius.Packet) (value string) {
	value, _ = NETTimeAndDay_LookupString(p)
	return
}

func NETTimeAndDay_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 163) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETTimeAndDay_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 163) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETTimeAndDay_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 163)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETTimeAndDay_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 163)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETTimeAndDay_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 163, a)
}

func NETTimeAndDay_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 163, a)
}

func NETTimeAndDay_Del(p *radius.Packet) {
	_NET_DelVendor(p, 163)
}

func NETLogTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 164, a)
}

func NETLogTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_AddVendor(p, 164, a)
}

func NETLogTime_Get(p *radius.Packet) (value []byte) {
	value, _ = NETLogTime_Lookup(p)
	return
}

func NETLogTime_GetString(p *radius.Packet) (value string) {
	value, _ = NETLogTime_LookupString(p)
	return
}

func NETLogTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NET_GetsVendor(p, 164) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETLogTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NET_GetsVendor(p, 164) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NETLogTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NET_LookupVendor(p, 164)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NETLogTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NET_LookupVendor(p, 164)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NETLogTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 164, a)
}

func NETLogTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NET_SetVendor(p, 164, a)
}

func NETLogTime_Del(p *radius.Packet) {
	_NET_DelVendor(p, 164)
}
