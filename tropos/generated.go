// Code generated by radius-dict-gen. DO NOT EDIT.

package tropos

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Tropos_VendorID = 14529
)

func _Tropos_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Tropos_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Tropos_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Tropos_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Tropos_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Tropos_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Tropos_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Tropos_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Tropos_AddVendor(p, typ, attr)
}

func _Tropos_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Tropos_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

type TroposUnicastCipher uint32

var TroposUnicastCipher_Strings = map[TroposUnicastCipher]string{}

func (a TroposUnicastCipher) String() string {
	if str, ok := TroposUnicastCipher_Strings[a]; ok {
		return str
	}
	return "TroposUnicastCipher(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TroposUnicastCipher_Add(p *radius.Packet, value TroposUnicastCipher) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_AddVendor(p, 1, a)
}

func TroposUnicastCipher_Get(p *radius.Packet) (value TroposUnicastCipher) {
	value, _ = TroposUnicastCipher_Lookup(p)
	return
}

func TroposUnicastCipher_Gets(p *radius.Packet) (values []TroposUnicastCipher, err error) {
	var i uint32
	for _, attr := range _Tropos_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TroposUnicastCipher(i))
	}
	return
}

func TroposUnicastCipher_Lookup(p *radius.Packet) (value TroposUnicastCipher, err error) {
	a, ok := _Tropos_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TroposUnicastCipher(i)
	return
}

func TroposUnicastCipher_Set(p *radius.Packet, value TroposUnicastCipher) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_SetVendor(p, 1, a)
}

func TroposUnicastCipher_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 1)
}

type TroposLayer2InputOctets uint32

var TroposLayer2InputOctets_Strings = map[TroposLayer2InputOctets]string{}

func (a TroposLayer2InputOctets) String() string {
	if str, ok := TroposLayer2InputOctets_Strings[a]; ok {
		return str
	}
	return "TroposLayer2InputOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TroposLayer2InputOctets_Add(p *radius.Packet, value TroposLayer2InputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_AddVendor(p, 2, a)
}

func TroposLayer2InputOctets_Get(p *radius.Packet) (value TroposLayer2InputOctets) {
	value, _ = TroposLayer2InputOctets_Lookup(p)
	return
}

func TroposLayer2InputOctets_Gets(p *radius.Packet) (values []TroposLayer2InputOctets, err error) {
	var i uint32
	for _, attr := range _Tropos_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TroposLayer2InputOctets(i))
	}
	return
}

func TroposLayer2InputOctets_Lookup(p *radius.Packet) (value TroposLayer2InputOctets, err error) {
	a, ok := _Tropos_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TroposLayer2InputOctets(i)
	return
}

func TroposLayer2InputOctets_Set(p *radius.Packet, value TroposLayer2InputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_SetVendor(p, 2, a)
}

func TroposLayer2InputOctets_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 2)
}

type TroposLayer2OutputOctets uint32

var TroposLayer2OutputOctets_Strings = map[TroposLayer2OutputOctets]string{}

func (a TroposLayer2OutputOctets) String() string {
	if str, ok := TroposLayer2OutputOctets_Strings[a]; ok {
		return str
	}
	return "TroposLayer2OutputOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TroposLayer2OutputOctets_Add(p *radius.Packet, value TroposLayer2OutputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_AddVendor(p, 3, a)
}

func TroposLayer2OutputOctets_Get(p *radius.Packet) (value TroposLayer2OutputOctets) {
	value, _ = TroposLayer2OutputOctets_Lookup(p)
	return
}

func TroposLayer2OutputOctets_Gets(p *radius.Packet) (values []TroposLayer2OutputOctets, err error) {
	var i uint32
	for _, attr := range _Tropos_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TroposLayer2OutputOctets(i))
	}
	return
}

func TroposLayer2OutputOctets_Lookup(p *radius.Packet) (value TroposLayer2OutputOctets, err error) {
	a, ok := _Tropos_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TroposLayer2OutputOctets(i)
	return
}

func TroposLayer2OutputOctets_Set(p *radius.Packet, value TroposLayer2OutputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_SetVendor(p, 3, a)
}

func TroposLayer2OutputOctets_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 3)
}

type TroposLayer2InputFrames uint32

var TroposLayer2InputFrames_Strings = map[TroposLayer2InputFrames]string{}

func (a TroposLayer2InputFrames) String() string {
	if str, ok := TroposLayer2InputFrames_Strings[a]; ok {
		return str
	}
	return "TroposLayer2InputFrames(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TroposLayer2InputFrames_Add(p *radius.Packet, value TroposLayer2InputFrames) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_AddVendor(p, 4, a)
}

func TroposLayer2InputFrames_Get(p *radius.Packet) (value TroposLayer2InputFrames) {
	value, _ = TroposLayer2InputFrames_Lookup(p)
	return
}

func TroposLayer2InputFrames_Gets(p *radius.Packet) (values []TroposLayer2InputFrames, err error) {
	var i uint32
	for _, attr := range _Tropos_GetsVendor(p, 4) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TroposLayer2InputFrames(i))
	}
	return
}

func TroposLayer2InputFrames_Lookup(p *radius.Packet) (value TroposLayer2InputFrames, err error) {
	a, ok := _Tropos_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TroposLayer2InputFrames(i)
	return
}

func TroposLayer2InputFrames_Set(p *radius.Packet, value TroposLayer2InputFrames) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_SetVendor(p, 4, a)
}

func TroposLayer2InputFrames_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 4)
}

type TroposLayer2OutputFrames uint32

var TroposLayer2OutputFrames_Strings = map[TroposLayer2OutputFrames]string{}

func (a TroposLayer2OutputFrames) String() string {
	if str, ok := TroposLayer2OutputFrames_Strings[a]; ok {
		return str
	}
	return "TroposLayer2OutputFrames(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TroposLayer2OutputFrames_Add(p *radius.Packet, value TroposLayer2OutputFrames) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_AddVendor(p, 5, a)
}

func TroposLayer2OutputFrames_Get(p *radius.Packet) (value TroposLayer2OutputFrames) {
	value, _ = TroposLayer2OutputFrames_Lookup(p)
	return
}

func TroposLayer2OutputFrames_Gets(p *radius.Packet) (values []TroposLayer2OutputFrames, err error) {
	var i uint32
	for _, attr := range _Tropos_GetsVendor(p, 5) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TroposLayer2OutputFrames(i))
	}
	return
}

func TroposLayer2OutputFrames_Lookup(p *radius.Packet) (value TroposLayer2OutputFrames, err error) {
	a, ok := _Tropos_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TroposLayer2OutputFrames(i)
	return
}

func TroposLayer2OutputFrames_Set(p *radius.Packet, value TroposLayer2OutputFrames) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_SetVendor(p, 5, a)
}

func TroposLayer2OutputFrames_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 5)
}

type TroposLayer2InputDrops uint32

var TroposLayer2InputDrops_Strings = map[TroposLayer2InputDrops]string{}

func (a TroposLayer2InputDrops) String() string {
	if str, ok := TroposLayer2InputDrops_Strings[a]; ok {
		return str
	}
	return "TroposLayer2InputDrops(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TroposLayer2InputDrops_Add(p *radius.Packet, value TroposLayer2InputDrops) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_AddVendor(p, 6, a)
}

func TroposLayer2InputDrops_Get(p *radius.Packet) (value TroposLayer2InputDrops) {
	value, _ = TroposLayer2InputDrops_Lookup(p)
	return
}

func TroposLayer2InputDrops_Gets(p *radius.Packet) (values []TroposLayer2InputDrops, err error) {
	var i uint32
	for _, attr := range _Tropos_GetsVendor(p, 6) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TroposLayer2InputDrops(i))
	}
	return
}

func TroposLayer2InputDrops_Lookup(p *radius.Packet) (value TroposLayer2InputDrops, err error) {
	a, ok := _Tropos_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TroposLayer2InputDrops(i)
	return
}

func TroposLayer2InputDrops_Set(p *radius.Packet, value TroposLayer2InputDrops) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_SetVendor(p, 6, a)
}

func TroposLayer2InputDrops_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 6)
}

func TroposNoiseFloor_Add(p *radius.Packet, value net.HardwareAddr) (err error) {
	var a radius.Attribute
	a, err = radius.NewIFID(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 7, a)
}

func TroposNoiseFloor_Get(p *radius.Packet) (value net.HardwareAddr) {
	value, _ = TroposNoiseFloor_Lookup(p)
	return
}

func TroposNoiseFloor_Gets(p *radius.Packet) (values []net.HardwareAddr, err error) {
	var i net.HardwareAddr
	for _, attr := range _Tropos_GetsVendor(p, 7) {
		i, err = radius.IFID(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposNoiseFloor_Lookup(p *radius.Packet) (value net.HardwareAddr, err error) {
	a, ok := _Tropos_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IFID(a)
	return
}

func TroposNoiseFloor_Set(p *radius.Packet, value net.HardwareAddr) (err error) {
	var a radius.Attribute
	a, err = radius.NewIFID(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 7, a)
}

func TroposNoiseFloor_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 7)
}

func TroposNoiseUpperBound_Add(p *radius.Packet, value net.HardwareAddr) (err error) {
	var a radius.Attribute
	a, err = radius.NewIFID(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 8, a)
}

func TroposNoiseUpperBound_Get(p *radius.Packet) (value net.HardwareAddr) {
	value, _ = TroposNoiseUpperBound_Lookup(p)
	return
}

func TroposNoiseUpperBound_Gets(p *radius.Packet) (values []net.HardwareAddr, err error) {
	var i net.HardwareAddr
	for _, attr := range _Tropos_GetsVendor(p, 8) {
		i, err = radius.IFID(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposNoiseUpperBound_Lookup(p *radius.Packet) (value net.HardwareAddr, err error) {
	a, ok := _Tropos_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IFID(a)
	return
}

func TroposNoiseUpperBound_Set(p *radius.Packet, value net.HardwareAddr) (err error) {
	var a radius.Attribute
	a, err = radius.NewIFID(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 8, a)
}

func TroposNoiseUpperBound_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 8)
}

func TroposRelease_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 9, a)
}

func TroposRelease_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 9, a)
}

func TroposRelease_Get(p *radius.Packet) (value []byte) {
	value, _ = TroposRelease_Lookup(p)
	return
}

func TroposRelease_GetString(p *radius.Packet) (value string) {
	value, _ = TroposRelease_LookupString(p)
	return
}

func TroposRelease_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Tropos_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposRelease_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Tropos_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposRelease_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Tropos_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TroposRelease_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Tropos_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TroposRelease_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 9, a)
}

func TroposRelease_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 9, a)
}

func TroposRelease_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 9)
}

func TroposSecondaryIP_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 11, a)
}

func TroposSecondaryIP_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 11, a)
}

func TroposSecondaryIP_Get(p *radius.Packet) (value []byte) {
	value, _ = TroposSecondaryIP_Lookup(p)
	return
}

func TroposSecondaryIP_GetString(p *radius.Packet) (value string) {
	value, _ = TroposSecondaryIP_LookupString(p)
	return
}

func TroposSecondaryIP_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Tropos_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposSecondaryIP_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Tropos_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposSecondaryIP_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Tropos_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TroposSecondaryIP_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Tropos_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TroposSecondaryIP_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 11, a)
}

func TroposSecondaryIP_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 11, a)
}

func TroposSecondaryIP_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 11)
}

type TroposTerminateCause uint32

var TroposTerminateCause_Strings = map[TroposTerminateCause]string{}

func (a TroposTerminateCause) String() string {
	if str, ok := TroposTerminateCause_Strings[a]; ok {
		return str
	}
	return "TroposTerminateCause(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TroposTerminateCause_Add(p *radius.Packet, value TroposTerminateCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_AddVendor(p, 12, a)
}

func TroposTerminateCause_Get(p *radius.Packet) (value TroposTerminateCause) {
	value, _ = TroposTerminateCause_Lookup(p)
	return
}

func TroposTerminateCause_Gets(p *radius.Packet) (values []TroposTerminateCause, err error) {
	var i uint32
	for _, attr := range _Tropos_GetsVendor(p, 12) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TroposTerminateCause(i))
	}
	return
}

func TroposTerminateCause_Lookup(p *radius.Packet) (value TroposTerminateCause, err error) {
	a, ok := _Tropos_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TroposTerminateCause(i)
	return
}

func TroposTerminateCause_Set(p *radius.Packet, value TroposTerminateCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_SetVendor(p, 12, a)
}

func TroposTerminateCause_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 12)
}

type TroposAverageRSSI uint32

var TroposAverageRSSI_Strings = map[TroposAverageRSSI]string{}

func (a TroposAverageRSSI) String() string {
	if str, ok := TroposAverageRSSI_Strings[a]; ok {
		return str
	}
	return "TroposAverageRSSI(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TroposAverageRSSI_Add(p *radius.Packet, value TroposAverageRSSI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_AddVendor(p, 13, a)
}

func TroposAverageRSSI_Get(p *radius.Packet) (value TroposAverageRSSI) {
	value, _ = TroposAverageRSSI_Lookup(p)
	return
}

func TroposAverageRSSI_Gets(p *radius.Packet) (values []TroposAverageRSSI, err error) {
	var i uint32
	for _, attr := range _Tropos_GetsVendor(p, 13) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TroposAverageRSSI(i))
	}
	return
}

func TroposAverageRSSI_Lookup(p *radius.Packet) (value TroposAverageRSSI, err error) {
	a, ok := _Tropos_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TroposAverageRSSI(i)
	return
}

func TroposAverageRSSI_Set(p *radius.Packet, value TroposAverageRSSI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_SetVendor(p, 13, a)
}

func TroposAverageRSSI_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 13)
}

func TroposChannel_Add(p *radius.Packet, value net.HardwareAddr) (err error) {
	var a radius.Attribute
	a, err = radius.NewIFID(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 15, a)
}

func TroposChannel_Get(p *radius.Packet) (value net.HardwareAddr) {
	value, _ = TroposChannel_Lookup(p)
	return
}

func TroposChannel_Gets(p *radius.Packet) (values []net.HardwareAddr, err error) {
	var i net.HardwareAddr
	for _, attr := range _Tropos_GetsVendor(p, 15) {
		i, err = radius.IFID(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposChannel_Lookup(p *radius.Packet) (value net.HardwareAddr, err error) {
	a, ok := _Tropos_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IFID(a)
	return
}

func TroposChannel_Set(p *radius.Packet, value net.HardwareAddr) (err error) {
	var a radius.Attribute
	a, err = radius.NewIFID(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 15, a)
}

func TroposChannel_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 15)
}

type TroposRetriesSent uint32

var TroposRetriesSent_Strings = map[TroposRetriesSent]string{}

func (a TroposRetriesSent) String() string {
	if str, ok := TroposRetriesSent_Strings[a]; ok {
		return str
	}
	return "TroposRetriesSent(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TroposRetriesSent_Add(p *radius.Packet, value TroposRetriesSent) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_AddVendor(p, 16, a)
}

func TroposRetriesSent_Get(p *radius.Packet) (value TroposRetriesSent) {
	value, _ = TroposRetriesSent_Lookup(p)
	return
}

func TroposRetriesSent_Gets(p *radius.Packet) (values []TroposRetriesSent, err error) {
	var i uint32
	for _, attr := range _Tropos_GetsVendor(p, 16) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TroposRetriesSent(i))
	}
	return
}

func TroposRetriesSent_Lookup(p *radius.Packet) (value TroposRetriesSent, err error) {
	a, ok := _Tropos_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TroposRetriesSent(i)
	return
}

func TroposRetriesSent_Set(p *radius.Packet, value TroposRetriesSent) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_SetVendor(p, 16, a)
}

func TroposRetriesSent_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 16)
}

type TroposRetryBits uint32

var TroposRetryBits_Strings = map[TroposRetryBits]string{}

func (a TroposRetryBits) String() string {
	if str, ok := TroposRetryBits_Strings[a]; ok {
		return str
	}
	return "TroposRetryBits(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TroposRetryBits_Add(p *radius.Packet, value TroposRetryBits) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_AddVendor(p, 17, a)
}

func TroposRetryBits_Get(p *radius.Packet) (value TroposRetryBits) {
	value, _ = TroposRetryBits_Lookup(p)
	return
}

func TroposRetryBits_Gets(p *radius.Packet) (values []TroposRetryBits, err error) {
	var i uint32
	for _, attr := range _Tropos_GetsVendor(p, 17) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TroposRetryBits(i))
	}
	return
}

func TroposRetryBits_Lookup(p *radius.Packet) (value TroposRetryBits, err error) {
	a, ok := _Tropos_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TroposRetryBits(i)
	return
}

func TroposRetryBits_Set(p *radius.Packet, value TroposRetryBits) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_SetVendor(p, 17, a)
}

func TroposRetryBits_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 17)
}

func TroposRatesSent_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 18, a)
}

func TroposRatesSent_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 18, a)
}

func TroposRatesSent_Get(p *radius.Packet) (value []byte) {
	value, _ = TroposRatesSent_Lookup(p)
	return
}

func TroposRatesSent_GetString(p *radius.Packet) (value string) {
	value, _ = TroposRatesSent_LookupString(p)
	return
}

func TroposRatesSent_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Tropos_GetsVendor(p, 18) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposRatesSent_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Tropos_GetsVendor(p, 18) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposRatesSent_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Tropos_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TroposRatesSent_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Tropos_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TroposRatesSent_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 18, a)
}

func TroposRatesSent_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 18, a)
}

func TroposRatesSent_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 18)
}

func TroposRatesReceived_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 19, a)
}

func TroposRatesReceived_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 19, a)
}

func TroposRatesReceived_Get(p *radius.Packet) (value []byte) {
	value, _ = TroposRatesReceived_Lookup(p)
	return
}

func TroposRatesReceived_GetString(p *radius.Packet) (value string) {
	value, _ = TroposRatesReceived_LookupString(p)
	return
}

func TroposRatesReceived_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Tropos_GetsVendor(p, 19) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposRatesReceived_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Tropos_GetsVendor(p, 19) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposRatesReceived_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Tropos_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TroposRatesReceived_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Tropos_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TroposRatesReceived_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 19, a)
}

func TroposRatesReceived_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 19, a)
}

func TroposRatesReceived_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 19)
}

type TroposRoutedTime uint32

var TroposRoutedTime_Strings = map[TroposRoutedTime]string{}

func (a TroposRoutedTime) String() string {
	if str, ok := TroposRoutedTime_Strings[a]; ok {
		return str
	}
	return "TroposRoutedTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TroposRoutedTime_Add(p *radius.Packet, value TroposRoutedTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_AddVendor(p, 21, a)
}

func TroposRoutedTime_Get(p *radius.Packet) (value TroposRoutedTime) {
	value, _ = TroposRoutedTime_Lookup(p)
	return
}

func TroposRoutedTime_Gets(p *radius.Packet) (values []TroposRoutedTime, err error) {
	var i uint32
	for _, attr := range _Tropos_GetsVendor(p, 21) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TroposRoutedTime(i))
	}
	return
}

func TroposRoutedTime_Lookup(p *radius.Packet) (value TroposRoutedTime, err error) {
	a, ok := _Tropos_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TroposRoutedTime(i)
	return
}

func TroposRoutedTime_Set(p *radius.Packet, value TroposRoutedTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_SetVendor(p, 21, a)
}

func TroposRoutedTime_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 21)
}

type TroposRoutlessSince uint32

var TroposRoutlessSince_Strings = map[TroposRoutlessSince]string{}

func (a TroposRoutlessSince) String() string {
	if str, ok := TroposRoutlessSince_Strings[a]; ok {
		return str
	}
	return "TroposRoutlessSince(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TroposRoutlessSince_Add(p *radius.Packet, value TroposRoutlessSince) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_AddVendor(p, 22, a)
}

func TroposRoutlessSince_Get(p *radius.Packet) (value TroposRoutlessSince) {
	value, _ = TroposRoutlessSince_Lookup(p)
	return
}

func TroposRoutlessSince_Gets(p *radius.Packet) (values []TroposRoutlessSince, err error) {
	var i uint32
	for _, attr := range _Tropos_GetsVendor(p, 22) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TroposRoutlessSince(i))
	}
	return
}

func TroposRoutlessSince_Lookup(p *radius.Packet) (value TroposRoutlessSince, err error) {
	a, ok := _Tropos_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TroposRoutlessSince(i)
	return
}

func TroposRoutlessSince_Set(p *radius.Packet, value TroposRoutlessSince) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_SetVendor(p, 22, a)
}

func TroposRoutlessSince_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 22)
}

func TroposCapabilityInfo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 23, a)
}

func TroposCapabilityInfo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 23, a)
}

func TroposCapabilityInfo_Get(p *radius.Packet) (value []byte) {
	value, _ = TroposCapabilityInfo_Lookup(p)
	return
}

func TroposCapabilityInfo_GetString(p *radius.Packet) (value string) {
	value, _ = TroposCapabilityInfo_LookupString(p)
	return
}

func TroposCapabilityInfo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Tropos_GetsVendor(p, 23) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposCapabilityInfo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Tropos_GetsVendor(p, 23) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposCapabilityInfo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Tropos_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TroposCapabilityInfo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Tropos_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TroposCapabilityInfo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 23, a)
}

func TroposCapabilityInfo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 23, a)
}

func TroposCapabilityInfo_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 23)
}

type TroposInputCap uint32

var TroposInputCap_Strings = map[TroposInputCap]string{}

func (a TroposInputCap) String() string {
	if str, ok := TroposInputCap_Strings[a]; ok {
		return str
	}
	return "TroposInputCap(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TroposInputCap_Add(p *radius.Packet, value TroposInputCap) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_AddVendor(p, 24, a)
}

func TroposInputCap_Get(p *radius.Packet) (value TroposInputCap) {
	value, _ = TroposInputCap_Lookup(p)
	return
}

func TroposInputCap_Gets(p *radius.Packet) (values []TroposInputCap, err error) {
	var i uint32
	for _, attr := range _Tropos_GetsVendor(p, 24) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TroposInputCap(i))
	}
	return
}

func TroposInputCap_Lookup(p *radius.Packet) (value TroposInputCap, err error) {
	a, ok := _Tropos_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TroposInputCap(i)
	return
}

func TroposInputCap_Set(p *radius.Packet, value TroposInputCap) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_SetVendor(p, 24, a)
}

func TroposInputCap_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 24)
}

type TroposOutputCap uint32

var TroposOutputCap_Strings = map[TroposOutputCap]string{}

func (a TroposOutputCap) String() string {
	if str, ok := TroposOutputCap_Strings[a]; ok {
		return str
	}
	return "TroposOutputCap(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TroposOutputCap_Add(p *radius.Packet, value TroposOutputCap) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_AddVendor(p, 25, a)
}

func TroposOutputCap_Get(p *radius.Packet) (value TroposOutputCap) {
	value, _ = TroposOutputCap_Lookup(p)
	return
}

func TroposOutputCap_Gets(p *radius.Packet) (values []TroposOutputCap, err error) {
	var i uint32
	for _, attr := range _Tropos_GetsVendor(p, 25) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TroposOutputCap(i))
	}
	return
}

func TroposOutputCap_Lookup(p *radius.Packet) (value TroposOutputCap, err error) {
	a, ok := _Tropos_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TroposOutputCap(i)
	return
}

func TroposOutputCap_Set(p *radius.Packet, value TroposOutputCap) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_SetVendor(p, 25, a)
}

func TroposOutputCap_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 25)
}

type TroposClassMult uint32

var TroposClassMult_Strings = map[TroposClassMult]string{}

func (a TroposClassMult) String() string {
	if str, ok := TroposClassMult_Strings[a]; ok {
		return str
	}
	return "TroposClassMult(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TroposClassMult_Add(p *radius.Packet, value TroposClassMult) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_AddVendor(p, 26, a)
}

func TroposClassMult_Get(p *radius.Packet) (value TroposClassMult) {
	value, _ = TroposClassMult_Lookup(p)
	return
}

func TroposClassMult_Gets(p *radius.Packet) (values []TroposClassMult, err error) {
	var i uint32
	for _, attr := range _Tropos_GetsVendor(p, 26) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TroposClassMult(i))
	}
	return
}

func TroposClassMult_Lookup(p *radius.Packet) (value TroposClassMult, err error) {
	a, ok := _Tropos_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TroposClassMult(i)
	return
}

func TroposClassMult_Set(p *radius.Packet, value TroposClassMult) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Tropos_SetVendor(p, 26, a)
}

func TroposClassMult_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 26)
}

func TroposCellName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 27, a)
}

func TroposCellName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 27, a)
}

func TroposCellName_Get(p *radius.Packet) (value []byte) {
	value, _ = TroposCellName_Lookup(p)
	return
}

func TroposCellName_GetString(p *radius.Packet) (value string) {
	value, _ = TroposCellName_LookupString(p)
	return
}

func TroposCellName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Tropos_GetsVendor(p, 27) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposCellName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Tropos_GetsVendor(p, 27) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposCellName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Tropos_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TroposCellName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Tropos_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TroposCellName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 27, a)
}

func TroposCellName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 27, a)
}

func TroposCellName_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 27)
}

func TroposCellLocation_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 28, a)
}

func TroposCellLocation_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 28, a)
}

func TroposCellLocation_Get(p *radius.Packet) (value []byte) {
	value, _ = TroposCellLocation_Lookup(p)
	return
}

func TroposCellLocation_GetString(p *radius.Packet) (value string) {
	value, _ = TroposCellLocation_LookupString(p)
	return
}

func TroposCellLocation_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Tropos_GetsVendor(p, 28) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposCellLocation_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Tropos_GetsVendor(p, 28) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposCellLocation_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Tropos_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TroposCellLocation_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Tropos_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TroposCellLocation_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 28, a)
}

func TroposCellLocation_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 28, a)
}

func TroposCellLocation_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 28)
}

func TroposSerialNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 29, a)
}

func TroposSerialNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 29, a)
}

func TroposSerialNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = TroposSerialNumber_Lookup(p)
	return
}

func TroposSerialNumber_GetString(p *radius.Packet) (value string) {
	value, _ = TroposSerialNumber_LookupString(p)
	return
}

func TroposSerialNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Tropos_GetsVendor(p, 29) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposSerialNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Tropos_GetsVendor(p, 29) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposSerialNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Tropos_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TroposSerialNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Tropos_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TroposSerialNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 29, a)
}

func TroposSerialNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 29, a)
}

func TroposSerialNumber_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 29)
}

func TroposLatitude_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 30, a)
}

func TroposLatitude_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 30, a)
}

func TroposLatitude_Get(p *radius.Packet) (value []byte) {
	value, _ = TroposLatitude_Lookup(p)
	return
}

func TroposLatitude_GetString(p *radius.Packet) (value string) {
	value, _ = TroposLatitude_LookupString(p)
	return
}

func TroposLatitude_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Tropos_GetsVendor(p, 30) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposLatitude_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Tropos_GetsVendor(p, 30) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposLatitude_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Tropos_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TroposLatitude_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Tropos_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TroposLatitude_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 30, a)
}

func TroposLatitude_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 30, a)
}

func TroposLatitude_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 30)
}

func TroposLongitude_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 31, a)
}

func TroposLongitude_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Tropos_AddVendor(p, 31, a)
}

func TroposLongitude_Get(p *radius.Packet) (value []byte) {
	value, _ = TroposLongitude_Lookup(p)
	return
}

func TroposLongitude_GetString(p *radius.Packet) (value string) {
	value, _ = TroposLongitude_LookupString(p)
	return
}

func TroposLongitude_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Tropos_GetsVendor(p, 31) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposLongitude_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Tropos_GetsVendor(p, 31) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TroposLongitude_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Tropos_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TroposLongitude_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Tropos_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TroposLongitude_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 31, a)
}

func TroposLongitude_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Tropos_SetVendor(p, 31, a)
}

func TroposLongitude_Del(p *radius.Packet) {
	_Tropos_DelVendor(p, 31)
}
