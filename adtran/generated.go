// Code generated by radius-dict-gen. DO NOT EDIT.

package adtran

import (
	"net"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Adtran_VendorID = 664
)

func _Adtran_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Adtran_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Adtran_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Adtran_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Adtran_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Adtran_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Adtran_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Adtran_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Adtran_AddVendor(p, typ, attr)
}

func _Adtran_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Adtran_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

func AdtranAPName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Adtran_AddVendor(p, 100, a)
}

func AdtranAPName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Adtran_AddVendor(p, 100, a)
}

func AdtranAPName_Get(p *radius.Packet) (value []byte) {
	value, _ = AdtranAPName_Lookup(p)
	return
}

func AdtranAPName_GetString(p *radius.Packet) (value string) {
	value, _ = AdtranAPName_LookupString(p)
	return
}

func AdtranAPName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Adtran_GetsVendor(p, 100) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AdtranAPName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Adtran_GetsVendor(p, 100) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AdtranAPName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Adtran_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AdtranAPName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Adtran_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AdtranAPName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Adtran_SetVendor(p, 100, a)
}

func AdtranAPName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Adtran_SetVendor(p, 100, a)
}

func AdtranAPName_Del(p *radius.Packet) {
	_Adtran_DelVendor(p, 100)
}

func AdtranAPIP_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Adtran_AddVendor(p, 101, a)
}

func AdtranAPIP_Get(p *radius.Packet) (value net.IP) {
	value, _ = AdtranAPIP_Lookup(p)
	return
}

func AdtranAPIP_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Adtran_GetsVendor(p, 101) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AdtranAPIP_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Adtran_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AdtranAPIP_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Adtran_SetVendor(p, 101, a)
}

func AdtranAPIP_Del(p *radius.Packet) {
	_Adtran_DelVendor(p, 101)
}

func AdtranAPTemplate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Adtran_AddVendor(p, 102, a)
}

func AdtranAPTemplate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Adtran_AddVendor(p, 102, a)
}

func AdtranAPTemplate_Get(p *radius.Packet) (value []byte) {
	value, _ = AdtranAPTemplate_Lookup(p)
	return
}

func AdtranAPTemplate_GetString(p *radius.Packet) (value string) {
	value, _ = AdtranAPTemplate_LookupString(p)
	return
}

func AdtranAPTemplate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Adtran_GetsVendor(p, 102) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AdtranAPTemplate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Adtran_GetsVendor(p, 102) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AdtranAPTemplate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Adtran_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AdtranAPTemplate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Adtran_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AdtranAPTemplate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Adtran_SetVendor(p, 102, a)
}

func AdtranAPTemplate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Adtran_SetVendor(p, 102, a)
}

func AdtranAPTemplate_Del(p *radius.Packet) {
	_Adtran_DelVendor(p, 102)
}

func AdtranSSID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Adtran_AddVendor(p, 103, a)
}

func AdtranSSID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Adtran_AddVendor(p, 103, a)
}

func AdtranSSID_Get(p *radius.Packet) (value []byte) {
	value, _ = AdtranSSID_Lookup(p)
	return
}

func AdtranSSID_GetString(p *radius.Packet) (value string) {
	value, _ = AdtranSSID_LookupString(p)
	return
}

func AdtranSSID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Adtran_GetsVendor(p, 103) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AdtranSSID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Adtran_GetsVendor(p, 103) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AdtranSSID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Adtran_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AdtranSSID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Adtran_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AdtranSSID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Adtran_SetVendor(p, 103, a)
}

func AdtranSSID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Adtran_SetVendor(p, 103, a)
}

func AdtranSSID_Del(p *radius.Packet) {
	_Adtran_DelVendor(p, 103)
}

func AdtranRole_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Adtran_AddVendor(p, 104, a)
}

func AdtranRole_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Adtran_AddVendor(p, 104, a)
}

func AdtranRole_Get(p *radius.Packet) (value []byte) {
	value, _ = AdtranRole_Lookup(p)
	return
}

func AdtranRole_GetString(p *radius.Packet) (value string) {
	value, _ = AdtranRole_LookupString(p)
	return
}

func AdtranRole_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Adtran_GetsVendor(p, 104) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AdtranRole_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Adtran_GetsVendor(p, 104) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AdtranRole_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Adtran_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AdtranRole_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Adtran_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AdtranRole_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Adtran_SetVendor(p, 104, a)
}

func AdtranRole_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Adtran_SetVendor(p, 104, a)
}

func AdtranRole_Del(p *radius.Packet) {
	_Adtran_DelVendor(p, 104)
}
