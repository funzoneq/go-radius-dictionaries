// Code generated by radius-dict-gen. DO NOT EDIT.

package utstarcom

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_UTStarcom_VendorID = 7064
)

func _UTStarcom_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_UTStarcom_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _UTStarcom_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _UTStarcom_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _UTStarcom_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _UTStarcom_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _UTStarcom_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _UTStarcom_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _UTStarcom_AddVendor(p, typ, attr)
}

func _UTStarcom_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _UTStarcom_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

type UTStarcomVLANID uint32

var UTStarcomVLANID_Strings = map[UTStarcomVLANID]string{}

func (a UTStarcomVLANID) String() string {
	if str, ok := UTStarcomVLANID_Strings[a]; ok {
		return str
	}
	return "UTStarcomVLANID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomVLANID_Add(p *radius.Packet, value UTStarcomVLANID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 140, a)
}

func UTStarcomVLANID_Get(p *radius.Packet) (value UTStarcomVLANID) {
	value, _ = UTStarcomVLANID_Lookup(p)
	return
}

func UTStarcomVLANID_Gets(p *radius.Packet) (values []UTStarcomVLANID, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 140) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomVLANID(i))
	}
	return
}

func UTStarcomVLANID_Lookup(p *radius.Packet) (value UTStarcomVLANID, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 140)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomVLANID(i)
	return
}

func UTStarcomVLANID_Set(p *radius.Packet, value UTStarcomVLANID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 140, a)
}

func UTStarcomVLANID_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 140)
}

type UTStarcomCommittedBandwidth uint32

var UTStarcomCommittedBandwidth_Strings = map[UTStarcomCommittedBandwidth]string{}

func (a UTStarcomCommittedBandwidth) String() string {
	if str, ok := UTStarcomCommittedBandwidth_Strings[a]; ok {
		return str
	}
	return "UTStarcomCommittedBandwidth(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomCommittedBandwidth_Add(p *radius.Packet, value UTStarcomCommittedBandwidth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 142, a)
}

func UTStarcomCommittedBandwidth_Get(p *radius.Packet) (value UTStarcomCommittedBandwidth) {
	value, _ = UTStarcomCommittedBandwidth_Lookup(p)
	return
}

func UTStarcomCommittedBandwidth_Gets(p *radius.Packet) (values []UTStarcomCommittedBandwidth, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 142) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomCommittedBandwidth(i))
	}
	return
}

func UTStarcomCommittedBandwidth_Lookup(p *radius.Packet) (value UTStarcomCommittedBandwidth, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 142)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomCommittedBandwidth(i)
	return
}

func UTStarcomCommittedBandwidth_Set(p *radius.Packet, value UTStarcomCommittedBandwidth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 142, a)
}

func UTStarcomCommittedBandwidth_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 142)
}

type UTStarcomMaxBandwidth uint32

var UTStarcomMaxBandwidth_Strings = map[UTStarcomMaxBandwidth]string{}

func (a UTStarcomMaxBandwidth) String() string {
	if str, ok := UTStarcomMaxBandwidth_Strings[a]; ok {
		return str
	}
	return "UTStarcomMaxBandwidth(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomMaxBandwidth_Add(p *radius.Packet, value UTStarcomMaxBandwidth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 143, a)
}

func UTStarcomMaxBandwidth_Get(p *radius.Packet) (value UTStarcomMaxBandwidth) {
	value, _ = UTStarcomMaxBandwidth_Lookup(p)
	return
}

func UTStarcomMaxBandwidth_Gets(p *radius.Packet) (values []UTStarcomMaxBandwidth, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 143) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomMaxBandwidth(i))
	}
	return
}

func UTStarcomMaxBandwidth_Lookup(p *radius.Packet) (value UTStarcomMaxBandwidth, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 143)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomMaxBandwidth(i)
	return
}

func UTStarcomMaxBandwidth_Set(p *radius.Packet, value UTStarcomMaxBandwidth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 143, a)
}

func UTStarcomMaxBandwidth_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 143)
}

type UTStarcomPriority uint32

var UTStarcomPriority_Strings = map[UTStarcomPriority]string{}

func (a UTStarcomPriority) String() string {
	if str, ok := UTStarcomPriority_Strings[a]; ok {
		return str
	}
	return "UTStarcomPriority(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomPriority_Add(p *radius.Packet, value UTStarcomPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 145, a)
}

func UTStarcomPriority_Get(p *radius.Packet) (value UTStarcomPriority) {
	value, _ = UTStarcomPriority_Lookup(p)
	return
}

func UTStarcomPriority_Gets(p *radius.Packet) (values []UTStarcomPriority, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 145) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomPriority(i))
	}
	return
}

func UTStarcomPriority_Lookup(p *radius.Packet) (value UTStarcomPriority, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 145)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomPriority(i)
	return
}

func UTStarcomPriority_Set(p *radius.Packet, value UTStarcomPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 145, a)
}

func UTStarcomPriority_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 145)
}

type UTStarcomErrorReason uint32

var UTStarcomErrorReason_Strings = map[UTStarcomErrorReason]string{}

func (a UTStarcomErrorReason) String() string {
	if str, ok := UTStarcomErrorReason_Strings[a]; ok {
		return str
	}
	return "UTStarcomErrorReason(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomErrorReason_Add(p *radius.Packet, value UTStarcomErrorReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 147, a)
}

func UTStarcomErrorReason_Get(p *radius.Packet) (value UTStarcomErrorReason) {
	value, _ = UTStarcomErrorReason_Lookup(p)
	return
}

func UTStarcomErrorReason_Gets(p *radius.Packet) (values []UTStarcomErrorReason, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 147) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomErrorReason(i))
	}
	return
}

func UTStarcomErrorReason_Lookup(p *radius.Packet) (value UTStarcomErrorReason, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 147)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomErrorReason(i)
	return
}

func UTStarcomErrorReason_Set(p *radius.Packet, value UTStarcomErrorReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 147, a)
}

func UTStarcomErrorReason_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 147)
}

type UTStarcomPrimaryDNS uint32

var UTStarcomPrimaryDNS_Strings = map[UTStarcomPrimaryDNS]string{}

func (a UTStarcomPrimaryDNS) String() string {
	if str, ok := UTStarcomPrimaryDNS_Strings[a]; ok {
		return str
	}
	return "UTStarcomPrimaryDNS(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomPrimaryDNS_Add(p *radius.Packet, value UTStarcomPrimaryDNS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 152, a)
}

func UTStarcomPrimaryDNS_Get(p *radius.Packet) (value UTStarcomPrimaryDNS) {
	value, _ = UTStarcomPrimaryDNS_Lookup(p)
	return
}

func UTStarcomPrimaryDNS_Gets(p *radius.Packet) (values []UTStarcomPrimaryDNS, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 152) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomPrimaryDNS(i))
	}
	return
}

func UTStarcomPrimaryDNS_Lookup(p *radius.Packet) (value UTStarcomPrimaryDNS, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 152)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomPrimaryDNS(i)
	return
}

func UTStarcomPrimaryDNS_Set(p *radius.Packet, value UTStarcomPrimaryDNS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 152, a)
}

func UTStarcomPrimaryDNS_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 152)
}

type UTStarcomSecondaryDNS uint32

var UTStarcomSecondaryDNS_Strings = map[UTStarcomSecondaryDNS]string{}

func (a UTStarcomSecondaryDNS) String() string {
	if str, ok := UTStarcomSecondaryDNS_Strings[a]; ok {
		return str
	}
	return "UTStarcomSecondaryDNS(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomSecondaryDNS_Add(p *radius.Packet, value UTStarcomSecondaryDNS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 153, a)
}

func UTStarcomSecondaryDNS_Get(p *radius.Packet) (value UTStarcomSecondaryDNS) {
	value, _ = UTStarcomSecondaryDNS_Lookup(p)
	return
}

func UTStarcomSecondaryDNS_Gets(p *radius.Packet) (values []UTStarcomSecondaryDNS, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 153) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomSecondaryDNS(i))
	}
	return
}

func UTStarcomSecondaryDNS_Lookup(p *radius.Packet) (value UTStarcomSecondaryDNS, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 153)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomSecondaryDNS(i)
	return
}

func UTStarcomSecondaryDNS_Set(p *radius.Packet, value UTStarcomSecondaryDNS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 153, a)
}

func UTStarcomSecondaryDNS_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 153)
}

type UTStarcomMaxBurstSize uint32

var UTStarcomMaxBurstSize_Strings = map[UTStarcomMaxBurstSize]string{}

func (a UTStarcomMaxBurstSize) String() string {
	if str, ok := UTStarcomMaxBurstSize_Strings[a]; ok {
		return str
	}
	return "UTStarcomMaxBurstSize(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomMaxBurstSize_Add(p *radius.Packet, value UTStarcomMaxBurstSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 161, a)
}

func UTStarcomMaxBurstSize_Get(p *radius.Packet) (value UTStarcomMaxBurstSize) {
	value, _ = UTStarcomMaxBurstSize_Lookup(p)
	return
}

func UTStarcomMaxBurstSize_Gets(p *radius.Packet) (values []UTStarcomMaxBurstSize, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 161) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomMaxBurstSize(i))
	}
	return
}

func UTStarcomMaxBurstSize_Lookup(p *radius.Packet) (value UTStarcomMaxBurstSize, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 161)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomMaxBurstSize(i)
	return
}

func UTStarcomMaxBurstSize_Set(p *radius.Packet, value UTStarcomMaxBurstSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 161, a)
}

func UTStarcomMaxBurstSize_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 161)
}

type UTStarcomMaxDelay uint32

var UTStarcomMaxDelay_Strings = map[UTStarcomMaxDelay]string{}

func (a UTStarcomMaxDelay) String() string {
	if str, ok := UTStarcomMaxDelay_Strings[a]; ok {
		return str
	}
	return "UTStarcomMaxDelay(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomMaxDelay_Add(p *radius.Packet, value UTStarcomMaxDelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 162, a)
}

func UTStarcomMaxDelay_Get(p *radius.Packet) (value UTStarcomMaxDelay) {
	value, _ = UTStarcomMaxDelay_Lookup(p)
	return
}

func UTStarcomMaxDelay_Gets(p *radius.Packet) (values []UTStarcomMaxDelay, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 162) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomMaxDelay(i))
	}
	return
}

func UTStarcomMaxDelay_Lookup(p *radius.Packet) (value UTStarcomMaxDelay, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 162)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomMaxDelay(i)
	return
}

func UTStarcomMaxDelay_Set(p *radius.Packet, value UTStarcomMaxDelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 162, a)
}

func UTStarcomMaxDelay_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 162)
}

type UTStarcomMaxJitter uint32

var UTStarcomMaxJitter_Strings = map[UTStarcomMaxJitter]string{}

func (a UTStarcomMaxJitter) String() string {
	if str, ok := UTStarcomMaxJitter_Strings[a]; ok {
		return str
	}
	return "UTStarcomMaxJitter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomMaxJitter_Add(p *radius.Packet, value UTStarcomMaxJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 163, a)
}

func UTStarcomMaxJitter_Get(p *radius.Packet) (value UTStarcomMaxJitter) {
	value, _ = UTStarcomMaxJitter_Lookup(p)
	return
}

func UTStarcomMaxJitter_Gets(p *radius.Packet) (values []UTStarcomMaxJitter, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 163) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomMaxJitter(i))
	}
	return
}

func UTStarcomMaxJitter_Lookup(p *radius.Packet) (value UTStarcomMaxJitter, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 163)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomMaxJitter(i)
	return
}

func UTStarcomMaxJitter_Set(p *radius.Packet, value UTStarcomMaxJitter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 163, a)
}

func UTStarcomMaxJitter_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 163)
}

func UTStarcomDeviceId_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UTStarcom_AddVendor(p, 165, a)
}

func UTStarcomDeviceId_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UTStarcom_AddVendor(p, 165, a)
}

func UTStarcomDeviceId_Get(p *radius.Packet) (value []byte) {
	value, _ = UTStarcomDeviceId_Lookup(p)
	return
}

func UTStarcomDeviceId_GetString(p *radius.Packet) (value string) {
	value, _ = UTStarcomDeviceId_LookupString(p)
	return
}

func UTStarcomDeviceId_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _UTStarcom_GetsVendor(p, 165) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UTStarcomDeviceId_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _UTStarcom_GetsVendor(p, 165) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UTStarcomDeviceId_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 165)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UTStarcomDeviceId_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 165)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UTStarcomDeviceId_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UTStarcom_SetVendor(p, 165, a)
}

func UTStarcomDeviceId_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UTStarcom_SetVendor(p, 165, a)
}

func UTStarcomDeviceId_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 165)
}

type UTStarcomModuleID uint32

var UTStarcomModuleID_Strings = map[UTStarcomModuleID]string{}

func (a UTStarcomModuleID) String() string {
	if str, ok := UTStarcomModuleID_Strings[a]; ok {
		return str
	}
	return "UTStarcomModuleID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomModuleID_Add(p *radius.Packet, value UTStarcomModuleID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 166, a)
}

func UTStarcomModuleID_Get(p *radius.Packet) (value UTStarcomModuleID) {
	value, _ = UTStarcomModuleID_Lookup(p)
	return
}

func UTStarcomModuleID_Gets(p *radius.Packet) (values []UTStarcomModuleID, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 166) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomModuleID(i))
	}
	return
}

func UTStarcomModuleID_Lookup(p *radius.Packet) (value UTStarcomModuleID, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 166)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomModuleID(i)
	return
}

func UTStarcomModuleID_Set(p *radius.Packet, value UTStarcomModuleID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 166, a)
}

func UTStarcomModuleID_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 166)
}

type UTStarcomPortNo uint32

var UTStarcomPortNo_Strings = map[UTStarcomPortNo]string{}

func (a UTStarcomPortNo) String() string {
	if str, ok := UTStarcomPortNo_Strings[a]; ok {
		return str
	}
	return "UTStarcomPortNo(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomPortNo_Add(p *radius.Packet, value UTStarcomPortNo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 167, a)
}

func UTStarcomPortNo_Get(p *radius.Packet) (value UTStarcomPortNo) {
	value, _ = UTStarcomPortNo_Lookup(p)
	return
}

func UTStarcomPortNo_Gets(p *radius.Packet) (values []UTStarcomPortNo, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 167) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomPortNo(i))
	}
	return
}

func UTStarcomPortNo_Lookup(p *radius.Packet) (value UTStarcomPortNo, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 167)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomPortNo(i)
	return
}

func UTStarcomPortNo_Set(p *radius.Packet, value UTStarcomPortNo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 167, a)
}

func UTStarcomPortNo_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 167)
}

type UTStarcomLogicalPortNo uint32

var UTStarcomLogicalPortNo_Strings = map[UTStarcomLogicalPortNo]string{}

func (a UTStarcomLogicalPortNo) String() string {
	if str, ok := UTStarcomLogicalPortNo_Strings[a]; ok {
		return str
	}
	return "UTStarcomLogicalPortNo(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomLogicalPortNo_Add(p *radius.Packet, value UTStarcomLogicalPortNo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 168, a)
}

func UTStarcomLogicalPortNo_Get(p *radius.Packet) (value UTStarcomLogicalPortNo) {
	value, _ = UTStarcomLogicalPortNo_Lookup(p)
	return
}

func UTStarcomLogicalPortNo_Gets(p *radius.Packet) (values []UTStarcomLogicalPortNo, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 168) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomLogicalPortNo(i))
	}
	return
}

func UTStarcomLogicalPortNo_Lookup(p *radius.Packet) (value UTStarcomLogicalPortNo, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 168)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomLogicalPortNo(i)
	return
}

func UTStarcomLogicalPortNo_Set(p *radius.Packet, value UTStarcomLogicalPortNo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 168, a)
}

func UTStarcomLogicalPortNo_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 168)
}

type UTStarcomUNIMAXMAC uint32

var UTStarcomUNIMAXMAC_Strings = map[UTStarcomUNIMAXMAC]string{}

func (a UTStarcomUNIMAXMAC) String() string {
	if str, ok := UTStarcomUNIMAXMAC_Strings[a]; ok {
		return str
	}
	return "UTStarcomUNIMAXMAC(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomUNIMAXMAC_Add(p *radius.Packet, value UTStarcomUNIMAXMAC) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 169, a)
}

func UTStarcomUNIMAXMAC_Get(p *radius.Packet) (value UTStarcomUNIMAXMAC) {
	value, _ = UTStarcomUNIMAXMAC_Lookup(p)
	return
}

func UTStarcomUNIMAXMAC_Gets(p *radius.Packet) (values []UTStarcomUNIMAXMAC, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 169) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomUNIMAXMAC(i))
	}
	return
}

func UTStarcomUNIMAXMAC_Lookup(p *radius.Packet) (value UTStarcomUNIMAXMAC, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 169)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomUNIMAXMAC(i)
	return
}

func UTStarcomUNIMAXMAC_Set(p *radius.Packet, value UTStarcomUNIMAXMAC) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 169, a)
}

func UTStarcomUNIMAXMAC_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 169)
}

type UTStarcomDefaultGateway uint32

var UTStarcomDefaultGateway_Strings = map[UTStarcomDefaultGateway]string{}

func (a UTStarcomDefaultGateway) String() string {
	if str, ok := UTStarcomDefaultGateway_Strings[a]; ok {
		return str
	}
	return "UTStarcomDefaultGateway(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomDefaultGateway_Add(p *radius.Packet, value UTStarcomDefaultGateway) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 170, a)
}

func UTStarcomDefaultGateway_Get(p *radius.Packet) (value UTStarcomDefaultGateway) {
	value, _ = UTStarcomDefaultGateway_Lookup(p)
	return
}

func UTStarcomDefaultGateway_Gets(p *radius.Packet) (values []UTStarcomDefaultGateway, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 170) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomDefaultGateway(i))
	}
	return
}

func UTStarcomDefaultGateway_Lookup(p *radius.Packet) (value UTStarcomDefaultGateway, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 170)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomDefaultGateway(i)
	return
}

func UTStarcomDefaultGateway_Set(p *radius.Packet, value UTStarcomDefaultGateway) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 170, a)
}

func UTStarcomDefaultGateway_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 170)
}

type UTStarcomCLIAccessLevel uint32

var UTStarcomCLIAccessLevel_Strings = map[UTStarcomCLIAccessLevel]string{}

func (a UTStarcomCLIAccessLevel) String() string {
	if str, ok := UTStarcomCLIAccessLevel_Strings[a]; ok {
		return str
	}
	return "UTStarcomCLIAccessLevel(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomCLIAccessLevel_Add(p *radius.Packet, value UTStarcomCLIAccessLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 171, a)
}

func UTStarcomCLIAccessLevel_Get(p *radius.Packet) (value UTStarcomCLIAccessLevel) {
	value, _ = UTStarcomCLIAccessLevel_Lookup(p)
	return
}

func UTStarcomCLIAccessLevel_Gets(p *radius.Packet) (values []UTStarcomCLIAccessLevel, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 171) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomCLIAccessLevel(i))
	}
	return
}

func UTStarcomCLIAccessLevel_Lookup(p *radius.Packet) (value UTStarcomCLIAccessLevel, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 171)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomCLIAccessLevel(i)
	return
}

func UTStarcomCLIAccessLevel_Set(p *radius.Packet, value UTStarcomCLIAccessLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 171, a)
}

func UTStarcomCLIAccessLevel_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 171)
}

func UTStarcomActInputOctets_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UTStarcom_AddVendor(p, 180, a)
}

func UTStarcomActInputOctets_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UTStarcom_AddVendor(p, 180, a)
}

func UTStarcomActInputOctets_Get(p *radius.Packet) (value []byte) {
	value, _ = UTStarcomActInputOctets_Lookup(p)
	return
}

func UTStarcomActInputOctets_GetString(p *radius.Packet) (value string) {
	value, _ = UTStarcomActInputOctets_LookupString(p)
	return
}

func UTStarcomActInputOctets_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _UTStarcom_GetsVendor(p, 180) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UTStarcomActInputOctets_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _UTStarcom_GetsVendor(p, 180) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UTStarcomActInputOctets_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 180)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UTStarcomActInputOctets_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 180)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UTStarcomActInputOctets_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UTStarcom_SetVendor(p, 180, a)
}

func UTStarcomActInputOctets_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UTStarcom_SetVendor(p, 180, a)
}

func UTStarcomActInputOctets_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 180)
}

func UTStarcomActOutputOctets_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UTStarcom_AddVendor(p, 181, a)
}

func UTStarcomActOutputOctets_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UTStarcom_AddVendor(p, 181, a)
}

func UTStarcomActOutputOctets_Get(p *radius.Packet) (value []byte) {
	value, _ = UTStarcomActOutputOctets_Lookup(p)
	return
}

func UTStarcomActOutputOctets_GetString(p *radius.Packet) (value string) {
	value, _ = UTStarcomActOutputOctets_LookupString(p)
	return
}

func UTStarcomActOutputOctets_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _UTStarcom_GetsVendor(p, 181) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UTStarcomActOutputOctets_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _UTStarcom_GetsVendor(p, 181) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UTStarcomActOutputOctets_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 181)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UTStarcomActOutputOctets_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 181)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UTStarcomActOutputOctets_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UTStarcom_SetVendor(p, 181, a)
}

func UTStarcomActOutputOctets_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UTStarcom_SetVendor(p, 181, a)
}

func UTStarcomActOutputOctets_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 181)
}

func UTStarcomActInputFrames_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UTStarcom_AddVendor(p, 182, a)
}

func UTStarcomActInputFrames_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UTStarcom_AddVendor(p, 182, a)
}

func UTStarcomActInputFrames_Get(p *radius.Packet) (value []byte) {
	value, _ = UTStarcomActInputFrames_Lookup(p)
	return
}

func UTStarcomActInputFrames_GetString(p *radius.Packet) (value string) {
	value, _ = UTStarcomActInputFrames_LookupString(p)
	return
}

func UTStarcomActInputFrames_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _UTStarcom_GetsVendor(p, 182) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UTStarcomActInputFrames_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _UTStarcom_GetsVendor(p, 182) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UTStarcomActInputFrames_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 182)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UTStarcomActInputFrames_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 182)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UTStarcomActInputFrames_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UTStarcom_SetVendor(p, 182, a)
}

func UTStarcomActInputFrames_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UTStarcom_SetVendor(p, 182, a)
}

func UTStarcomActInputFrames_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 182)
}

func UTStarcomActOutputFrames_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UTStarcom_AddVendor(p, 183, a)
}

func UTStarcomActOutputFrames_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UTStarcom_AddVendor(p, 183, a)
}

func UTStarcomActOutputFrames_Get(p *radius.Packet) (value []byte) {
	value, _ = UTStarcomActOutputFrames_Lookup(p)
	return
}

func UTStarcomActOutputFrames_GetString(p *radius.Packet) (value string) {
	value, _ = UTStarcomActOutputFrames_LookupString(p)
	return
}

func UTStarcomActOutputFrames_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _UTStarcom_GetsVendor(p, 183) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UTStarcomActOutputFrames_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _UTStarcom_GetsVendor(p, 183) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UTStarcomActOutputFrames_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 183)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UTStarcomActOutputFrames_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 183)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UTStarcomActOutputFrames_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _UTStarcom_SetVendor(p, 183, a)
}

func UTStarcomActOutputFrames_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _UTStarcom_SetVendor(p, 183, a)
}

func UTStarcomActOutputFrames_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 183)
}

type UTStarcomOnuMCFilterEnable uint32

var UTStarcomOnuMCFilterEnable_Strings = map[UTStarcomOnuMCFilterEnable]string{}

func (a UTStarcomOnuMCFilterEnable) String() string {
	if str, ok := UTStarcomOnuMCFilterEnable_Strings[a]; ok {
		return str
	}
	return "UTStarcomOnuMCFilterEnable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomOnuMCFilterEnable_Add(p *radius.Packet, value UTStarcomOnuMCFilterEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 184, a)
}

func UTStarcomOnuMCFilterEnable_Get(p *radius.Packet) (value UTStarcomOnuMCFilterEnable) {
	value, _ = UTStarcomOnuMCFilterEnable_Lookup(p)
	return
}

func UTStarcomOnuMCFilterEnable_Gets(p *radius.Packet) (values []UTStarcomOnuMCFilterEnable, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 184) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomOnuMCFilterEnable(i))
	}
	return
}

func UTStarcomOnuMCFilterEnable_Lookup(p *radius.Packet) (value UTStarcomOnuMCFilterEnable, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 184)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomOnuMCFilterEnable(i)
	return
}

func UTStarcomOnuMCFilterEnable_Set(p *radius.Packet, value UTStarcomOnuMCFilterEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 184, a)
}

func UTStarcomOnuMCFilterEnable_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 184)
}

type UTStarcomUNIAutoNegotiation uint32

var UTStarcomUNIAutoNegotiation_Strings = map[UTStarcomUNIAutoNegotiation]string{}

func (a UTStarcomUNIAutoNegotiation) String() string {
	if str, ok := UTStarcomUNIAutoNegotiation_Strings[a]; ok {
		return str
	}
	return "UTStarcomUNIAutoNegotiation(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomUNIAutoNegotiation_Add(p *radius.Packet, value UTStarcomUNIAutoNegotiation) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 185, a)
}

func UTStarcomUNIAutoNegotiation_Get(p *radius.Packet) (value UTStarcomUNIAutoNegotiation) {
	value, _ = UTStarcomUNIAutoNegotiation_Lookup(p)
	return
}

func UTStarcomUNIAutoNegotiation_Gets(p *radius.Packet) (values []UTStarcomUNIAutoNegotiation, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 185) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomUNIAutoNegotiation(i))
	}
	return
}

func UTStarcomUNIAutoNegotiation_Lookup(p *radius.Packet) (value UTStarcomUNIAutoNegotiation, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 185)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomUNIAutoNegotiation(i)
	return
}

func UTStarcomUNIAutoNegotiation_Set(p *radius.Packet, value UTStarcomUNIAutoNegotiation) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 185, a)
}

func UTStarcomUNIAutoNegotiation_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 185)
}

type UTStarcomUNISpeed uint32

var UTStarcomUNISpeed_Strings = map[UTStarcomUNISpeed]string{}

func (a UTStarcomUNISpeed) String() string {
	if str, ok := UTStarcomUNISpeed_Strings[a]; ok {
		return str
	}
	return "UTStarcomUNISpeed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomUNISpeed_Add(p *radius.Packet, value UTStarcomUNISpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 186, a)
}

func UTStarcomUNISpeed_Get(p *radius.Packet) (value UTStarcomUNISpeed) {
	value, _ = UTStarcomUNISpeed_Lookup(p)
	return
}

func UTStarcomUNISpeed_Gets(p *radius.Packet) (values []UTStarcomUNISpeed, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 186) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomUNISpeed(i))
	}
	return
}

func UTStarcomUNISpeed_Lookup(p *radius.Packet) (value UTStarcomUNISpeed, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 186)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomUNISpeed(i)
	return
}

func UTStarcomUNISpeed_Set(p *radius.Packet, value UTStarcomUNISpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 186, a)
}

func UTStarcomUNISpeed_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 186)
}

type UTStarcomUNIDuplex uint32

var UTStarcomUNIDuplex_Strings = map[UTStarcomUNIDuplex]string{}

func (a UTStarcomUNIDuplex) String() string {
	if str, ok := UTStarcomUNIDuplex_Strings[a]; ok {
		return str
	}
	return "UTStarcomUNIDuplex(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomUNIDuplex_Add(p *radius.Packet, value UTStarcomUNIDuplex) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 187, a)
}

func UTStarcomUNIDuplex_Get(p *radius.Packet) (value UTStarcomUNIDuplex) {
	value, _ = UTStarcomUNIDuplex_Lookup(p)
	return
}

func UTStarcomUNIDuplex_Gets(p *radius.Packet) (values []UTStarcomUNIDuplex, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 187) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomUNIDuplex(i))
	}
	return
}

func UTStarcomUNIDuplex_Lookup(p *radius.Packet) (value UTStarcomUNIDuplex, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 187)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomUNIDuplex(i)
	return
}

func UTStarcomUNIDuplex_Set(p *radius.Packet, value UTStarcomUNIDuplex) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 187, a)
}

func UTStarcomUNIDuplex_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 187)
}

type UTStarcomONUAdminStatus uint32

var UTStarcomONUAdminStatus_Strings = map[UTStarcomONUAdminStatus]string{}

func (a UTStarcomONUAdminStatus) String() string {
	if str, ok := UTStarcomONUAdminStatus_Strings[a]; ok {
		return str
	}
	return "UTStarcomONUAdminStatus(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomONUAdminStatus_Add(p *radius.Packet, value UTStarcomONUAdminStatus) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 188, a)
}

func UTStarcomONUAdminStatus_Get(p *radius.Packet) (value UTStarcomONUAdminStatus) {
	value, _ = UTStarcomONUAdminStatus_Lookup(p)
	return
}

func UTStarcomONUAdminStatus_Gets(p *radius.Packet) (values []UTStarcomONUAdminStatus, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 188) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomONUAdminStatus(i))
	}
	return
}

func UTStarcomONUAdminStatus_Lookup(p *radius.Packet) (value UTStarcomONUAdminStatus, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 188)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomONUAdminStatus(i)
	return
}

func UTStarcomONUAdminStatus_Set(p *radius.Packet, value UTStarcomONUAdminStatus) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 188, a)
}

func UTStarcomONUAdminStatus_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 188)
}

type UTStarcomONUFWSCUpgrade uint32

var UTStarcomONUFWSCUpgrade_Strings = map[UTStarcomONUFWSCUpgrade]string{}

func (a UTStarcomONUFWSCUpgrade) String() string {
	if str, ok := UTStarcomONUFWSCUpgrade_Strings[a]; ok {
		return str
	}
	return "UTStarcomONUFWSCUpgrade(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UTStarcomONUFWSCUpgrade_Add(p *radius.Packet, value UTStarcomONUFWSCUpgrade) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_AddVendor(p, 189, a)
}

func UTStarcomONUFWSCUpgrade_Get(p *radius.Packet) (value UTStarcomONUFWSCUpgrade) {
	value, _ = UTStarcomONUFWSCUpgrade_Lookup(p)
	return
}

func UTStarcomONUFWSCUpgrade_Gets(p *radius.Packet) (values []UTStarcomONUFWSCUpgrade, err error) {
	var i uint32
	for _, attr := range _UTStarcom_GetsVendor(p, 189) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UTStarcomONUFWSCUpgrade(i))
	}
	return
}

func UTStarcomONUFWSCUpgrade_Lookup(p *radius.Packet) (value UTStarcomONUFWSCUpgrade, err error) {
	a, ok := _UTStarcom_LookupVendor(p, 189)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UTStarcomONUFWSCUpgrade(i)
	return
}

func UTStarcomONUFWSCUpgrade_Set(p *radius.Packet, value UTStarcomONUFWSCUpgrade) (err error) {
	a := radius.NewInteger(uint32(value))
	return _UTStarcom_SetVendor(p, 189, a)
}

func UTStarcomONUFWSCUpgrade_Del(p *radius.Packet) {
	_UTStarcom_DelVendor(p, 189)
}
