// Code generated by radius-dict-gen. DO NOT EDIT.

package ericsson

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Ericsson_VendorID = 193
)

func _Ericsson_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Ericsson_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Ericsson_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Ericsson_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Ericsson_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Ericsson_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Ericsson_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Ericsson_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Ericsson_AddVendor(p, typ, attr)
}

func _Ericsson_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Ericsson_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

type EricssonViGBalance uint32

var EricssonViGBalance_Strings = map[EricssonViGBalance]string{}

func (a EricssonViGBalance) String() string {
	if str, ok := EricssonViGBalance_Strings[a]; ok {
		return str
	}
	return "EricssonViGBalance(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGBalance_Add(p *radius.Packet, value EricssonViGBalance) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 3, a)
}

func EricssonViGBalance_Get(p *radius.Packet) (value EricssonViGBalance) {
	value, _ = EricssonViGBalance_Lookup(p)
	return
}

func EricssonViGBalance_Gets(p *radius.Packet) (values []EricssonViGBalance, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGBalance(i))
	}
	return
}

func EricssonViGBalance_Lookup(p *radius.Packet) (value EricssonViGBalance, err error) {
	a, ok := _Ericsson_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGBalance(i)
	return
}

func EricssonViGBalance_Set(p *radius.Packet, value EricssonViGBalance) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 3, a)
}

func EricssonViGBalance_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 3)
}

type EricssonViGCodec uint32

var EricssonViGCodec_Strings = map[EricssonViGCodec]string{}

func (a EricssonViGCodec) String() string {
	if str, ok := EricssonViGCodec_Strings[a]; ok {
		return str
	}
	return "EricssonViGCodec(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGCodec_Add(p *radius.Packet, value EricssonViGCodec) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 4, a)
}

func EricssonViGCodec_Get(p *radius.Packet) (value EricssonViGCodec) {
	value, _ = EricssonViGCodec_Lookup(p)
	return
}

func EricssonViGCodec_Gets(p *radius.Packet) (values []EricssonViGCodec, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 4) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGCodec(i))
	}
	return
}

func EricssonViGCodec_Lookup(p *radius.Packet) (value EricssonViGCodec, err error) {
	a, ok := _Ericsson_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGCodec(i)
	return
}

func EricssonViGCodec_Set(p *radius.Packet, value EricssonViGCodec) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 4, a)
}

func EricssonViGCodec_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 4)
}

func EricssonViGCurrency_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 5, a)
}

func EricssonViGCurrency_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 5, a)
}

func EricssonViGCurrency_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGCurrency_Lookup(p)
	return
}

func EricssonViGCurrency_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGCurrency_LookupString(p)
	return
}

func EricssonViGCurrency_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCurrency_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCurrency_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGCurrency_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGCurrency_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 5, a)
}

func EricssonViGCurrency_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 5, a)
}

func EricssonViGCurrency_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 5)
}

func EricssonViGCurrencyQuote_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 6, a)
}

func EricssonViGCurrencyQuote_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 6, a)
}

func EricssonViGCurrencyQuote_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGCurrencyQuote_Lookup(p)
	return
}

func EricssonViGCurrencyQuote_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGCurrencyQuote_LookupString(p)
	return
}

func EricssonViGCurrencyQuote_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCurrencyQuote_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCurrencyQuote_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGCurrencyQuote_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGCurrencyQuote_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 6, a)
}

func EricssonViGCurrencyQuote_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 6, a)
}

func EricssonViGCurrencyQuote_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 6)
}

type EricssonViGEndpointType uint32

var EricssonViGEndpointType_Strings = map[EricssonViGEndpointType]string{}

func (a EricssonViGEndpointType) String() string {
	if str, ok := EricssonViGEndpointType_Strings[a]; ok {
		return str
	}
	return "EricssonViGEndpointType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGEndpointType_Add(p *radius.Packet, value EricssonViGEndpointType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 8, a)
}

func EricssonViGEndpointType_Get(p *radius.Packet) (value EricssonViGEndpointType) {
	value, _ = EricssonViGEndpointType_Lookup(p)
	return
}

func EricssonViGEndpointType_Gets(p *radius.Packet) (values []EricssonViGEndpointType, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 8) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGEndpointType(i))
	}
	return
}

func EricssonViGEndpointType_Lookup(p *radius.Packet) (value EricssonViGEndpointType, err error) {
	a, ok := _Ericsson_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGEndpointType(i)
	return
}

func EricssonViGEndpointType_Set(p *radius.Packet, value EricssonViGEndpointType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 8, a)
}

func EricssonViGEndpointType_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 8)
}

type EricssonViGSequenceNumber uint32

var EricssonViGSequenceNumber_Strings = map[EricssonViGSequenceNumber]string{}

func (a EricssonViGSequenceNumber) String() string {
	if str, ok := EricssonViGSequenceNumber_Strings[a]; ok {
		return str
	}
	return "EricssonViGSequenceNumber(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGSequenceNumber_Add(p *radius.Packet, value EricssonViGSequenceNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 9, a)
}

func EricssonViGSequenceNumber_Get(p *radius.Packet) (value EricssonViGSequenceNumber) {
	value, _ = EricssonViGSequenceNumber_Lookup(p)
	return
}

func EricssonViGSequenceNumber_Gets(p *radius.Packet) (values []EricssonViGSequenceNumber, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 9) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGSequenceNumber(i))
	}
	return
}

func EricssonViGSequenceNumber_Lookup(p *radius.Packet) (value EricssonViGSequenceNumber, err error) {
	a, ok := _Ericsson_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGSequenceNumber(i)
	return
}

func EricssonViGSequenceNumber_Set(p *radius.Packet, value EricssonViGSequenceNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 9, a)
}

func EricssonViGSequenceNumber_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 9)
}

func EricssonViGAccessAgentIPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 11, a)
}

func EricssonViGAccessAgentIPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = EricssonViGAccessAgentIPAddress_Lookup(p)
	return
}

func EricssonViGAccessAgentIPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ericsson_GetsVendor(p, 11) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGAccessAgentIPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ericsson_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func EricssonViGAccessAgentIPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 11, a)
}

func EricssonViGAccessAgentIPAddress_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 11)
}

type EricssonViGQoSClass uint32

var EricssonViGQoSClass_Strings = map[EricssonViGQoSClass]string{}

func (a EricssonViGQoSClass) String() string {
	if str, ok := EricssonViGQoSClass_Strings[a]; ok {
		return str
	}
	return "EricssonViGQoSClass(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGQoSClass_Add(p *radius.Packet, value EricssonViGQoSClass) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 12, a)
}

func EricssonViGQoSClass_Get(p *radius.Packet) (value EricssonViGQoSClass) {
	value, _ = EricssonViGQoSClass_Lookup(p)
	return
}

func EricssonViGQoSClass_Gets(p *radius.Packet) (values []EricssonViGQoSClass, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 12) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGQoSClass(i))
	}
	return
}

func EricssonViGQoSClass_Lookup(p *radius.Packet) (value EricssonViGQoSClass, err error) {
	a, ok := _Ericsson_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGQoSClass(i)
	return
}

func EricssonViGQoSClass_Set(p *radius.Packet, value EricssonViGQoSClass) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 12, a)
}

func EricssonViGQoSClass_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 12)
}

func EricssonViGDigestResponse_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 14, a)
}

func EricssonViGDigestResponse_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 14, a)
}

func EricssonViGDigestResponse_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGDigestResponse_Lookup(p)
	return
}

func EricssonViGDigestResponse_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGDigestResponse_LookupString(p)
	return
}

func EricssonViGDigestResponse_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 14) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGDigestResponse_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 14) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGDigestResponse_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGDigestResponse_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGDigestResponse_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 14, a)
}

func EricssonViGDigestResponse_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 14, a)
}

func EricssonViGDigestResponse_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 14)
}

func EricssonViGDigestAttributes_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 15, a)
}

func EricssonViGDigestAttributes_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 15, a)
}

func EricssonViGDigestAttributes_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGDigestAttributes_Lookup(p)
	return
}

func EricssonViGDigestAttributes_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGDigestAttributes_LookupString(p)
	return
}

func EricssonViGDigestAttributes_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 15) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGDigestAttributes_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 15) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGDigestAttributes_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGDigestAttributes_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGDigestAttributes_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 15, a)
}

func EricssonViGDigestAttributes_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 15, a)
}

func EricssonViGDigestAttributes_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 15)
}

func EricssonViGBusinessAgreementName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 16, a)
}

func EricssonViGBusinessAgreementName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 16, a)
}

func EricssonViGBusinessAgreementName_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGBusinessAgreementName_Lookup(p)
	return
}

func EricssonViGBusinessAgreementName_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGBusinessAgreementName_LookupString(p)
	return
}

func EricssonViGBusinessAgreementName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 16) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGBusinessAgreementName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 16) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGBusinessAgreementName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGBusinessAgreementName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGBusinessAgreementName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 16, a)
}

func EricssonViGBusinessAgreementName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 16, a)
}

func EricssonViGBusinessAgreementName_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 16)
}

type EricssonViGCallRole uint32

var EricssonViGCallRole_Strings = map[EricssonViGCallRole]string{}

func (a EricssonViGCallRole) String() string {
	if str, ok := EricssonViGCallRole_Strings[a]; ok {
		return str
	}
	return "EricssonViGCallRole(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGCallRole_Add(p *radius.Packet, value EricssonViGCallRole) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 17, a)
}

func EricssonViGCallRole_Get(p *radius.Packet) (value EricssonViGCallRole) {
	value, _ = EricssonViGCallRole_Lookup(p)
	return
}

func EricssonViGCallRole_Gets(p *radius.Packet) (values []EricssonViGCallRole, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 17) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGCallRole(i))
	}
	return
}

func EricssonViGCallRole_Lookup(p *radius.Packet) (value EricssonViGCallRole, err error) {
	a, ok := _Ericsson_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGCallRole(i)
	return
}

func EricssonViGCallRole_Set(p *radius.Packet, value EricssonViGCallRole) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 17, a)
}

func EricssonViGCallRole_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 17)
}

func EricssonViGRemoteSKUAIPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 20, a)
}

func EricssonViGRemoteSKUAIPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = EricssonViGRemoteSKUAIPAddress_Lookup(p)
	return
}

func EricssonViGRemoteSKUAIPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ericsson_GetsVendor(p, 20) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGRemoteSKUAIPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ericsson_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func EricssonViGRemoteSKUAIPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 20, a)
}

func EricssonViGRemoteSKUAIPAddress_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 20)
}

func EricssonViGSite_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 23, a)
}

func EricssonViGSite_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 23, a)
}

func EricssonViGSite_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGSite_Lookup(p)
	return
}

func EricssonViGSite_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGSite_LookupString(p)
	return
}

func EricssonViGSite_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 23) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGSite_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 23) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGSite_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGSite_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGSite_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 23, a)
}

func EricssonViGSite_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 23, a)
}

func EricssonViGSite_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 23)
}

type EricssonViGTTLRelative uint32

var EricssonViGTTLRelative_Strings = map[EricssonViGTTLRelative]string{}

func (a EricssonViGTTLRelative) String() string {
	if str, ok := EricssonViGTTLRelative_Strings[a]; ok {
		return str
	}
	return "EricssonViGTTLRelative(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGTTLRelative_Add(p *radius.Packet, value EricssonViGTTLRelative) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 32, a)
}

func EricssonViGTTLRelative_Get(p *radius.Packet) (value EricssonViGTTLRelative) {
	value, _ = EricssonViGTTLRelative_Lookup(p)
	return
}

func EricssonViGTTLRelative_Gets(p *radius.Packet) (values []EricssonViGTTLRelative, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 32) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGTTLRelative(i))
	}
	return
}

func EricssonViGTTLRelative_Lookup(p *radius.Packet) (value EricssonViGTTLRelative, err error) {
	a, ok := _Ericsson_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGTTLRelative(i)
	return
}

func EricssonViGTTLRelative_Set(p *radius.Packet, value EricssonViGTTLRelative) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 32, a)
}

func EricssonViGTTLRelative_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 32)
}

type EricssonViGAccountErrorReason uint32

var EricssonViGAccountErrorReason_Strings = map[EricssonViGAccountErrorReason]string{}

func (a EricssonViGAccountErrorReason) String() string {
	if str, ok := EricssonViGAccountErrorReason_Strings[a]; ok {
		return str
	}
	return "EricssonViGAccountErrorReason(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGAccountErrorReason_Add(p *radius.Packet, value EricssonViGAccountErrorReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 33, a)
}

func EricssonViGAccountErrorReason_Get(p *radius.Packet) (value EricssonViGAccountErrorReason) {
	value, _ = EricssonViGAccountErrorReason_Lookup(p)
	return
}

func EricssonViGAccountErrorReason_Gets(p *radius.Packet) (values []EricssonViGAccountErrorReason, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 33) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGAccountErrorReason(i))
	}
	return
}

func EricssonViGAccountErrorReason_Lookup(p *radius.Packet) (value EricssonViGAccountErrorReason, err error) {
	a, ok := _Ericsson_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGAccountErrorReason(i)
	return
}

func EricssonViGAccountErrorReason_Set(p *radius.Packet, value EricssonViGAccountErrorReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 33, a)
}

func EricssonViGAccountErrorReason_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 33)
}

type EricssonViGLayerIdentity uint32

var EricssonViGLayerIdentity_Strings = map[EricssonViGLayerIdentity]string{}

func (a EricssonViGLayerIdentity) String() string {
	if str, ok := EricssonViGLayerIdentity_Strings[a]; ok {
		return str
	}
	return "EricssonViGLayerIdentity(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGLayerIdentity_Add(p *radius.Packet, value EricssonViGLayerIdentity) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 34, a)
}

func EricssonViGLayerIdentity_Get(p *radius.Packet) (value EricssonViGLayerIdentity) {
	value, _ = EricssonViGLayerIdentity_Lookup(p)
	return
}

func EricssonViGLayerIdentity_Gets(p *radius.Packet) (values []EricssonViGLayerIdentity, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 34) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGLayerIdentity(i))
	}
	return
}

func EricssonViGLayerIdentity_Lookup(p *radius.Packet) (value EricssonViGLayerIdentity, err error) {
	a, ok := _Ericsson_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGLayerIdentity(i)
	return
}

func EricssonViGLayerIdentity_Set(p *radius.Packet, value EricssonViGLayerIdentity) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 34, a)
}

func EricssonViGLayerIdentity_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 34)
}

type EricssonViGMajorProtocolVersion uint32

var EricssonViGMajorProtocolVersion_Strings = map[EricssonViGMajorProtocolVersion]string{}

func (a EricssonViGMajorProtocolVersion) String() string {
	if str, ok := EricssonViGMajorProtocolVersion_Strings[a]; ok {
		return str
	}
	return "EricssonViGMajorProtocolVersion(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGMajorProtocolVersion_Add(p *radius.Packet, value EricssonViGMajorProtocolVersion) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 35, a)
}

func EricssonViGMajorProtocolVersion_Get(p *radius.Packet) (value EricssonViGMajorProtocolVersion) {
	value, _ = EricssonViGMajorProtocolVersion_Lookup(p)
	return
}

func EricssonViGMajorProtocolVersion_Gets(p *radius.Packet) (values []EricssonViGMajorProtocolVersion, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 35) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGMajorProtocolVersion(i))
	}
	return
}

func EricssonViGMajorProtocolVersion_Lookup(p *radius.Packet) (value EricssonViGMajorProtocolVersion, err error) {
	a, ok := _Ericsson_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGMajorProtocolVersion(i)
	return
}

func EricssonViGMajorProtocolVersion_Set(p *radius.Packet, value EricssonViGMajorProtocolVersion) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 35, a)
}

func EricssonViGMajorProtocolVersion_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 35)
}

type EricssonViGMinorProtocolVersion uint32

var EricssonViGMinorProtocolVersion_Strings = map[EricssonViGMinorProtocolVersion]string{}

func (a EricssonViGMinorProtocolVersion) String() string {
	if str, ok := EricssonViGMinorProtocolVersion_Strings[a]; ok {
		return str
	}
	return "EricssonViGMinorProtocolVersion(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGMinorProtocolVersion_Add(p *radius.Packet, value EricssonViGMinorProtocolVersion) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 36, a)
}

func EricssonViGMinorProtocolVersion_Get(p *radius.Packet) (value EricssonViGMinorProtocolVersion) {
	value, _ = EricssonViGMinorProtocolVersion_Lookup(p)
	return
}

func EricssonViGMinorProtocolVersion_Gets(p *radius.Packet) (values []EricssonViGMinorProtocolVersion, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 36) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGMinorProtocolVersion(i))
	}
	return
}

func EricssonViGMinorProtocolVersion_Lookup(p *radius.Packet) (value EricssonViGMinorProtocolVersion, err error) {
	a, ok := _Ericsson_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGMinorProtocolVersion(i)
	return
}

func EricssonViGMinorProtocolVersion_Set(p *radius.Packet, value EricssonViGMinorProtocolVersion) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 36, a)
}

func EricssonViGMinorProtocolVersion_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 36)
}

type EricssonViGAuthenticationType uint32

var EricssonViGAuthenticationType_Strings = map[EricssonViGAuthenticationType]string{}

func (a EricssonViGAuthenticationType) String() string {
	if str, ok := EricssonViGAuthenticationType_Strings[a]; ok {
		return str
	}
	return "EricssonViGAuthenticationType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGAuthenticationType_Add(p *radius.Packet, value EricssonViGAuthenticationType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 37, a)
}

func EricssonViGAuthenticationType_Get(p *radius.Packet) (value EricssonViGAuthenticationType) {
	value, _ = EricssonViGAuthenticationType_Lookup(p)
	return
}

func EricssonViGAuthenticationType_Gets(p *radius.Packet) (values []EricssonViGAuthenticationType, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 37) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGAuthenticationType(i))
	}
	return
}

func EricssonViGAuthenticationType_Lookup(p *radius.Packet) (value EricssonViGAuthenticationType, err error) {
	a, ok := _Ericsson_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGAuthenticationType(i)
	return
}

func EricssonViGAuthenticationType_Set(p *radius.Packet, value EricssonViGAuthenticationType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 37, a)
}

func EricssonViGAuthenticationType_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 37)
}

type EricssonViGTrustedAccess uint32

var EricssonViGTrustedAccess_Strings = map[EricssonViGTrustedAccess]string{}

func (a EricssonViGTrustedAccess) String() string {
	if str, ok := EricssonViGTrustedAccess_Strings[a]; ok {
		return str
	}
	return "EricssonViGTrustedAccess(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGTrustedAccess_Add(p *radius.Packet, value EricssonViGTrustedAccess) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 38, a)
}

func EricssonViGTrustedAccess_Get(p *radius.Packet) (value EricssonViGTrustedAccess) {
	value, _ = EricssonViGTrustedAccess_Lookup(p)
	return
}

func EricssonViGTrustedAccess_Gets(p *radius.Packet) (values []EricssonViGTrustedAccess, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 38) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGTrustedAccess(i))
	}
	return
}

func EricssonViGTrustedAccess_Lookup(p *radius.Packet) (value EricssonViGTrustedAccess, err error) {
	a, ok := _Ericsson_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGTrustedAccess(i)
	return
}

func EricssonViGTrustedAccess_Set(p *radius.Packet, value EricssonViGTrustedAccess) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 38, a)
}

func EricssonViGTrustedAccess_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 38)
}

func EricssonViGUserName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 39, a)
}

func EricssonViGUserName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 39, a)
}

func EricssonViGUserName_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGUserName_Lookup(p)
	return
}

func EricssonViGUserName_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGUserName_LookupString(p)
	return
}

func EricssonViGUserName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 39) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGUserName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 39) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGUserName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGUserName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGUserName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 39, a)
}

func EricssonViGUserName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 39, a)
}

func EricssonViGUserName_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 39)
}

func EricssonViGGlobalUniqueCallID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 40, a)
}

func EricssonViGGlobalUniqueCallID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 40, a)
}

func EricssonViGGlobalUniqueCallID_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGGlobalUniqueCallID_Lookup(p)
	return
}

func EricssonViGGlobalUniqueCallID_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGGlobalUniqueCallID_LookupString(p)
	return
}

func EricssonViGGlobalUniqueCallID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 40) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGGlobalUniqueCallID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 40) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGGlobalUniqueCallID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGGlobalUniqueCallID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGGlobalUniqueCallID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 40, a)
}

func EricssonViGGlobalUniqueCallID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 40, a)
}

func EricssonViGGlobalUniqueCallID_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 40)
}

func EricssonViGGlobalUniqueServiceID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 41, a)
}

func EricssonViGGlobalUniqueServiceID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 41, a)
}

func EricssonViGGlobalUniqueServiceID_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGGlobalUniqueServiceID_Lookup(p)
	return
}

func EricssonViGGlobalUniqueServiceID_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGGlobalUniqueServiceID_LookupString(p)
	return
}

func EricssonViGGlobalUniqueServiceID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 41) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGGlobalUniqueServiceID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 41) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGGlobalUniqueServiceID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGGlobalUniqueServiceID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGGlobalUniqueServiceID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 41, a)
}

func EricssonViGGlobalUniqueServiceID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 41, a)
}

func EricssonViGGlobalUniqueServiceID_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 41)
}

type EricssonViGInterimInterval uint32

var EricssonViGInterimInterval_Strings = map[EricssonViGInterimInterval]string{}

func (a EricssonViGInterimInterval) String() string {
	if str, ok := EricssonViGInterimInterval_Strings[a]; ok {
		return str
	}
	return "EricssonViGInterimInterval(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGInterimInterval_Add(p *radius.Packet, value EricssonViGInterimInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 42, a)
}

func EricssonViGInterimInterval_Get(p *radius.Packet) (value EricssonViGInterimInterval) {
	value, _ = EricssonViGInterimInterval_Lookup(p)
	return
}

func EricssonViGInterimInterval_Gets(p *radius.Packet) (values []EricssonViGInterimInterval, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 42) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGInterimInterval(i))
	}
	return
}

func EricssonViGInterimInterval_Lookup(p *radius.Packet) (value EricssonViGInterimInterval, err error) {
	a, ok := _Ericsson_LookupVendor(p, 42)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGInterimInterval(i)
	return
}

func EricssonViGInterimInterval_Set(p *radius.Packet, value EricssonViGInterimInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 42, a)
}

func EricssonViGInterimInterval_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 42)
}

type EricssonViGAliveIndicator uint32

var EricssonViGAliveIndicator_Strings = map[EricssonViGAliveIndicator]string{}

func (a EricssonViGAliveIndicator) String() string {
	if str, ok := EricssonViGAliveIndicator_Strings[a]; ok {
		return str
	}
	return "EricssonViGAliveIndicator(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGAliveIndicator_Add(p *radius.Packet, value EricssonViGAliveIndicator) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 43, a)
}

func EricssonViGAliveIndicator_Get(p *radius.Packet) (value EricssonViGAliveIndicator) {
	value, _ = EricssonViGAliveIndicator_Lookup(p)
	return
}

func EricssonViGAliveIndicator_Gets(p *radius.Packet) (values []EricssonViGAliveIndicator, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 43) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGAliveIndicator(i))
	}
	return
}

func EricssonViGAliveIndicator_Lookup(p *radius.Packet) (value EricssonViGAliveIndicator, err error) {
	a, ok := _Ericsson_LookupVendor(p, 43)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGAliveIndicator(i)
	return
}

func EricssonViGAliveIndicator_Set(p *radius.Packet, value EricssonViGAliveIndicator) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 43, a)
}

func EricssonViGAliveIndicator_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 43)
}

type EricssonViGTTLAbsolute uint32

var EricssonViGTTLAbsolute_Strings = map[EricssonViGTTLAbsolute]string{}

func (a EricssonViGTTLAbsolute) String() string {
	if str, ok := EricssonViGTTLAbsolute_Strings[a]; ok {
		return str
	}
	return "EricssonViGTTLAbsolute(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGTTLAbsolute_Add(p *radius.Packet, value EricssonViGTTLAbsolute) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 44, a)
}

func EricssonViGTTLAbsolute_Get(p *radius.Packet) (value EricssonViGTTLAbsolute) {
	value, _ = EricssonViGTTLAbsolute_Lookup(p)
	return
}

func EricssonViGTTLAbsolute_Gets(p *radius.Packet) (values []EricssonViGTTLAbsolute, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 44) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGTTLAbsolute(i))
	}
	return
}

func EricssonViGTTLAbsolute_Lookup(p *radius.Packet) (value EricssonViGTTLAbsolute, err error) {
	a, ok := _Ericsson_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGTTLAbsolute(i)
	return
}

func EricssonViGTTLAbsolute_Set(p *radius.Packet, value EricssonViGTTLAbsolute) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 44, a)
}

func EricssonViGTTLAbsolute_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 44)
}

type EricssonViGTTLStartEvent uint32

var EricssonViGTTLStartEvent_Strings = map[EricssonViGTTLStartEvent]string{}

func (a EricssonViGTTLStartEvent) String() string {
	if str, ok := EricssonViGTTLStartEvent_Strings[a]; ok {
		return str
	}
	return "EricssonViGTTLStartEvent(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGTTLStartEvent_Add(p *radius.Packet, value EricssonViGTTLStartEvent) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 45, a)
}

func EricssonViGTTLStartEvent_Get(p *radius.Packet) (value EricssonViGTTLStartEvent) {
	value, _ = EricssonViGTTLStartEvent_Lookup(p)
	return
}

func EricssonViGTTLStartEvent_Gets(p *radius.Packet) (values []EricssonViGTTLStartEvent, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 45) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGTTLStartEvent(i))
	}
	return
}

func EricssonViGTTLStartEvent_Lookup(p *radius.Packet) (value EricssonViGTTLStartEvent, err error) {
	a, ok := _Ericsson_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGTTLStartEvent(i)
	return
}

func EricssonViGTTLStartEvent_Set(p *radius.Packet, value EricssonViGTTLStartEvent) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 45, a)
}

func EricssonViGTTLStartEvent_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 45)
}

func EricssonViGSKIPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 46, a)
}

func EricssonViGSKIPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = EricssonViGSKIPAddress_Lookup(p)
	return
}

func EricssonViGSKIPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ericsson_GetsVendor(p, 46) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGSKIPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ericsson_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func EricssonViGSKIPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 46, a)
}

func EricssonViGSKIPAddress_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 46)
}

func EricssonViGUAIPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 47, a)
}

func EricssonViGUAIPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = EricssonViGUAIPAddress_Lookup(p)
	return
}

func EricssonViGUAIPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ericsson_GetsVendor(p, 47) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGUAIPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ericsson_LookupVendor(p, 47)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func EricssonViGUAIPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 47, a)
}

func EricssonViGUAIPAddress_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 47)
}

func EricssonViGSAIPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 48, a)
}

func EricssonViGSAIPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = EricssonViGSAIPAddress_Lookup(p)
	return
}

func EricssonViGSAIPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ericsson_GetsVendor(p, 48) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGSAIPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ericsson_LookupVendor(p, 48)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func EricssonViGSAIPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 48, a)
}

func EricssonViGSAIPAddress_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 48)
}

func EricssonViGCallingE164Number_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 49, a)
}

func EricssonViGCallingE164Number_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 49, a)
}

func EricssonViGCallingE164Number_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGCallingE164Number_Lookup(p)
	return
}

func EricssonViGCallingE164Number_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGCallingE164Number_LookupString(p)
	return
}

func EricssonViGCallingE164Number_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 49) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCallingE164Number_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 49) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCallingE164Number_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 49)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGCallingE164Number_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 49)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGCallingE164Number_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 49, a)
}

func EricssonViGCallingE164Number_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 49, a)
}

func EricssonViGCallingE164Number_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 49)
}

func EricssonViGCallingH323Id_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 50, a)
}

func EricssonViGCallingH323Id_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 50, a)
}

func EricssonViGCallingH323Id_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGCallingH323Id_Lookup(p)
	return
}

func EricssonViGCallingH323Id_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGCallingH323Id_LookupString(p)
	return
}

func EricssonViGCallingH323Id_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 50) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCallingH323Id_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 50) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCallingH323Id_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 50)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGCallingH323Id_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 50)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGCallingH323Id_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 50, a)
}

func EricssonViGCallingH323Id_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 50, a)
}

func EricssonViGCallingH323Id_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 50)
}

func EricssonViGCallingEmailAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 51, a)
}

func EricssonViGCallingEmailAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 51, a)
}

func EricssonViGCallingEmailAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGCallingEmailAddress_Lookup(p)
	return
}

func EricssonViGCallingEmailAddress_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGCallingEmailAddress_LookupString(p)
	return
}

func EricssonViGCallingEmailAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 51) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCallingEmailAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 51) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCallingEmailAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 51)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGCallingEmailAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 51)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGCallingEmailAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 51, a)
}

func EricssonViGCallingEmailAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 51, a)
}

func EricssonViGCallingEmailAddress_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 51)
}

func EricssonViGDialledE164Number_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 52, a)
}

func EricssonViGDialledE164Number_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 52, a)
}

func EricssonViGDialledE164Number_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGDialledE164Number_Lookup(p)
	return
}

func EricssonViGDialledE164Number_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGDialledE164Number_LookupString(p)
	return
}

func EricssonViGDialledE164Number_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 52) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGDialledE164Number_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 52) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGDialledE164Number_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 52)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGDialledE164Number_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 52)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGDialledE164Number_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 52, a)
}

func EricssonViGDialledE164Number_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 52, a)
}

func EricssonViGDialledE164Number_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 52)
}

func EricssonViGDialledH323Id_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 53, a)
}

func EricssonViGDialledH323Id_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 53, a)
}

func EricssonViGDialledH323Id_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGDialledH323Id_Lookup(p)
	return
}

func EricssonViGDialledH323Id_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGDialledH323Id_LookupString(p)
	return
}

func EricssonViGDialledH323Id_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 53) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGDialledH323Id_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 53) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGDialledH323Id_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 53)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGDialledH323Id_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 53)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGDialledH323Id_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 53, a)
}

func EricssonViGDialledH323Id_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 53, a)
}

func EricssonViGDialledH323Id_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 53)
}

func EricssonViGDialledEmailAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 54, a)
}

func EricssonViGDialledEmailAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 54, a)
}

func EricssonViGDialledEmailAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGDialledEmailAddress_Lookup(p)
	return
}

func EricssonViGDialledEmailAddress_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGDialledEmailAddress_LookupString(p)
	return
}

func EricssonViGDialledEmailAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 54) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGDialledEmailAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 54) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGDialledEmailAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 54)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGDialledEmailAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 54)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGDialledEmailAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 54, a)
}

func EricssonViGDialledEmailAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 54, a)
}

func EricssonViGDialledEmailAddress_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 54)
}

func EricssonViGRoutedE164Number_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 55, a)
}

func EricssonViGRoutedE164Number_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 55, a)
}

func EricssonViGRoutedE164Number_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGRoutedE164Number_Lookup(p)
	return
}

func EricssonViGRoutedE164Number_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGRoutedE164Number_LookupString(p)
	return
}

func EricssonViGRoutedE164Number_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 55) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGRoutedE164Number_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 55) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGRoutedE164Number_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 55)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGRoutedE164Number_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 55)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGRoutedE164Number_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 55, a)
}

func EricssonViGRoutedE164Number_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 55, a)
}

func EricssonViGRoutedE164Number_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 55)
}

func EricssonViGRoutedH323Id_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 56, a)
}

func EricssonViGRoutedH323Id_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 56, a)
}

func EricssonViGRoutedH323Id_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGRoutedH323Id_Lookup(p)
	return
}

func EricssonViGRoutedH323Id_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGRoutedH323Id_LookupString(p)
	return
}

func EricssonViGRoutedH323Id_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 56) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGRoutedH323Id_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 56) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGRoutedH323Id_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 56)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGRoutedH323Id_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 56)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGRoutedH323Id_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 56, a)
}

func EricssonViGRoutedH323Id_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 56, a)
}

func EricssonViGRoutedH323Id_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 56)
}

func EricssonViGRoutedEmailAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 57, a)
}

func EricssonViGRoutedEmailAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 57, a)
}

func EricssonViGRoutedEmailAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGRoutedEmailAddress_Lookup(p)
	return
}

func EricssonViGRoutedEmailAddress_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGRoutedEmailAddress_LookupString(p)
	return
}

func EricssonViGRoutedEmailAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 57) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGRoutedEmailAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 57) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGRoutedEmailAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 57)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGRoutedEmailAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 57)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGRoutedEmailAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 57, a)
}

func EricssonViGRoutedEmailAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 57, a)
}

func EricssonViGRoutedEmailAddress_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 57)
}

func EricssonViGSiteKeeperName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 58, a)
}

func EricssonViGSiteKeeperName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 58, a)
}

func EricssonViGSiteKeeperName_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGSiteKeeperName_Lookup(p)
	return
}

func EricssonViGSiteKeeperName_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGSiteKeeperName_LookupString(p)
	return
}

func EricssonViGSiteKeeperName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 58) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGSiteKeeperName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 58) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGSiteKeeperName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 58)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGSiteKeeperName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 58)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGSiteKeeperName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 58, a)
}

func EricssonViGSiteKeeperName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 58, a)
}

func EricssonViGSiteKeeperName_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 58)
}

func EricssonViGAccessGroupName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 59, a)
}

func EricssonViGAccessGroupName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 59, a)
}

func EricssonViGAccessGroupName_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGAccessGroupName_Lookup(p)
	return
}

func EricssonViGAccessGroupName_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGAccessGroupName_LookupString(p)
	return
}

func EricssonViGAccessGroupName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 59) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGAccessGroupName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 59) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGAccessGroupName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 59)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGAccessGroupName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 59)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGAccessGroupName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 59, a)
}

func EricssonViGAccessGroupName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 59, a)
}

func EricssonViGAccessGroupName_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 59)
}

func EricssonViGAccessAgentName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 60, a)
}

func EricssonViGAccessAgentName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 60, a)
}

func EricssonViGAccessAgentName_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGAccessAgentName_Lookup(p)
	return
}

func EricssonViGAccessAgentName_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGAccessAgentName_LookupString(p)
	return
}

func EricssonViGAccessAgentName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 60) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGAccessAgentName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 60) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGAccessAgentName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGAccessAgentName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGAccessAgentName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 60, a)
}

func EricssonViGAccessAgentName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 60, a)
}

func EricssonViGAccessAgentName_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 60)
}

func EricssonViGUserAgentGroupName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 61, a)
}

func EricssonViGUserAgentGroupName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 61, a)
}

func EricssonViGUserAgentGroupName_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGUserAgentGroupName_Lookup(p)
	return
}

func EricssonViGUserAgentGroupName_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGUserAgentGroupName_LookupString(p)
	return
}

func EricssonViGUserAgentGroupName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 61) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGUserAgentGroupName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 61) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGUserAgentGroupName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGUserAgentGroupName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGUserAgentGroupName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 61, a)
}

func EricssonViGUserAgentGroupName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 61, a)
}

func EricssonViGUserAgentGroupName_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 61)
}

func EricssonViGUserAgentName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 62, a)
}

func EricssonViGUserAgentName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 62, a)
}

func EricssonViGUserAgentName_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGUserAgentName_Lookup(p)
	return
}

func EricssonViGUserAgentName_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGUserAgentName_LookupString(p)
	return
}

func EricssonViGUserAgentName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 62) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGUserAgentName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 62) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGUserAgentName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 62)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGUserAgentName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 62)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGUserAgentName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 62, a)
}

func EricssonViGUserAgentName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 62, a)
}

func EricssonViGUserAgentName_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 62)
}

type EricssonViGRoutingTariff uint32

var EricssonViGRoutingTariff_Strings = map[EricssonViGRoutingTariff]string{}

func (a EricssonViGRoutingTariff) String() string {
	if str, ok := EricssonViGRoutingTariff_Strings[a]; ok {
		return str
	}
	return "EricssonViGRoutingTariff(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGRoutingTariff_Add(p *radius.Packet, value EricssonViGRoutingTariff) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 63, a)
}

func EricssonViGRoutingTariff_Get(p *radius.Packet) (value EricssonViGRoutingTariff) {
	value, _ = EricssonViGRoutingTariff_Lookup(p)
	return
}

func EricssonViGRoutingTariff_Gets(p *radius.Packet) (values []EricssonViGRoutingTariff, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 63) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGRoutingTariff(i))
	}
	return
}

func EricssonViGRoutingTariff_Lookup(p *radius.Packet) (value EricssonViGRoutingTariff, err error) {
	a, ok := _Ericsson_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGRoutingTariff(i)
	return
}

func EricssonViGRoutingTariff_Set(p *radius.Packet, value EricssonViGRoutingTariff) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 63, a)
}

func EricssonViGRoutingTariff_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 63)
}

type EricssonViGReSelectionCounter uint32

var EricssonViGReSelectionCounter_Strings = map[EricssonViGReSelectionCounter]string{}

func (a EricssonViGReSelectionCounter) String() string {
	if str, ok := EricssonViGReSelectionCounter_Strings[a]; ok {
		return str
	}
	return "EricssonViGReSelectionCounter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGReSelectionCounter_Add(p *radius.Packet, value EricssonViGReSelectionCounter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 64, a)
}

func EricssonViGReSelectionCounter_Get(p *radius.Packet) (value EricssonViGReSelectionCounter) {
	value, _ = EricssonViGReSelectionCounter_Lookup(p)
	return
}

func EricssonViGReSelectionCounter_Gets(p *radius.Packet) (values []EricssonViGReSelectionCounter, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 64) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGReSelectionCounter(i))
	}
	return
}

func EricssonViGReSelectionCounter_Lookup(p *radius.Packet) (value EricssonViGReSelectionCounter, err error) {
	a, ok := _Ericsson_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGReSelectionCounter(i)
	return
}

func EricssonViGReSelectionCounter_Set(p *radius.Packet, value EricssonViGReSelectionCounter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 64, a)
}

func EricssonViGReSelectionCounter_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 64)
}

func EricssonViGCPNDigits_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 65, a)
}

func EricssonViGCPNDigits_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 65, a)
}

func EricssonViGCPNDigits_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGCPNDigits_Lookup(p)
	return
}

func EricssonViGCPNDigits_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGCPNDigits_LookupString(p)
	return
}

func EricssonViGCPNDigits_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 65) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCPNDigits_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 65) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCPNDigits_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGCPNDigits_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGCPNDigits_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 65, a)
}

func EricssonViGCPNDigits_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 65, a)
}

func EricssonViGCPNDigits_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 65)
}

type EricssonViGCPNTON uint32

var EricssonViGCPNTON_Strings = map[EricssonViGCPNTON]string{}

func (a EricssonViGCPNTON) String() string {
	if str, ok := EricssonViGCPNTON_Strings[a]; ok {
		return str
	}
	return "EricssonViGCPNTON(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGCPNTON_Add(p *radius.Packet, value EricssonViGCPNTON) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 66, a)
}

func EricssonViGCPNTON_Get(p *radius.Packet) (value EricssonViGCPNTON) {
	value, _ = EricssonViGCPNTON_Lookup(p)
	return
}

func EricssonViGCPNTON_Gets(p *radius.Packet) (values []EricssonViGCPNTON, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 66) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGCPNTON(i))
	}
	return
}

func EricssonViGCPNTON_Lookup(p *radius.Packet) (value EricssonViGCPNTON, err error) {
	a, ok := _Ericsson_LookupVendor(p, 66)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGCPNTON(i)
	return
}

func EricssonViGCPNTON_Set(p *radius.Packet, value EricssonViGCPNTON) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 66, a)
}

func EricssonViGCPNTON_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 66)
}

type EricssonViGCPNNP uint32

var EricssonViGCPNNP_Strings = map[EricssonViGCPNNP]string{}

func (a EricssonViGCPNNP) String() string {
	if str, ok := EricssonViGCPNNP_Strings[a]; ok {
		return str
	}
	return "EricssonViGCPNNP(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGCPNNP_Add(p *radius.Packet, value EricssonViGCPNNP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 67, a)
}

func EricssonViGCPNNP_Get(p *radius.Packet) (value EricssonViGCPNNP) {
	value, _ = EricssonViGCPNNP_Lookup(p)
	return
}

func EricssonViGCPNNP_Gets(p *radius.Packet) (values []EricssonViGCPNNP, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 67) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGCPNNP(i))
	}
	return
}

func EricssonViGCPNNP_Lookup(p *radius.Packet) (value EricssonViGCPNNP, err error) {
	a, ok := _Ericsson_LookupVendor(p, 67)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGCPNNP(i)
	return
}

func EricssonViGCPNNP_Set(p *radius.Packet, value EricssonViGCPNNP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 67, a)
}

func EricssonViGCPNNP_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 67)
}

type EricssonViGCPNPI uint32

var EricssonViGCPNPI_Strings = map[EricssonViGCPNPI]string{}

func (a EricssonViGCPNPI) String() string {
	if str, ok := EricssonViGCPNPI_Strings[a]; ok {
		return str
	}
	return "EricssonViGCPNPI(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGCPNPI_Add(p *radius.Packet, value EricssonViGCPNPI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 68, a)
}

func EricssonViGCPNPI_Get(p *radius.Packet) (value EricssonViGCPNPI) {
	value, _ = EricssonViGCPNPI_Lookup(p)
	return
}

func EricssonViGCPNPI_Gets(p *radius.Packet) (values []EricssonViGCPNPI, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 68) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGCPNPI(i))
	}
	return
}

func EricssonViGCPNPI_Lookup(p *radius.Packet) (value EricssonViGCPNPI, err error) {
	a, ok := _Ericsson_LookupVendor(p, 68)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGCPNPI(i)
	return
}

func EricssonViGCPNPI_Set(p *radius.Packet, value EricssonViGCPNPI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 68, a)
}

func EricssonViGCPNPI_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 68)
}

type EricssonViGCPNSI uint32

var EricssonViGCPNSI_Strings = map[EricssonViGCPNSI]string{}

func (a EricssonViGCPNSI) String() string {
	if str, ok := EricssonViGCPNSI_Strings[a]; ok {
		return str
	}
	return "EricssonViGCPNSI(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGCPNSI_Add(p *radius.Packet, value EricssonViGCPNSI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 69, a)
}

func EricssonViGCPNSI_Get(p *radius.Packet) (value EricssonViGCPNSI) {
	value, _ = EricssonViGCPNSI_Lookup(p)
	return
}

func EricssonViGCPNSI_Gets(p *radius.Packet) (values []EricssonViGCPNSI, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 69) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGCPNSI(i))
	}
	return
}

func EricssonViGCPNSI_Lookup(p *radius.Packet) (value EricssonViGCPNSI, err error) {
	a, ok := _Ericsson_LookupVendor(p, 69)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGCPNSI(i)
	return
}

func EricssonViGCPNSI_Set(p *radius.Packet, value EricssonViGCPNSI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 69, a)
}

func EricssonViGCPNSI_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 69)
}

func EricssonViGDialledNumDigits_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 70, a)
}

func EricssonViGDialledNumDigits_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 70, a)
}

func EricssonViGDialledNumDigits_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGDialledNumDigits_Lookup(p)
	return
}

func EricssonViGDialledNumDigits_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGDialledNumDigits_LookupString(p)
	return
}

func EricssonViGDialledNumDigits_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 70) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGDialledNumDigits_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 70) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGDialledNumDigits_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 70)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGDialledNumDigits_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 70)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGDialledNumDigits_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 70, a)
}

func EricssonViGDialledNumDigits_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 70, a)
}

func EricssonViGDialledNumDigits_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 70)
}

type EricssonViGDialledNumTON uint32

var EricssonViGDialledNumTON_Strings = map[EricssonViGDialledNumTON]string{}

func (a EricssonViGDialledNumTON) String() string {
	if str, ok := EricssonViGDialledNumTON_Strings[a]; ok {
		return str
	}
	return "EricssonViGDialledNumTON(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGDialledNumTON_Add(p *radius.Packet, value EricssonViGDialledNumTON) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 71, a)
}

func EricssonViGDialledNumTON_Get(p *radius.Packet) (value EricssonViGDialledNumTON) {
	value, _ = EricssonViGDialledNumTON_Lookup(p)
	return
}

func EricssonViGDialledNumTON_Gets(p *radius.Packet) (values []EricssonViGDialledNumTON, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 71) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGDialledNumTON(i))
	}
	return
}

func EricssonViGDialledNumTON_Lookup(p *radius.Packet) (value EricssonViGDialledNumTON, err error) {
	a, ok := _Ericsson_LookupVendor(p, 71)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGDialledNumTON(i)
	return
}

func EricssonViGDialledNumTON_Set(p *radius.Packet, value EricssonViGDialledNumTON) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 71, a)
}

func EricssonViGDialledNumTON_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 71)
}

type EricssonViGDialledNumNP uint32

var EricssonViGDialledNumNP_Strings = map[EricssonViGDialledNumNP]string{}

func (a EricssonViGDialledNumNP) String() string {
	if str, ok := EricssonViGDialledNumNP_Strings[a]; ok {
		return str
	}
	return "EricssonViGDialledNumNP(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGDialledNumNP_Add(p *radius.Packet, value EricssonViGDialledNumNP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 72, a)
}

func EricssonViGDialledNumNP_Get(p *radius.Packet) (value EricssonViGDialledNumNP) {
	value, _ = EricssonViGDialledNumNP_Lookup(p)
	return
}

func EricssonViGDialledNumNP_Gets(p *radius.Packet) (values []EricssonViGDialledNumNP, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 72) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGDialledNumNP(i))
	}
	return
}

func EricssonViGDialledNumNP_Lookup(p *radius.Packet) (value EricssonViGDialledNumNP, err error) {
	a, ok := _Ericsson_LookupVendor(p, 72)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGDialledNumNP(i)
	return
}

func EricssonViGDialledNumNP_Set(p *radius.Packet, value EricssonViGDialledNumNP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 72, a)
}

func EricssonViGDialledNumNP_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 72)
}

func EricssonViGRoutingNumDigits_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 73, a)
}

func EricssonViGRoutingNumDigits_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 73, a)
}

func EricssonViGRoutingNumDigits_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGRoutingNumDigits_Lookup(p)
	return
}

func EricssonViGRoutingNumDigits_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGRoutingNumDigits_LookupString(p)
	return
}

func EricssonViGRoutingNumDigits_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 73) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGRoutingNumDigits_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 73) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGRoutingNumDigits_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGRoutingNumDigits_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGRoutingNumDigits_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 73, a)
}

func EricssonViGRoutingNumDigits_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 73, a)
}

func EricssonViGRoutingNumDigits_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 73)
}

type EricssonViGRoutingNumTON uint32

var EricssonViGRoutingNumTON_Strings = map[EricssonViGRoutingNumTON]string{}

func (a EricssonViGRoutingNumTON) String() string {
	if str, ok := EricssonViGRoutingNumTON_Strings[a]; ok {
		return str
	}
	return "EricssonViGRoutingNumTON(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGRoutingNumTON_Add(p *radius.Packet, value EricssonViGRoutingNumTON) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 74, a)
}

func EricssonViGRoutingNumTON_Get(p *radius.Packet) (value EricssonViGRoutingNumTON) {
	value, _ = EricssonViGRoutingNumTON_Lookup(p)
	return
}

func EricssonViGRoutingNumTON_Gets(p *radius.Packet) (values []EricssonViGRoutingNumTON, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 74) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGRoutingNumTON(i))
	}
	return
}

func EricssonViGRoutingNumTON_Lookup(p *radius.Packet) (value EricssonViGRoutingNumTON, err error) {
	a, ok := _Ericsson_LookupVendor(p, 74)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGRoutingNumTON(i)
	return
}

func EricssonViGRoutingNumTON_Set(p *radius.Packet, value EricssonViGRoutingNumTON) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 74, a)
}

func EricssonViGRoutingNumTON_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 74)
}

type EricssonViGRoutingNumNP uint32

var EricssonViGRoutingNumNP_Strings = map[EricssonViGRoutingNumNP]string{}

func (a EricssonViGRoutingNumNP) String() string {
	if str, ok := EricssonViGRoutingNumNP_Strings[a]; ok {
		return str
	}
	return "EricssonViGRoutingNumNP(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGRoutingNumNP_Add(p *radius.Packet, value EricssonViGRoutingNumNP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 75, a)
}

func EricssonViGRoutingNumNP_Get(p *radius.Packet) (value EricssonViGRoutingNumNP) {
	value, _ = EricssonViGRoutingNumNP_Lookup(p)
	return
}

func EricssonViGRoutingNumNP_Gets(p *radius.Packet) (values []EricssonViGRoutingNumNP, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 75) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGRoutingNumNP(i))
	}
	return
}

func EricssonViGRoutingNumNP_Lookup(p *radius.Packet) (value EricssonViGRoutingNumNP, err error) {
	a, ok := _Ericsson_LookupVendor(p, 75)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGRoutingNumNP(i)
	return
}

func EricssonViGRoutingNumNP_Set(p *radius.Packet, value EricssonViGRoutingNumNP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 75, a)
}

func EricssonViGRoutingNumNP_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 75)
}

func EricssonViGRedirectingNumDigits_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 76, a)
}

func EricssonViGRedirectingNumDigits_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 76, a)
}

func EricssonViGRedirectingNumDigits_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGRedirectingNumDigits_Lookup(p)
	return
}

func EricssonViGRedirectingNumDigits_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGRedirectingNumDigits_LookupString(p)
	return
}

func EricssonViGRedirectingNumDigits_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 76) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGRedirectingNumDigits_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 76) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGRedirectingNumDigits_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 76)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGRedirectingNumDigits_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 76)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGRedirectingNumDigits_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 76, a)
}

func EricssonViGRedirectingNumDigits_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 76, a)
}

func EricssonViGRedirectingNumDigits_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 76)
}

type EricssonViGRedirectingNumTON uint32

var EricssonViGRedirectingNumTON_Strings = map[EricssonViGRedirectingNumTON]string{}

func (a EricssonViGRedirectingNumTON) String() string {
	if str, ok := EricssonViGRedirectingNumTON_Strings[a]; ok {
		return str
	}
	return "EricssonViGRedirectingNumTON(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGRedirectingNumTON_Add(p *radius.Packet, value EricssonViGRedirectingNumTON) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 77, a)
}

func EricssonViGRedirectingNumTON_Get(p *radius.Packet) (value EricssonViGRedirectingNumTON) {
	value, _ = EricssonViGRedirectingNumTON_Lookup(p)
	return
}

func EricssonViGRedirectingNumTON_Gets(p *radius.Packet) (values []EricssonViGRedirectingNumTON, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 77) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGRedirectingNumTON(i))
	}
	return
}

func EricssonViGRedirectingNumTON_Lookup(p *radius.Packet) (value EricssonViGRedirectingNumTON, err error) {
	a, ok := _Ericsson_LookupVendor(p, 77)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGRedirectingNumTON(i)
	return
}

func EricssonViGRedirectingNumTON_Set(p *radius.Packet, value EricssonViGRedirectingNumTON) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 77, a)
}

func EricssonViGRedirectingNumTON_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 77)
}

type EricssonViGRedirectingNumNP uint32

var EricssonViGRedirectingNumNP_Strings = map[EricssonViGRedirectingNumNP]string{}

func (a EricssonViGRedirectingNumNP) String() string {
	if str, ok := EricssonViGRedirectingNumNP_Strings[a]; ok {
		return str
	}
	return "EricssonViGRedirectingNumNP(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGRedirectingNumNP_Add(p *radius.Packet, value EricssonViGRedirectingNumNP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 78, a)
}

func EricssonViGRedirectingNumNP_Get(p *radius.Packet) (value EricssonViGRedirectingNumNP) {
	value, _ = EricssonViGRedirectingNumNP_Lookup(p)
	return
}

func EricssonViGRedirectingNumNP_Gets(p *radius.Packet) (values []EricssonViGRedirectingNumNP, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 78) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGRedirectingNumNP(i))
	}
	return
}

func EricssonViGRedirectingNumNP_Lookup(p *radius.Packet) (value EricssonViGRedirectingNumNP, err error) {
	a, ok := _Ericsson_LookupVendor(p, 78)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGRedirectingNumNP(i)
	return
}

func EricssonViGRedirectingNumNP_Set(p *radius.Packet, value EricssonViGRedirectingNumNP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 78, a)
}

func EricssonViGRedirectingNumNP_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 78)
}

type EricssonViGRedirectingNumPI uint32

var EricssonViGRedirectingNumPI_Strings = map[EricssonViGRedirectingNumPI]string{}

func (a EricssonViGRedirectingNumPI) String() string {
	if str, ok := EricssonViGRedirectingNumPI_Strings[a]; ok {
		return str
	}
	return "EricssonViGRedirectingNumPI(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGRedirectingNumPI_Add(p *radius.Packet, value EricssonViGRedirectingNumPI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 79, a)
}

func EricssonViGRedirectingNumPI_Get(p *radius.Packet) (value EricssonViGRedirectingNumPI) {
	value, _ = EricssonViGRedirectingNumPI_Lookup(p)
	return
}

func EricssonViGRedirectingNumPI_Gets(p *radius.Packet) (values []EricssonViGRedirectingNumPI, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 79) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGRedirectingNumPI(i))
	}
	return
}

func EricssonViGRedirectingNumPI_Lookup(p *radius.Packet) (value EricssonViGRedirectingNumPI, err error) {
	a, ok := _Ericsson_LookupVendor(p, 79)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGRedirectingNumPI(i)
	return
}

func EricssonViGRedirectingNumPI_Set(p *radius.Packet, value EricssonViGRedirectingNumPI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 79, a)
}

func EricssonViGRedirectingNumPI_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 79)
}

type EricssonViGRedirectingNumRFD uint32

var EricssonViGRedirectingNumRFD_Strings = map[EricssonViGRedirectingNumRFD]string{}

func (a EricssonViGRedirectingNumRFD) String() string {
	if str, ok := EricssonViGRedirectingNumRFD_Strings[a]; ok {
		return str
	}
	return "EricssonViGRedirectingNumRFD(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGRedirectingNumRFD_Add(p *radius.Packet, value EricssonViGRedirectingNumRFD) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 80, a)
}

func EricssonViGRedirectingNumRFD_Get(p *radius.Packet) (value EricssonViGRedirectingNumRFD) {
	value, _ = EricssonViGRedirectingNumRFD_Lookup(p)
	return
}

func EricssonViGRedirectingNumRFD_Gets(p *radius.Packet) (values []EricssonViGRedirectingNumRFD, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 80) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGRedirectingNumRFD(i))
	}
	return
}

func EricssonViGRedirectingNumRFD_Lookup(p *radius.Packet) (value EricssonViGRedirectingNumRFD, err error) {
	a, ok := _Ericsson_LookupVendor(p, 80)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGRedirectingNumRFD(i)
	return
}

func EricssonViGRedirectingNumRFD_Set(p *radius.Packet, value EricssonViGRedirectingNumRFD) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 80, a)
}

func EricssonViGRedirectingNumRFD_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 80)
}

type EricssonViGTimeStampUTC uint32

var EricssonViGTimeStampUTC_Strings = map[EricssonViGTimeStampUTC]string{}

func (a EricssonViGTimeStampUTC) String() string {
	if str, ok := EricssonViGTimeStampUTC_Strings[a]; ok {
		return str
	}
	return "EricssonViGTimeStampUTC(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGTimeStampUTC_Add(p *radius.Packet, value EricssonViGTimeStampUTC) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 81, a)
}

func EricssonViGTimeStampUTC_Get(p *radius.Packet) (value EricssonViGTimeStampUTC) {
	value, _ = EricssonViGTimeStampUTC_Lookup(p)
	return
}

func EricssonViGTimeStampUTC_Gets(p *radius.Packet) (values []EricssonViGTimeStampUTC, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 81) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGTimeStampUTC(i))
	}
	return
}

func EricssonViGTimeStampUTC_Lookup(p *radius.Packet) (value EricssonViGTimeStampUTC, err error) {
	a, ok := _Ericsson_LookupVendor(p, 81)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGTimeStampUTC(i)
	return
}

func EricssonViGTimeStampUTC_Set(p *radius.Packet, value EricssonViGTimeStampUTC) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 81, a)
}

func EricssonViGTimeStampUTC_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 81)
}

type EricssonViGTimeStampTZ uint32

var EricssonViGTimeStampTZ_Strings = map[EricssonViGTimeStampTZ]string{}

func (a EricssonViGTimeStampTZ) String() string {
	if str, ok := EricssonViGTimeStampTZ_Strings[a]; ok {
		return str
	}
	return "EricssonViGTimeStampTZ(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGTimeStampTZ_Add(p *radius.Packet, value EricssonViGTimeStampTZ) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 82, a)
}

func EricssonViGTimeStampTZ_Get(p *radius.Packet) (value EricssonViGTimeStampTZ) {
	value, _ = EricssonViGTimeStampTZ_Lookup(p)
	return
}

func EricssonViGTimeStampTZ_Gets(p *radius.Packet) (values []EricssonViGTimeStampTZ, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 82) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGTimeStampTZ(i))
	}
	return
}

func EricssonViGTimeStampTZ_Lookup(p *radius.Packet) (value EricssonViGTimeStampTZ, err error) {
	a, ok := _Ericsson_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGTimeStampTZ(i)
	return
}

func EricssonViGTimeStampTZ_Set(p *radius.Packet, value EricssonViGTimeStampTZ) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 82, a)
}

func EricssonViGTimeStampTZ_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 82)
}

type EricssonViGTimeStampDST uint32

var EricssonViGTimeStampDST_Strings = map[EricssonViGTimeStampDST]string{}

func (a EricssonViGTimeStampDST) String() string {
	if str, ok := EricssonViGTimeStampDST_Strings[a]; ok {
		return str
	}
	return "EricssonViGTimeStampDST(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGTimeStampDST_Add(p *radius.Packet, value EricssonViGTimeStampDST) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 83, a)
}

func EricssonViGTimeStampDST_Get(p *radius.Packet) (value EricssonViGTimeStampDST) {
	value, _ = EricssonViGTimeStampDST_Lookup(p)
	return
}

func EricssonViGTimeStampDST_Gets(p *radius.Packet) (values []EricssonViGTimeStampDST, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 83) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGTimeStampDST(i))
	}
	return
}

func EricssonViGTimeStampDST_Lookup(p *radius.Packet) (value EricssonViGTimeStampDST, err error) {
	a, ok := _Ericsson_LookupVendor(p, 83)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGTimeStampDST(i)
	return
}

func EricssonViGTimeStampDST_Set(p *radius.Packet, value EricssonViGTimeStampDST) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 83, a)
}

func EricssonViGTimeStampDST_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 83)
}

type EricssonViGSessionRoutingDuration uint32

var EricssonViGSessionRoutingDuration_Strings = map[EricssonViGSessionRoutingDuration]string{}

func (a EricssonViGSessionRoutingDuration) String() string {
	if str, ok := EricssonViGSessionRoutingDuration_Strings[a]; ok {
		return str
	}
	return "EricssonViGSessionRoutingDuration(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGSessionRoutingDuration_Add(p *radius.Packet, value EricssonViGSessionRoutingDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 84, a)
}

func EricssonViGSessionRoutingDuration_Get(p *radius.Packet) (value EricssonViGSessionRoutingDuration) {
	value, _ = EricssonViGSessionRoutingDuration_Lookup(p)
	return
}

func EricssonViGSessionRoutingDuration_Gets(p *radius.Packet) (values []EricssonViGSessionRoutingDuration, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 84) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGSessionRoutingDuration(i))
	}
	return
}

func EricssonViGSessionRoutingDuration_Lookup(p *radius.Packet) (value EricssonViGSessionRoutingDuration, err error) {
	a, ok := _Ericsson_LookupVendor(p, 84)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGSessionRoutingDuration(i)
	return
}

func EricssonViGSessionRoutingDuration_Set(p *radius.Packet, value EricssonViGSessionRoutingDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 84, a)
}

func EricssonViGSessionRoutingDuration_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 84)
}

type EricssonViGSessionRingingDuration uint32

var EricssonViGSessionRingingDuration_Strings = map[EricssonViGSessionRingingDuration]string{}

func (a EricssonViGSessionRingingDuration) String() string {
	if str, ok := EricssonViGSessionRingingDuration_Strings[a]; ok {
		return str
	}
	return "EricssonViGSessionRingingDuration(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGSessionRingingDuration_Add(p *radius.Packet, value EricssonViGSessionRingingDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 85, a)
}

func EricssonViGSessionRingingDuration_Get(p *radius.Packet) (value EricssonViGSessionRingingDuration) {
	value, _ = EricssonViGSessionRingingDuration_Lookup(p)
	return
}

func EricssonViGSessionRingingDuration_Gets(p *radius.Packet) (values []EricssonViGSessionRingingDuration, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 85) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGSessionRingingDuration(i))
	}
	return
}

func EricssonViGSessionRingingDuration_Lookup(p *radius.Packet) (value EricssonViGSessionRingingDuration, err error) {
	a, ok := _Ericsson_LookupVendor(p, 85)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGSessionRingingDuration(i)
	return
}

func EricssonViGSessionRingingDuration_Set(p *radius.Packet, value EricssonViGSessionRingingDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 85, a)
}

func EricssonViGSessionRingingDuration_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 85)
}

type EricssonViGAccessType uint32

var EricssonViGAccessType_Strings = map[EricssonViGAccessType]string{}

func (a EricssonViGAccessType) String() string {
	if str, ok := EricssonViGAccessType_Strings[a]; ok {
		return str
	}
	return "EricssonViGAccessType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGAccessType_Add(p *radius.Packet, value EricssonViGAccessType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 86, a)
}

func EricssonViGAccessType_Get(p *radius.Packet) (value EricssonViGAccessType) {
	value, _ = EricssonViGAccessType_Lookup(p)
	return
}

func EricssonViGAccessType_Gets(p *radius.Packet) (values []EricssonViGAccessType, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 86) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGAccessType(i))
	}
	return
}

func EricssonViGAccessType_Lookup(p *radius.Packet) (value EricssonViGAccessType, err error) {
	a, ok := _Ericsson_LookupVendor(p, 86)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGAccessType(i)
	return
}

func EricssonViGAccessType_Set(p *radius.Packet, value EricssonViGAccessType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 86, a)
}

func EricssonViGAccessType_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 86)
}

type EricssonViGRequestedBandwidth uint32

var EricssonViGRequestedBandwidth_Strings = map[EricssonViGRequestedBandwidth]string{}

func (a EricssonViGRequestedBandwidth) String() string {
	if str, ok := EricssonViGRequestedBandwidth_Strings[a]; ok {
		return str
	}
	return "EricssonViGRequestedBandwidth(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGRequestedBandwidth_Add(p *radius.Packet, value EricssonViGRequestedBandwidth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 87, a)
}

func EricssonViGRequestedBandwidth_Get(p *radius.Packet) (value EricssonViGRequestedBandwidth) {
	value, _ = EricssonViGRequestedBandwidth_Lookup(p)
	return
}

func EricssonViGRequestedBandwidth_Gets(p *radius.Packet) (values []EricssonViGRequestedBandwidth, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 87) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGRequestedBandwidth(i))
	}
	return
}

func EricssonViGRequestedBandwidth_Lookup(p *radius.Packet) (value EricssonViGRequestedBandwidth, err error) {
	a, ok := _Ericsson_LookupVendor(p, 87)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGRequestedBandwidth(i)
	return
}

func EricssonViGRequestedBandwidth_Set(p *radius.Packet, value EricssonViGRequestedBandwidth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 87, a)
}

func EricssonViGRequestedBandwidth_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 87)
}

type EricssonViGAllowedBandwidth uint32

var EricssonViGAllowedBandwidth_Strings = map[EricssonViGAllowedBandwidth]string{}

func (a EricssonViGAllowedBandwidth) String() string {
	if str, ok := EricssonViGAllowedBandwidth_Strings[a]; ok {
		return str
	}
	return "EricssonViGAllowedBandwidth(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGAllowedBandwidth_Add(p *radius.Packet, value EricssonViGAllowedBandwidth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 88, a)
}

func EricssonViGAllowedBandwidth_Get(p *radius.Packet) (value EricssonViGAllowedBandwidth) {
	value, _ = EricssonViGAllowedBandwidth_Lookup(p)
	return
}

func EricssonViGAllowedBandwidth_Gets(p *radius.Packet) (values []EricssonViGAllowedBandwidth, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 88) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGAllowedBandwidth(i))
	}
	return
}

func EricssonViGAllowedBandwidth_Lookup(p *radius.Packet) (value EricssonViGAllowedBandwidth, err error) {
	a, ok := _Ericsson_LookupVendor(p, 88)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGAllowedBandwidth(i)
	return
}

func EricssonViGAllowedBandwidth_Set(p *radius.Packet, value EricssonViGAllowedBandwidth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 88, a)
}

func EricssonViGAllowedBandwidth_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 88)
}

type EricssonViGMediaChannelCount uint32

var EricssonViGMediaChannelCount_Strings = map[EricssonViGMediaChannelCount]string{}

func (a EricssonViGMediaChannelCount) String() string {
	if str, ok := EricssonViGMediaChannelCount_Strings[a]; ok {
		return str
	}
	return "EricssonViGMediaChannelCount(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGMediaChannelCount_Add(p *radius.Packet, value EricssonViGMediaChannelCount) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 89, a)
}

func EricssonViGMediaChannelCount_Get(p *radius.Packet) (value EricssonViGMediaChannelCount) {
	value, _ = EricssonViGMediaChannelCount_Lookup(p)
	return
}

func EricssonViGMediaChannelCount_Gets(p *radius.Packet) (values []EricssonViGMediaChannelCount, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 89) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGMediaChannelCount(i))
	}
	return
}

func EricssonViGMediaChannelCount_Lookup(p *radius.Packet) (value EricssonViGMediaChannelCount, err error) {
	a, ok := _Ericsson_LookupVendor(p, 89)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGMediaChannelCount(i)
	return
}

func EricssonViGMediaChannelCount_Set(p *radius.Packet, value EricssonViGMediaChannelCount) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 89, a)
}

func EricssonViGMediaChannelCount_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 89)
}

func EricssonViGVoiceMediaRecForward_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 90, a)
}

func EricssonViGVoiceMediaRecForward_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 90, a)
}

func EricssonViGVoiceMediaRecForward_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGVoiceMediaRecForward_Lookup(p)
	return
}

func EricssonViGVoiceMediaRecForward_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGVoiceMediaRecForward_LookupString(p)
	return
}

func EricssonViGVoiceMediaRecForward_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 90) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGVoiceMediaRecForward_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 90) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGVoiceMediaRecForward_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 90)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGVoiceMediaRecForward_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 90)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGVoiceMediaRecForward_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 90, a)
}

func EricssonViGVoiceMediaRecForward_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 90, a)
}

func EricssonViGVoiceMediaRecForward_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 90)
}

func EricssonViGVoiceMediaRecBackward_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 91, a)
}

func EricssonViGVoiceMediaRecBackward_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 91, a)
}

func EricssonViGVoiceMediaRecBackward_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGVoiceMediaRecBackward_Lookup(p)
	return
}

func EricssonViGVoiceMediaRecBackward_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGVoiceMediaRecBackward_LookupString(p)
	return
}

func EricssonViGVoiceMediaRecBackward_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 91) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGVoiceMediaRecBackward_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 91) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGVoiceMediaRecBackward_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGVoiceMediaRecBackward_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGVoiceMediaRecBackward_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 91, a)
}

func EricssonViGVoiceMediaRecBackward_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 91, a)
}

func EricssonViGVoiceMediaRecBackward_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 91)
}

func EricssonViGVideoMediaRecForward_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 92, a)
}

func EricssonViGVideoMediaRecForward_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 92, a)
}

func EricssonViGVideoMediaRecForward_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGVideoMediaRecForward_Lookup(p)
	return
}

func EricssonViGVideoMediaRecForward_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGVideoMediaRecForward_LookupString(p)
	return
}

func EricssonViGVideoMediaRecForward_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 92) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGVideoMediaRecForward_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 92) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGVideoMediaRecForward_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 92)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGVideoMediaRecForward_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 92)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGVideoMediaRecForward_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 92, a)
}

func EricssonViGVideoMediaRecForward_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 92, a)
}

func EricssonViGVideoMediaRecForward_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 92)
}

func EricssonViGVideoMediaRecBackward_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 93, a)
}

func EricssonViGVideoMediaRecBackward_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 93, a)
}

func EricssonViGVideoMediaRecBackward_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGVideoMediaRecBackward_Lookup(p)
	return
}

func EricssonViGVideoMediaRecBackward_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGVideoMediaRecBackward_LookupString(p)
	return
}

func EricssonViGVideoMediaRecBackward_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 93) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGVideoMediaRecBackward_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 93) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGVideoMediaRecBackward_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 93)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGVideoMediaRecBackward_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 93)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGVideoMediaRecBackward_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 93, a)
}

func EricssonViGVideoMediaRecBackward_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 93, a)
}

func EricssonViGVideoMediaRecBackward_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 93)
}

func EricssonViGFaxMediaRecForward_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 94, a)
}

func EricssonViGFaxMediaRecForward_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 94, a)
}

func EricssonViGFaxMediaRecForward_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGFaxMediaRecForward_Lookup(p)
	return
}

func EricssonViGFaxMediaRecForward_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGFaxMediaRecForward_LookupString(p)
	return
}

func EricssonViGFaxMediaRecForward_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 94) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGFaxMediaRecForward_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 94) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGFaxMediaRecForward_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 94)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGFaxMediaRecForward_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 94)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGFaxMediaRecForward_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 94, a)
}

func EricssonViGFaxMediaRecForward_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 94, a)
}

func EricssonViGFaxMediaRecForward_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 94)
}

func EricssonViGFaxMediaRecBackward_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 95, a)
}

func EricssonViGFaxMediaRecBackward_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 95, a)
}

func EricssonViGFaxMediaRecBackward_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGFaxMediaRecBackward_Lookup(p)
	return
}

func EricssonViGFaxMediaRecBackward_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGFaxMediaRecBackward_LookupString(p)
	return
}

func EricssonViGFaxMediaRecBackward_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 95) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGFaxMediaRecBackward_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 95) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGFaxMediaRecBackward_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 95)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGFaxMediaRecBackward_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 95)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGFaxMediaRecBackward_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 95, a)
}

func EricssonViGFaxMediaRecBackward_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 95, a)
}

func EricssonViGFaxMediaRecBackward_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 95)
}

func EricssonViGDataMediaRecForward_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 96, a)
}

func EricssonViGDataMediaRecForward_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 96, a)
}

func EricssonViGDataMediaRecForward_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGDataMediaRecForward_Lookup(p)
	return
}

func EricssonViGDataMediaRecForward_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGDataMediaRecForward_LookupString(p)
	return
}

func EricssonViGDataMediaRecForward_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 96) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGDataMediaRecForward_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 96) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGDataMediaRecForward_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 96)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGDataMediaRecForward_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 96)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGDataMediaRecForward_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 96, a)
}

func EricssonViGDataMediaRecForward_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 96, a)
}

func EricssonViGDataMediaRecForward_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 96)
}

func EricssonViGDataMediaRecBackward_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 97, a)
}

func EricssonViGDataMediaRecBackward_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 97, a)
}

func EricssonViGDataMediaRecBackward_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGDataMediaRecBackward_Lookup(p)
	return
}

func EricssonViGDataMediaRecBackward_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGDataMediaRecBackward_LookupString(p)
	return
}

func EricssonViGDataMediaRecBackward_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 97) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGDataMediaRecBackward_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 97) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGDataMediaRecBackward_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 97)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGDataMediaRecBackward_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 97)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGDataMediaRecBackward_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 97, a)
}

func EricssonViGDataMediaRecBackward_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 97, a)
}

func EricssonViGDataMediaRecBackward_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 97)
}

type EricssonViGChargingCase uint32

var EricssonViGChargingCase_Strings = map[EricssonViGChargingCase]string{}

func (a EricssonViGChargingCase) String() string {
	if str, ok := EricssonViGChargingCase_Strings[a]; ok {
		return str
	}
	return "EricssonViGChargingCase(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGChargingCase_Add(p *radius.Packet, value EricssonViGChargingCase) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 98, a)
}

func EricssonViGChargingCase_Get(p *radius.Packet) (value EricssonViGChargingCase) {
	value, _ = EricssonViGChargingCase_Lookup(p)
	return
}

func EricssonViGChargingCase_Gets(p *radius.Packet) (values []EricssonViGChargingCase, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 98) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGChargingCase(i))
	}
	return
}

func EricssonViGChargingCase_Lookup(p *radius.Packet) (value EricssonViGChargingCase, err error) {
	a, ok := _Ericsson_LookupVendor(p, 98)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGChargingCase(i)
	return
}

func EricssonViGChargingCase_Set(p *radius.Packet, value EricssonViGChargingCase) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 98, a)
}

func EricssonViGChargingCase_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 98)
}

type EricssonViGRelCauseCodingStd uint32

var EricssonViGRelCauseCodingStd_Strings = map[EricssonViGRelCauseCodingStd]string{}

func (a EricssonViGRelCauseCodingStd) String() string {
	if str, ok := EricssonViGRelCauseCodingStd_Strings[a]; ok {
		return str
	}
	return "EricssonViGRelCauseCodingStd(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGRelCauseCodingStd_Add(p *radius.Packet, value EricssonViGRelCauseCodingStd) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 99, a)
}

func EricssonViGRelCauseCodingStd_Get(p *radius.Packet) (value EricssonViGRelCauseCodingStd) {
	value, _ = EricssonViGRelCauseCodingStd_Lookup(p)
	return
}

func EricssonViGRelCauseCodingStd_Gets(p *radius.Packet) (values []EricssonViGRelCauseCodingStd, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 99) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGRelCauseCodingStd(i))
	}
	return
}

func EricssonViGRelCauseCodingStd_Lookup(p *radius.Packet) (value EricssonViGRelCauseCodingStd, err error) {
	a, ok := _Ericsson_LookupVendor(p, 99)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGRelCauseCodingStd(i)
	return
}

func EricssonViGRelCauseCodingStd_Set(p *radius.Packet, value EricssonViGRelCauseCodingStd) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 99, a)
}

func EricssonViGRelCauseCodingStd_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 99)
}

type EricssonViGRelCauseLocation uint32

var EricssonViGRelCauseLocation_Strings = map[EricssonViGRelCauseLocation]string{}

func (a EricssonViGRelCauseLocation) String() string {
	if str, ok := EricssonViGRelCauseLocation_Strings[a]; ok {
		return str
	}
	return "EricssonViGRelCauseLocation(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGRelCauseLocation_Add(p *radius.Packet, value EricssonViGRelCauseLocation) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 100, a)
}

func EricssonViGRelCauseLocation_Get(p *radius.Packet) (value EricssonViGRelCauseLocation) {
	value, _ = EricssonViGRelCauseLocation_Lookup(p)
	return
}

func EricssonViGRelCauseLocation_Gets(p *radius.Packet) (values []EricssonViGRelCauseLocation, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 100) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGRelCauseLocation(i))
	}
	return
}

func EricssonViGRelCauseLocation_Lookup(p *radius.Packet) (value EricssonViGRelCauseLocation, err error) {
	a, ok := _Ericsson_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGRelCauseLocation(i)
	return
}

func EricssonViGRelCauseLocation_Set(p *radius.Packet, value EricssonViGRelCauseLocation) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 100, a)
}

func EricssonViGRelCauseLocation_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 100)
}

type EricssonViGRelCauseClass uint32

var EricssonViGRelCauseClass_Strings = map[EricssonViGRelCauseClass]string{}

func (a EricssonViGRelCauseClass) String() string {
	if str, ok := EricssonViGRelCauseClass_Strings[a]; ok {
		return str
	}
	return "EricssonViGRelCauseClass(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGRelCauseClass_Add(p *radius.Packet, value EricssonViGRelCauseClass) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 101, a)
}

func EricssonViGRelCauseClass_Get(p *radius.Packet) (value EricssonViGRelCauseClass) {
	value, _ = EricssonViGRelCauseClass_Lookup(p)
	return
}

func EricssonViGRelCauseClass_Gets(p *radius.Packet) (values []EricssonViGRelCauseClass, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 101) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGRelCauseClass(i))
	}
	return
}

func EricssonViGRelCauseClass_Lookup(p *radius.Packet) (value EricssonViGRelCauseClass, err error) {
	a, ok := _Ericsson_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGRelCauseClass(i)
	return
}

func EricssonViGRelCauseClass_Set(p *radius.Packet, value EricssonViGRelCauseClass) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 101, a)
}

func EricssonViGRelCauseClass_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 101)
}

type EricssonViGRelCauseValue uint32

var EricssonViGRelCauseValue_Strings = map[EricssonViGRelCauseValue]string{}

func (a EricssonViGRelCauseValue) String() string {
	if str, ok := EricssonViGRelCauseValue_Strings[a]; ok {
		return str
	}
	return "EricssonViGRelCauseValue(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGRelCauseValue_Add(p *radius.Packet, value EricssonViGRelCauseValue) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 102, a)
}

func EricssonViGRelCauseValue_Get(p *radius.Packet) (value EricssonViGRelCauseValue) {
	value, _ = EricssonViGRelCauseValue_Lookup(p)
	return
}

func EricssonViGRelCauseValue_Gets(p *radius.Packet) (values []EricssonViGRelCauseValue, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 102) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGRelCauseValue(i))
	}
	return
}

func EricssonViGRelCauseValue_Lookup(p *radius.Packet) (value EricssonViGRelCauseValue, err error) {
	a, ok := _Ericsson_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGRelCauseValue(i)
	return
}

func EricssonViGRelCauseValue_Set(p *radius.Packet, value EricssonViGRelCauseValue) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 102, a)
}

func EricssonViGRelCauseValue_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 102)
}

type EricssonViGRelReason uint32

var EricssonViGRelReason_Strings = map[EricssonViGRelReason]string{}

func (a EricssonViGRelReason) String() string {
	if str, ok := EricssonViGRelReason_Strings[a]; ok {
		return str
	}
	return "EricssonViGRelReason(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGRelReason_Add(p *radius.Packet, value EricssonViGRelReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 103, a)
}

func EricssonViGRelReason_Get(p *radius.Packet) (value EricssonViGRelReason) {
	value, _ = EricssonViGRelReason_Lookup(p)
	return
}

func EricssonViGRelReason_Gets(p *radius.Packet) (values []EricssonViGRelReason, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 103) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGRelReason(i))
	}
	return
}

func EricssonViGRelReason_Lookup(p *radius.Packet) (value EricssonViGRelReason, err error) {
	a, ok := _Ericsson_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGRelReason(i)
	return
}

func EricssonViGRelReason_Set(p *radius.Packet, value EricssonViGRelReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 103, a)
}

func EricssonViGRelReason_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 103)
}

type EricssonViGInternalRelReasonVal uint32

var EricssonViGInternalRelReasonVal_Strings = map[EricssonViGInternalRelReasonVal]string{}

func (a EricssonViGInternalRelReasonVal) String() string {
	if str, ok := EricssonViGInternalRelReasonVal_Strings[a]; ok {
		return str
	}
	return "EricssonViGInternalRelReasonVal(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGInternalRelReasonVal_Add(p *radius.Packet, value EricssonViGInternalRelReasonVal) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 104, a)
}

func EricssonViGInternalRelReasonVal_Get(p *radius.Packet) (value EricssonViGInternalRelReasonVal) {
	value, _ = EricssonViGInternalRelReasonVal_Lookup(p)
	return
}

func EricssonViGInternalRelReasonVal_Gets(p *radius.Packet) (values []EricssonViGInternalRelReasonVal, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 104) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGInternalRelReasonVal(i))
	}
	return
}

func EricssonViGInternalRelReasonVal_Lookup(p *radius.Packet) (value EricssonViGInternalRelReasonVal, err error) {
	a, ok := _Ericsson_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGInternalRelReasonVal(i)
	return
}

func EricssonViGInternalRelReasonVal_Set(p *radius.Packet, value EricssonViGInternalRelReasonVal) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 104, a)
}

func EricssonViGInternalRelReasonVal_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 104)
}

type EricssonViGInternalRelReasonOrig uint32

var EricssonViGInternalRelReasonOrig_Strings = map[EricssonViGInternalRelReasonOrig]string{}

func (a EricssonViGInternalRelReasonOrig) String() string {
	if str, ok := EricssonViGInternalRelReasonOrig_Strings[a]; ok {
		return str
	}
	return "EricssonViGInternalRelReasonOrig(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGInternalRelReasonOrig_Add(p *radius.Packet, value EricssonViGInternalRelReasonOrig) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 105, a)
}

func EricssonViGInternalRelReasonOrig_Get(p *radius.Packet) (value EricssonViGInternalRelReasonOrig) {
	value, _ = EricssonViGInternalRelReasonOrig_Lookup(p)
	return
}

func EricssonViGInternalRelReasonOrig_Gets(p *radius.Packet) (values []EricssonViGInternalRelReasonOrig, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 105) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGInternalRelReasonOrig(i))
	}
	return
}

func EricssonViGInternalRelReasonOrig_Lookup(p *radius.Packet) (value EricssonViGInternalRelReasonOrig, err error) {
	a, ok := _Ericsson_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGInternalRelReasonOrig(i)
	return
}

func EricssonViGInternalRelReasonOrig_Set(p *radius.Packet, value EricssonViGInternalRelReasonOrig) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 105, a)
}

func EricssonViGInternalRelReasonOrig_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 105)
}

type EricssonViGServiceID uint32

var EricssonViGServiceID_Strings = map[EricssonViGServiceID]string{}

func (a EricssonViGServiceID) String() string {
	if str, ok := EricssonViGServiceID_Strings[a]; ok {
		return str
	}
	return "EricssonViGServiceID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGServiceID_Add(p *radius.Packet, value EricssonViGServiceID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 106, a)
}

func EricssonViGServiceID_Get(p *radius.Packet) (value EricssonViGServiceID) {
	value, _ = EricssonViGServiceID_Lookup(p)
	return
}

func EricssonViGServiceID_Gets(p *radius.Packet) (values []EricssonViGServiceID, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 106) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGServiceID(i))
	}
	return
}

func EricssonViGServiceID_Lookup(p *radius.Packet) (value EricssonViGServiceID, err error) {
	a, ok := _Ericsson_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGServiceID(i)
	return
}

func EricssonViGServiceID_Set(p *radius.Packet, value EricssonViGServiceID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 106, a)
}

func EricssonViGServiceID_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 106)
}

func EricssonViGUserID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 107, a)
}

func EricssonViGUserID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 107, a)
}

func EricssonViGUserID_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGUserID_Lookup(p)
	return
}

func EricssonViGUserID_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGUserID_LookupString(p)
	return
}

func EricssonViGUserID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 107) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGUserID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 107) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGUserID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGUserID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGUserID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 107, a)
}

func EricssonViGUserID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 107, a)
}

func EricssonViGUserID_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 107)
}

func EricssonViGServiceName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 108, a)
}

func EricssonViGServiceName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 108, a)
}

func EricssonViGServiceName_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGServiceName_Lookup(p)
	return
}

func EricssonViGServiceName_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGServiceName_LookupString(p)
	return
}

func EricssonViGServiceName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 108) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGServiceName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 108) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGServiceName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGServiceName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGServiceName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 108, a)
}

func EricssonViGServiceName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 108, a)
}

func EricssonViGServiceName_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 108)
}

type EricssonViGTestCallIndicator uint32

var EricssonViGTestCallIndicator_Strings = map[EricssonViGTestCallIndicator]string{}

func (a EricssonViGTestCallIndicator) String() string {
	if str, ok := EricssonViGTestCallIndicator_Strings[a]; ok {
		return str
	}
	return "EricssonViGTestCallIndicator(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGTestCallIndicator_Add(p *radius.Packet, value EricssonViGTestCallIndicator) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 109, a)
}

func EricssonViGTestCallIndicator_Get(p *radius.Packet) (value EricssonViGTestCallIndicator) {
	value, _ = EricssonViGTestCallIndicator_Lookup(p)
	return
}

func EricssonViGTestCallIndicator_Gets(p *radius.Packet) (values []EricssonViGTestCallIndicator, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 109) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGTestCallIndicator(i))
	}
	return
}

func EricssonViGTestCallIndicator_Lookup(p *radius.Packet) (value EricssonViGTestCallIndicator, err error) {
	a, ok := _Ericsson_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGTestCallIndicator(i)
	return
}

func EricssonViGTestCallIndicator_Set(p *radius.Packet, value EricssonViGTestCallIndicator) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 109, a)
}

func EricssonViGTestCallIndicator_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 109)
}

type EricssonViGEmergencyCallIndicator uint32

var EricssonViGEmergencyCallIndicator_Strings = map[EricssonViGEmergencyCallIndicator]string{}

func (a EricssonViGEmergencyCallIndicator) String() string {
	if str, ok := EricssonViGEmergencyCallIndicator_Strings[a]; ok {
		return str
	}
	return "EricssonViGEmergencyCallIndicator(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGEmergencyCallIndicator_Add(p *radius.Packet, value EricssonViGEmergencyCallIndicator) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 110, a)
}

func EricssonViGEmergencyCallIndicator_Get(p *radius.Packet) (value EricssonViGEmergencyCallIndicator) {
	value, _ = EricssonViGEmergencyCallIndicator_Lookup(p)
	return
}

func EricssonViGEmergencyCallIndicator_Gets(p *radius.Packet) (values []EricssonViGEmergencyCallIndicator, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 110) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGEmergencyCallIndicator(i))
	}
	return
}

func EricssonViGEmergencyCallIndicator_Lookup(p *radius.Packet) (value EricssonViGEmergencyCallIndicator, err error) {
	a, ok := _Ericsson_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGEmergencyCallIndicator(i)
	return
}

func EricssonViGEmergencyCallIndicator_Set(p *radius.Packet, value EricssonViGEmergencyCallIndicator) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 110, a)
}

func EricssonViGEmergencyCallIndicator_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 110)
}

func EricssonViGCallingID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 111, a)
}

func EricssonViGCallingID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 111, a)
}

func EricssonViGCallingID_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGCallingID_Lookup(p)
	return
}

func EricssonViGCallingID_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGCallingID_LookupString(p)
	return
}

func EricssonViGCallingID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 111) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCallingID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 111) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCallingID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGCallingID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGCallingID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 111, a)
}

func EricssonViGCallingID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 111, a)
}

func EricssonViGCallingID_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 111)
}

func EricssonViGCalledID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 112, a)
}

func EricssonViGCalledID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 112, a)
}

func EricssonViGCalledID_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGCalledID_Lookup(p)
	return
}

func EricssonViGCalledID_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGCalledID_LookupString(p)
	return
}

func EricssonViGCalledID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 112) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCalledID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 112) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCalledID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGCalledID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGCalledID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 112, a)
}

func EricssonViGCalledID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 112, a)
}

func EricssonViGCalledID_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 112)
}

func EricssonViGTranslatedID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 113, a)
}

func EricssonViGTranslatedID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 113, a)
}

func EricssonViGTranslatedID_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGTranslatedID_Lookup(p)
	return
}

func EricssonViGTranslatedID_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGTranslatedID_LookupString(p)
	return
}

func EricssonViGTranslatedID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 113) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGTranslatedID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 113) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGTranslatedID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGTranslatedID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGTranslatedID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 113, a)
}

func EricssonViGTranslatedID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 113, a)
}

func EricssonViGTranslatedID_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 113)
}

func EricssonViGCallingUserGroupID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 114, a)
}

func EricssonViGCallingUserGroupID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 114, a)
}

func EricssonViGCallingUserGroupID_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGCallingUserGroupID_Lookup(p)
	return
}

func EricssonViGCallingUserGroupID_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGCallingUserGroupID_LookupString(p)
	return
}

func EricssonViGCallingUserGroupID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 114) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCallingUserGroupID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 114) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCallingUserGroupID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGCallingUserGroupID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGCallingUserGroupID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 114, a)
}

func EricssonViGCallingUserGroupID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 114, a)
}

func EricssonViGCallingUserGroupID_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 114)
}

func EricssonViGCallingUsrSubGroupID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 115, a)
}

func EricssonViGCallingUsrSubGroupID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 115, a)
}

func EricssonViGCallingUsrSubGroupID_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGCallingUsrSubGroupID_Lookup(p)
	return
}

func EricssonViGCallingUsrSubGroupID_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGCallingUsrSubGroupID_LookupString(p)
	return
}

func EricssonViGCallingUsrSubGroupID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 115) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCallingUsrSubGroupID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 115) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCallingUsrSubGroupID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 115)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGCallingUsrSubGroupID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 115)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGCallingUsrSubGroupID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 115, a)
}

func EricssonViGCallingUsrSubGroupID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 115, a)
}

func EricssonViGCallingUsrSubGroupID_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 115)
}

func EricssonViGCalledUsrGroupID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 116, a)
}

func EricssonViGCalledUsrGroupID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 116, a)
}

func EricssonViGCalledUsrGroupID_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGCalledUsrGroupID_Lookup(p)
	return
}

func EricssonViGCalledUsrGroupID_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGCalledUsrGroupID_LookupString(p)
	return
}

func EricssonViGCalledUsrGroupID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 116) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCalledUsrGroupID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 116) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCalledUsrGroupID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 116)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGCalledUsrGroupID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 116)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGCalledUsrGroupID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 116, a)
}

func EricssonViGCalledUsrGroupID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 116, a)
}

func EricssonViGCalledUsrGroupID_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 116)
}

func EricssonViGCalledUsrSubGroupID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 117, a)
}

func EricssonViGCalledUsrSubGroupID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 117, a)
}

func EricssonViGCalledUsrSubGroupID_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGCalledUsrSubGroupID_Lookup(p)
	return
}

func EricssonViGCalledUsrSubGroupID_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGCalledUsrSubGroupID_LookupString(p)
	return
}

func EricssonViGCalledUsrSubGroupID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 117) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCalledUsrSubGroupID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 117) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGCalledUsrSubGroupID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 117)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGCalledUsrSubGroupID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 117)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGCalledUsrSubGroupID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 117, a)
}

func EricssonViGCalledUsrSubGroupID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 117, a)
}

func EricssonViGCalledUsrSubGroupID_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 117)
}

func EricssonViGTerminalType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 118, a)
}

func EricssonViGTerminalType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 118, a)
}

func EricssonViGTerminalType_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGTerminalType_Lookup(p)
	return
}

func EricssonViGTerminalType_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGTerminalType_LookupString(p)
	return
}

func EricssonViGTerminalType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 118) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGTerminalType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 118) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGTerminalType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 118)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGTerminalType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 118)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGTerminalType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 118, a)
}

func EricssonViGTerminalType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 118, a)
}

func EricssonViGTerminalType_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 118)
}

type EricssonViGServiceDuration uint32

var EricssonViGServiceDuration_Strings = map[EricssonViGServiceDuration]string{}

func (a EricssonViGServiceDuration) String() string {
	if str, ok := EricssonViGServiceDuration_Strings[a]; ok {
		return str
	}
	return "EricssonViGServiceDuration(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGServiceDuration_Add(p *radius.Packet, value EricssonViGServiceDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 119, a)
}

func EricssonViGServiceDuration_Get(p *radius.Packet) (value EricssonViGServiceDuration) {
	value, _ = EricssonViGServiceDuration_Lookup(p)
	return
}

func EricssonViGServiceDuration_Gets(p *radius.Packet) (values []EricssonViGServiceDuration, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 119) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGServiceDuration(i))
	}
	return
}

func EricssonViGServiceDuration_Lookup(p *radius.Packet) (value EricssonViGServiceDuration, err error) {
	a, ok := _Ericsson_LookupVendor(p, 119)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGServiceDuration(i)
	return
}

func EricssonViGServiceDuration_Set(p *radius.Packet, value EricssonViGServiceDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 119, a)
}

func EricssonViGServiceDuration_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 119)
}

type EricssonViGServiceExecutionResult uint32

var EricssonViGServiceExecutionResult_Strings = map[EricssonViGServiceExecutionResult]string{}

func (a EricssonViGServiceExecutionResult) String() string {
	if str, ok := EricssonViGServiceExecutionResult_Strings[a]; ok {
		return str
	}
	return "EricssonViGServiceExecutionResult(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGServiceExecutionResult_Add(p *radius.Packet, value EricssonViGServiceExecutionResult) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 120, a)
}

func EricssonViGServiceExecutionResult_Get(p *radius.Packet) (value EricssonViGServiceExecutionResult) {
	value, _ = EricssonViGServiceExecutionResult_Lookup(p)
	return
}

func EricssonViGServiceExecutionResult_Gets(p *radius.Packet) (values []EricssonViGServiceExecutionResult, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 120) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGServiceExecutionResult(i))
	}
	return
}

func EricssonViGServiceExecutionResult_Lookup(p *radius.Packet) (value EricssonViGServiceExecutionResult, err error) {
	a, ok := _Ericsson_LookupVendor(p, 120)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGServiceExecutionResult(i)
	return
}

func EricssonViGServiceExecutionResult_Set(p *radius.Packet, value EricssonViGServiceExecutionResult) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 120, a)
}

func EricssonViGServiceExecutionResult_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 120)
}

func EricssonViGServiceExeRsltDesc_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 121, a)
}

func EricssonViGServiceExeRsltDesc_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 121, a)
}

func EricssonViGServiceExeRsltDesc_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGServiceExeRsltDesc_Lookup(p)
	return
}

func EricssonViGServiceExeRsltDesc_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGServiceExeRsltDesc_LookupString(p)
	return
}

func EricssonViGServiceExeRsltDesc_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 121) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGServiceExeRsltDesc_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 121) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGServiceExeRsltDesc_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 121)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGServiceExeRsltDesc_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 121)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGServiceExeRsltDesc_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 121, a)
}

func EricssonViGServiceExeRsltDesc_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 121, a)
}

func EricssonViGServiceExeRsltDesc_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 121)
}

func EricssonViGServiceDescription_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 122, a)
}

func EricssonViGServiceDescription_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 122, a)
}

func EricssonViGServiceDescription_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGServiceDescription_Lookup(p)
	return
}

func EricssonViGServiceDescription_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGServiceDescription_LookupString(p)
	return
}

func EricssonViGServiceDescription_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 122) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGServiceDescription_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 122) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGServiceDescription_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 122)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGServiceDescription_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 122)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGServiceDescription_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 122, a)
}

func EricssonViGServiceDescription_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 122, a)
}

func EricssonViGServiceDescription_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 122)
}

func EricssonViGServiceSpecificInfo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 123, a)
}

func EricssonViGServiceSpecificInfo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 123, a)
}

func EricssonViGServiceSpecificInfo_Get(p *radius.Packet) (value []byte) {
	value, _ = EricssonViGServiceSpecificInfo_Lookup(p)
	return
}

func EricssonViGServiceSpecificInfo_GetString(p *radius.Packet) (value string) {
	value, _ = EricssonViGServiceSpecificInfo_LookupString(p)
	return
}

func EricssonViGServiceSpecificInfo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Ericsson_GetsVendor(p, 123) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGServiceSpecificInfo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Ericsson_GetsVendor(p, 123) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGServiceSpecificInfo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Ericsson_LookupVendor(p, 123)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func EricssonViGServiceSpecificInfo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Ericsson_LookupVendor(p, 123)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func EricssonViGServiceSpecificInfo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 123, a)
}

func EricssonViGServiceSpecificInfo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 123, a)
}

func EricssonViGServiceSpecificInfo_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 123)
}

func EricssonViGProxyIPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ericsson_AddVendor(p, 124, a)
}

func EricssonViGProxyIPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = EricssonViGProxyIPAddress_Lookup(p)
	return
}

func EricssonViGProxyIPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Ericsson_GetsVendor(p, 124) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func EricssonViGProxyIPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Ericsson_LookupVendor(p, 124)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func EricssonViGProxyIPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Ericsson_SetVendor(p, 124, a)
}

func EricssonViGProxyIPAddress_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 124)
}

type EricssonViGAuthDataRequest uint32

var EricssonViGAuthDataRequest_Strings = map[EricssonViGAuthDataRequest]string{}

func (a EricssonViGAuthDataRequest) String() string {
	if str, ok := EricssonViGAuthDataRequest_Strings[a]; ok {
		return str
	}
	return "EricssonViGAuthDataRequest(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGAuthDataRequest_Add(p *radius.Packet, value EricssonViGAuthDataRequest) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 125, a)
}

func EricssonViGAuthDataRequest_Get(p *radius.Packet) (value EricssonViGAuthDataRequest) {
	value, _ = EricssonViGAuthDataRequest_Lookup(p)
	return
}

func EricssonViGAuthDataRequest_Gets(p *radius.Packet) (values []EricssonViGAuthDataRequest, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 125) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGAuthDataRequest(i))
	}
	return
}

func EricssonViGAuthDataRequest_Lookup(p *radius.Packet) (value EricssonViGAuthDataRequest, err error) {
	a, ok := _Ericsson_LookupVendor(p, 125)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGAuthDataRequest(i)
	return
}

func EricssonViGAuthDataRequest_Set(p *radius.Packet, value EricssonViGAuthDataRequest) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 125, a)
}

func EricssonViGAuthDataRequest_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 125)
}

type EricssonViGIPTTimeStamp uint32

var EricssonViGIPTTimeStamp_Strings = map[EricssonViGIPTTimeStamp]string{}

func (a EricssonViGIPTTimeStamp) String() string {
	if str, ok := EricssonViGIPTTimeStamp_Strings[a]; ok {
		return str
	}
	return "EricssonViGIPTTimeStamp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGIPTTimeStamp_Add(p *radius.Packet, value EricssonViGIPTTimeStamp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 126, a)
}

func EricssonViGIPTTimeStamp_Get(p *radius.Packet) (value EricssonViGIPTTimeStamp) {
	value, _ = EricssonViGIPTTimeStamp_Lookup(p)
	return
}

func EricssonViGIPTTimeStamp_Gets(p *radius.Packet) (values []EricssonViGIPTTimeStamp, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 126) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGIPTTimeStamp(i))
	}
	return
}

func EricssonViGIPTTimeStamp_Lookup(p *radius.Packet) (value EricssonViGIPTTimeStamp, err error) {
	a, ok := _Ericsson_LookupVendor(p, 126)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGIPTTimeStamp(i)
	return
}

func EricssonViGIPTTimeStamp_Set(p *radius.Packet, value EricssonViGIPTTimeStamp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 126, a)
}

func EricssonViGIPTTimeStamp_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 126)
}

type EricssonViGUserNameInfo uint32

var EricssonViGUserNameInfo_Strings = map[EricssonViGUserNameInfo]string{}

func (a EricssonViGUserNameInfo) String() string {
	if str, ok := EricssonViGUserNameInfo_Strings[a]; ok {
		return str
	}
	return "EricssonViGUserNameInfo(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func EricssonViGUserNameInfo_Add(p *radius.Packet, value EricssonViGUserNameInfo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_AddVendor(p, 127, a)
}

func EricssonViGUserNameInfo_Get(p *radius.Packet) (value EricssonViGUserNameInfo) {
	value, _ = EricssonViGUserNameInfo_Lookup(p)
	return
}

func EricssonViGUserNameInfo_Gets(p *radius.Packet) (values []EricssonViGUserNameInfo, err error) {
	var i uint32
	for _, attr := range _Ericsson_GetsVendor(p, 127) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, EricssonViGUserNameInfo(i))
	}
	return
}

func EricssonViGUserNameInfo_Lookup(p *radius.Packet) (value EricssonViGUserNameInfo, err error) {
	a, ok := _Ericsson_LookupVendor(p, 127)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = EricssonViGUserNameInfo(i)
	return
}

func EricssonViGUserNameInfo_Set(p *radius.Packet, value EricssonViGUserNameInfo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Ericsson_SetVendor(p, 127, a)
}

func EricssonViGUserNameInfo_Del(p *radius.Packet) {
	_Ericsson_DelVendor(p, 127)
}
