// Code generated by radius-dict-gen. DO NOT EDIT.

package mimosa

import (
	"errors"
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Mimosa_VendorID = 43356
)

func _Mimosa_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Mimosa_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Mimosa_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Mimosa_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Mimosa_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Mimosa_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Mimosa_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Mimosa_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Mimosa_AddVendor(p, typ, attr)
}

func _Mimosa_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Mimosa_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func MimosaDeviceConfigurationParameter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 1, a)
}

func MimosaDeviceConfigurationParameter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 1, a)
}

func MimosaDeviceConfigurationParameter_Get(p *radius.Packet) (value []byte) {
	value, _ = MimosaDeviceConfigurationParameter_Lookup(p)
	return
}

func MimosaDeviceConfigurationParameter_GetString(p *radius.Packet) (value string) {
	value, _ = MimosaDeviceConfigurationParameter_LookupString(p)
	return
}

func MimosaDeviceConfigurationParameter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Mimosa_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaDeviceConfigurationParameter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Mimosa_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaDeviceConfigurationParameter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Mimosa_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MimosaDeviceConfigurationParameter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Mimosa_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MimosaDeviceConfigurationParameter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 1, a)
}

func MimosaDeviceConfigurationParameter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 1, a)
}

func MimosaDeviceConfigurationParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 1)
}

func MimosaFirmwareVersionParameter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 2, a)
}

func MimosaFirmwareVersionParameter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 2, a)
}

func MimosaFirmwareVersionParameter_Get(p *radius.Packet) (value []byte) {
	value, _ = MimosaFirmwareVersionParameter_Lookup(p)
	return
}

func MimosaFirmwareVersionParameter_GetString(p *radius.Packet) (value string) {
	value, _ = MimosaFirmwareVersionParameter_LookupString(p)
	return
}

func MimosaFirmwareVersionParameter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Mimosa_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaFirmwareVersionParameter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Mimosa_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaFirmwareVersionParameter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Mimosa_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MimosaFirmwareVersionParameter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Mimosa_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MimosaFirmwareVersionParameter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 2, a)
}

func MimosaFirmwareVersionParameter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 2, a)
}

func MimosaFirmwareVersionParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 2)
}

func MimosaFirmwareLocationParameter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 3, a)
}

func MimosaFirmwareLocationParameter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 3, a)
}

func MimosaFirmwareLocationParameter_Get(p *radius.Packet) (value []byte) {
	value, _ = MimosaFirmwareLocationParameter_Lookup(p)
	return
}

func MimosaFirmwareLocationParameter_GetString(p *radius.Packet) (value string) {
	value, _ = MimosaFirmwareLocationParameter_LookupString(p)
	return
}

func MimosaFirmwareLocationParameter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Mimosa_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaFirmwareLocationParameter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Mimosa_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaFirmwareLocationParameter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Mimosa_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MimosaFirmwareLocationParameter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Mimosa_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MimosaFirmwareLocationParameter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 3, a)
}

func MimosaFirmwareLocationParameter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 3, a)
}

func MimosaFirmwareLocationParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 3)
}

func MimosaWirelessProtocolParameter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 4, a)
}

func MimosaWirelessProtocolParameter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 4, a)
}

func MimosaWirelessProtocolParameter_Get(p *radius.Packet) (value []byte) {
	value, _ = MimosaWirelessProtocolParameter_Lookup(p)
	return
}

func MimosaWirelessProtocolParameter_GetString(p *radius.Packet) (value string) {
	value, _ = MimosaWirelessProtocolParameter_LookupString(p)
	return
}

func MimosaWirelessProtocolParameter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Mimosa_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaWirelessProtocolParameter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Mimosa_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaWirelessProtocolParameter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Mimosa_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MimosaWirelessProtocolParameter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Mimosa_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MimosaWirelessProtocolParameter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 4, a)
}

func MimosaWirelessProtocolParameter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 4, a)
}

func MimosaWirelessProtocolParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 4)
}

func MimosaManagementIPAddressModeParameter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 5, a)
}

func MimosaManagementIPAddressModeParameter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 5, a)
}

func MimosaManagementIPAddressModeParameter_Get(p *radius.Packet) (value []byte) {
	value, _ = MimosaManagementIPAddressModeParameter_Lookup(p)
	return
}

func MimosaManagementIPAddressModeParameter_GetString(p *radius.Packet) (value string) {
	value, _ = MimosaManagementIPAddressModeParameter_LookupString(p)
	return
}

func MimosaManagementIPAddressModeParameter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Mimosa_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaManagementIPAddressModeParameter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Mimosa_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaManagementIPAddressModeParameter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Mimosa_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MimosaManagementIPAddressModeParameter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Mimosa_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MimosaManagementIPAddressModeParameter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 5, a)
}

func MimosaManagementIPAddressModeParameter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 5, a)
}

func MimosaManagementIPAddressModeParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 5)
}

func MimosaManagementIPAddressParameter_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 6, a)
}

func MimosaManagementIPAddressParameter_Get(p *radius.Packet) (value net.IP) {
	value, _ = MimosaManagementIPAddressParameter_Lookup(p)
	return
}

func MimosaManagementIPAddressParameter_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Mimosa_GetsVendor(p, 6) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaManagementIPAddressParameter_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Mimosa_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func MimosaManagementIPAddressParameter_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 6, a)
}

func MimosaManagementIPAddressParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 6)
}

func MimosaManagementIPNetmaskParameter_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 7, a)
}

func MimosaManagementIPNetmaskParameter_Get(p *radius.Packet) (value net.IP) {
	value, _ = MimosaManagementIPNetmaskParameter_Lookup(p)
	return
}

func MimosaManagementIPNetmaskParameter_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Mimosa_GetsVendor(p, 7) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaManagementIPNetmaskParameter_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Mimosa_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func MimosaManagementIPNetmaskParameter_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 7, a)
}

func MimosaManagementIPNetmaskParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 7)
}

func MimosaManagementIPGatewayParameter_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 8, a)
}

func MimosaManagementIPGatewayParameter_Get(p *radius.Packet) (value net.IP) {
	value, _ = MimosaManagementIPGatewayParameter_Lookup(p)
	return
}

func MimosaManagementIPGatewayParameter_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Mimosa_GetsVendor(p, 8) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaManagementIPGatewayParameter_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Mimosa_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func MimosaManagementIPGatewayParameter_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 8, a)
}

func MimosaManagementIPGatewayParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 8)
}

func MimosaManagementVlanStatusParameter_Add(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _Mimosa_AddVendor(p, 9, a)
}

func MimosaManagementVlanStatusParameter_Get(p *radius.Packet) (value byte) {
	value, _ = MimosaManagementVlanStatusParameter_Lookup(p)
	return
}

func MimosaManagementVlanStatusParameter_Gets(p *radius.Packet) (values []byte, err error) {
	for _, attr := range _Mimosa_GetsVendor(p, 9) {
		if len(attr) != 1 {
			err = errors.New("invalid byte")
			return
		}
		values = append(values, attr[0])
	}
	return
}

func MimosaManagementVlanStatusParameter_Lookup(p *radius.Packet) (value byte, err error) {
	a, ok := _Mimosa_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) != 1 {
		err = errors.New("invalid byte")
		return
	}
	value = a[0]
	return
}

func MimosaManagementVlanStatusParameter_Set(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _Mimosa_SetVendor(p, 9, a)
}

func MimosaManagementVlanStatusParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 9)
}

func MimosaManagementVlanParameter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 10, a)
}

func MimosaManagementVlanParameter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 10, a)
}

func MimosaManagementVlanParameter_Get(p *radius.Packet) (value []byte) {
	value, _ = MimosaManagementVlanParameter_Lookup(p)
	return
}

func MimosaManagementVlanParameter_GetString(p *radius.Packet) (value string) {
	value, _ = MimosaManagementVlanParameter_LookupString(p)
	return
}

func MimosaManagementVlanParameter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Mimosa_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaManagementVlanParameter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Mimosa_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaManagementVlanParameter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Mimosa_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MimosaManagementVlanParameter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Mimosa_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MimosaManagementVlanParameter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 10, a)
}

func MimosaManagementVlanParameter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 10, a)
}

func MimosaManagementVlanParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 10)
}

func MimosaManagementPasswordParameter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 11, a)
}

func MimosaManagementPasswordParameter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 11, a)
}

func MimosaManagementPasswordParameter_Get(p *radius.Packet) (value []byte) {
	value, _ = MimosaManagementPasswordParameter_Lookup(p)
	return
}

func MimosaManagementPasswordParameter_GetString(p *radius.Packet) (value string) {
	value, _ = MimosaManagementPasswordParameter_LookupString(p)
	return
}

func MimosaManagementPasswordParameter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Mimosa_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaManagementPasswordParameter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Mimosa_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaManagementPasswordParameter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Mimosa_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MimosaManagementPasswordParameter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Mimosa_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MimosaManagementPasswordParameter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 11, a)
}

func MimosaManagementPasswordParameter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 11, a)
}

func MimosaManagementPasswordParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 11)
}

func MimosaDeviceNameParameter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 12, a)
}

func MimosaDeviceNameParameter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 12, a)
}

func MimosaDeviceNameParameter_Get(p *radius.Packet) (value []byte) {
	value, _ = MimosaDeviceNameParameter_Lookup(p)
	return
}

func MimosaDeviceNameParameter_GetString(p *radius.Packet) (value string) {
	value, _ = MimosaDeviceNameParameter_LookupString(p)
	return
}

func MimosaDeviceNameParameter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Mimosa_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaDeviceNameParameter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Mimosa_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaDeviceNameParameter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Mimosa_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MimosaDeviceNameParameter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Mimosa_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MimosaDeviceNameParameter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 12, a)
}

func MimosaDeviceNameParameter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 12, a)
}

func MimosaDeviceNameParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 12)
}

func MimosaTrafficShapingPeakParameter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 13, a)
}

func MimosaTrafficShapingPeakParameter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 13, a)
}

func MimosaTrafficShapingPeakParameter_Get(p *radius.Packet) (value []byte) {
	value, _ = MimosaTrafficShapingPeakParameter_Lookup(p)
	return
}

func MimosaTrafficShapingPeakParameter_GetString(p *radius.Packet) (value string) {
	value, _ = MimosaTrafficShapingPeakParameter_LookupString(p)
	return
}

func MimosaTrafficShapingPeakParameter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Mimosa_GetsVendor(p, 13) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaTrafficShapingPeakParameter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Mimosa_GetsVendor(p, 13) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaTrafficShapingPeakParameter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Mimosa_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MimosaTrafficShapingPeakParameter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Mimosa_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MimosaTrafficShapingPeakParameter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 13, a)
}

func MimosaTrafficShapingPeakParameter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 13, a)
}

func MimosaTrafficShapingPeakParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 13)
}

func MimosaTrafficShapingCommittedParameter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 14, a)
}

func MimosaTrafficShapingCommittedParameter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 14, a)
}

func MimosaTrafficShapingCommittedParameter_Get(p *radius.Packet) (value []byte) {
	value, _ = MimosaTrafficShapingCommittedParameter_Lookup(p)
	return
}

func MimosaTrafficShapingCommittedParameter_GetString(p *radius.Packet) (value string) {
	value, _ = MimosaTrafficShapingCommittedParameter_LookupString(p)
	return
}

func MimosaTrafficShapingCommittedParameter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Mimosa_GetsVendor(p, 14) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaTrafficShapingCommittedParameter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Mimosa_GetsVendor(p, 14) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaTrafficShapingCommittedParameter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Mimosa_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MimosaTrafficShapingCommittedParameter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Mimosa_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MimosaTrafficShapingCommittedParameter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 14, a)
}

func MimosaTrafficShapingCommittedParameter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 14, a)
}

func MimosaTrafficShapingCommittedParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 14)
}

func MimosaEthernetPortSpeedParameter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 15, a)
}

func MimosaEthernetPortSpeedParameter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 15, a)
}

func MimosaEthernetPortSpeedParameter_Get(p *radius.Packet) (value []byte) {
	value, _ = MimosaEthernetPortSpeedParameter_Lookup(p)
	return
}

func MimosaEthernetPortSpeedParameter_GetString(p *radius.Packet) (value string) {
	value, _ = MimosaEthernetPortSpeedParameter_LookupString(p)
	return
}

func MimosaEthernetPortSpeedParameter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Mimosa_GetsVendor(p, 15) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaEthernetPortSpeedParameter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Mimosa_GetsVendor(p, 15) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaEthernetPortSpeedParameter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Mimosa_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MimosaEthernetPortSpeedParameter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Mimosa_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MimosaEthernetPortSpeedParameter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 15, a)
}

func MimosaEthernetPortSpeedParameter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 15, a)
}

func MimosaEthernetPortSpeedParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 15)
}

func MimosaDNS1Parameter_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 16, a)
}

func MimosaDNS1Parameter_Get(p *radius.Packet) (value net.IP) {
	value, _ = MimosaDNS1Parameter_Lookup(p)
	return
}

func MimosaDNS1Parameter_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Mimosa_GetsVendor(p, 16) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaDNS1Parameter_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Mimosa_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func MimosaDNS1Parameter_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 16, a)
}

func MimosaDNS1Parameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 16)
}

func MimosaDNS2Parameter_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 17, a)
}

func MimosaDNS2Parameter_Get(p *radius.Packet) (value net.IP) {
	value, _ = MimosaDNS2Parameter_Lookup(p)
	return
}

func MimosaDNS2Parameter_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Mimosa_GetsVendor(p, 17) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaDNS2Parameter_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Mimosa_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func MimosaDNS2Parameter_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 17, a)
}

func MimosaDNS2Parameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 17)
}

type MimosaHTTPPortParameter uint32

var MimosaHTTPPortParameter_Strings = map[MimosaHTTPPortParameter]string{}

func (a MimosaHTTPPortParameter) String() string {
	if str, ok := MimosaHTTPPortParameter_Strings[a]; ok {
		return str
	}
	return "MimosaHTTPPortParameter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MimosaHTTPPortParameter_Add(p *radius.Packet, value MimosaHTTPPortParameter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Mimosa_AddVendor(p, 18, a)
}

func MimosaHTTPPortParameter_Get(p *radius.Packet) (value MimosaHTTPPortParameter) {
	value, _ = MimosaHTTPPortParameter_Lookup(p)
	return
}

func MimosaHTTPPortParameter_Gets(p *radius.Packet) (values []MimosaHTTPPortParameter, err error) {
	var i uint32
	for _, attr := range _Mimosa_GetsVendor(p, 18) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MimosaHTTPPortParameter(i))
	}
	return
}

func MimosaHTTPPortParameter_Lookup(p *radius.Packet) (value MimosaHTTPPortParameter, err error) {
	a, ok := _Mimosa_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MimosaHTTPPortParameter(i)
	return
}

func MimosaHTTPPortParameter_Set(p *radius.Packet, value MimosaHTTPPortParameter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Mimosa_SetVendor(p, 18, a)
}

func MimosaHTTPPortParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 18)
}

func MimosaEnableHTTPSParameter_Add(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _Mimosa_AddVendor(p, 19, a)
}

func MimosaEnableHTTPSParameter_Get(p *radius.Packet) (value byte) {
	value, _ = MimosaEnableHTTPSParameter_Lookup(p)
	return
}

func MimosaEnableHTTPSParameter_Gets(p *radius.Packet) (values []byte, err error) {
	for _, attr := range _Mimosa_GetsVendor(p, 19) {
		if len(attr) != 1 {
			err = errors.New("invalid byte")
			return
		}
		values = append(values, attr[0])
	}
	return
}

func MimosaEnableHTTPSParameter_Lookup(p *radius.Packet) (value byte, err error) {
	a, ok := _Mimosa_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) != 1 {
		err = errors.New("invalid byte")
		return
	}
	value = a[0]
	return
}

func MimosaEnableHTTPSParameter_Set(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _Mimosa_SetVendor(p, 19, a)
}

func MimosaEnableHTTPSParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 19)
}

type MimosaHTTPSPortParameter uint32

var MimosaHTTPSPortParameter_Strings = map[MimosaHTTPSPortParameter]string{}

func (a MimosaHTTPSPortParameter) String() string {
	if str, ok := MimosaHTTPSPortParameter_Strings[a]; ok {
		return str
	}
	return "MimosaHTTPSPortParameter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MimosaHTTPSPortParameter_Add(p *radius.Packet, value MimosaHTTPSPortParameter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Mimosa_AddVendor(p, 20, a)
}

func MimosaHTTPSPortParameter_Get(p *radius.Packet) (value MimosaHTTPSPortParameter) {
	value, _ = MimosaHTTPSPortParameter_Lookup(p)
	return
}

func MimosaHTTPSPortParameter_Gets(p *radius.Packet) (values []MimosaHTTPSPortParameter, err error) {
	var i uint32
	for _, attr := range _Mimosa_GetsVendor(p, 20) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MimosaHTTPSPortParameter(i))
	}
	return
}

func MimosaHTTPSPortParameter_Lookup(p *radius.Packet) (value MimosaHTTPSPortParameter, err error) {
	a, ok := _Mimosa_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MimosaHTTPSPortParameter(i)
	return
}

func MimosaHTTPSPortParameter_Set(p *radius.Packet, value MimosaHTTPSPortParameter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Mimosa_SetVendor(p, 20, a)
}

func MimosaHTTPSPortParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 20)
}

func MimosaCloudManagementParameter_Add(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _Mimosa_AddVendor(p, 21, a)
}

func MimosaCloudManagementParameter_Get(p *radius.Packet) (value byte) {
	value, _ = MimosaCloudManagementParameter_Lookup(p)
	return
}

func MimosaCloudManagementParameter_Gets(p *radius.Packet) (values []byte, err error) {
	for _, attr := range _Mimosa_GetsVendor(p, 21) {
		if len(attr) != 1 {
			err = errors.New("invalid byte")
			return
		}
		values = append(values, attr[0])
	}
	return
}

func MimosaCloudManagementParameter_Lookup(p *radius.Packet) (value byte, err error) {
	a, ok := _Mimosa_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) != 1 {
		err = errors.New("invalid byte")
		return
	}
	value = a[0]
	return
}

func MimosaCloudManagementParameter_Set(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _Mimosa_SetVendor(p, 21, a)
}

func MimosaCloudManagementParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 21)
}

func MimosaEnableSNMPParameter_Add(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _Mimosa_AddVendor(p, 22, a)
}

func MimosaEnableSNMPParameter_Get(p *radius.Packet) (value byte) {
	value, _ = MimosaEnableSNMPParameter_Lookup(p)
	return
}

func MimosaEnableSNMPParameter_Gets(p *radius.Packet) (values []byte, err error) {
	for _, attr := range _Mimosa_GetsVendor(p, 22) {
		if len(attr) != 1 {
			err = errors.New("invalid byte")
			return
		}
		values = append(values, attr[0])
	}
	return
}

func MimosaEnableSNMPParameter_Lookup(p *radius.Packet) (value byte, err error) {
	a, ok := _Mimosa_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) != 1 {
		err = errors.New("invalid byte")
		return
	}
	value = a[0]
	return
}

func MimosaEnableSNMPParameter_Set(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _Mimosa_SetVendor(p, 22, a)
}

func MimosaEnableSNMPParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 22)
}

func MimosaSNMPCommunityStringParameter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 23, a)
}

func MimosaSNMPCommunityStringParameter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 23, a)
}

func MimosaSNMPCommunityStringParameter_Get(p *radius.Packet) (value []byte) {
	value, _ = MimosaSNMPCommunityStringParameter_Lookup(p)
	return
}

func MimosaSNMPCommunityStringParameter_GetString(p *radius.Packet) (value string) {
	value, _ = MimosaSNMPCommunityStringParameter_LookupString(p)
	return
}

func MimosaSNMPCommunityStringParameter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Mimosa_GetsVendor(p, 23) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaSNMPCommunityStringParameter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Mimosa_GetsVendor(p, 23) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaSNMPCommunityStringParameter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Mimosa_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MimosaSNMPCommunityStringParameter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Mimosa_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MimosaSNMPCommunityStringParameter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 23, a)
}

func MimosaSNMPCommunityStringParameter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 23, a)
}

func MimosaSNMPCommunityStringParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 23)
}

func MimosaSNMPTrapServerParameter_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 24, a)
}

func MimosaSNMPTrapServerParameter_Get(p *radius.Packet) (value net.IP) {
	value, _ = MimosaSNMPTrapServerParameter_Lookup(p)
	return
}

func MimosaSNMPTrapServerParameter_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Mimosa_GetsVendor(p, 24) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaSNMPTrapServerParameter_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Mimosa_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func MimosaSNMPTrapServerParameter_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 24, a)
}

func MimosaSNMPTrapServerParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 24)
}

func MimosaNTPServerAddressParameter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 25, a)
}

func MimosaNTPServerAddressParameter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 25, a)
}

func MimosaNTPServerAddressParameter_Get(p *radius.Packet) (value []byte) {
	value, _ = MimosaNTPServerAddressParameter_Lookup(p)
	return
}

func MimosaNTPServerAddressParameter_GetString(p *radius.Packet) (value string) {
	value, _ = MimosaNTPServerAddressParameter_LookupString(p)
	return
}

func MimosaNTPServerAddressParameter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Mimosa_GetsVendor(p, 25) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaNTPServerAddressParameter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Mimosa_GetsVendor(p, 25) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaNTPServerAddressParameter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Mimosa_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MimosaNTPServerAddressParameter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Mimosa_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MimosaNTPServerAddressParameter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 25, a)
}

func MimosaNTPServerAddressParameter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 25, a)
}

func MimosaNTPServerAddressParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 25)
}

func MimosaEnableSyslogParameter_Add(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _Mimosa_AddVendor(p, 26, a)
}

func MimosaEnableSyslogParameter_Get(p *radius.Packet) (value byte) {
	value, _ = MimosaEnableSyslogParameter_Lookup(p)
	return
}

func MimosaEnableSyslogParameter_Gets(p *radius.Packet) (values []byte, err error) {
	for _, attr := range _Mimosa_GetsVendor(p, 26) {
		if len(attr) != 1 {
			err = errors.New("invalid byte")
			return
		}
		values = append(values, attr[0])
	}
	return
}

func MimosaEnableSyslogParameter_Lookup(p *radius.Packet) (value byte, err error) {
	a, ok := _Mimosa_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) != 1 {
		err = errors.New("invalid byte")
		return
	}
	value = a[0]
	return
}

func MimosaEnableSyslogParameter_Set(p *radius.Packet, value byte) (err error) {
	a := radius.Attribute{value}
	return _Mimosa_SetVendor(p, 26, a)
}

func MimosaEnableSyslogParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 26)
}

func MimosaSyslogServerAddressParameter_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 27, a)
}

func MimosaSyslogServerAddressParameter_Get(p *radius.Packet) (value net.IP) {
	value, _ = MimosaSyslogServerAddressParameter_Lookup(p)
	return
}

func MimosaSyslogServerAddressParameter_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Mimosa_GetsVendor(p, 27) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaSyslogServerAddressParameter_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Mimosa_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func MimosaSyslogServerAddressParameter_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 27, a)
}

func MimosaSyslogServerAddressParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 27)
}

type MimosaSyslogPortParameter uint32

var MimosaSyslogPortParameter_Strings = map[MimosaSyslogPortParameter]string{}

func (a MimosaSyslogPortParameter) String() string {
	if str, ok := MimosaSyslogPortParameter_Strings[a]; ok {
		return str
	}
	return "MimosaSyslogPortParameter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func MimosaSyslogPortParameter_Add(p *radius.Packet, value MimosaSyslogPortParameter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Mimosa_AddVendor(p, 28, a)
}

func MimosaSyslogPortParameter_Get(p *radius.Packet) (value MimosaSyslogPortParameter) {
	value, _ = MimosaSyslogPortParameter_Lookup(p)
	return
}

func MimosaSyslogPortParameter_Gets(p *radius.Packet) (values []MimosaSyslogPortParameter, err error) {
	var i uint32
	for _, attr := range _Mimosa_GetsVendor(p, 28) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, MimosaSyslogPortParameter(i))
	}
	return
}

func MimosaSyslogPortParameter_Lookup(p *radius.Packet) (value MimosaSyslogPortParameter, err error) {
	a, ok := _Mimosa_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = MimosaSyslogPortParameter(i)
	return
}

func MimosaSyslogPortParameter_Set(p *radius.Packet, value MimosaSyslogPortParameter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Mimosa_SetVendor(p, 28, a)
}

func MimosaSyslogPortParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 28)
}

func MimosaSyslogProtocolParameter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 29, a)
}

func MimosaSyslogProtocolParameter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_AddVendor(p, 29, a)
}

func MimosaSyslogProtocolParameter_Get(p *radius.Packet) (value []byte) {
	value, _ = MimosaSyslogProtocolParameter_Lookup(p)
	return
}

func MimosaSyslogProtocolParameter_GetString(p *radius.Packet) (value string) {
	value, _ = MimosaSyslogProtocolParameter_LookupString(p)
	return
}

func MimosaSyslogProtocolParameter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Mimosa_GetsVendor(p, 29) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaSyslogProtocolParameter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Mimosa_GetsVendor(p, 29) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func MimosaSyslogProtocolParameter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Mimosa_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func MimosaSyslogProtocolParameter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Mimosa_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func MimosaSyslogProtocolParameter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 29, a)
}

func MimosaSyslogProtocolParameter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Mimosa_SetVendor(p, 29, a)
}

func MimosaSyslogProtocolParameter_Del(p *radius.Packet) {
	_Mimosa_DelVendor(p, 29)
}
