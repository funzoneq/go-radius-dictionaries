// Code generated by radius-dict-gen. DO NOT EDIT.

package huawei

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Huawei_VendorID = 2011
)

func _Huawei_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Huawei_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Huawei_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Huawei_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Huawei_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Huawei_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Huawei_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Huawei_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Huawei_AddVendor(p, typ, attr)
}

func _Huawei_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Huawei_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

type HuaweiInputBurstSize uint32

var HuaweiInputBurstSize_Strings = map[HuaweiInputBurstSize]string{}

func (a HuaweiInputBurstSize) String() string {
	if str, ok := HuaweiInputBurstSize_Strings[a]; ok {
		return str
	}
	return "HuaweiInputBurstSize(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiInputBurstSize_Add(p *radius.Packet, value HuaweiInputBurstSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 1, a)
}

func HuaweiInputBurstSize_Get(p *radius.Packet) (value HuaweiInputBurstSize) {
	value, _ = HuaweiInputBurstSize_Lookup(p)
	return
}

func HuaweiInputBurstSize_Gets(p *radius.Packet) (values []HuaweiInputBurstSize, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiInputBurstSize(i))
	}
	return
}

func HuaweiInputBurstSize_Lookup(p *radius.Packet) (value HuaweiInputBurstSize, err error) {
	a, ok := _Huawei_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiInputBurstSize(i)
	return
}

func HuaweiInputBurstSize_Set(p *radius.Packet, value HuaweiInputBurstSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 1, a)
}

func HuaweiInputBurstSize_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 1)
}

type HuaweiInputAverageRate uint32

var HuaweiInputAverageRate_Strings = map[HuaweiInputAverageRate]string{}

func (a HuaweiInputAverageRate) String() string {
	if str, ok := HuaweiInputAverageRate_Strings[a]; ok {
		return str
	}
	return "HuaweiInputAverageRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiInputAverageRate_Add(p *radius.Packet, value HuaweiInputAverageRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 2, a)
}

func HuaweiInputAverageRate_Get(p *radius.Packet) (value HuaweiInputAverageRate) {
	value, _ = HuaweiInputAverageRate_Lookup(p)
	return
}

func HuaweiInputAverageRate_Gets(p *radius.Packet) (values []HuaweiInputAverageRate, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiInputAverageRate(i))
	}
	return
}

func HuaweiInputAverageRate_Lookup(p *radius.Packet) (value HuaweiInputAverageRate, err error) {
	a, ok := _Huawei_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiInputAverageRate(i)
	return
}

func HuaweiInputAverageRate_Set(p *radius.Packet, value HuaweiInputAverageRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 2, a)
}

func HuaweiInputAverageRate_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 2)
}

type HuaweiInputPeakRate uint32

var HuaweiInputPeakRate_Strings = map[HuaweiInputPeakRate]string{}

func (a HuaweiInputPeakRate) String() string {
	if str, ok := HuaweiInputPeakRate_Strings[a]; ok {
		return str
	}
	return "HuaweiInputPeakRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiInputPeakRate_Add(p *radius.Packet, value HuaweiInputPeakRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 3, a)
}

func HuaweiInputPeakRate_Get(p *radius.Packet) (value HuaweiInputPeakRate) {
	value, _ = HuaweiInputPeakRate_Lookup(p)
	return
}

func HuaweiInputPeakRate_Gets(p *radius.Packet) (values []HuaweiInputPeakRate, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiInputPeakRate(i))
	}
	return
}

func HuaweiInputPeakRate_Lookup(p *radius.Packet) (value HuaweiInputPeakRate, err error) {
	a, ok := _Huawei_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiInputPeakRate(i)
	return
}

func HuaweiInputPeakRate_Set(p *radius.Packet, value HuaweiInputPeakRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 3, a)
}

func HuaweiInputPeakRate_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 3)
}

type HuaweiOutputBurstSize uint32

var HuaweiOutputBurstSize_Strings = map[HuaweiOutputBurstSize]string{}

func (a HuaweiOutputBurstSize) String() string {
	if str, ok := HuaweiOutputBurstSize_Strings[a]; ok {
		return str
	}
	return "HuaweiOutputBurstSize(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiOutputBurstSize_Add(p *radius.Packet, value HuaweiOutputBurstSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 4, a)
}

func HuaweiOutputBurstSize_Get(p *radius.Packet) (value HuaweiOutputBurstSize) {
	value, _ = HuaweiOutputBurstSize_Lookup(p)
	return
}

func HuaweiOutputBurstSize_Gets(p *radius.Packet) (values []HuaweiOutputBurstSize, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 4) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiOutputBurstSize(i))
	}
	return
}

func HuaweiOutputBurstSize_Lookup(p *radius.Packet) (value HuaweiOutputBurstSize, err error) {
	a, ok := _Huawei_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiOutputBurstSize(i)
	return
}

func HuaweiOutputBurstSize_Set(p *radius.Packet, value HuaweiOutputBurstSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 4, a)
}

func HuaweiOutputBurstSize_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 4)
}

type HuaweiOutputAverageRate uint32

var HuaweiOutputAverageRate_Strings = map[HuaweiOutputAverageRate]string{}

func (a HuaweiOutputAverageRate) String() string {
	if str, ok := HuaweiOutputAverageRate_Strings[a]; ok {
		return str
	}
	return "HuaweiOutputAverageRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiOutputAverageRate_Add(p *radius.Packet, value HuaweiOutputAverageRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 5, a)
}

func HuaweiOutputAverageRate_Get(p *radius.Packet) (value HuaweiOutputAverageRate) {
	value, _ = HuaweiOutputAverageRate_Lookup(p)
	return
}

func HuaweiOutputAverageRate_Gets(p *radius.Packet) (values []HuaweiOutputAverageRate, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 5) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiOutputAverageRate(i))
	}
	return
}

func HuaweiOutputAverageRate_Lookup(p *radius.Packet) (value HuaweiOutputAverageRate, err error) {
	a, ok := _Huawei_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiOutputAverageRate(i)
	return
}

func HuaweiOutputAverageRate_Set(p *radius.Packet, value HuaweiOutputAverageRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 5, a)
}

func HuaweiOutputAverageRate_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 5)
}

type HuaweiOutputPeakRate uint32

var HuaweiOutputPeakRate_Strings = map[HuaweiOutputPeakRate]string{}

func (a HuaweiOutputPeakRate) String() string {
	if str, ok := HuaweiOutputPeakRate_Strings[a]; ok {
		return str
	}
	return "HuaweiOutputPeakRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiOutputPeakRate_Add(p *radius.Packet, value HuaweiOutputPeakRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 6, a)
}

func HuaweiOutputPeakRate_Get(p *radius.Packet) (value HuaweiOutputPeakRate) {
	value, _ = HuaweiOutputPeakRate_Lookup(p)
	return
}

func HuaweiOutputPeakRate_Gets(p *radius.Packet) (values []HuaweiOutputPeakRate, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 6) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiOutputPeakRate(i))
	}
	return
}

func HuaweiOutputPeakRate_Lookup(p *radius.Packet) (value HuaweiOutputPeakRate, err error) {
	a, ok := _Huawei_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiOutputPeakRate(i)
	return
}

func HuaweiOutputPeakRate_Set(p *radius.Packet, value HuaweiOutputPeakRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 6, a)
}

func HuaweiOutputPeakRate_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 6)
}

type HuaweiInKbBeforeTSwitch uint32

var HuaweiInKbBeforeTSwitch_Strings = map[HuaweiInKbBeforeTSwitch]string{}

func (a HuaweiInKbBeforeTSwitch) String() string {
	if str, ok := HuaweiInKbBeforeTSwitch_Strings[a]; ok {
		return str
	}
	return "HuaweiInKbBeforeTSwitch(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiInKbBeforeTSwitch_Add(p *radius.Packet, value HuaweiInKbBeforeTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 7, a)
}

func HuaweiInKbBeforeTSwitch_Get(p *radius.Packet) (value HuaweiInKbBeforeTSwitch) {
	value, _ = HuaweiInKbBeforeTSwitch_Lookup(p)
	return
}

func HuaweiInKbBeforeTSwitch_Gets(p *radius.Packet) (values []HuaweiInKbBeforeTSwitch, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 7) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiInKbBeforeTSwitch(i))
	}
	return
}

func HuaweiInKbBeforeTSwitch_Lookup(p *radius.Packet) (value HuaweiInKbBeforeTSwitch, err error) {
	a, ok := _Huawei_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiInKbBeforeTSwitch(i)
	return
}

func HuaweiInKbBeforeTSwitch_Set(p *radius.Packet, value HuaweiInKbBeforeTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 7, a)
}

func HuaweiInKbBeforeTSwitch_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 7)
}

type HuaweiOutKbBeforeTSwitch uint32

var HuaweiOutKbBeforeTSwitch_Strings = map[HuaweiOutKbBeforeTSwitch]string{}

func (a HuaweiOutKbBeforeTSwitch) String() string {
	if str, ok := HuaweiOutKbBeforeTSwitch_Strings[a]; ok {
		return str
	}
	return "HuaweiOutKbBeforeTSwitch(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiOutKbBeforeTSwitch_Add(p *radius.Packet, value HuaweiOutKbBeforeTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 8, a)
}

func HuaweiOutKbBeforeTSwitch_Get(p *radius.Packet) (value HuaweiOutKbBeforeTSwitch) {
	value, _ = HuaweiOutKbBeforeTSwitch_Lookup(p)
	return
}

func HuaweiOutKbBeforeTSwitch_Gets(p *radius.Packet) (values []HuaweiOutKbBeforeTSwitch, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 8) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiOutKbBeforeTSwitch(i))
	}
	return
}

func HuaweiOutKbBeforeTSwitch_Lookup(p *radius.Packet) (value HuaweiOutKbBeforeTSwitch, err error) {
	a, ok := _Huawei_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiOutKbBeforeTSwitch(i)
	return
}

func HuaweiOutKbBeforeTSwitch_Set(p *radius.Packet, value HuaweiOutKbBeforeTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 8, a)
}

func HuaweiOutKbBeforeTSwitch_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 8)
}

type HuaweiInPktBeforeTSwitch uint32

var HuaweiInPktBeforeTSwitch_Strings = map[HuaweiInPktBeforeTSwitch]string{}

func (a HuaweiInPktBeforeTSwitch) String() string {
	if str, ok := HuaweiInPktBeforeTSwitch_Strings[a]; ok {
		return str
	}
	return "HuaweiInPktBeforeTSwitch(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiInPktBeforeTSwitch_Add(p *radius.Packet, value HuaweiInPktBeforeTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 9, a)
}

func HuaweiInPktBeforeTSwitch_Get(p *radius.Packet) (value HuaweiInPktBeforeTSwitch) {
	value, _ = HuaweiInPktBeforeTSwitch_Lookup(p)
	return
}

func HuaweiInPktBeforeTSwitch_Gets(p *radius.Packet) (values []HuaweiInPktBeforeTSwitch, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 9) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiInPktBeforeTSwitch(i))
	}
	return
}

func HuaweiInPktBeforeTSwitch_Lookup(p *radius.Packet) (value HuaweiInPktBeforeTSwitch, err error) {
	a, ok := _Huawei_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiInPktBeforeTSwitch(i)
	return
}

func HuaweiInPktBeforeTSwitch_Set(p *radius.Packet, value HuaweiInPktBeforeTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 9, a)
}

func HuaweiInPktBeforeTSwitch_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 9)
}

type HuaweiOutPktBeforeTSwitch uint32

var HuaweiOutPktBeforeTSwitch_Strings = map[HuaweiOutPktBeforeTSwitch]string{}

func (a HuaweiOutPktBeforeTSwitch) String() string {
	if str, ok := HuaweiOutPktBeforeTSwitch_Strings[a]; ok {
		return str
	}
	return "HuaweiOutPktBeforeTSwitch(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiOutPktBeforeTSwitch_Add(p *radius.Packet, value HuaweiOutPktBeforeTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 10, a)
}

func HuaweiOutPktBeforeTSwitch_Get(p *radius.Packet) (value HuaweiOutPktBeforeTSwitch) {
	value, _ = HuaweiOutPktBeforeTSwitch_Lookup(p)
	return
}

func HuaweiOutPktBeforeTSwitch_Gets(p *radius.Packet) (values []HuaweiOutPktBeforeTSwitch, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 10) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiOutPktBeforeTSwitch(i))
	}
	return
}

func HuaweiOutPktBeforeTSwitch_Lookup(p *radius.Packet) (value HuaweiOutPktBeforeTSwitch, err error) {
	a, ok := _Huawei_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiOutPktBeforeTSwitch(i)
	return
}

func HuaweiOutPktBeforeTSwitch_Set(p *radius.Packet, value HuaweiOutPktBeforeTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 10, a)
}

func HuaweiOutPktBeforeTSwitch_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 10)
}

type HuaweiInKbAfterTSwitch uint32

var HuaweiInKbAfterTSwitch_Strings = map[HuaweiInKbAfterTSwitch]string{}

func (a HuaweiInKbAfterTSwitch) String() string {
	if str, ok := HuaweiInKbAfterTSwitch_Strings[a]; ok {
		return str
	}
	return "HuaweiInKbAfterTSwitch(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiInKbAfterTSwitch_Add(p *radius.Packet, value HuaweiInKbAfterTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 11, a)
}

func HuaweiInKbAfterTSwitch_Get(p *radius.Packet) (value HuaweiInKbAfterTSwitch) {
	value, _ = HuaweiInKbAfterTSwitch_Lookup(p)
	return
}

func HuaweiInKbAfterTSwitch_Gets(p *radius.Packet) (values []HuaweiInKbAfterTSwitch, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 11) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiInKbAfterTSwitch(i))
	}
	return
}

func HuaweiInKbAfterTSwitch_Lookup(p *radius.Packet) (value HuaweiInKbAfterTSwitch, err error) {
	a, ok := _Huawei_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiInKbAfterTSwitch(i)
	return
}

func HuaweiInKbAfterTSwitch_Set(p *radius.Packet, value HuaweiInKbAfterTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 11, a)
}

func HuaweiInKbAfterTSwitch_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 11)
}

type HuaweiOutKbAfterTSwitch uint32

var HuaweiOutKbAfterTSwitch_Strings = map[HuaweiOutKbAfterTSwitch]string{}

func (a HuaweiOutKbAfterTSwitch) String() string {
	if str, ok := HuaweiOutKbAfterTSwitch_Strings[a]; ok {
		return str
	}
	return "HuaweiOutKbAfterTSwitch(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiOutKbAfterTSwitch_Add(p *radius.Packet, value HuaweiOutKbAfterTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 12, a)
}

func HuaweiOutKbAfterTSwitch_Get(p *radius.Packet) (value HuaweiOutKbAfterTSwitch) {
	value, _ = HuaweiOutKbAfterTSwitch_Lookup(p)
	return
}

func HuaweiOutKbAfterTSwitch_Gets(p *radius.Packet) (values []HuaweiOutKbAfterTSwitch, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 12) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiOutKbAfterTSwitch(i))
	}
	return
}

func HuaweiOutKbAfterTSwitch_Lookup(p *radius.Packet) (value HuaweiOutKbAfterTSwitch, err error) {
	a, ok := _Huawei_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiOutKbAfterTSwitch(i)
	return
}

func HuaweiOutKbAfterTSwitch_Set(p *radius.Packet, value HuaweiOutKbAfterTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 12, a)
}

func HuaweiOutKbAfterTSwitch_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 12)
}

type HuaweiInPktAfterTSwitch uint32

var HuaweiInPktAfterTSwitch_Strings = map[HuaweiInPktAfterTSwitch]string{}

func (a HuaweiInPktAfterTSwitch) String() string {
	if str, ok := HuaweiInPktAfterTSwitch_Strings[a]; ok {
		return str
	}
	return "HuaweiInPktAfterTSwitch(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiInPktAfterTSwitch_Add(p *radius.Packet, value HuaweiInPktAfterTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 13, a)
}

func HuaweiInPktAfterTSwitch_Get(p *radius.Packet) (value HuaweiInPktAfterTSwitch) {
	value, _ = HuaweiInPktAfterTSwitch_Lookup(p)
	return
}

func HuaweiInPktAfterTSwitch_Gets(p *radius.Packet) (values []HuaweiInPktAfterTSwitch, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 13) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiInPktAfterTSwitch(i))
	}
	return
}

func HuaweiInPktAfterTSwitch_Lookup(p *radius.Packet) (value HuaweiInPktAfterTSwitch, err error) {
	a, ok := _Huawei_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiInPktAfterTSwitch(i)
	return
}

func HuaweiInPktAfterTSwitch_Set(p *radius.Packet, value HuaweiInPktAfterTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 13, a)
}

func HuaweiInPktAfterTSwitch_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 13)
}

type HuaweiOutPktAfterTSwitch uint32

var HuaweiOutPktAfterTSwitch_Strings = map[HuaweiOutPktAfterTSwitch]string{}

func (a HuaweiOutPktAfterTSwitch) String() string {
	if str, ok := HuaweiOutPktAfterTSwitch_Strings[a]; ok {
		return str
	}
	return "HuaweiOutPktAfterTSwitch(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiOutPktAfterTSwitch_Add(p *radius.Packet, value HuaweiOutPktAfterTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 14, a)
}

func HuaweiOutPktAfterTSwitch_Get(p *radius.Packet) (value HuaweiOutPktAfterTSwitch) {
	value, _ = HuaweiOutPktAfterTSwitch_Lookup(p)
	return
}

func HuaweiOutPktAfterTSwitch_Gets(p *radius.Packet) (values []HuaweiOutPktAfterTSwitch, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 14) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiOutPktAfterTSwitch(i))
	}
	return
}

func HuaweiOutPktAfterTSwitch_Lookup(p *radius.Packet) (value HuaweiOutPktAfterTSwitch, err error) {
	a, ok := _Huawei_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiOutPktAfterTSwitch(i)
	return
}

func HuaweiOutPktAfterTSwitch_Set(p *radius.Packet, value HuaweiOutPktAfterTSwitch) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 14, a)
}

func HuaweiOutPktAfterTSwitch_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 14)
}

type HuaweiRemanentVolume uint32

var HuaweiRemanentVolume_Strings = map[HuaweiRemanentVolume]string{}

func (a HuaweiRemanentVolume) String() string {
	if str, ok := HuaweiRemanentVolume_Strings[a]; ok {
		return str
	}
	return "HuaweiRemanentVolume(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiRemanentVolume_Add(p *radius.Packet, value HuaweiRemanentVolume) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 15, a)
}

func HuaweiRemanentVolume_Get(p *radius.Packet) (value HuaweiRemanentVolume) {
	value, _ = HuaweiRemanentVolume_Lookup(p)
	return
}

func HuaweiRemanentVolume_Gets(p *radius.Packet) (values []HuaweiRemanentVolume, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 15) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiRemanentVolume(i))
	}
	return
}

func HuaweiRemanentVolume_Lookup(p *radius.Packet) (value HuaweiRemanentVolume, err error) {
	a, ok := _Huawei_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiRemanentVolume(i)
	return
}

func HuaweiRemanentVolume_Set(p *radius.Packet, value HuaweiRemanentVolume) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 15, a)
}

func HuaweiRemanentVolume_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 15)
}

type HuaweiTariffSwitchInterval uint32

var HuaweiTariffSwitchInterval_Strings = map[HuaweiTariffSwitchInterval]string{}

func (a HuaweiTariffSwitchInterval) String() string {
	if str, ok := HuaweiTariffSwitchInterval_Strings[a]; ok {
		return str
	}
	return "HuaweiTariffSwitchInterval(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiTariffSwitchInterval_Add(p *radius.Packet, value HuaweiTariffSwitchInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 16, a)
}

func HuaweiTariffSwitchInterval_Get(p *radius.Packet) (value HuaweiTariffSwitchInterval) {
	value, _ = HuaweiTariffSwitchInterval_Lookup(p)
	return
}

func HuaweiTariffSwitchInterval_Gets(p *radius.Packet) (values []HuaweiTariffSwitchInterval, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 16) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiTariffSwitchInterval(i))
	}
	return
}

func HuaweiTariffSwitchInterval_Lookup(p *radius.Packet) (value HuaweiTariffSwitchInterval, err error) {
	a, ok := _Huawei_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiTariffSwitchInterval(i)
	return
}

func HuaweiTariffSwitchInterval_Set(p *radius.Packet, value HuaweiTariffSwitchInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 16, a)
}

func HuaweiTariffSwitchInterval_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 16)
}

func HuaweiISPID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 17, a)
}

func HuaweiISPID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 17, a)
}

func HuaweiISPID_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiISPID_Lookup(p)
	return
}

func HuaweiISPID_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiISPID_LookupString(p)
	return
}

func HuaweiISPID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 17) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiISPID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 17) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiISPID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiISPID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiISPID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 17, a)
}

func HuaweiISPID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 17, a)
}

func HuaweiISPID_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 17)
}

type HuaweiMaxUsersPerLogicPort uint32

var HuaweiMaxUsersPerLogicPort_Strings = map[HuaweiMaxUsersPerLogicPort]string{}

func (a HuaweiMaxUsersPerLogicPort) String() string {
	if str, ok := HuaweiMaxUsersPerLogicPort_Strings[a]; ok {
		return str
	}
	return "HuaweiMaxUsersPerLogicPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiMaxUsersPerLogicPort_Add(p *radius.Packet, value HuaweiMaxUsersPerLogicPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 18, a)
}

func HuaweiMaxUsersPerLogicPort_Get(p *radius.Packet) (value HuaweiMaxUsersPerLogicPort) {
	value, _ = HuaweiMaxUsersPerLogicPort_Lookup(p)
	return
}

func HuaweiMaxUsersPerLogicPort_Gets(p *radius.Packet) (values []HuaweiMaxUsersPerLogicPort, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 18) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiMaxUsersPerLogicPort(i))
	}
	return
}

func HuaweiMaxUsersPerLogicPort_Lookup(p *radius.Packet) (value HuaweiMaxUsersPerLogicPort, err error) {
	a, ok := _Huawei_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiMaxUsersPerLogicPort(i)
	return
}

func HuaweiMaxUsersPerLogicPort_Set(p *radius.Packet, value HuaweiMaxUsersPerLogicPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 18, a)
}

func HuaweiMaxUsersPerLogicPort_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 18)
}

type HuaweiCommand uint32

var HuaweiCommand_Strings = map[HuaweiCommand]string{}

func (a HuaweiCommand) String() string {
	if str, ok := HuaweiCommand_Strings[a]; ok {
		return str
	}
	return "HuaweiCommand(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiCommand_Add(p *radius.Packet, value HuaweiCommand) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 20, a)
}

func HuaweiCommand_Get(p *radius.Packet) (value HuaweiCommand) {
	value, _ = HuaweiCommand_Lookup(p)
	return
}

func HuaweiCommand_Gets(p *radius.Packet) (values []HuaweiCommand, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 20) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiCommand(i))
	}
	return
}

func HuaweiCommand_Lookup(p *radius.Packet) (value HuaweiCommand, err error) {
	a, ok := _Huawei_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiCommand(i)
	return
}

func HuaweiCommand_Set(p *radius.Packet, value HuaweiCommand) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 20, a)
}

func HuaweiCommand_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 20)
}

type HuaweiPriority uint32

var HuaweiPriority_Strings = map[HuaweiPriority]string{}

func (a HuaweiPriority) String() string {
	if str, ok := HuaweiPriority_Strings[a]; ok {
		return str
	}
	return "HuaweiPriority(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiPriority_Add(p *radius.Packet, value HuaweiPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 22, a)
}

func HuaweiPriority_Get(p *radius.Packet) (value HuaweiPriority) {
	value, _ = HuaweiPriority_Lookup(p)
	return
}

func HuaweiPriority_Gets(p *radius.Packet) (values []HuaweiPriority, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 22) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiPriority(i))
	}
	return
}

func HuaweiPriority_Lookup(p *radius.Packet) (value HuaweiPriority, err error) {
	a, ok := _Huawei_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiPriority(i)
	return
}

func HuaweiPriority_Set(p *radius.Packet, value HuaweiPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 22, a)
}

func HuaweiPriority_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 22)
}

type HuaweiControlIdentifier uint32

var HuaweiControlIdentifier_Strings = map[HuaweiControlIdentifier]string{}

func (a HuaweiControlIdentifier) String() string {
	if str, ok := HuaweiControlIdentifier_Strings[a]; ok {
		return str
	}
	return "HuaweiControlIdentifier(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiControlIdentifier_Add(p *radius.Packet, value HuaweiControlIdentifier) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 24, a)
}

func HuaweiControlIdentifier_Get(p *radius.Packet) (value HuaweiControlIdentifier) {
	value, _ = HuaweiControlIdentifier_Lookup(p)
	return
}

func HuaweiControlIdentifier_Gets(p *radius.Packet) (values []HuaweiControlIdentifier, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 24) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiControlIdentifier(i))
	}
	return
}

func HuaweiControlIdentifier_Lookup(p *radius.Packet) (value HuaweiControlIdentifier, err error) {
	a, ok := _Huawei_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiControlIdentifier(i)
	return
}

func HuaweiControlIdentifier_Set(p *radius.Packet, value HuaweiControlIdentifier) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 24, a)
}

func HuaweiControlIdentifier_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 24)
}

type HuaweiResultCode uint32

const (
	HuaweiResultCode_Value_Succeeded HuaweiResultCode = 0
)

var HuaweiResultCode_Strings = map[HuaweiResultCode]string{
	HuaweiResultCode_Value_Succeeded: "Succeeded",
}

func (a HuaweiResultCode) String() string {
	if str, ok := HuaweiResultCode_Strings[a]; ok {
		return str
	}
	return "HuaweiResultCode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiResultCode_Add(p *radius.Packet, value HuaweiResultCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 25, a)
}

func HuaweiResultCode_Get(p *radius.Packet) (value HuaweiResultCode) {
	value, _ = HuaweiResultCode_Lookup(p)
	return
}

func HuaweiResultCode_Gets(p *radius.Packet) (values []HuaweiResultCode, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 25) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiResultCode(i))
	}
	return
}

func HuaweiResultCode_Lookup(p *radius.Packet) (value HuaweiResultCode, err error) {
	a, ok := _Huawei_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiResultCode(i)
	return
}

func HuaweiResultCode_Set(p *radius.Packet, value HuaweiResultCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 25, a)
}

func HuaweiResultCode_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 25)
}

type HuaweiConnectID uint32

var HuaweiConnectID_Strings = map[HuaweiConnectID]string{}

func (a HuaweiConnectID) String() string {
	if str, ok := HuaweiConnectID_Strings[a]; ok {
		return str
	}
	return "HuaweiConnectID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiConnectID_Add(p *radius.Packet, value HuaweiConnectID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 26, a)
}

func HuaweiConnectID_Get(p *radius.Packet) (value HuaweiConnectID) {
	value, _ = HuaweiConnectID_Lookup(p)
	return
}

func HuaweiConnectID_Gets(p *radius.Packet) (values []HuaweiConnectID, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 26) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiConnectID(i))
	}
	return
}

func HuaweiConnectID_Lookup(p *radius.Packet) (value HuaweiConnectID, err error) {
	a, ok := _Huawei_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiConnectID(i)
	return
}

func HuaweiConnectID_Set(p *radius.Packet, value HuaweiConnectID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 26, a)
}

func HuaweiConnectID_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 26)
}

func HuaweiPortalURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 27, a)
}

func HuaweiPortalURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 27, a)
}

func HuaweiPortalURL_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiPortalURL_Lookup(p)
	return
}

func HuaweiPortalURL_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiPortalURL_LookupString(p)
	return
}

func HuaweiPortalURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 27) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiPortalURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 27) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiPortalURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiPortalURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiPortalURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 27, a)
}

func HuaweiPortalURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 27, a)
}

func HuaweiPortalURL_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 27)
}

func HuaweiFTPDirectory_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 28, a)
}

func HuaweiFTPDirectory_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 28, a)
}

func HuaweiFTPDirectory_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiFTPDirectory_Lookup(p)
	return
}

func HuaweiFTPDirectory_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiFTPDirectory_LookupString(p)
	return
}

func HuaweiFTPDirectory_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 28) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiFTPDirectory_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 28) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiFTPDirectory_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiFTPDirectory_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiFTPDirectory_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 28, a)
}

func HuaweiFTPDirectory_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 28, a)
}

func HuaweiFTPDirectory_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 28)
}

type HuaweiExecPrivilege uint32

var HuaweiExecPrivilege_Strings = map[HuaweiExecPrivilege]string{}

func (a HuaweiExecPrivilege) String() string {
	if str, ok := HuaweiExecPrivilege_Strings[a]; ok {
		return str
	}
	return "HuaweiExecPrivilege(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiExecPrivilege_Add(p *radius.Packet, value HuaweiExecPrivilege) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 29, a)
}

func HuaweiExecPrivilege_Get(p *radius.Packet) (value HuaweiExecPrivilege) {
	value, _ = HuaweiExecPrivilege_Lookup(p)
	return
}

func HuaweiExecPrivilege_Gets(p *radius.Packet) (values []HuaweiExecPrivilege, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 29) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiExecPrivilege(i))
	}
	return
}

func HuaweiExecPrivilege_Lookup(p *radius.Packet) (value HuaweiExecPrivilege, err error) {
	a, ok := _Huawei_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiExecPrivilege(i)
	return
}

func HuaweiExecPrivilege_Set(p *radius.Packet, value HuaweiExecPrivilege) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 29, a)
}

func HuaweiExecPrivilege_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 29)
}

type HuaweiIPAddress uint32

var HuaweiIPAddress_Strings = map[HuaweiIPAddress]string{}

func (a HuaweiIPAddress) String() string {
	if str, ok := HuaweiIPAddress_Strings[a]; ok {
		return str
	}
	return "HuaweiIPAddress(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiIPAddress_Add(p *radius.Packet, value HuaweiIPAddress) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 30, a)
}

func HuaweiIPAddress_Get(p *radius.Packet) (value HuaweiIPAddress) {
	value, _ = HuaweiIPAddress_Lookup(p)
	return
}

func HuaweiIPAddress_Gets(p *radius.Packet) (values []HuaweiIPAddress, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 30) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiIPAddress(i))
	}
	return
}

func HuaweiIPAddress_Lookup(p *radius.Packet) (value HuaweiIPAddress, err error) {
	a, ok := _Huawei_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiIPAddress(i)
	return
}

func HuaweiIPAddress_Set(p *radius.Packet, value HuaweiIPAddress) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 30, a)
}

func HuaweiIPAddress_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 30)
}

func HuaweiQosProfileName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 31, a)
}

func HuaweiQosProfileName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 31, a)
}

func HuaweiQosProfileName_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiQosProfileName_Lookup(p)
	return
}

func HuaweiQosProfileName_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiQosProfileName_LookupString(p)
	return
}

func HuaweiQosProfileName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 31) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiQosProfileName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 31) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiQosProfileName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiQosProfileName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiQosProfileName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 31, a)
}

func HuaweiQosProfileName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 31, a)
}

func HuaweiQosProfileName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 31)
}

func HuaweiSIPServer_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 32, a)
}

func HuaweiSIPServer_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 32, a)
}

func HuaweiSIPServer_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiSIPServer_Lookup(p)
	return
}

func HuaweiSIPServer_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiSIPServer_LookupString(p)
	return
}

func HuaweiSIPServer_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 32) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiSIPServer_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 32) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiSIPServer_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiSIPServer_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiSIPServer_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 32, a)
}

func HuaweiSIPServer_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 32, a)
}

func HuaweiSIPServer_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 32)
}

func HuaweiUserPassword_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 33, a)
}

func HuaweiUserPassword_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 33, a)
}

func HuaweiUserPassword_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiUserPassword_Lookup(p)
	return
}

func HuaweiUserPassword_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiUserPassword_LookupString(p)
	return
}

func HuaweiUserPassword_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 33) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiUserPassword_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 33) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiUserPassword_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiUserPassword_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiUserPassword_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 33, a)
}

func HuaweiUserPassword_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 33, a)
}

func HuaweiUserPassword_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 33)
}

func HuaweiCommandMode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 34, a)
}

func HuaweiCommandMode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 34, a)
}

func HuaweiCommandMode_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiCommandMode_Lookup(p)
	return
}

func HuaweiCommandMode_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiCommandMode_LookupString(p)
	return
}

func HuaweiCommandMode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 34) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiCommandMode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 34) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiCommandMode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiCommandMode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiCommandMode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 34, a)
}

func HuaweiCommandMode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 34, a)
}

func HuaweiCommandMode_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 34)
}

type HuaweiRenewalTime uint32

var HuaweiRenewalTime_Strings = map[HuaweiRenewalTime]string{}

func (a HuaweiRenewalTime) String() string {
	if str, ok := HuaweiRenewalTime_Strings[a]; ok {
		return str
	}
	return "HuaweiRenewalTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiRenewalTime_Add(p *radius.Packet, value HuaweiRenewalTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 35, a)
}

func HuaweiRenewalTime_Get(p *radius.Packet) (value HuaweiRenewalTime) {
	value, _ = HuaweiRenewalTime_Lookup(p)
	return
}

func HuaweiRenewalTime_Gets(p *radius.Packet) (values []HuaweiRenewalTime, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 35) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiRenewalTime(i))
	}
	return
}

func HuaweiRenewalTime_Lookup(p *radius.Packet) (value HuaweiRenewalTime, err error) {
	a, ok := _Huawei_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiRenewalTime(i)
	return
}

func HuaweiRenewalTime_Set(p *radius.Packet, value HuaweiRenewalTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 35, a)
}

func HuaweiRenewalTime_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 35)
}

type HuaweiRebindingTime uint32

var HuaweiRebindingTime_Strings = map[HuaweiRebindingTime]string{}

func (a HuaweiRebindingTime) String() string {
	if str, ok := HuaweiRebindingTime_Strings[a]; ok {
		return str
	}
	return "HuaweiRebindingTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiRebindingTime_Add(p *radius.Packet, value HuaweiRebindingTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 36, a)
}

func HuaweiRebindingTime_Get(p *radius.Packet) (value HuaweiRebindingTime) {
	value, _ = HuaweiRebindingTime_Lookup(p)
	return
}

func HuaweiRebindingTime_Gets(p *radius.Packet) (values []HuaweiRebindingTime, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 36) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiRebindingTime(i))
	}
	return
}

func HuaweiRebindingTime_Lookup(p *radius.Packet) (value HuaweiRebindingTime, err error) {
	a, ok := _Huawei_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiRebindingTime(i)
	return
}

func HuaweiRebindingTime_Set(p *radius.Packet, value HuaweiRebindingTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 36, a)
}

func HuaweiRebindingTime_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 36)
}

type HuaweiIGMPEnable uint32

var HuaweiIGMPEnable_Strings = map[HuaweiIGMPEnable]string{}

func (a HuaweiIGMPEnable) String() string {
	if str, ok := HuaweiIGMPEnable_Strings[a]; ok {
		return str
	}
	return "HuaweiIGMPEnable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiIGMPEnable_Add(p *radius.Packet, value HuaweiIGMPEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 37, a)
}

func HuaweiIGMPEnable_Get(p *radius.Packet) (value HuaweiIGMPEnable) {
	value, _ = HuaweiIGMPEnable_Lookup(p)
	return
}

func HuaweiIGMPEnable_Gets(p *radius.Packet) (values []HuaweiIGMPEnable, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 37) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiIGMPEnable(i))
	}
	return
}

func HuaweiIGMPEnable_Lookup(p *radius.Packet) (value HuaweiIGMPEnable, err error) {
	a, ok := _Huawei_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiIGMPEnable(i)
	return
}

func HuaweiIGMPEnable_Set(p *radius.Packet, value HuaweiIGMPEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 37, a)
}

func HuaweiIGMPEnable_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 37)
}

func HuaweiDestnationIPAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 39, a)
}

func HuaweiDestnationIPAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 39, a)
}

func HuaweiDestnationIPAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiDestnationIPAddr_Lookup(p)
	return
}

func HuaweiDestnationIPAddr_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiDestnationIPAddr_LookupString(p)
	return
}

func HuaweiDestnationIPAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 39) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDestnationIPAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 39) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDestnationIPAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiDestnationIPAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiDestnationIPAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 39, a)
}

func HuaweiDestnationIPAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 39, a)
}

func HuaweiDestnationIPAddr_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 39)
}

func HuaweiDestnationVolume_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 40, a)
}

func HuaweiDestnationVolume_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 40, a)
}

func HuaweiDestnationVolume_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiDestnationVolume_Lookup(p)
	return
}

func HuaweiDestnationVolume_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiDestnationVolume_LookupString(p)
	return
}

func HuaweiDestnationVolume_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 40) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDestnationVolume_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 40) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDestnationVolume_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiDestnationVolume_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiDestnationVolume_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 40, a)
}

func HuaweiDestnationVolume_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 40, a)
}

func HuaweiDestnationVolume_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 40)
}

type HuaweiStartupStamp uint32

var HuaweiStartupStamp_Strings = map[HuaweiStartupStamp]string{}

func (a HuaweiStartupStamp) String() string {
	if str, ok := HuaweiStartupStamp_Strings[a]; ok {
		return str
	}
	return "HuaweiStartupStamp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiStartupStamp_Add(p *radius.Packet, value HuaweiStartupStamp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 59, a)
}

func HuaweiStartupStamp_Get(p *radius.Packet) (value HuaweiStartupStamp) {
	value, _ = HuaweiStartupStamp_Lookup(p)
	return
}

func HuaweiStartupStamp_Gets(p *radius.Packet) (values []HuaweiStartupStamp, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 59) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiStartupStamp(i))
	}
	return
}

func HuaweiStartupStamp_Lookup(p *radius.Packet) (value HuaweiStartupStamp, err error) {
	a, ok := _Huawei_LookupVendor(p, 59)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiStartupStamp(i)
	return
}

func HuaweiStartupStamp_Set(p *radius.Packet, value HuaweiStartupStamp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 59, a)
}

func HuaweiStartupStamp_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 59)
}

func HuaweiIPHostAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 60, a)
}

func HuaweiIPHostAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 60, a)
}

func HuaweiIPHostAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiIPHostAddr_Lookup(p)
	return
}

func HuaweiIPHostAddr_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiIPHostAddr_LookupString(p)
	return
}

func HuaweiIPHostAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 60) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiIPHostAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 60) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiIPHostAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiIPHostAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiIPHostAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 60, a)
}

func HuaweiIPHostAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 60, a)
}

func HuaweiIPHostAddr_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 60)
}

type HuaweiUpPriority uint32

var HuaweiUpPriority_Strings = map[HuaweiUpPriority]string{}

func (a HuaweiUpPriority) String() string {
	if str, ok := HuaweiUpPriority_Strings[a]; ok {
		return str
	}
	return "HuaweiUpPriority(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiUpPriority_Add(p *radius.Packet, value HuaweiUpPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 61, a)
}

func HuaweiUpPriority_Get(p *radius.Packet) (value HuaweiUpPriority) {
	value, _ = HuaweiUpPriority_Lookup(p)
	return
}

func HuaweiUpPriority_Gets(p *radius.Packet) (values []HuaweiUpPriority, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 61) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiUpPriority(i))
	}
	return
}

func HuaweiUpPriority_Lookup(p *radius.Packet) (value HuaweiUpPriority, err error) {
	a, ok := _Huawei_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiUpPriority(i)
	return
}

func HuaweiUpPriority_Set(p *radius.Packet, value HuaweiUpPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 61, a)
}

func HuaweiUpPriority_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 61)
}

type HuaweiDownPriority uint32

var HuaweiDownPriority_Strings = map[HuaweiDownPriority]string{}

func (a HuaweiDownPriority) String() string {
	if str, ok := HuaweiDownPriority_Strings[a]; ok {
		return str
	}
	return "HuaweiDownPriority(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiDownPriority_Add(p *radius.Packet, value HuaweiDownPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 62, a)
}

func HuaweiDownPriority_Get(p *radius.Packet) (value HuaweiDownPriority) {
	value, _ = HuaweiDownPriority_Lookup(p)
	return
}

func HuaweiDownPriority_Gets(p *radius.Packet) (values []HuaweiDownPriority, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 62) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiDownPriority(i))
	}
	return
}

func HuaweiDownPriority_Lookup(p *radius.Packet) (value HuaweiDownPriority, err error) {
	a, ok := _Huawei_LookupVendor(p, 62)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiDownPriority(i)
	return
}

func HuaweiDownPriority_Set(p *radius.Packet, value HuaweiDownPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 62, a)
}

func HuaweiDownPriority_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 62)
}

func HuaweiTunnelVPNInstance_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 63, a)
}

func HuaweiTunnelVPNInstance_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 63, a)
}

func HuaweiTunnelVPNInstance_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiTunnelVPNInstance_Lookup(p)
	return
}

func HuaweiTunnelVPNInstance_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiTunnelVPNInstance_LookupString(p)
	return
}

func HuaweiTunnelVPNInstance_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 63) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiTunnelVPNInstance_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 63) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiTunnelVPNInstance_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiTunnelVPNInstance_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiTunnelVPNInstance_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 63, a)
}

func HuaweiTunnelVPNInstance_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 63, a)
}

func HuaweiTunnelVPNInstance_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 63)
}

type HuaweiVTName uint32

var HuaweiVTName_Strings = map[HuaweiVTName]string{}

func (a HuaweiVTName) String() string {
	if str, ok := HuaweiVTName_Strings[a]; ok {
		return str
	}
	return "HuaweiVTName(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiVTName_Add(p *radius.Packet, value HuaweiVTName) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 64, a)
}

func HuaweiVTName_Get(p *radius.Packet) (value HuaweiVTName) {
	value, _ = HuaweiVTName_Lookup(p)
	return
}

func HuaweiVTName_Gets(p *radius.Packet) (values []HuaweiVTName, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 64) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiVTName(i))
	}
	return
}

func HuaweiVTName_Lookup(p *radius.Packet) (value HuaweiVTName, err error) {
	a, ok := _Huawei_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiVTName(i)
	return
}

func HuaweiVTName_Set(p *radius.Packet, value HuaweiVTName) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 64, a)
}

func HuaweiVTName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 64)
}

func HuaweiUserDate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 65, a)
}

func HuaweiUserDate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 65, a)
}

func HuaweiUserDate_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiUserDate_Lookup(p)
	return
}

func HuaweiUserDate_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiUserDate_LookupString(p)
	return
}

func HuaweiUserDate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 65) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiUserDate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 65) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiUserDate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiUserDate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiUserDate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 65, a)
}

func HuaweiUserDate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 65, a)
}

func HuaweiUserDate_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 65)
}

func HuaweiUserClass_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 66, a)
}

func HuaweiUserClass_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 66, a)
}

func HuaweiUserClass_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiUserClass_Lookup(p)
	return
}

func HuaweiUserClass_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiUserClass_LookupString(p)
	return
}

func HuaweiUserClass_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 66) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiUserClass_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 66) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiUserClass_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 66)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiUserClass_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 66)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiUserClass_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 66, a)
}

func HuaweiUserClass_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 66, a)
}

func HuaweiUserClass_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 66)
}

type HuaweiPPPNCPType uint32

var HuaweiPPPNCPType_Strings = map[HuaweiPPPNCPType]string{}

func (a HuaweiPPPNCPType) String() string {
	if str, ok := HuaweiPPPNCPType_Strings[a]; ok {
		return str
	}
	return "HuaweiPPPNCPType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiPPPNCPType_Add(p *radius.Packet, value HuaweiPPPNCPType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 70, a)
}

func HuaweiPPPNCPType_Get(p *radius.Packet) (value HuaweiPPPNCPType) {
	value, _ = HuaweiPPPNCPType_Lookup(p)
	return
}

func HuaweiPPPNCPType_Gets(p *radius.Packet) (values []HuaweiPPPNCPType, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 70) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiPPPNCPType(i))
	}
	return
}

func HuaweiPPPNCPType_Lookup(p *radius.Packet) (value HuaweiPPPNCPType, err error) {
	a, ok := _Huawei_LookupVendor(p, 70)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiPPPNCPType(i)
	return
}

func HuaweiPPPNCPType_Set(p *radius.Packet, value HuaweiPPPNCPType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 70, a)
}

func HuaweiPPPNCPType_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 70)
}

func HuaweiVSIName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 71, a)
}

func HuaweiVSIName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 71, a)
}

func HuaweiVSIName_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiVSIName_Lookup(p)
	return
}

func HuaweiVSIName_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiVSIName_LookupString(p)
	return
}

func HuaweiVSIName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 71) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiVSIName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 71) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiVSIName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 71)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiVSIName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 71)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiVSIName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 71, a)
}

func HuaweiVSIName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 71, a)
}

func HuaweiVSIName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 71)
}

func HuaweiSubnetMask_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 72, a)
}

func HuaweiSubnetMask_Get(p *radius.Packet) (value net.IP) {
	value, _ = HuaweiSubnetMask_Lookup(p)
	return
}

func HuaweiSubnetMask_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 72) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiSubnetMask_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 72)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HuaweiSubnetMask_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 72, a)
}

func HuaweiSubnetMask_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 72)
}

func HuaweiGatewayAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 73, a)
}

func HuaweiGatewayAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = HuaweiGatewayAddress_Lookup(p)
	return
}

func HuaweiGatewayAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 73) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiGatewayAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HuaweiGatewayAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 73, a)
}

func HuaweiGatewayAddress_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 73)
}

type HuaweiLeaseTime uint32

var HuaweiLeaseTime_Strings = map[HuaweiLeaseTime]string{}

func (a HuaweiLeaseTime) String() string {
	if str, ok := HuaweiLeaseTime_Strings[a]; ok {
		return str
	}
	return "HuaweiLeaseTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiLeaseTime_Add(p *radius.Packet, value HuaweiLeaseTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 74, a)
}

func HuaweiLeaseTime_Get(p *radius.Packet) (value HuaweiLeaseTime) {
	value, _ = HuaweiLeaseTime_Lookup(p)
	return
}

func HuaweiLeaseTime_Gets(p *radius.Packet) (values []HuaweiLeaseTime, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 74) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiLeaseTime(i))
	}
	return
}

func HuaweiLeaseTime_Lookup(p *radius.Packet) (value HuaweiLeaseTime, err error) {
	a, ok := _Huawei_LookupVendor(p, 74)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiLeaseTime(i)
	return
}

func HuaweiLeaseTime_Set(p *radius.Packet, value HuaweiLeaseTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 74, a)
}

func HuaweiLeaseTime_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 74)
}

func HuaweiPrimaryWINS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 75, a)
}

func HuaweiPrimaryWINS_Get(p *radius.Packet) (value net.IP) {
	value, _ = HuaweiPrimaryWINS_Lookup(p)
	return
}

func HuaweiPrimaryWINS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 75) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiPrimaryWINS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 75)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HuaweiPrimaryWINS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 75, a)
}

func HuaweiPrimaryWINS_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 75)
}

func HuaweiSecondaryWINS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 76, a)
}

func HuaweiSecondaryWINS_Get(p *radius.Packet) (value net.IP) {
	value, _ = HuaweiSecondaryWINS_Lookup(p)
	return
}

func HuaweiSecondaryWINS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 76) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiSecondaryWINS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 76)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HuaweiSecondaryWINS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 76, a)
}

func HuaweiSecondaryWINS_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 76)
}

type HuaweiInputPeakBurstSize uint32

var HuaweiInputPeakBurstSize_Strings = map[HuaweiInputPeakBurstSize]string{}

func (a HuaweiInputPeakBurstSize) String() string {
	if str, ok := HuaweiInputPeakBurstSize_Strings[a]; ok {
		return str
	}
	return "HuaweiInputPeakBurstSize(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiInputPeakBurstSize_Add(p *radius.Packet, value HuaweiInputPeakBurstSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 77, a)
}

func HuaweiInputPeakBurstSize_Get(p *radius.Packet) (value HuaweiInputPeakBurstSize) {
	value, _ = HuaweiInputPeakBurstSize_Lookup(p)
	return
}

func HuaweiInputPeakBurstSize_Gets(p *radius.Packet) (values []HuaweiInputPeakBurstSize, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 77) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiInputPeakBurstSize(i))
	}
	return
}

func HuaweiInputPeakBurstSize_Lookup(p *radius.Packet) (value HuaweiInputPeakBurstSize, err error) {
	a, ok := _Huawei_LookupVendor(p, 77)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiInputPeakBurstSize(i)
	return
}

func HuaweiInputPeakBurstSize_Set(p *radius.Packet, value HuaweiInputPeakBurstSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 77, a)
}

func HuaweiInputPeakBurstSize_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 77)
}

type HuaweiOutputPeakBurstSize uint32

var HuaweiOutputPeakBurstSize_Strings = map[HuaweiOutputPeakBurstSize]string{}

func (a HuaweiOutputPeakBurstSize) String() string {
	if str, ok := HuaweiOutputPeakBurstSize_Strings[a]; ok {
		return str
	}
	return "HuaweiOutputPeakBurstSize(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiOutputPeakBurstSize_Add(p *radius.Packet, value HuaweiOutputPeakBurstSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 78, a)
}

func HuaweiOutputPeakBurstSize_Get(p *radius.Packet) (value HuaweiOutputPeakBurstSize) {
	value, _ = HuaweiOutputPeakBurstSize_Lookup(p)
	return
}

func HuaweiOutputPeakBurstSize_Gets(p *radius.Packet) (values []HuaweiOutputPeakBurstSize, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 78) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiOutputPeakBurstSize(i))
	}
	return
}

func HuaweiOutputPeakBurstSize_Lookup(p *radius.Packet) (value HuaweiOutputPeakBurstSize, err error) {
	a, ok := _Huawei_LookupVendor(p, 78)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiOutputPeakBurstSize(i)
	return
}

func HuaweiOutputPeakBurstSize_Set(p *radius.Packet, value HuaweiOutputPeakBurstSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 78, a)
}

func HuaweiOutputPeakBurstSize_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 78)
}

type HuaweiReducedCIR uint32

var HuaweiReducedCIR_Strings = map[HuaweiReducedCIR]string{}

func (a HuaweiReducedCIR) String() string {
	if str, ok := HuaweiReducedCIR_Strings[a]; ok {
		return str
	}
	return "HuaweiReducedCIR(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiReducedCIR_Add(p *radius.Packet, value HuaweiReducedCIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 79, a)
}

func HuaweiReducedCIR_Get(p *radius.Packet) (value HuaweiReducedCIR) {
	value, _ = HuaweiReducedCIR_Lookup(p)
	return
}

func HuaweiReducedCIR_Gets(p *radius.Packet) (values []HuaweiReducedCIR, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 79) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiReducedCIR(i))
	}
	return
}

func HuaweiReducedCIR_Lookup(p *radius.Packet) (value HuaweiReducedCIR, err error) {
	a, ok := _Huawei_LookupVendor(p, 79)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiReducedCIR(i)
	return
}

func HuaweiReducedCIR_Set(p *radius.Packet, value HuaweiReducedCIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 79, a)
}

func HuaweiReducedCIR_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 79)
}

type HuaweiTunnelSessionLimit uint32

var HuaweiTunnelSessionLimit_Strings = map[HuaweiTunnelSessionLimit]string{}

func (a HuaweiTunnelSessionLimit) String() string {
	if str, ok := HuaweiTunnelSessionLimit_Strings[a]; ok {
		return str
	}
	return "HuaweiTunnelSessionLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiTunnelSessionLimit_Add(p *radius.Packet, value HuaweiTunnelSessionLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 80, a)
}

func HuaweiTunnelSessionLimit_Get(p *radius.Packet) (value HuaweiTunnelSessionLimit) {
	value, _ = HuaweiTunnelSessionLimit_Lookup(p)
	return
}

func HuaweiTunnelSessionLimit_Gets(p *radius.Packet) (values []HuaweiTunnelSessionLimit, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 80) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiTunnelSessionLimit(i))
	}
	return
}

func HuaweiTunnelSessionLimit_Lookup(p *radius.Packet) (value HuaweiTunnelSessionLimit, err error) {
	a, ok := _Huawei_LookupVendor(p, 80)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiTunnelSessionLimit(i)
	return
}

func HuaweiTunnelSessionLimit_Set(p *radius.Packet, value HuaweiTunnelSessionLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 80, a)
}

func HuaweiTunnelSessionLimit_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 80)
}

func HuaweiZoneName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 81, a)
}

func HuaweiZoneName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 81, a)
}

func HuaweiZoneName_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiZoneName_Lookup(p)
	return
}

func HuaweiZoneName_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiZoneName_LookupString(p)
	return
}

func HuaweiZoneName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 81) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiZoneName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 81) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiZoneName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 81)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiZoneName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 81)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiZoneName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 81, a)
}

func HuaweiZoneName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 81, a)
}

func HuaweiZoneName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 81)
}

func HuaweiDataFilter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 82, a)
}

func HuaweiDataFilter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 82, a)
}

func HuaweiDataFilter_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiDataFilter_Lookup(p)
	return
}

func HuaweiDataFilter_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiDataFilter_LookupString(p)
	return
}

func HuaweiDataFilter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 82) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDataFilter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 82) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDataFilter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiDataFilter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiDataFilter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 82, a)
}

func HuaweiDataFilter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 82, a)
}

func HuaweiDataFilter_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 82)
}

func HuaweiAccessService_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 83, a)
}

func HuaweiAccessService_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 83, a)
}

func HuaweiAccessService_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiAccessService_Lookup(p)
	return
}

func HuaweiAccessService_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiAccessService_LookupString(p)
	return
}

func HuaweiAccessService_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 83) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiAccessService_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 83) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiAccessService_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 83)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiAccessService_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 83)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiAccessService_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 83, a)
}

func HuaweiAccessService_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 83, a)
}

func HuaweiAccessService_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 83)
}

type HuaweiAccountingLevel uint32

var HuaweiAccountingLevel_Strings = map[HuaweiAccountingLevel]string{}

func (a HuaweiAccountingLevel) String() string {
	if str, ok := HuaweiAccountingLevel_Strings[a]; ok {
		return str
	}
	return "HuaweiAccountingLevel(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiAccountingLevel_Add(p *radius.Packet, value HuaweiAccountingLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 84, a)
}

func HuaweiAccountingLevel_Get(p *radius.Packet) (value HuaweiAccountingLevel) {
	value, _ = HuaweiAccountingLevel_Lookup(p)
	return
}

func HuaweiAccountingLevel_Gets(p *radius.Packet) (values []HuaweiAccountingLevel, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 84) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiAccountingLevel(i))
	}
	return
}

func HuaweiAccountingLevel_Lookup(p *radius.Packet) (value HuaweiAccountingLevel, err error) {
	a, ok := _Huawei_LookupVendor(p, 84)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiAccountingLevel(i)
	return
}

func HuaweiAccountingLevel_Set(p *radius.Packet, value HuaweiAccountingLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 84, a)
}

func HuaweiAccountingLevel_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 84)
}

type HuaweiPortalMode uint32

const (
	HuaweiPortalMode_Value_PADM          HuaweiPortalMode = 0
	HuaweiPortalMode_Value_Redirectional HuaweiPortalMode = 1
	HuaweiPortalMode_Value_NonCaptive    HuaweiPortalMode = 2
)

var HuaweiPortalMode_Strings = map[HuaweiPortalMode]string{
	HuaweiPortalMode_Value_PADM:          "PADM",
	HuaweiPortalMode_Value_Redirectional: "Redirectional",
	HuaweiPortalMode_Value_NonCaptive:    "Non-captive",
}

func (a HuaweiPortalMode) String() string {
	if str, ok := HuaweiPortalMode_Strings[a]; ok {
		return str
	}
	return "HuaweiPortalMode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiPortalMode_Add(p *radius.Packet, value HuaweiPortalMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 85, a)
}

func HuaweiPortalMode_Get(p *radius.Packet) (value HuaweiPortalMode) {
	value, _ = HuaweiPortalMode_Lookup(p)
	return
}

func HuaweiPortalMode_Gets(p *radius.Packet) (values []HuaweiPortalMode, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 85) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiPortalMode(i))
	}
	return
}

func HuaweiPortalMode_Lookup(p *radius.Packet) (value HuaweiPortalMode, err error) {
	a, ok := _Huawei_LookupVendor(p, 85)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiPortalMode(i)
	return
}

func HuaweiPortalMode_Set(p *radius.Packet, value HuaweiPortalMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 85, a)
}

func HuaweiPortalMode_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 85)
}

func HuaweiDPIPolicyName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 86, a)
}

func HuaweiDPIPolicyName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 86, a)
}

func HuaweiDPIPolicyName_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiDPIPolicyName_Lookup(p)
	return
}

func HuaweiDPIPolicyName_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiDPIPolicyName_LookupString(p)
	return
}

func HuaweiDPIPolicyName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 86) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDPIPolicyName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 86) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDPIPolicyName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 86)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiDPIPolicyName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 86)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiDPIPolicyName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 86, a)
}

func HuaweiDPIPolicyName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 86, a)
}

func HuaweiDPIPolicyName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 86)
}

func HuaweiPolicyRoute_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 87, a)
}

func HuaweiPolicyRoute_Get(p *radius.Packet) (value net.IP) {
	value, _ = HuaweiPolicyRoute_Lookup(p)
	return
}

func HuaweiPolicyRoute_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 87) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiPolicyRoute_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 87)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HuaweiPolicyRoute_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 87, a)
}

func HuaweiPolicyRoute_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 87)
}

func HuaweiFramedPool_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 88, a)
}

func HuaweiFramedPool_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 88, a)
}

func HuaweiFramedPool_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiFramedPool_Lookup(p)
	return
}

func HuaweiFramedPool_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiFramedPool_LookupString(p)
	return
}

func HuaweiFramedPool_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 88) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiFramedPool_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 88) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiFramedPool_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 88)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiFramedPool_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 88)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiFramedPool_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 88, a)
}

func HuaweiFramedPool_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 88, a)
}

func HuaweiFramedPool_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 88)
}

func HuaweiL2TPTerminateCause_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 89, a)
}

func HuaweiL2TPTerminateCause_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 89, a)
}

func HuaweiL2TPTerminateCause_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiL2TPTerminateCause_Lookup(p)
	return
}

func HuaweiL2TPTerminateCause_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiL2TPTerminateCause_LookupString(p)
	return
}

func HuaweiL2TPTerminateCause_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 89) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiL2TPTerminateCause_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 89) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiL2TPTerminateCause_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 89)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiL2TPTerminateCause_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 89)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiL2TPTerminateCause_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 89, a)
}

func HuaweiL2TPTerminateCause_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 89, a)
}

func HuaweiL2TPTerminateCause_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 89)
}

type HuaweiMultiAccountMode uint32

var HuaweiMultiAccountMode_Strings = map[HuaweiMultiAccountMode]string{}

func (a HuaweiMultiAccountMode) String() string {
	if str, ok := HuaweiMultiAccountMode_Strings[a]; ok {
		return str
	}
	return "HuaweiMultiAccountMode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiMultiAccountMode_Add(p *radius.Packet, value HuaweiMultiAccountMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 90, a)
}

func HuaweiMultiAccountMode_Get(p *radius.Packet) (value HuaweiMultiAccountMode) {
	value, _ = HuaweiMultiAccountMode_Lookup(p)
	return
}

func HuaweiMultiAccountMode_Gets(p *radius.Packet) (values []HuaweiMultiAccountMode, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 90) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiMultiAccountMode(i))
	}
	return
}

func HuaweiMultiAccountMode_Lookup(p *radius.Packet) (value HuaweiMultiAccountMode, err error) {
	a, ok := _Huawei_LookupVendor(p, 90)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiMultiAccountMode(i)
	return
}

func HuaweiMultiAccountMode_Set(p *radius.Packet, value HuaweiMultiAccountMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 90, a)
}

func HuaweiMultiAccountMode_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 90)
}

func HuaweiQueueProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 91, a)
}

func HuaweiQueueProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 91, a)
}

func HuaweiQueueProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiQueueProfile_Lookup(p)
	return
}

func HuaweiQueueProfile_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiQueueProfile_LookupString(p)
	return
}

func HuaweiQueueProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 91) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiQueueProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 91) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiQueueProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiQueueProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiQueueProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 91, a)
}

func HuaweiQueueProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 91, a)
}

func HuaweiQueueProfile_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 91)
}

type HuaweiLayer4SessionLimit uint32

var HuaweiLayer4SessionLimit_Strings = map[HuaweiLayer4SessionLimit]string{}

func (a HuaweiLayer4SessionLimit) String() string {
	if str, ok := HuaweiLayer4SessionLimit_Strings[a]; ok {
		return str
	}
	return "HuaweiLayer4SessionLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiLayer4SessionLimit_Add(p *radius.Packet, value HuaweiLayer4SessionLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 92, a)
}

func HuaweiLayer4SessionLimit_Get(p *radius.Packet) (value HuaweiLayer4SessionLimit) {
	value, _ = HuaweiLayer4SessionLimit_Lookup(p)
	return
}

func HuaweiLayer4SessionLimit_Gets(p *radius.Packet) (values []HuaweiLayer4SessionLimit, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 92) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiLayer4SessionLimit(i))
	}
	return
}

func HuaweiLayer4SessionLimit_Lookup(p *radius.Packet) (value HuaweiLayer4SessionLimit, err error) {
	a, ok := _Huawei_LookupVendor(p, 92)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiLayer4SessionLimit(i)
	return
}

func HuaweiLayer4SessionLimit_Set(p *radius.Packet, value HuaweiLayer4SessionLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 92, a)
}

func HuaweiLayer4SessionLimit_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 92)
}

func HuaweiMulticastProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 93, a)
}

func HuaweiMulticastProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 93, a)
}

func HuaweiMulticastProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiMulticastProfile_Lookup(p)
	return
}

func HuaweiMulticastProfile_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiMulticastProfile_LookupString(p)
	return
}

func HuaweiMulticastProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 93) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiMulticastProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 93) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiMulticastProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 93)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiMulticastProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 93)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiMulticastProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 93, a)
}

func HuaweiMulticastProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 93, a)
}

func HuaweiMulticastProfile_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 93)
}

func HuaweiVPNInstance_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 94, a)
}

func HuaweiVPNInstance_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 94, a)
}

func HuaweiVPNInstance_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiVPNInstance_Lookup(p)
	return
}

func HuaweiVPNInstance_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiVPNInstance_LookupString(p)
	return
}

func HuaweiVPNInstance_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 94) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiVPNInstance_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 94) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiVPNInstance_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 94)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiVPNInstance_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 94)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiVPNInstance_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 94, a)
}

func HuaweiVPNInstance_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 94, a)
}

func HuaweiVPNInstance_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 94)
}

func HuaweiPolicyName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 95, a)
}

func HuaweiPolicyName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 95, a)
}

func HuaweiPolicyName_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiPolicyName_Lookup(p)
	return
}

func HuaweiPolicyName_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiPolicyName_LookupString(p)
	return
}

func HuaweiPolicyName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 95) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiPolicyName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 95) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiPolicyName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 95)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiPolicyName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 95)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiPolicyName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 95, a)
}

func HuaweiPolicyName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 95, a)
}

func HuaweiPolicyName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 95)
}

func HuaweiTunnelGroupName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 96, a)
}

func HuaweiTunnelGroupName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 96, a)
}

func HuaweiTunnelGroupName_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiTunnelGroupName_Lookup(p)
	return
}

func HuaweiTunnelGroupName_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiTunnelGroupName_LookupString(p)
	return
}

func HuaweiTunnelGroupName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 96) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiTunnelGroupName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 96) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiTunnelGroupName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 96)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiTunnelGroupName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 96)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiTunnelGroupName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 96, a)
}

func HuaweiTunnelGroupName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 96, a)
}

func HuaweiTunnelGroupName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 96)
}

func HuaweiMulticastSourceGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 97, a)
}

func HuaweiMulticastSourceGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 97, a)
}

func HuaweiMulticastSourceGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiMulticastSourceGroup_Lookup(p)
	return
}

func HuaweiMulticastSourceGroup_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiMulticastSourceGroup_LookupString(p)
	return
}

func HuaweiMulticastSourceGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 97) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiMulticastSourceGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 97) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiMulticastSourceGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 97)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiMulticastSourceGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 97)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiMulticastSourceGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 97, a)
}

func HuaweiMulticastSourceGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 97, a)
}

func HuaweiMulticastSourceGroup_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 97)
}

func HuaweiMulticastReceiveGroup_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 98, a)
}

func HuaweiMulticastReceiveGroup_Get(p *radius.Packet) (value net.IP) {
	value, _ = HuaweiMulticastReceiveGroup_Lookup(p)
	return
}

func HuaweiMulticastReceiveGroup_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 98) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiMulticastReceiveGroup_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 98)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HuaweiMulticastReceiveGroup_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 98, a)
}

func HuaweiMulticastReceiveGroup_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 98)
}

type HuaweiUserMulticastType uint32

var HuaweiUserMulticastType_Strings = map[HuaweiUserMulticastType]string{}

func (a HuaweiUserMulticastType) String() string {
	if str, ok := HuaweiUserMulticastType_Strings[a]; ok {
		return str
	}
	return "HuaweiUserMulticastType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiUserMulticastType_Add(p *radius.Packet, value HuaweiUserMulticastType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 99, a)
}

func HuaweiUserMulticastType_Get(p *radius.Packet) (value HuaweiUserMulticastType) {
	value, _ = HuaweiUserMulticastType_Lookup(p)
	return
}

func HuaweiUserMulticastType_Gets(p *radius.Packet) (values []HuaweiUserMulticastType, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 99) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiUserMulticastType(i))
	}
	return
}

func HuaweiUserMulticastType_Lookup(p *radius.Packet) (value HuaweiUserMulticastType, err error) {
	a, ok := _Huawei_LookupVendor(p, 99)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiUserMulticastType(i)
	return
}

func HuaweiUserMulticastType_Set(p *radius.Packet, value HuaweiUserMulticastType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 99, a)
}

func HuaweiUserMulticastType_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 99)
}

type HuaweiReducedPIR uint32

var HuaweiReducedPIR_Strings = map[HuaweiReducedPIR]string{}

func (a HuaweiReducedPIR) String() string {
	if str, ok := HuaweiReducedPIR_Strings[a]; ok {
		return str
	}
	return "HuaweiReducedPIR(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiReducedPIR_Add(p *radius.Packet, value HuaweiReducedPIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 100, a)
}

func HuaweiReducedPIR_Get(p *radius.Packet) (value HuaweiReducedPIR) {
	value, _ = HuaweiReducedPIR_Lookup(p)
	return
}

func HuaweiReducedPIR_Gets(p *radius.Packet) (values []HuaweiReducedPIR, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 100) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiReducedPIR(i))
	}
	return
}

func HuaweiReducedPIR_Lookup(p *radius.Packet) (value HuaweiReducedPIR, err error) {
	a, ok := _Huawei_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiReducedPIR(i)
	return
}

func HuaweiReducedPIR_Set(p *radius.Packet, value HuaweiReducedPIR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 100, a)
}

func HuaweiReducedPIR_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 100)
}

func HuaweiLIID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 101, a)
}

func HuaweiLIID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 101, a)
}

func HuaweiLIID_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiLIID_Lookup(p)
	return
}

func HuaweiLIID_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiLIID_LookupString(p)
	return
}

func HuaweiLIID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 101) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiLIID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 101) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiLIID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiLIID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiLIID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 101, a)
}

func HuaweiLIID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 101, a)
}

func HuaweiLIID_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 101)
}

func HuaweiLIMdAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 102, a)
}

func HuaweiLIMdAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = HuaweiLIMdAddress_Lookup(p)
	return
}

func HuaweiLIMdAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 102) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiLIMdAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HuaweiLIMdAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 102, a)
}

func HuaweiLIMdAddress_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 102)
}

type HuaweiLIMdPort uint32

var HuaweiLIMdPort_Strings = map[HuaweiLIMdPort]string{}

func (a HuaweiLIMdPort) String() string {
	if str, ok := HuaweiLIMdPort_Strings[a]; ok {
		return str
	}
	return "HuaweiLIMdPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiLIMdPort_Add(p *radius.Packet, value HuaweiLIMdPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 103, a)
}

func HuaweiLIMdPort_Get(p *radius.Packet) (value HuaweiLIMdPort) {
	value, _ = HuaweiLIMdPort_Lookup(p)
	return
}

func HuaweiLIMdPort_Gets(p *radius.Packet) (values []HuaweiLIMdPort, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 103) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiLIMdPort(i))
	}
	return
}

func HuaweiLIMdPort_Lookup(p *radius.Packet) (value HuaweiLIMdPort, err error) {
	a, ok := _Huawei_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiLIMdPort(i)
	return
}

func HuaweiLIMdPort_Set(p *radius.Packet, value HuaweiLIMdPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 103, a)
}

func HuaweiLIMdPort_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 103)
}

func HuaweiLIMdVpnInstance_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 104, a)
}

func HuaweiLIMdVpnInstance_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 104, a)
}

func HuaweiLIMdVpnInstance_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiLIMdVpnInstance_Lookup(p)
	return
}

func HuaweiLIMdVpnInstance_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiLIMdVpnInstance_LookupString(p)
	return
}

func HuaweiLIMdVpnInstance_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 104) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiLIMdVpnInstance_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 104) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiLIMdVpnInstance_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiLIMdVpnInstance_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiLIMdVpnInstance_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 104, a)
}

func HuaweiLIMdVpnInstance_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 104, a)
}

func HuaweiLIMdVpnInstance_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 104)
}

type HuaweiServiceChgCmd uint32

var HuaweiServiceChgCmd_Strings = map[HuaweiServiceChgCmd]string{}

func (a HuaweiServiceChgCmd) String() string {
	if str, ok := HuaweiServiceChgCmd_Strings[a]; ok {
		return str
	}
	return "HuaweiServiceChgCmd(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiServiceChgCmd_Add(p *radius.Packet, value HuaweiServiceChgCmd) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 105, a)
}

func HuaweiServiceChgCmd_Get(p *radius.Packet) (value HuaweiServiceChgCmd) {
	value, _ = HuaweiServiceChgCmd_Lookup(p)
	return
}

func HuaweiServiceChgCmd_Gets(p *radius.Packet) (values []HuaweiServiceChgCmd, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 105) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiServiceChgCmd(i))
	}
	return
}

func HuaweiServiceChgCmd_Lookup(p *radius.Packet) (value HuaweiServiceChgCmd, err error) {
	a, ok := _Huawei_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiServiceChgCmd(i)
	return
}

func HuaweiServiceChgCmd_Set(p *radius.Packet, value HuaweiServiceChgCmd) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 105, a)
}

func HuaweiServiceChgCmd_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 105)
}

type HuaweiAcctPacketType uint32

var HuaweiAcctPacketType_Strings = map[HuaweiAcctPacketType]string{}

func (a HuaweiAcctPacketType) String() string {
	if str, ok := HuaweiAcctPacketType_Strings[a]; ok {
		return str
	}
	return "HuaweiAcctPacketType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiAcctPacketType_Add(p *radius.Packet, value HuaweiAcctPacketType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 106, a)
}

func HuaweiAcctPacketType_Get(p *radius.Packet) (value HuaweiAcctPacketType) {
	value, _ = HuaweiAcctPacketType_Lookup(p)
	return
}

func HuaweiAcctPacketType_Gets(p *radius.Packet) (values []HuaweiAcctPacketType, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 106) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiAcctPacketType(i))
	}
	return
}

func HuaweiAcctPacketType_Lookup(p *radius.Packet) (value HuaweiAcctPacketType, err error) {
	a, ok := _Huawei_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiAcctPacketType(i)
	return
}

func HuaweiAcctPacketType_Set(p *radius.Packet, value HuaweiAcctPacketType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 106, a)
}

func HuaweiAcctPacketType_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 106)
}

type HuaweiCallReference uint32

var HuaweiCallReference_Strings = map[HuaweiCallReference]string{}

func (a HuaweiCallReference) String() string {
	if str, ok := HuaweiCallReference_Strings[a]; ok {
		return str
	}
	return "HuaweiCallReference(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiCallReference_Add(p *radius.Packet, value HuaweiCallReference) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 107, a)
}

func HuaweiCallReference_Get(p *radius.Packet) (value HuaweiCallReference) {
	value, _ = HuaweiCallReference_Lookup(p)
	return
}

func HuaweiCallReference_Gets(p *radius.Packet) (values []HuaweiCallReference, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 107) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiCallReference(i))
	}
	return
}

func HuaweiCallReference_Lookup(p *radius.Packet) (value HuaweiCallReference, err error) {
	a, ok := _Huawei_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiCallReference(i)
	return
}

func HuaweiCallReference_Set(p *radius.Packet, value HuaweiCallReference) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 107, a)
}

func HuaweiCallReference_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 107)
}

type HuaweiPSTNPort uint32

var HuaweiPSTNPort_Strings = map[HuaweiPSTNPort]string{}

func (a HuaweiPSTNPort) String() string {
	if str, ok := HuaweiPSTNPort_Strings[a]; ok {
		return str
	}
	return "HuaweiPSTNPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiPSTNPort_Add(p *radius.Packet, value HuaweiPSTNPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 108, a)
}

func HuaweiPSTNPort_Get(p *radius.Packet) (value HuaweiPSTNPort) {
	value, _ = HuaweiPSTNPort_Lookup(p)
	return
}

func HuaweiPSTNPort_Gets(p *radius.Packet) (values []HuaweiPSTNPort, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 108) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiPSTNPort(i))
	}
	return
}

func HuaweiPSTNPort_Lookup(p *radius.Packet) (value HuaweiPSTNPort, err error) {
	a, ok := _Huawei_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiPSTNPort(i)
	return
}

func HuaweiPSTNPort_Set(p *radius.Packet, value HuaweiPSTNPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 108, a)
}

func HuaweiPSTNPort_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 108)
}

type HuaweiVoipServiceType uint32

var HuaweiVoipServiceType_Strings = map[HuaweiVoipServiceType]string{}

func (a HuaweiVoipServiceType) String() string {
	if str, ok := HuaweiVoipServiceType_Strings[a]; ok {
		return str
	}
	return "HuaweiVoipServiceType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiVoipServiceType_Add(p *radius.Packet, value HuaweiVoipServiceType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 109, a)
}

func HuaweiVoipServiceType_Get(p *radius.Packet) (value HuaweiVoipServiceType) {
	value, _ = HuaweiVoipServiceType_Lookup(p)
	return
}

func HuaweiVoipServiceType_Gets(p *radius.Packet) (values []HuaweiVoipServiceType, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 109) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiVoipServiceType(i))
	}
	return
}

func HuaweiVoipServiceType_Lookup(p *radius.Packet) (value HuaweiVoipServiceType, err error) {
	a, ok := _Huawei_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiVoipServiceType(i)
	return
}

func HuaweiVoipServiceType_Set(p *radius.Packet, value HuaweiVoipServiceType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 109, a)
}

func HuaweiVoipServiceType_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 109)
}

type HuaweiAcctConnectionTime uint32

var HuaweiAcctConnectionTime_Strings = map[HuaweiAcctConnectionTime]string{}

func (a HuaweiAcctConnectionTime) String() string {
	if str, ok := HuaweiAcctConnectionTime_Strings[a]; ok {
		return str
	}
	return "HuaweiAcctConnectionTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiAcctConnectionTime_Add(p *radius.Packet, value HuaweiAcctConnectionTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 110, a)
}

func HuaweiAcctConnectionTime_Get(p *radius.Packet) (value HuaweiAcctConnectionTime) {
	value, _ = HuaweiAcctConnectionTime_Lookup(p)
	return
}

func HuaweiAcctConnectionTime_Gets(p *radius.Packet) (values []HuaweiAcctConnectionTime, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 110) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiAcctConnectionTime(i))
	}
	return
}

func HuaweiAcctConnectionTime_Lookup(p *radius.Packet) (value HuaweiAcctConnectionTime, err error) {
	a, ok := _Huawei_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiAcctConnectionTime(i)
	return
}

func HuaweiAcctConnectionTime_Set(p *radius.Packet, value HuaweiAcctConnectionTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 110, a)
}

func HuaweiAcctConnectionTime_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 110)
}

type HuaweiErrorReason uint32

var HuaweiErrorReason_Strings = map[HuaweiErrorReason]string{}

func (a HuaweiErrorReason) String() string {
	if str, ok := HuaweiErrorReason_Strings[a]; ok {
		return str
	}
	return "HuaweiErrorReason(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiErrorReason_Add(p *radius.Packet, value HuaweiErrorReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 112, a)
}

func HuaweiErrorReason_Get(p *radius.Packet) (value HuaweiErrorReason) {
	value, _ = HuaweiErrorReason_Lookup(p)
	return
}

func HuaweiErrorReason_Gets(p *radius.Packet) (values []HuaweiErrorReason, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 112) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiErrorReason(i))
	}
	return
}

func HuaweiErrorReason_Lookup(p *radius.Packet) (value HuaweiErrorReason, err error) {
	a, ok := _Huawei_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiErrorReason(i)
	return
}

func HuaweiErrorReason_Set(p *radius.Packet, value HuaweiErrorReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 112, a)
}

func HuaweiErrorReason_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 112)
}

type HuaweiRemainMonney uint32

var HuaweiRemainMonney_Strings = map[HuaweiRemainMonney]string{}

func (a HuaweiRemainMonney) String() string {
	if str, ok := HuaweiRemainMonney_Strings[a]; ok {
		return str
	}
	return "HuaweiRemainMonney(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiRemainMonney_Add(p *radius.Packet, value HuaweiRemainMonney) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 113, a)
}

func HuaweiRemainMonney_Get(p *radius.Packet) (value HuaweiRemainMonney) {
	value, _ = HuaweiRemainMonney_Lookup(p)
	return
}

func HuaweiRemainMonney_Gets(p *radius.Packet) (values []HuaweiRemainMonney, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 113) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiRemainMonney(i))
	}
	return
}

func HuaweiRemainMonney_Lookup(p *radius.Packet) (value HuaweiRemainMonney, err error) {
	a, ok := _Huawei_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiRemainMonney(i)
	return
}

func HuaweiRemainMonney_Set(p *radius.Packet, value HuaweiRemainMonney) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 113, a)
}

func HuaweiRemainMonney_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 113)
}

func HuaweiOrgGKIpaddr_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 123, a)
}

func HuaweiOrgGKIpaddr_Get(p *radius.Packet) (value net.IP) {
	value, _ = HuaweiOrgGKIpaddr_Lookup(p)
	return
}

func HuaweiOrgGKIpaddr_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 123) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiOrgGKIpaddr_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 123)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HuaweiOrgGKIpaddr_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 123, a)
}

func HuaweiOrgGKIpaddr_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 123)
}

func HuaweiOrgGWIpaddr_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 124, a)
}

func HuaweiOrgGWIpaddr_Get(p *radius.Packet) (value net.IP) {
	value, _ = HuaweiOrgGWIpaddr_Lookup(p)
	return
}

func HuaweiOrgGWIpaddr_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 124) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiOrgGWIpaddr_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 124)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HuaweiOrgGWIpaddr_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 124, a)
}

func HuaweiOrgGWIpaddr_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 124)
}

func HuaweiDstGKIpaddr_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 125, a)
}

func HuaweiDstGKIpaddr_Get(p *radius.Packet) (value net.IP) {
	value, _ = HuaweiDstGKIpaddr_Lookup(p)
	return
}

func HuaweiDstGKIpaddr_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 125) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDstGKIpaddr_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 125)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HuaweiDstGKIpaddr_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 125, a)
}

func HuaweiDstGKIpaddr_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 125)
}

func HuaweiDstGWIpaddr_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 126, a)
}

func HuaweiDstGWIpaddr_Get(p *radius.Packet) (value net.IP) {
	value, _ = HuaweiDstGWIpaddr_Lookup(p)
	return
}

func HuaweiDstGWIpaddr_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 126) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDstGWIpaddr_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 126)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HuaweiDstGWIpaddr_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 126, a)
}

func HuaweiDstGWIpaddr_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 126)
}

func HuaweiAccessNum_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 127, a)
}

func HuaweiAccessNum_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 127, a)
}

func HuaweiAccessNum_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiAccessNum_Lookup(p)
	return
}

func HuaweiAccessNum_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiAccessNum_LookupString(p)
	return
}

func HuaweiAccessNum_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 127) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiAccessNum_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 127) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiAccessNum_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 127)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiAccessNum_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 127)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiAccessNum_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 127, a)
}

func HuaweiAccessNum_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 127, a)
}

func HuaweiAccessNum_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 127)
}

type HuaweiRemainTime uint32

var HuaweiRemainTime_Strings = map[HuaweiRemainTime]string{}

func (a HuaweiRemainTime) String() string {
	if str, ok := HuaweiRemainTime_Strings[a]; ok {
		return str
	}
	return "HuaweiRemainTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiRemainTime_Add(p *radius.Packet, value HuaweiRemainTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 128, a)
}

func HuaweiRemainTime_Get(p *radius.Packet) (value HuaweiRemainTime) {
	value, _ = HuaweiRemainTime_Lookup(p)
	return
}

func HuaweiRemainTime_Gets(p *radius.Packet) (values []HuaweiRemainTime, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 128) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiRemainTime(i))
	}
	return
}

func HuaweiRemainTime_Lookup(p *radius.Packet) (value HuaweiRemainTime, err error) {
	a, ok := _Huawei_LookupVendor(p, 128)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiRemainTime(i)
	return
}

func HuaweiRemainTime_Set(p *radius.Packet, value HuaweiRemainTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 128, a)
}

func HuaweiRemainTime_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 128)
}

type HuaweiCodecType uint32

var HuaweiCodecType_Strings = map[HuaweiCodecType]string{}

func (a HuaweiCodecType) String() string {
	if str, ok := HuaweiCodecType_Strings[a]; ok {
		return str
	}
	return "HuaweiCodecType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiCodecType_Add(p *radius.Packet, value HuaweiCodecType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 131, a)
}

func HuaweiCodecType_Get(p *radius.Packet) (value HuaweiCodecType) {
	value, _ = HuaweiCodecType_Lookup(p)
	return
}

func HuaweiCodecType_Gets(p *radius.Packet) (values []HuaweiCodecType, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 131) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiCodecType(i))
	}
	return
}

func HuaweiCodecType_Lookup(p *radius.Packet) (value HuaweiCodecType, err error) {
	a, ok := _Huawei_LookupVendor(p, 131)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiCodecType(i)
	return
}

func HuaweiCodecType_Set(p *radius.Packet, value HuaweiCodecType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 131, a)
}

func HuaweiCodecType_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 131)
}

func HuaweiTransferNum_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 132, a)
}

func HuaweiTransferNum_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 132, a)
}

func HuaweiTransferNum_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiTransferNum_Lookup(p)
	return
}

func HuaweiTransferNum_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiTransferNum_LookupString(p)
	return
}

func HuaweiTransferNum_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 132) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiTransferNum_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 132) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiTransferNum_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 132)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiTransferNum_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 132)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiTransferNum_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 132, a)
}

func HuaweiTransferNum_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 132, a)
}

func HuaweiTransferNum_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 132)
}

func HuaweiNewUserName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 133, a)
}

func HuaweiNewUserName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 133, a)
}

func HuaweiNewUserName_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiNewUserName_Lookup(p)
	return
}

func HuaweiNewUserName_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiNewUserName_LookupString(p)
	return
}

func HuaweiNewUserName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 133) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiNewUserName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 133) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiNewUserName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 133)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiNewUserName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 133)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiNewUserName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 133, a)
}

func HuaweiNewUserName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 133, a)
}

func HuaweiNewUserName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 133)
}

func HuaweiTransferStationID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 134, a)
}

func HuaweiTransferStationID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 134, a)
}

func HuaweiTransferStationID_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiTransferStationID_Lookup(p)
	return
}

func HuaweiTransferStationID_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiTransferStationID_LookupString(p)
	return
}

func HuaweiTransferStationID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 134) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiTransferStationID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 134) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiTransferStationID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 134)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiTransferStationID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 134)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiTransferStationID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 134, a)
}

func HuaweiTransferStationID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 134, a)
}

func HuaweiTransferStationID_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 134)
}

func HuaweiPrimaryDNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 135, a)
}

func HuaweiPrimaryDNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = HuaweiPrimaryDNS_Lookup(p)
	return
}

func HuaweiPrimaryDNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 135) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiPrimaryDNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 135)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HuaweiPrimaryDNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 135, a)
}

func HuaweiPrimaryDNS_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 135)
}

func HuaweiSecondaryDNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 136, a)
}

func HuaweiSecondaryDNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = HuaweiSecondaryDNS_Lookup(p)
	return
}

func HuaweiSecondaryDNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 136) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiSecondaryDNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 136)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HuaweiSecondaryDNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 136, a)
}

func HuaweiSecondaryDNS_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 136)
}

type HuaweiONLYAccountType uint32

var HuaweiONLYAccountType_Strings = map[HuaweiONLYAccountType]string{}

func (a HuaweiONLYAccountType) String() string {
	if str, ok := HuaweiONLYAccountType_Strings[a]; ok {
		return str
	}
	return "HuaweiONLYAccountType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiONLYAccountType_Add(p *radius.Packet, value HuaweiONLYAccountType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 137, a)
}

func HuaweiONLYAccountType_Get(p *radius.Packet) (value HuaweiONLYAccountType) {
	value, _ = HuaweiONLYAccountType_Lookup(p)
	return
}

func HuaweiONLYAccountType_Gets(p *radius.Packet) (values []HuaweiONLYAccountType, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 137) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiONLYAccountType(i))
	}
	return
}

func HuaweiONLYAccountType_Lookup(p *radius.Packet) (value HuaweiONLYAccountType, err error) {
	a, ok := _Huawei_LookupVendor(p, 137)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiONLYAccountType(i)
	return
}

func HuaweiONLYAccountType_Set(p *radius.Packet, value HuaweiONLYAccountType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 137, a)
}

func HuaweiONLYAccountType_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 137)
}

func HuaweiDomainName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 138, a)
}

func HuaweiDomainName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 138, a)
}

func HuaweiDomainName_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiDomainName_Lookup(p)
	return
}

func HuaweiDomainName_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiDomainName_LookupString(p)
	return
}

func HuaweiDomainName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 138) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDomainName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 138) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDomainName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 138)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiDomainName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 138)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiDomainName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 138, a)
}

func HuaweiDomainName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 138, a)
}

func HuaweiDomainName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 138)
}

func HuaweiANCPProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 139, a)
}

func HuaweiANCPProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 139, a)
}

func HuaweiANCPProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiANCPProfile_Lookup(p)
	return
}

func HuaweiANCPProfile_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiANCPProfile_LookupString(p)
	return
}

func HuaweiANCPProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 139) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiANCPProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 139) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiANCPProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 139)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiANCPProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 139)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiANCPProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 139, a)
}

func HuaweiANCPProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 139, a)
}

func HuaweiANCPProfile_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 139)
}

func HuaweiHTTPRedirectURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 140, a)
}

func HuaweiHTTPRedirectURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 140, a)
}

func HuaweiHTTPRedirectURL_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiHTTPRedirectURL_Lookup(p)
	return
}

func HuaweiHTTPRedirectURL_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiHTTPRedirectURL_LookupString(p)
	return
}

func HuaweiHTTPRedirectURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 140) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiHTTPRedirectURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 140) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiHTTPRedirectURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 140)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiHTTPRedirectURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 140)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiHTTPRedirectURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 140, a)
}

func HuaweiHTTPRedirectURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 140, a)
}

func HuaweiHTTPRedirectURL_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 140)
}

func HuaweiLoopbackAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 141, a)
}

func HuaweiLoopbackAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 141, a)
}

func HuaweiLoopbackAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiLoopbackAddress_Lookup(p)
	return
}

func HuaweiLoopbackAddress_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiLoopbackAddress_LookupString(p)
	return
}

func HuaweiLoopbackAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 141) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiLoopbackAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 141) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiLoopbackAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiLoopbackAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiLoopbackAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 141, a)
}

func HuaweiLoopbackAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 141, a)
}

func HuaweiLoopbackAddress_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 141)
}

type HuaweiQoSProfileType uint32

const (
	HuaweiQoSProfileType_Value_Original     HuaweiQoSProfileType = 0
	HuaweiQoSProfileType_Value_L2TPInbound  HuaweiQoSProfileType = 1
	HuaweiQoSProfileType_Value_L2TPOutbound HuaweiQoSProfileType = 2
	HuaweiQoSProfileType_Value_L2TP         HuaweiQoSProfileType = 3
)

var HuaweiQoSProfileType_Strings = map[HuaweiQoSProfileType]string{
	HuaweiQoSProfileType_Value_Original:     "Original",
	HuaweiQoSProfileType_Value_L2TPInbound:  "L2TP-Inbound",
	HuaweiQoSProfileType_Value_L2TPOutbound: "L2TP-Outbound",
	HuaweiQoSProfileType_Value_L2TP:         "L2TP",
}

func (a HuaweiQoSProfileType) String() string {
	if str, ok := HuaweiQoSProfileType_Strings[a]; ok {
		return str
	}
	return "HuaweiQoSProfileType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiQoSProfileType_Add(p *radius.Packet, value HuaweiQoSProfileType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 142, a)
}

func HuaweiQoSProfileType_Get(p *radius.Packet) (value HuaweiQoSProfileType) {
	value, _ = HuaweiQoSProfileType_Lookup(p)
	return
}

func HuaweiQoSProfileType_Gets(p *radius.Packet) (values []HuaweiQoSProfileType, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 142) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiQoSProfileType(i))
	}
	return
}

func HuaweiQoSProfileType_Lookup(p *radius.Packet) (value HuaweiQoSProfileType, err error) {
	a, ok := _Huawei_LookupVendor(p, 142)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiQoSProfileType(i)
	return
}

func HuaweiQoSProfileType_Set(p *radius.Packet, value HuaweiQoSProfileType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 142, a)
}

func HuaweiQoSProfileType_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 142)
}

type HuaweiMaxListNum uint32

var HuaweiMaxListNum_Strings = map[HuaweiMaxListNum]string{}

func (a HuaweiMaxListNum) String() string {
	if str, ok := HuaweiMaxListNum_Strings[a]; ok {
		return str
	}
	return "HuaweiMaxListNum(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiMaxListNum_Add(p *radius.Packet, value HuaweiMaxListNum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 143, a)
}

func HuaweiMaxListNum_Get(p *radius.Packet) (value HuaweiMaxListNum) {
	value, _ = HuaweiMaxListNum_Lookup(p)
	return
}

func HuaweiMaxListNum_Gets(p *radius.Packet) (values []HuaweiMaxListNum, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 143) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiMaxListNum(i))
	}
	return
}

func HuaweiMaxListNum_Lookup(p *radius.Packet) (value HuaweiMaxListNum, err error) {
	a, ok := _Huawei_LookupVendor(p, 143)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiMaxListNum(i)
	return
}

func HuaweiMaxListNum_Set(p *radius.Packet, value HuaweiMaxListNum) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 143, a)
}

func HuaweiMaxListNum_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 143)
}

type HuaweiAcctIPv6InputOctets uint32

var HuaweiAcctIPv6InputOctets_Strings = map[HuaweiAcctIPv6InputOctets]string{}

func (a HuaweiAcctIPv6InputOctets) String() string {
	if str, ok := HuaweiAcctIPv6InputOctets_Strings[a]; ok {
		return str
	}
	return "HuaweiAcctIPv6InputOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiAcctIPv6InputOctets_Add(p *radius.Packet, value HuaweiAcctIPv6InputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 144, a)
}

func HuaweiAcctIPv6InputOctets_Get(p *radius.Packet) (value HuaweiAcctIPv6InputOctets) {
	value, _ = HuaweiAcctIPv6InputOctets_Lookup(p)
	return
}

func HuaweiAcctIPv6InputOctets_Gets(p *radius.Packet) (values []HuaweiAcctIPv6InputOctets, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 144) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiAcctIPv6InputOctets(i))
	}
	return
}

func HuaweiAcctIPv6InputOctets_Lookup(p *radius.Packet) (value HuaweiAcctIPv6InputOctets, err error) {
	a, ok := _Huawei_LookupVendor(p, 144)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiAcctIPv6InputOctets(i)
	return
}

func HuaweiAcctIPv6InputOctets_Set(p *radius.Packet, value HuaweiAcctIPv6InputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 144, a)
}

func HuaweiAcctIPv6InputOctets_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 144)
}

type HuaweiAcctIPv6OutputOctets uint32

var HuaweiAcctIPv6OutputOctets_Strings = map[HuaweiAcctIPv6OutputOctets]string{}

func (a HuaweiAcctIPv6OutputOctets) String() string {
	if str, ok := HuaweiAcctIPv6OutputOctets_Strings[a]; ok {
		return str
	}
	return "HuaweiAcctIPv6OutputOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiAcctIPv6OutputOctets_Add(p *radius.Packet, value HuaweiAcctIPv6OutputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 145, a)
}

func HuaweiAcctIPv6OutputOctets_Get(p *radius.Packet) (value HuaweiAcctIPv6OutputOctets) {
	value, _ = HuaweiAcctIPv6OutputOctets_Lookup(p)
	return
}

func HuaweiAcctIPv6OutputOctets_Gets(p *radius.Packet) (values []HuaweiAcctIPv6OutputOctets, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 145) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiAcctIPv6OutputOctets(i))
	}
	return
}

func HuaweiAcctIPv6OutputOctets_Lookup(p *radius.Packet) (value HuaweiAcctIPv6OutputOctets, err error) {
	a, ok := _Huawei_LookupVendor(p, 145)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiAcctIPv6OutputOctets(i)
	return
}

func HuaweiAcctIPv6OutputOctets_Set(p *radius.Packet, value HuaweiAcctIPv6OutputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 145, a)
}

func HuaweiAcctIPv6OutputOctets_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 145)
}

type HuaweiAcctIPv6InputPackets uint32

var HuaweiAcctIPv6InputPackets_Strings = map[HuaweiAcctIPv6InputPackets]string{}

func (a HuaweiAcctIPv6InputPackets) String() string {
	if str, ok := HuaweiAcctIPv6InputPackets_Strings[a]; ok {
		return str
	}
	return "HuaweiAcctIPv6InputPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiAcctIPv6InputPackets_Add(p *radius.Packet, value HuaweiAcctIPv6InputPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 146, a)
}

func HuaweiAcctIPv6InputPackets_Get(p *radius.Packet) (value HuaweiAcctIPv6InputPackets) {
	value, _ = HuaweiAcctIPv6InputPackets_Lookup(p)
	return
}

func HuaweiAcctIPv6InputPackets_Gets(p *radius.Packet) (values []HuaweiAcctIPv6InputPackets, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 146) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiAcctIPv6InputPackets(i))
	}
	return
}

func HuaweiAcctIPv6InputPackets_Lookup(p *radius.Packet) (value HuaweiAcctIPv6InputPackets, err error) {
	a, ok := _Huawei_LookupVendor(p, 146)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiAcctIPv6InputPackets(i)
	return
}

func HuaweiAcctIPv6InputPackets_Set(p *radius.Packet, value HuaweiAcctIPv6InputPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 146, a)
}

func HuaweiAcctIPv6InputPackets_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 146)
}

type HuaweiAcctIPv6OutputPackets uint32

var HuaweiAcctIPv6OutputPackets_Strings = map[HuaweiAcctIPv6OutputPackets]string{}

func (a HuaweiAcctIPv6OutputPackets) String() string {
	if str, ok := HuaweiAcctIPv6OutputPackets_Strings[a]; ok {
		return str
	}
	return "HuaweiAcctIPv6OutputPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiAcctIPv6OutputPackets_Add(p *radius.Packet, value HuaweiAcctIPv6OutputPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 147, a)
}

func HuaweiAcctIPv6OutputPackets_Get(p *radius.Packet) (value HuaweiAcctIPv6OutputPackets) {
	value, _ = HuaweiAcctIPv6OutputPackets_Lookup(p)
	return
}

func HuaweiAcctIPv6OutputPackets_Gets(p *radius.Packet) (values []HuaweiAcctIPv6OutputPackets, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 147) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiAcctIPv6OutputPackets(i))
	}
	return
}

func HuaweiAcctIPv6OutputPackets_Lookup(p *radius.Packet) (value HuaweiAcctIPv6OutputPackets, err error) {
	a, ok := _Huawei_LookupVendor(p, 147)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiAcctIPv6OutputPackets(i)
	return
}

func HuaweiAcctIPv6OutputPackets_Set(p *radius.Packet, value HuaweiAcctIPv6OutputPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 147, a)
}

func HuaweiAcctIPv6OutputPackets_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 147)
}

type HuaweiAcctIPv6InputGigawords uint32

var HuaweiAcctIPv6InputGigawords_Strings = map[HuaweiAcctIPv6InputGigawords]string{}

func (a HuaweiAcctIPv6InputGigawords) String() string {
	if str, ok := HuaweiAcctIPv6InputGigawords_Strings[a]; ok {
		return str
	}
	return "HuaweiAcctIPv6InputGigawords(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiAcctIPv6InputGigawords_Add(p *radius.Packet, value HuaweiAcctIPv6InputGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 148, a)
}

func HuaweiAcctIPv6InputGigawords_Get(p *radius.Packet) (value HuaweiAcctIPv6InputGigawords) {
	value, _ = HuaweiAcctIPv6InputGigawords_Lookup(p)
	return
}

func HuaweiAcctIPv6InputGigawords_Gets(p *radius.Packet) (values []HuaweiAcctIPv6InputGigawords, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 148) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiAcctIPv6InputGigawords(i))
	}
	return
}

func HuaweiAcctIPv6InputGigawords_Lookup(p *radius.Packet) (value HuaweiAcctIPv6InputGigawords, err error) {
	a, ok := _Huawei_LookupVendor(p, 148)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiAcctIPv6InputGigawords(i)
	return
}

func HuaweiAcctIPv6InputGigawords_Set(p *radius.Packet, value HuaweiAcctIPv6InputGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 148, a)
}

func HuaweiAcctIPv6InputGigawords_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 148)
}

type HuaweiAcctIPv6OutputGigawords uint32

var HuaweiAcctIPv6OutputGigawords_Strings = map[HuaweiAcctIPv6OutputGigawords]string{}

func (a HuaweiAcctIPv6OutputGigawords) String() string {
	if str, ok := HuaweiAcctIPv6OutputGigawords_Strings[a]; ok {
		return str
	}
	return "HuaweiAcctIPv6OutputGigawords(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiAcctIPv6OutputGigawords_Add(p *radius.Packet, value HuaweiAcctIPv6OutputGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 149, a)
}

func HuaweiAcctIPv6OutputGigawords_Get(p *radius.Packet) (value HuaweiAcctIPv6OutputGigawords) {
	value, _ = HuaweiAcctIPv6OutputGigawords_Lookup(p)
	return
}

func HuaweiAcctIPv6OutputGigawords_Gets(p *radius.Packet) (values []HuaweiAcctIPv6OutputGigawords, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 149) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiAcctIPv6OutputGigawords(i))
	}
	return
}

func HuaweiAcctIPv6OutputGigawords_Lookup(p *radius.Packet) (value HuaweiAcctIPv6OutputGigawords, err error) {
	a, ok := _Huawei_LookupVendor(p, 149)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiAcctIPv6OutputGigawords(i)
	return
}

func HuaweiAcctIPv6OutputGigawords_Set(p *radius.Packet, value HuaweiAcctIPv6OutputGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 149, a)
}

func HuaweiAcctIPv6OutputGigawords_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 149)
}

func HuaweiDHCPv6Option37_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 150, a)
}

func HuaweiDHCPv6Option37_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 150, a)
}

func HuaweiDHCPv6Option37_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiDHCPv6Option37_Lookup(p)
	return
}

func HuaweiDHCPv6Option37_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiDHCPv6Option37_LookupString(p)
	return
}

func HuaweiDHCPv6Option37_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 150) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDHCPv6Option37_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 150) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDHCPv6Option37_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 150)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiDHCPv6Option37_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 150)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiDHCPv6Option37_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 150, a)
}

func HuaweiDHCPv6Option37_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 150, a)
}

func HuaweiDHCPv6Option37_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 150)
}

func HuaweiDHCPv6Option38_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 151, a)
}

func HuaweiDHCPv6Option38_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 151, a)
}

func HuaweiDHCPv6Option38_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiDHCPv6Option38_Lookup(p)
	return
}

func HuaweiDHCPv6Option38_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiDHCPv6Option38_LookupString(p)
	return
}

func HuaweiDHCPv6Option38_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 151) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDHCPv6Option38_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 151) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDHCPv6Option38_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 151)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiDHCPv6Option38_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 151)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiDHCPv6Option38_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 151, a)
}

func HuaweiDHCPv6Option38_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 151, a)
}

func HuaweiDHCPv6Option38_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 151)
}

func HuaweiUserMac_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 153, a)
}

func HuaweiUserMac_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 153, a)
}

func HuaweiUserMac_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiUserMac_Lookup(p)
	return
}

func HuaweiUserMac_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiUserMac_LookupString(p)
	return
}

func HuaweiUserMac_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 153) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiUserMac_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 153) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiUserMac_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 153)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiUserMac_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 153)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiUserMac_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 153, a)
}

func HuaweiUserMac_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 153, a)
}

func HuaweiUserMac_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 153)
}

func HuaweiDNSServerIPv6Address_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 154, a)
}

func HuaweiDNSServerIPv6Address_Get(p *radius.Packet) (value net.IP) {
	value, _ = HuaweiDNSServerIPv6Address_Lookup(p)
	return
}

func HuaweiDNSServerIPv6Address_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 154) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDNSServerIPv6Address_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 154)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func HuaweiDNSServerIPv6Address_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 154, a)
}

func HuaweiDNSServerIPv6Address_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 154)
}

func HuaweiDHCPv4Option121_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 155, a)
}

func HuaweiDHCPv4Option121_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 155, a)
}

func HuaweiDHCPv4Option121_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiDHCPv4Option121_Lookup(p)
	return
}

func HuaweiDHCPv4Option121_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiDHCPv4Option121_LookupString(p)
	return
}

func HuaweiDHCPv4Option121_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 155) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDHCPv4Option121_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 155) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDHCPv4Option121_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 155)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiDHCPv4Option121_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 155)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiDHCPv4Option121_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 155, a)
}

func HuaweiDHCPv4Option121_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 155, a)
}

func HuaweiDHCPv4Option121_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 155)
}

func HuaweiDHCPv4Option43_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 156, a)
}

func HuaweiDHCPv4Option43_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 156, a)
}

func HuaweiDHCPv4Option43_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiDHCPv4Option43_Lookup(p)
	return
}

func HuaweiDHCPv4Option43_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiDHCPv4Option43_LookupString(p)
	return
}

func HuaweiDHCPv4Option43_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 156) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDHCPv4Option43_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 156) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDHCPv4Option43_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 156)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiDHCPv4Option43_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 156)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiDHCPv4Option43_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 156, a)
}

func HuaweiDHCPv4Option43_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 156, a)
}

func HuaweiDHCPv4Option43_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 156)
}

func HuaweiFramedPoolGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 157, a)
}

func HuaweiFramedPoolGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 157, a)
}

func HuaweiFramedPoolGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiFramedPoolGroup_Lookup(p)
	return
}

func HuaweiFramedPoolGroup_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiFramedPoolGroup_LookupString(p)
	return
}

func HuaweiFramedPoolGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 157) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiFramedPoolGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 157) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiFramedPoolGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 157)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiFramedPoolGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 157)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiFramedPoolGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 157, a)
}

func HuaweiFramedPoolGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 157, a)
}

func HuaweiFramedPoolGroup_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 157)
}

func HuaweiFramedIPv6Address_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 158, a)
}

func HuaweiFramedIPv6Address_Get(p *radius.Packet) (value net.IP) {
	value, _ = HuaweiFramedIPv6Address_Lookup(p)
	return
}

func HuaweiFramedIPv6Address_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 158) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiFramedIPv6Address_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 158)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func HuaweiFramedIPv6Address_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 158, a)
}

func HuaweiFramedIPv6Address_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 158)
}

type HuaweiAcctUpdateAddress uint32

var HuaweiAcctUpdateAddress_Strings = map[HuaweiAcctUpdateAddress]string{}

func (a HuaweiAcctUpdateAddress) String() string {
	if str, ok := HuaweiAcctUpdateAddress_Strings[a]; ok {
		return str
	}
	return "HuaweiAcctUpdateAddress(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiAcctUpdateAddress_Add(p *radius.Packet, value HuaweiAcctUpdateAddress) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 159, a)
}

func HuaweiAcctUpdateAddress_Get(p *radius.Packet) (value HuaweiAcctUpdateAddress) {
	value, _ = HuaweiAcctUpdateAddress_Lookup(p)
	return
}

func HuaweiAcctUpdateAddress_Gets(p *radius.Packet) (values []HuaweiAcctUpdateAddress, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 159) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiAcctUpdateAddress(i))
	}
	return
}

func HuaweiAcctUpdateAddress_Lookup(p *radius.Packet) (value HuaweiAcctUpdateAddress, err error) {
	a, ok := _Huawei_LookupVendor(p, 159)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiAcctUpdateAddress(i)
	return
}

func HuaweiAcctUpdateAddress_Set(p *radius.Packet, value HuaweiAcctUpdateAddress) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 159, a)
}

func HuaweiAcctUpdateAddress_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 159)
}

func HuaweiNATPolicyName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 160, a)
}

func HuaweiNATPolicyName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 160, a)
}

func HuaweiNATPolicyName_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiNATPolicyName_Lookup(p)
	return
}

func HuaweiNATPolicyName_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiNATPolicyName_LookupString(p)
	return
}

func HuaweiNATPolicyName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 160) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiNATPolicyName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 160) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiNATPolicyName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 160)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiNATPolicyName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 160)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiNATPolicyName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 160, a)
}

func HuaweiNATPolicyName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 160, a)
}

func HuaweiNATPolicyName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 160)
}

func HuaweiNATPublicAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 161, a)
}

func HuaweiNATPublicAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 161, a)
}

func HuaweiNATPublicAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiNATPublicAddress_Lookup(p)
	return
}

func HuaweiNATPublicAddress_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiNATPublicAddress_LookupString(p)
	return
}

func HuaweiNATPublicAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 161) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiNATPublicAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 161) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiNATPublicAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 161)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiNATPublicAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 161)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiNATPublicAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 161, a)
}

func HuaweiNATPublicAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 161, a)
}

func HuaweiNATPublicAddress_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 161)
}

func HuaweiNATStartPort_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 162, a)
}

func HuaweiNATStartPort_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 162, a)
}

func HuaweiNATStartPort_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiNATStartPort_Lookup(p)
	return
}

func HuaweiNATStartPort_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiNATStartPort_LookupString(p)
	return
}

func HuaweiNATStartPort_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 162) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiNATStartPort_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 162) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiNATStartPort_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 162)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiNATStartPort_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 162)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiNATStartPort_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 162, a)
}

func HuaweiNATStartPort_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 162, a)
}

func HuaweiNATStartPort_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 162)
}

func HuaweiNATEndPort_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 163, a)
}

func HuaweiNATEndPort_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 163, a)
}

func HuaweiNATEndPort_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiNATEndPort_Lookup(p)
	return
}

func HuaweiNATEndPort_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiNATEndPort_LookupString(p)
	return
}

func HuaweiNATEndPort_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 163) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiNATEndPort_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 163) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiNATEndPort_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 163)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiNATEndPort_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 163)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiNATEndPort_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 163, a)
}

func HuaweiNATEndPort_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 163, a)
}

func HuaweiNATEndPort_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 163)
}

func HuaweiNATPortForwarding_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 164, a)
}

func HuaweiNATPortForwarding_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 164, a)
}

func HuaweiNATPortForwarding_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiNATPortForwarding_Lookup(p)
	return
}

func HuaweiNATPortForwarding_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiNATPortForwarding_LookupString(p)
	return
}

func HuaweiNATPortForwarding_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 164) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiNATPortForwarding_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 164) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiNATPortForwarding_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 164)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiNATPortForwarding_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 164)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiNATPortForwarding_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 164, a)
}

func HuaweiNATPortForwarding_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 164, a)
}

func HuaweiNATPortForwarding_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 164)
}

type HuaweiNATPortRangeUpdate uint32

var HuaweiNATPortRangeUpdate_Strings = map[HuaweiNATPortRangeUpdate]string{}

func (a HuaweiNATPortRangeUpdate) String() string {
	if str, ok := HuaweiNATPortRangeUpdate_Strings[a]; ok {
		return str
	}
	return "HuaweiNATPortRangeUpdate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiNATPortRangeUpdate_Add(p *radius.Packet, value HuaweiNATPortRangeUpdate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 165, a)
}

func HuaweiNATPortRangeUpdate_Get(p *radius.Packet) (value HuaweiNATPortRangeUpdate) {
	value, _ = HuaweiNATPortRangeUpdate_Lookup(p)
	return
}

func HuaweiNATPortRangeUpdate_Gets(p *radius.Packet) (values []HuaweiNATPortRangeUpdate, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 165) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiNATPortRangeUpdate(i))
	}
	return
}

func HuaweiNATPortRangeUpdate_Lookup(p *radius.Packet) (value HuaweiNATPortRangeUpdate, err error) {
	a, ok := _Huawei_LookupVendor(p, 165)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiNATPortRangeUpdate(i)
	return
}

func HuaweiNATPortRangeUpdate_Set(p *radius.Packet, value HuaweiNATPortRangeUpdate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 165, a)
}

func HuaweiNATPortRangeUpdate_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 165)
}

func HuaweiDSLiteTunnelName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 166, a)
}

func HuaweiDSLiteTunnelName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 166, a)
}

func HuaweiDSLiteTunnelName_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiDSLiteTunnelName_Lookup(p)
	return
}

func HuaweiDSLiteTunnelName_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiDSLiteTunnelName_LookupString(p)
	return
}

func HuaweiDSLiteTunnelName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 166) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDSLiteTunnelName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 166) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDSLiteTunnelName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 166)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiDSLiteTunnelName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 166)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiDSLiteTunnelName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 166, a)
}

func HuaweiDSLiteTunnelName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 166, a)
}

func HuaweiDSLiteTunnelName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 166)
}

func HuaweiPCPServerName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 167, a)
}

func HuaweiPCPServerName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 167, a)
}

func HuaweiPCPServerName_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiPCPServerName_Lookup(p)
	return
}

func HuaweiPCPServerName_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiPCPServerName_LookupString(p)
	return
}

func HuaweiPCPServerName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 167) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiPCPServerName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 167) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiPCPServerName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 167)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiPCPServerName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 167)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiPCPServerName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 167, a)
}

func HuaweiPCPServerName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 167, a)
}

func HuaweiPCPServerName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 167)
}

type HuaweiPublicIPAddrState uint32

const (
	HuaweiPublicIPAddrState_Value_Safe    HuaweiPublicIPAddrState = 0
	HuaweiPublicIPAddrState_Value_Warning HuaweiPublicIPAddrState = 1
	HuaweiPublicIPAddrState_Value_Danger  HuaweiPublicIPAddrState = 2
)

var HuaweiPublicIPAddrState_Strings = map[HuaweiPublicIPAddrState]string{
	HuaweiPublicIPAddrState_Value_Safe:    "Safe",
	HuaweiPublicIPAddrState_Value_Warning: "Warning",
	HuaweiPublicIPAddrState_Value_Danger:  "Danger",
}

func (a HuaweiPublicIPAddrState) String() string {
	if str, ok := HuaweiPublicIPAddrState_Strings[a]; ok {
		return str
	}
	return "HuaweiPublicIPAddrState(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiPublicIPAddrState_Add(p *radius.Packet, value HuaweiPublicIPAddrState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 168, a)
}

func HuaweiPublicIPAddrState_Get(p *radius.Packet) (value HuaweiPublicIPAddrState) {
	value, _ = HuaweiPublicIPAddrState_Lookup(p)
	return
}

func HuaweiPublicIPAddrState_Gets(p *radius.Packet) (values []HuaweiPublicIPAddrState, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 168) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiPublicIPAddrState(i))
	}
	return
}

func HuaweiPublicIPAddrState_Lookup(p *radius.Packet) (value HuaweiPublicIPAddrState, err error) {
	a, ok := _Huawei_LookupVendor(p, 168)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiPublicIPAddrState(i)
	return
}

func HuaweiPublicIPAddrState_Set(p *radius.Packet, value HuaweiPublicIPAddrState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 168, a)
}

func HuaweiPublicIPAddrState_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 168)
}

type HuaweiAuthType uint32

const (
	HuaweiAuthType_Value_PPP            HuaweiAuthType = 1
	HuaweiAuthType_Value_Web            HuaweiAuthType = 2
	HuaweiAuthType_Value_Dot1x          HuaweiAuthType = 3
	HuaweiAuthType_Value_Fast           HuaweiAuthType = 4
	HuaweiAuthType_Value_Bind           HuaweiAuthType = 5
	HuaweiAuthType_Value_WLAN           HuaweiAuthType = 6
	HuaweiAuthType_Value_Administrative HuaweiAuthType = 7
	HuaweiAuthType_Value_Tunnel         HuaweiAuthType = 8
	HuaweiAuthType_Value_MIP            HuaweiAuthType = 9
	HuaweiAuthType_Value_None           HuaweiAuthType = 10
)

var HuaweiAuthType_Strings = map[HuaweiAuthType]string{
	HuaweiAuthType_Value_PPP:            "PPP",
	HuaweiAuthType_Value_Web:            "Web",
	HuaweiAuthType_Value_Dot1x:          "Dot1x",
	HuaweiAuthType_Value_Fast:           "Fast",
	HuaweiAuthType_Value_Bind:           "Bind",
	HuaweiAuthType_Value_WLAN:           "WLAN",
	HuaweiAuthType_Value_Administrative: "Administrative",
	HuaweiAuthType_Value_Tunnel:         "Tunnel",
	HuaweiAuthType_Value_MIP:            "MIP",
	HuaweiAuthType_Value_None:           "None",
}

func (a HuaweiAuthType) String() string {
	if str, ok := HuaweiAuthType_Strings[a]; ok {
		return str
	}
	return "HuaweiAuthType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiAuthType_Add(p *radius.Packet, value HuaweiAuthType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 180, a)
}

func HuaweiAuthType_Get(p *radius.Packet) (value HuaweiAuthType) {
	value, _ = HuaweiAuthType_Lookup(p)
	return
}

func HuaweiAuthType_Gets(p *radius.Packet) (values []HuaweiAuthType, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 180) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiAuthType(i))
	}
	return
}

func HuaweiAuthType_Lookup(p *radius.Packet) (value HuaweiAuthType, err error) {
	a, ok := _Huawei_LookupVendor(p, 180)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiAuthType(i)
	return
}

func HuaweiAuthType_Set(p *radius.Packet, value HuaweiAuthType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 180, a)
}

func HuaweiAuthType_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 180)
}

func HuaweiAcctTerminateSubcause_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 181, a)
}

func HuaweiAcctTerminateSubcause_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 181, a)
}

func HuaweiAcctTerminateSubcause_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiAcctTerminateSubcause_Lookup(p)
	return
}

func HuaweiAcctTerminateSubcause_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiAcctTerminateSubcause_LookupString(p)
	return
}

func HuaweiAcctTerminateSubcause_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 181) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiAcctTerminateSubcause_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 181) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiAcctTerminateSubcause_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 181)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiAcctTerminateSubcause_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 181)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiAcctTerminateSubcause_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 181, a)
}

func HuaweiAcctTerminateSubcause_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 181, a)
}

func HuaweiAcctTerminateSubcause_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 181)
}

func HuaweiDownQOSProfileName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 182, a)
}

func HuaweiDownQOSProfileName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 182, a)
}

func HuaweiDownQOSProfileName_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiDownQOSProfileName_Lookup(p)
	return
}

func HuaweiDownQOSProfileName_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiDownQOSProfileName_LookupString(p)
	return
}

func HuaweiDownQOSProfileName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 182) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDownQOSProfileName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 182) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDownQOSProfileName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 182)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiDownQOSProfileName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 182)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiDownQOSProfileName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 182, a)
}

func HuaweiDownQOSProfileName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 182, a)
}

func HuaweiDownQOSProfileName_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 182)
}

type HuaweiPortMirror uint32

const (
	HuaweiPortMirror_Value_Disable        HuaweiPortMirror = 0
	HuaweiPortMirror_Value_UplinkEnable   HuaweiPortMirror = 1
	HuaweiPortMirror_Value_DownlinkEnable HuaweiPortMirror = 2
	HuaweiPortMirror_Value_Enable         HuaweiPortMirror = 3
)

var HuaweiPortMirror_Strings = map[HuaweiPortMirror]string{
	HuaweiPortMirror_Value_Disable:        "Disable",
	HuaweiPortMirror_Value_UplinkEnable:   "Uplink-Enable",
	HuaweiPortMirror_Value_DownlinkEnable: "Downlink-Enable",
	HuaweiPortMirror_Value_Enable:         "Enable",
}

func (a HuaweiPortMirror) String() string {
	if str, ok := HuaweiPortMirror_Strings[a]; ok {
		return str
	}
	return "HuaweiPortMirror(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiPortMirror_Add(p *radius.Packet, value HuaweiPortMirror) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 183, a)
}

func HuaweiPortMirror_Get(p *radius.Packet) (value HuaweiPortMirror) {
	value, _ = HuaweiPortMirror_Lookup(p)
	return
}

func HuaweiPortMirror_Gets(p *radius.Packet) (values []HuaweiPortMirror, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 183) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiPortMirror(i))
	}
	return
}

func HuaweiPortMirror_Lookup(p *radius.Packet) (value HuaweiPortMirror, err error) {
	a, ok := _Huawei_LookupVendor(p, 183)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiPortMirror(i)
	return
}

func HuaweiPortMirror_Set(p *radius.Packet, value HuaweiPortMirror) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 183, a)
}

func HuaweiPortMirror_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 183)
}

func HuaweiAccountInfo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 184, a)
}

func HuaweiAccountInfo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 184, a)
}

func HuaweiAccountInfo_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiAccountInfo_Lookup(p)
	return
}

func HuaweiAccountInfo_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiAccountInfo_LookupString(p)
	return
}

func HuaweiAccountInfo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 184) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiAccountInfo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 184) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiAccountInfo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 184)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiAccountInfo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 184)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiAccountInfo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 184, a)
}

func HuaweiAccountInfo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 184, a)
}

func HuaweiAccountInfo_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 184)
}

func HuaweiServiceInfo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 185, a)
}

func HuaweiServiceInfo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 185, a)
}

func HuaweiServiceInfo_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiServiceInfo_Lookup(p)
	return
}

func HuaweiServiceInfo_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiServiceInfo_LookupString(p)
	return
}

func HuaweiServiceInfo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 185) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiServiceInfo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 185) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiServiceInfo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 185)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiServiceInfo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 185)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiServiceInfo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 185, a)
}

func HuaweiServiceInfo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 185, a)
}

func HuaweiServiceInfo_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 185)
}

func HuaweiDHCPOption_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 187, a)
}

func HuaweiDHCPOption_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 187, a)
}

func HuaweiDHCPOption_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiDHCPOption_Lookup(p)
	return
}

func HuaweiDHCPOption_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiDHCPOption_LookupString(p)
	return
}

func HuaweiDHCPOption_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 187) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDHCPOption_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 187) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDHCPOption_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 187)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiDHCPOption_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 187)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiDHCPOption_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 187, a)
}

func HuaweiDHCPOption_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 187, a)
}

func HuaweiDHCPOption_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 187)
}

func HuaweiAVpair_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 188, a)
}

func HuaweiAVpair_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 188, a)
}

func HuaweiAVpair_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiAVpair_Lookup(p)
	return
}

func HuaweiAVpair_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiAVpair_LookupString(p)
	return
}

func HuaweiAVpair_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 188) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiAVpair_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 188) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiAVpair_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 188)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiAVpair_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 188)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiAVpair_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 188, a)
}

func HuaweiAVpair_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 188, a)
}

func HuaweiAVpair_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 188)
}

func HuaweiDelegatedIPv6PrefixPool_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 191, a)
}

func HuaweiDelegatedIPv6PrefixPool_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 191, a)
}

func HuaweiDelegatedIPv6PrefixPool_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiDelegatedIPv6PrefixPool_Lookup(p)
	return
}

func HuaweiDelegatedIPv6PrefixPool_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiDelegatedIPv6PrefixPool_LookupString(p)
	return
}

func HuaweiDelegatedIPv6PrefixPool_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 191) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDelegatedIPv6PrefixPool_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 191) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDelegatedIPv6PrefixPool_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 191)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiDelegatedIPv6PrefixPool_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 191)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiDelegatedIPv6PrefixPool_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 191, a)
}

func HuaweiDelegatedIPv6PrefixPool_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 191, a)
}

func HuaweiDelegatedIPv6PrefixPool_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 191)
}

func HuaweiIPv6PrefixLease_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 192, a)
}

func HuaweiIPv6PrefixLease_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 192, a)
}

func HuaweiIPv6PrefixLease_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiIPv6PrefixLease_Lookup(p)
	return
}

func HuaweiIPv6PrefixLease_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiIPv6PrefixLease_LookupString(p)
	return
}

func HuaweiIPv6PrefixLease_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 192) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiIPv6PrefixLease_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 192) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiIPv6PrefixLease_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 192)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiIPv6PrefixLease_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 192)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiIPv6PrefixLease_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 192, a)
}

func HuaweiIPv6PrefixLease_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 192, a)
}

func HuaweiIPv6PrefixLease_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 192)
}

func HuaweiIPv6AddressLease_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 193, a)
}

func HuaweiIPv6AddressLease_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 193, a)
}

func HuaweiIPv6AddressLease_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiIPv6AddressLease_Lookup(p)
	return
}

func HuaweiIPv6AddressLease_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiIPv6AddressLease_LookupString(p)
	return
}

func HuaweiIPv6AddressLease_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 193) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiIPv6AddressLease_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 193) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiIPv6AddressLease_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 193)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiIPv6AddressLease_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 193)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiIPv6AddressLease_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 193, a)
}

func HuaweiIPv6AddressLease_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 193, a)
}

func HuaweiIPv6AddressLease_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 193)
}

func HuaweiIPv6PolicyRoute_Add(p *radius.Packet, value *net.IPNet) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Prefix(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 194, a)
}

func HuaweiIPv6PolicyRoute_Get(p *radius.Packet) (value *net.IPNet) {
	value, _ = HuaweiIPv6PolicyRoute_Lookup(p)
	return
}

func HuaweiIPv6PolicyRoute_Gets(p *radius.Packet) (values []*net.IPNet, err error) {
	var i *net.IPNet
	for _, attr := range _Huawei_GetsVendor(p, 194) {
		i, err = radius.IPv6Prefix(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiIPv6PolicyRoute_Lookup(p *radius.Packet) (value *net.IPNet, err error) {
	a, ok := _Huawei_LookupVendor(p, 194)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Prefix(a)
	return
}

func HuaweiIPv6PolicyRoute_Set(p *radius.Packet, value *net.IPNet) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Prefix(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 194, a)
}

func HuaweiIPv6PolicyRoute_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 194)
}

type HuaweiMNGIPv6 uint32

const (
	HuaweiMNGIPv6_Value_Unsupported HuaweiMNGIPv6 = 0
	HuaweiMNGIPv6_Value_Supported   HuaweiMNGIPv6 = 1
)

var HuaweiMNGIPv6_Strings = map[HuaweiMNGIPv6]string{
	HuaweiMNGIPv6_Value_Unsupported: "Unsupported",
	HuaweiMNGIPv6_Value_Supported:   "Supported",
}

func (a HuaweiMNGIPv6) String() string {
	if str, ok := HuaweiMNGIPv6_Strings[a]; ok {
		return str
	}
	return "HuaweiMNGIPv6(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiMNGIPv6_Add(p *radius.Packet, value HuaweiMNGIPv6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 196, a)
}

func HuaweiMNGIPv6_Get(p *radius.Packet) (value HuaweiMNGIPv6) {
	value, _ = HuaweiMNGIPv6_Lookup(p)
	return
}

func HuaweiMNGIPv6_Gets(p *radius.Packet) (values []HuaweiMNGIPv6, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 196) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiMNGIPv6(i))
	}
	return
}

func HuaweiMNGIPv6_Lookup(p *radius.Packet) (value HuaweiMNGIPv6, err error) {
	a, ok := _Huawei_LookupVendor(p, 196)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiMNGIPv6(i)
	return
}

func HuaweiMNGIPv6_Set(p *radius.Packet, value HuaweiMNGIPv6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 196, a)
}

func HuaweiMNGIPv6_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 196)
}

func HuaweiFlowInfo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 211, a)
}

func HuaweiFlowInfo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 211, a)
}

func HuaweiFlowInfo_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiFlowInfo_Lookup(p)
	return
}

func HuaweiFlowInfo_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiFlowInfo_LookupString(p)
	return
}

func HuaweiFlowInfo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 211) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiFlowInfo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 211) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiFlowInfo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 211)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiFlowInfo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 211)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiFlowInfo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 211, a)
}

func HuaweiFlowInfo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 211, a)
}

func HuaweiFlowInfo_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 211)
}

type HuaweiFlowID uint32

var HuaweiFlowID_Strings = map[HuaweiFlowID]string{}

func (a HuaweiFlowID) String() string {
	if str, ok := HuaweiFlowID_Strings[a]; ok {
		return str
	}
	return "HuaweiFlowID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiFlowID_Add(p *radius.Packet, value HuaweiFlowID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 212, a)
}

func HuaweiFlowID_Get(p *radius.Packet) (value HuaweiFlowID) {
	value, _ = HuaweiFlowID_Lookup(p)
	return
}

func HuaweiFlowID_Gets(p *radius.Packet) (values []HuaweiFlowID, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 212) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiFlowID(i))
	}
	return
}

func HuaweiFlowID_Lookup(p *radius.Packet) (value HuaweiFlowID, err error) {
	a, ok := _Huawei_LookupVendor(p, 212)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiFlowID(i)
	return
}

func HuaweiFlowID_Set(p *radius.Packet, value HuaweiFlowID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 212, a)
}

func HuaweiFlowID_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 212)
}

func HuaweiDHCPServerIP_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 214, a)
}

func HuaweiDHCPServerIP_Get(p *radius.Packet) (value net.IP) {
	value, _ = HuaweiDHCPServerIP_Lookup(p)
	return
}

func HuaweiDHCPServerIP_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 214) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiDHCPServerIP_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 214)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HuaweiDHCPServerIP_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 214, a)
}

func HuaweiDHCPServerIP_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 214)
}

type HuaweiApplicationType uint32

const (
	HuaweiApplicationType_Value_Fixed        HuaweiApplicationType = 1
	HuaweiApplicationType_Value_Nomadic      HuaweiApplicationType = 2
	HuaweiApplicationType_Value_Portable     HuaweiApplicationType = 3
	HuaweiApplicationType_Value_SimpleMobile HuaweiApplicationType = 4
	HuaweiApplicationType_Value_FullMobile   HuaweiApplicationType = 5
)

var HuaweiApplicationType_Strings = map[HuaweiApplicationType]string{
	HuaweiApplicationType_Value_Fixed:        "Fixed",
	HuaweiApplicationType_Value_Nomadic:      "Nomadic",
	HuaweiApplicationType_Value_Portable:     "Portable",
	HuaweiApplicationType_Value_SimpleMobile: "Simple-Mobile",
	HuaweiApplicationType_Value_FullMobile:   "Full-Mobile",
}

func (a HuaweiApplicationType) String() string {
	if str, ok := HuaweiApplicationType_Strings[a]; ok {
		return str
	}
	return "HuaweiApplicationType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiApplicationType_Add(p *radius.Packet, value HuaweiApplicationType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 215, a)
}

func HuaweiApplicationType_Get(p *radius.Packet) (value HuaweiApplicationType) {
	value, _ = HuaweiApplicationType_Lookup(p)
	return
}

func HuaweiApplicationType_Gets(p *radius.Packet) (values []HuaweiApplicationType, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 215) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiApplicationType(i))
	}
	return
}

func HuaweiApplicationType_Lookup(p *radius.Packet) (value HuaweiApplicationType, err error) {
	a, ok := _Huawei_LookupVendor(p, 215)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiApplicationType(i)
	return
}

func HuaweiApplicationType_Set(p *radius.Packet, value HuaweiApplicationType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 215, a)
}

func HuaweiApplicationType_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 215)
}

func HuaweiIndicationFlag_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 216, a)
}

func HuaweiIndicationFlag_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 216, a)
}

func HuaweiIndicationFlag_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiIndicationFlag_Lookup(p)
	return
}

func HuaweiIndicationFlag_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiIndicationFlag_LookupString(p)
	return
}

func HuaweiIndicationFlag_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 216) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiIndicationFlag_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 216) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiIndicationFlag_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 216)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiIndicationFlag_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 216)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiIndicationFlag_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 216, a)
}

func HuaweiIndicationFlag_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 216, a)
}

func HuaweiIndicationFlag_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 216)
}

func HuaweiOriginalNASIPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 217, a)
}

func HuaweiOriginalNASIPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = HuaweiOriginalNASIPAddress_Lookup(p)
	return
}

func HuaweiOriginalNASIPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Huawei_GetsVendor(p, 217) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiOriginalNASIPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Huawei_LookupVendor(p, 217)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func HuaweiOriginalNASIPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 217, a)
}

func HuaweiOriginalNASIPAddress_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 217)
}

type HuaweiUserPriority uint32

const (
	HuaweiUserPriority_Value_Common HuaweiUserPriority = 0
	HuaweiUserPriority_Value_Copper HuaweiUserPriority = 1
	HuaweiUserPriority_Value_Silver HuaweiUserPriority = 2
	HuaweiUserPriority_Value_Gold   HuaweiUserPriority = 3
)

var HuaweiUserPriority_Strings = map[HuaweiUserPriority]string{
	HuaweiUserPriority_Value_Common: "Common",
	HuaweiUserPriority_Value_Copper: "Copper",
	HuaweiUserPriority_Value_Silver: "Silver",
	HuaweiUserPriority_Value_Gold:   "Gold",
}

func (a HuaweiUserPriority) String() string {
	if str, ok := HuaweiUserPriority_Strings[a]; ok {
		return str
	}
	return "HuaweiUserPriority(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HuaweiUserPriority_Add(p *radius.Packet, value HuaweiUserPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_AddVendor(p, 218, a)
}

func HuaweiUserPriority_Get(p *radius.Packet) (value HuaweiUserPriority) {
	value, _ = HuaweiUserPriority_Lookup(p)
	return
}

func HuaweiUserPriority_Gets(p *radius.Packet) (values []HuaweiUserPriority, err error) {
	var i uint32
	for _, attr := range _Huawei_GetsVendor(p, 218) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HuaweiUserPriority(i))
	}
	return
}

func HuaweiUserPriority_Lookup(p *radius.Packet) (value HuaweiUserPriority, err error) {
	a, ok := _Huawei_LookupVendor(p, 218)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HuaweiUserPriority(i)
	return
}

func HuaweiUserPriority_Set(p *radius.Packet, value HuaweiUserPriority) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Huawei_SetVendor(p, 218, a)
}

func HuaweiUserPriority_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 218)
}

func HuaweiACSURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 219, a)
}

func HuaweiACSURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 219, a)
}

func HuaweiACSURL_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiACSURL_Lookup(p)
	return
}

func HuaweiACSURL_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiACSURL_LookupString(p)
	return
}

func HuaweiACSURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 219) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiACSURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 219) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiACSURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 219)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiACSURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 219)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiACSURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 219, a)
}

func HuaweiACSURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 219, a)
}

func HuaweiACSURL_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 219)
}

func HuaweiProvisionCode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 220, a)
}

func HuaweiProvisionCode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 220, a)
}

func HuaweiProvisionCode_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiProvisionCode_Lookup(p)
	return
}

func HuaweiProvisionCode_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiProvisionCode_LookupString(p)
	return
}

func HuaweiProvisionCode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 220) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiProvisionCode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 220) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiProvisionCode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 220)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiProvisionCode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 220)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiProvisionCode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 220, a)
}

func HuaweiProvisionCode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 220, a)
}

func HuaweiProvisionCode_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 220)
}

func HuaweiApplicationScene_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 221, a)
}

func HuaweiApplicationScene_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 221, a)
}

func HuaweiApplicationScene_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiApplicationScene_Lookup(p)
	return
}

func HuaweiApplicationScene_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiApplicationScene_LookupString(p)
	return
}

func HuaweiApplicationScene_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 221) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiApplicationScene_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 221) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiApplicationScene_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 221)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiApplicationScene_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 221)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiApplicationScene_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 221, a)
}

func HuaweiApplicationScene_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 221, a)
}

func HuaweiApplicationScene_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 221)
}

func HuaweiMSMaximumMACStudyNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 222, a)
}

func HuaweiMSMaximumMACStudyNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 222, a)
}

func HuaweiMSMaximumMACStudyNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiMSMaximumMACStudyNumber_Lookup(p)
	return
}

func HuaweiMSMaximumMACStudyNumber_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiMSMaximumMACStudyNumber_LookupString(p)
	return
}

func HuaweiMSMaximumMACStudyNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 222) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiMSMaximumMACStudyNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 222) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiMSMaximumMACStudyNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 222)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiMSMaximumMACStudyNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 222)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiMSMaximumMACStudyNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 222, a)
}

func HuaweiMSMaximumMACStudyNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 222, a)
}

func HuaweiMSMaximumMACStudyNumber_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 222)
}

func HuaweiGGSNVendor_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 232, a)
}

func HuaweiGGSNVendor_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 232, a)
}

func HuaweiGGSNVendor_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiGGSNVendor_Lookup(p)
	return
}

func HuaweiGGSNVendor_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiGGSNVendor_LookupString(p)
	return
}

func HuaweiGGSNVendor_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 232) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiGGSNVendor_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 232) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiGGSNVendor_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 232)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiGGSNVendor_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 232)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiGGSNVendor_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 232, a)
}

func HuaweiGGSNVendor_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 232, a)
}

func HuaweiGGSNVendor_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 232)
}

func HuaweiGGSNVersion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 233, a)
}

func HuaweiGGSNVersion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 233, a)
}

func HuaweiGGSNVersion_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiGGSNVersion_Lookup(p)
	return
}

func HuaweiGGSNVersion_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiGGSNVersion_LookupString(p)
	return
}

func HuaweiGGSNVersion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 233) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiGGSNVersion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 233) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiGGSNVersion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 233)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiGGSNVersion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 233)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiGGSNVersion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 233, a)
}

func HuaweiGGSNVersion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 233, a)
}

func HuaweiGGSNVersion_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 233)
}

func HuaweiWebURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 253, a)
}

func HuaweiWebURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 253, a)
}

func HuaweiWebURL_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiWebURL_Lookup(p)
	return
}

func HuaweiWebURL_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiWebURL_LookupString(p)
	return
}

func HuaweiWebURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 253) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiWebURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 253) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiWebURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 253)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiWebURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 253)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiWebURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 253, a)
}

func HuaweiWebURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 253, a)
}

func HuaweiWebURL_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 253)
}

func HuaweiVersion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 254, a)
}

func HuaweiVersion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 254, a)
}

func HuaweiVersion_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiVersion_Lookup(p)
	return
}

func HuaweiVersion_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiVersion_LookupString(p)
	return
}

func HuaweiVersion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 254) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiVersion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 254) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiVersion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 254)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiVersion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 254)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiVersion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 254, a)
}

func HuaweiVersion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 254, a)
}

func HuaweiVersion_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 254)
}

func HuaweiProductID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 255, a)
}

func HuaweiProductID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_AddVendor(p, 255, a)
}

func HuaweiProductID_Get(p *radius.Packet) (value []byte) {
	value, _ = HuaweiProductID_Lookup(p)
	return
}

func HuaweiProductID_GetString(p *radius.Packet) (value string) {
	value, _ = HuaweiProductID_LookupString(p)
	return
}

func HuaweiProductID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Huawei_GetsVendor(p, 255) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiProductID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Huawei_GetsVendor(p, 255) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HuaweiProductID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Huawei_LookupVendor(p, 255)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HuaweiProductID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Huawei_LookupVendor(p, 255)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HuaweiProductID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 255, a)
}

func HuaweiProductID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Huawei_SetVendor(p, 255, a)
}

func HuaweiProductID_Del(p *radius.Packet) {
	_Huawei_DelVendor(p, 255)
}
