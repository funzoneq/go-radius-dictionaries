// Code generated by radius-dict-gen. DO NOT EDIT.

package valemount

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_ValemountNetworks_VendorID = 16313
)

func _ValemountNetworks_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_ValemountNetworks_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _ValemountNetworks_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _ValemountNetworks_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _ValemountNetworks_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _ValemountNetworks_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _ValemountNetworks_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _ValemountNetworks_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _ValemountNetworks_AddVendor(p, typ, attr)
}

func _ValemountNetworks_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _ValemountNetworks_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

type VNCPPPoECBQRX uint32

var VNCPPPoECBQRX_Strings = map[VNCPPPoECBQRX]string{}

func (a VNCPPPoECBQRX) String() string {
	if str, ok := VNCPPPoECBQRX_Strings[a]; ok {
		return str
	}
	return "VNCPPPoECBQRX(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func VNCPPPoECBQRX_Add(p *radius.Packet, value VNCPPPoECBQRX) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ValemountNetworks_AddVendor(p, 1, a)
}

func VNCPPPoECBQRX_Get(p *radius.Packet) (value VNCPPPoECBQRX) {
	value, _ = VNCPPPoECBQRX_Lookup(p)
	return
}

func VNCPPPoECBQRX_Gets(p *radius.Packet) (values []VNCPPPoECBQRX, err error) {
	var i uint32
	for _, attr := range _ValemountNetworks_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, VNCPPPoECBQRX(i))
	}
	return
}

func VNCPPPoECBQRX_Lookup(p *radius.Packet) (value VNCPPPoECBQRX, err error) {
	a, ok := _ValemountNetworks_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = VNCPPPoECBQRX(i)
	return
}

func VNCPPPoECBQRX_Set(p *radius.Packet, value VNCPPPoECBQRX) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ValemountNetworks_SetVendor(p, 1, a)
}

func VNCPPPoECBQRX_Del(p *radius.Packet) {
	_ValemountNetworks_DelVendor(p, 1)
}

type VNCPPPoECBQTX uint32

var VNCPPPoECBQTX_Strings = map[VNCPPPoECBQTX]string{}

func (a VNCPPPoECBQTX) String() string {
	if str, ok := VNCPPPoECBQTX_Strings[a]; ok {
		return str
	}
	return "VNCPPPoECBQTX(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func VNCPPPoECBQTX_Add(p *radius.Packet, value VNCPPPoECBQTX) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ValemountNetworks_AddVendor(p, 2, a)
}

func VNCPPPoECBQTX_Get(p *radius.Packet) (value VNCPPPoECBQTX) {
	value, _ = VNCPPPoECBQTX_Lookup(p)
	return
}

func VNCPPPoECBQTX_Gets(p *radius.Packet) (values []VNCPPPoECBQTX, err error) {
	var i uint32
	for _, attr := range _ValemountNetworks_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, VNCPPPoECBQTX(i))
	}
	return
}

func VNCPPPoECBQTX_Lookup(p *radius.Packet) (value VNCPPPoECBQTX, err error) {
	a, ok := _ValemountNetworks_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = VNCPPPoECBQTX(i)
	return
}

func VNCPPPoECBQTX_Set(p *radius.Packet, value VNCPPPoECBQTX) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ValemountNetworks_SetVendor(p, 2, a)
}

func VNCPPPoECBQTX_Del(p *radius.Packet) {
	_ValemountNetworks_DelVendor(p, 2)
}

type VNCPPPoECBQRXFallback uint32

var VNCPPPoECBQRXFallback_Strings = map[VNCPPPoECBQRXFallback]string{}

func (a VNCPPPoECBQRXFallback) String() string {
	if str, ok := VNCPPPoECBQRXFallback_Strings[a]; ok {
		return str
	}
	return "VNCPPPoECBQRXFallback(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func VNCPPPoECBQRXFallback_Add(p *radius.Packet, value VNCPPPoECBQRXFallback) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ValemountNetworks_AddVendor(p, 3, a)
}

func VNCPPPoECBQRXFallback_Get(p *radius.Packet) (value VNCPPPoECBQRXFallback) {
	value, _ = VNCPPPoECBQRXFallback_Lookup(p)
	return
}

func VNCPPPoECBQRXFallback_Gets(p *radius.Packet) (values []VNCPPPoECBQRXFallback, err error) {
	var i uint32
	for _, attr := range _ValemountNetworks_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, VNCPPPoECBQRXFallback(i))
	}
	return
}

func VNCPPPoECBQRXFallback_Lookup(p *radius.Packet) (value VNCPPPoECBQRXFallback, err error) {
	a, ok := _ValemountNetworks_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = VNCPPPoECBQRXFallback(i)
	return
}

func VNCPPPoECBQRXFallback_Set(p *radius.Packet, value VNCPPPoECBQRXFallback) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ValemountNetworks_SetVendor(p, 3, a)
}

func VNCPPPoECBQRXFallback_Del(p *radius.Packet) {
	_ValemountNetworks_DelVendor(p, 3)
}

type VNCPPPoECBQTXFallback uint32

var VNCPPPoECBQTXFallback_Strings = map[VNCPPPoECBQTXFallback]string{}

func (a VNCPPPoECBQTXFallback) String() string {
	if str, ok := VNCPPPoECBQTXFallback_Strings[a]; ok {
		return str
	}
	return "VNCPPPoECBQTXFallback(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func VNCPPPoECBQTXFallback_Add(p *radius.Packet, value VNCPPPoECBQTXFallback) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ValemountNetworks_AddVendor(p, 4, a)
}

func VNCPPPoECBQTXFallback_Get(p *radius.Packet) (value VNCPPPoECBQTXFallback) {
	value, _ = VNCPPPoECBQTXFallback_Lookup(p)
	return
}

func VNCPPPoECBQTXFallback_Gets(p *radius.Packet) (values []VNCPPPoECBQTXFallback, err error) {
	var i uint32
	for _, attr := range _ValemountNetworks_GetsVendor(p, 4) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, VNCPPPoECBQTXFallback(i))
	}
	return
}

func VNCPPPoECBQTXFallback_Lookup(p *radius.Packet) (value VNCPPPoECBQTXFallback, err error) {
	a, ok := _ValemountNetworks_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = VNCPPPoECBQTXFallback(i)
	return
}

func VNCPPPoECBQTXFallback_Set(p *radius.Packet, value VNCPPPoECBQTXFallback) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ValemountNetworks_SetVendor(p, 4, a)
}

func VNCPPPoECBQTXFallback_Del(p *radius.Packet) {
	_ValemountNetworks_DelVendor(p, 4)
}

type VNCSplash uint32

const (
	VNCSplash_Value_NoShow VNCSplash = 0
	VNCSplash_Value_Show   VNCSplash = 1
)

var VNCSplash_Strings = map[VNCSplash]string{
	VNCSplash_Value_NoShow: "No-Show",
	VNCSplash_Value_Show:   "Show",
}

func (a VNCSplash) String() string {
	if str, ok := VNCSplash_Strings[a]; ok {
		return str
	}
	return "VNCSplash(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func VNCSplash_Add(p *radius.Packet, value VNCSplash) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ValemountNetworks_AddVendor(p, 10, a)
}

func VNCSplash_Get(p *radius.Packet) (value VNCSplash) {
	value, _ = VNCSplash_Lookup(p)
	return
}

func VNCSplash_Gets(p *radius.Packet) (values []VNCSplash, err error) {
	var i uint32
	for _, attr := range _ValemountNetworks_GetsVendor(p, 10) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, VNCSplash(i))
	}
	return
}

func VNCSplash_Lookup(p *radius.Packet) (value VNCSplash, err error) {
	a, ok := _ValemountNetworks_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = VNCSplash(i)
	return
}

func VNCSplash_Set(p *radius.Packet, value VNCSplash) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ValemountNetworks_SetVendor(p, 10, a)
}

func VNCSplash_Del(p *radius.Packet) {
	_ValemountNetworks_DelVendor(p, 10)
}
