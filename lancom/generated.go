// Code generated by radius-dict-gen. DO NOT EDIT.

package lancom

import (
	"crypto/rand"
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Lancom_VendorID = 2356
)

func _Lancom_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Lancom_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Lancom_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Lancom_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Lancom_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Lancom_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Lancom_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Lancom_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Lancom_AddVendor(p, typ, attr)
}

func _Lancom_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Lancom_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

type LCSTrafficLimit uint32

var LCSTrafficLimit_Strings = map[LCSTrafficLimit]string{}

func (a LCSTrafficLimit) String() string {
	if str, ok := LCSTrafficLimit_Strings[a]; ok {
		return str
	}
	return "LCSTrafficLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LCSTrafficLimit_Add(p *radius.Packet, value LCSTrafficLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Lancom_AddVendor(p, 1, a)
}

func LCSTrafficLimit_Get(p *radius.Packet) (value LCSTrafficLimit) {
	value, _ = LCSTrafficLimit_Lookup(p)
	return
}

func LCSTrafficLimit_Gets(p *radius.Packet) (values []LCSTrafficLimit, err error) {
	var i uint32
	for _, attr := range _Lancom_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LCSTrafficLimit(i))
	}
	return
}

func LCSTrafficLimit_Lookup(p *radius.Packet) (value LCSTrafficLimit, err error) {
	a, ok := _Lancom_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LCSTrafficLimit(i)
	return
}

func LCSTrafficLimit_Set(p *radius.Packet, value LCSTrafficLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Lancom_SetVendor(p, 1, a)
}

func LCSTrafficLimit_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 1)
}

func LCSMacAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 2, a)
}

func LCSMacAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 2, a)
}

func LCSMacAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = LCSMacAddress_Lookup(p)
	return
}

func LCSMacAddress_GetString(p *radius.Packet) (value string) {
	value, _ = LCSMacAddress_LookupString(p)
	return
}

func LCSMacAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Lancom_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSMacAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Lancom_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSMacAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Lancom_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LCSMacAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Lancom_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LCSMacAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 2, a)
}

func LCSMacAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 2, a)
}

func LCSMacAddress_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 2)
}

func LCSRedirectionURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 3, a)
}

func LCSRedirectionURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 3, a)
}

func LCSRedirectionURL_Get(p *radius.Packet) (value []byte) {
	value, _ = LCSRedirectionURL_Lookup(p)
	return
}

func LCSRedirectionURL_GetString(p *radius.Packet) (value string) {
	value, _ = LCSRedirectionURL_LookupString(p)
	return
}

func LCSRedirectionURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Lancom_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSRedirectionURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Lancom_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSRedirectionURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Lancom_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LCSRedirectionURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Lancom_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LCSRedirectionURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 3, a)
}

func LCSRedirectionURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 3, a)
}

func LCSRedirectionURL_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 3)
}

func LCSComment_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 4, a)
}

func LCSComment_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 4, a)
}

func LCSComment_Get(p *radius.Packet) (value []byte) {
	value, _ = LCSComment_Lookup(p)
	return
}

func LCSComment_GetString(p *radius.Packet) (value string) {
	value, _ = LCSComment_LookupString(p)
	return
}

func LCSComment_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Lancom_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSComment_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Lancom_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSComment_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Lancom_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LCSComment_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Lancom_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LCSComment_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 4, a)
}

func LCSComment_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 4, a)
}

func LCSComment_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 4)
}

type LCSAccountEnd uint32

var LCSAccountEnd_Strings = map[LCSAccountEnd]string{}

func (a LCSAccountEnd) String() string {
	if str, ok := LCSAccountEnd_Strings[a]; ok {
		return str
	}
	return "LCSAccountEnd(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LCSAccountEnd_Add(p *radius.Packet, value LCSAccountEnd) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Lancom_AddVendor(p, 5, a)
}

func LCSAccountEnd_Get(p *radius.Packet) (value LCSAccountEnd) {
	value, _ = LCSAccountEnd_Lookup(p)
	return
}

func LCSAccountEnd_Gets(p *radius.Packet) (values []LCSAccountEnd, err error) {
	var i uint32
	for _, attr := range _Lancom_GetsVendor(p, 5) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LCSAccountEnd(i))
	}
	return
}

func LCSAccountEnd_Lookup(p *radius.Packet) (value LCSAccountEnd, err error) {
	a, ok := _Lancom_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LCSAccountEnd(i)
	return
}

func LCSAccountEnd_Set(p *radius.Packet, value LCSAccountEnd) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Lancom_SetVendor(p, 5, a)
}

func LCSAccountEnd_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 5)
}

func LCSWPAPassphrase_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 6, a)
}

func LCSWPAPassphrase_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 6, a)
}

func LCSWPAPassphrase_Get(p *radius.Packet) (value []byte) {
	value, _ = LCSWPAPassphrase_Lookup(p)
	return
}

func LCSWPAPassphrase_GetString(p *radius.Packet) (value string) {
	value, _ = LCSWPAPassphrase_LookupString(p)
	return
}

func LCSWPAPassphrase_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Lancom_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSWPAPassphrase_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Lancom_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSWPAPassphrase_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Lancom_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LCSWPAPassphrase_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Lancom_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LCSWPAPassphrase_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 6, a)
}

func LCSWPAPassphrase_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 6, a)
}

func LCSWPAPassphrase_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 6)
}

func LCSPbSpotUserName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 7, a)
}

func LCSPbSpotUserName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 7, a)
}

func LCSPbSpotUserName_Get(p *radius.Packet) (value []byte) {
	value, _ = LCSPbSpotUserName_Lookup(p)
	return
}

func LCSPbSpotUserName_GetString(p *radius.Packet) (value string) {
	value, _ = LCSPbSpotUserName_LookupString(p)
	return
}

func LCSPbSpotUserName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Lancom_GetsVendor(p, 7) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSPbSpotUserName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Lancom_GetsVendor(p, 7) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSPbSpotUserName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Lancom_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LCSPbSpotUserName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Lancom_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LCSPbSpotUserName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 7, a)
}

func LCSPbSpotUserName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 7, a)
}

func LCSPbSpotUserName_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 7)
}

type LCSTxRateLimit uint32

var LCSTxRateLimit_Strings = map[LCSTxRateLimit]string{}

func (a LCSTxRateLimit) String() string {
	if str, ok := LCSTxRateLimit_Strings[a]; ok {
		return str
	}
	return "LCSTxRateLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LCSTxRateLimit_Add(p *radius.Packet, value LCSTxRateLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Lancom_AddVendor(p, 8, a)
}

func LCSTxRateLimit_Get(p *radius.Packet) (value LCSTxRateLimit) {
	value, _ = LCSTxRateLimit_Lookup(p)
	return
}

func LCSTxRateLimit_Gets(p *radius.Packet) (values []LCSTxRateLimit, err error) {
	var i uint32
	for _, attr := range _Lancom_GetsVendor(p, 8) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LCSTxRateLimit(i))
	}
	return
}

func LCSTxRateLimit_Lookup(p *radius.Packet) (value LCSTxRateLimit, err error) {
	a, ok := _Lancom_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LCSTxRateLimit(i)
	return
}

func LCSTxRateLimit_Set(p *radius.Packet, value LCSTxRateLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Lancom_SetVendor(p, 8, a)
}

func LCSTxRateLimit_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 8)
}

type LCSRxRateLimit uint32

var LCSRxRateLimit_Strings = map[LCSRxRateLimit]string{}

func (a LCSRxRateLimit) String() string {
	if str, ok := LCSRxRateLimit_Strings[a]; ok {
		return str
	}
	return "LCSRxRateLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LCSRxRateLimit_Add(p *radius.Packet, value LCSRxRateLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Lancom_AddVendor(p, 9, a)
}

func LCSRxRateLimit_Get(p *radius.Packet) (value LCSRxRateLimit) {
	value, _ = LCSRxRateLimit_Lookup(p)
	return
}

func LCSRxRateLimit_Gets(p *radius.Packet) (values []LCSRxRateLimit, err error) {
	var i uint32
	for _, attr := range _Lancom_GetsVendor(p, 9) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LCSRxRateLimit(i))
	}
	return
}

func LCSRxRateLimit_Lookup(p *radius.Packet) (value LCSRxRateLimit, err error) {
	a, ok := _Lancom_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LCSRxRateLimit(i)
	return
}

func LCSRxRateLimit_Set(p *radius.Packet, value LCSRxRateLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Lancom_SetVendor(p, 9, a)
}

func LCSRxRateLimit_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 9)
}

type LCSAccessRights uint32

var LCSAccessRights_Strings = map[LCSAccessRights]string{}

func (a LCSAccessRights) String() string {
	if str, ok := LCSAccessRights_Strings[a]; ok {
		return str
	}
	return "LCSAccessRights(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LCSAccessRights_Add(p *radius.Packet, value LCSAccessRights) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Lancom_AddVendor(p, 11, a)
}

func LCSAccessRights_Get(p *radius.Packet) (value LCSAccessRights) {
	value, _ = LCSAccessRights_Lookup(p)
	return
}

func LCSAccessRights_Gets(p *radius.Packet) (values []LCSAccessRights, err error) {
	var i uint32
	for _, attr := range _Lancom_GetsVendor(p, 11) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LCSAccessRights(i))
	}
	return
}

func LCSAccessRights_Lookup(p *radius.Packet) (value LCSAccessRights, err error) {
	a, ok := _Lancom_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LCSAccessRights(i)
	return
}

func LCSAccessRights_Set(p *radius.Packet, value LCSAccessRights) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Lancom_SetVendor(p, 11, a)
}

func LCSAccessRights_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 11)
}

type LCSFunctionRights uint32

var LCSFunctionRights_Strings = map[LCSFunctionRights]string{}

func (a LCSFunctionRights) String() string {
	if str, ok := LCSFunctionRights_Strings[a]; ok {
		return str
	}
	return "LCSFunctionRights(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LCSFunctionRights_Add(p *radius.Packet, value LCSFunctionRights) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Lancom_AddVendor(p, 12, a)
}

func LCSFunctionRights_Get(p *radius.Packet) (value LCSFunctionRights) {
	value, _ = LCSFunctionRights_Lookup(p)
	return
}

func LCSFunctionRights_Gets(p *radius.Packet) (values []LCSFunctionRights, err error) {
	var i uint32
	for _, attr := range _Lancom_GetsVendor(p, 12) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LCSFunctionRights(i))
	}
	return
}

func LCSFunctionRights_Lookup(p *radius.Packet) (value LCSFunctionRights, err error) {
	a, ok := _Lancom_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LCSFunctionRights(i)
	return
}

func LCSFunctionRights_Set(p *radius.Packet, value LCSFunctionRights) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Lancom_SetVendor(p, 12, a)
}

func LCSFunctionRights_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 12)
}

func LCSAdvertisementURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 13, a)
}

func LCSAdvertisementURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 13, a)
}

func LCSAdvertisementURL_Get(p *radius.Packet) (value []byte) {
	value, _ = LCSAdvertisementURL_Lookup(p)
	return
}

func LCSAdvertisementURL_GetString(p *radius.Packet) (value string) {
	value, _ = LCSAdvertisementURL_LookupString(p)
	return
}

func LCSAdvertisementURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Lancom_GetsVendor(p, 13) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSAdvertisementURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Lancom_GetsVendor(p, 13) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSAdvertisementURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Lancom_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LCSAdvertisementURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Lancom_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LCSAdvertisementURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 13, a)
}

func LCSAdvertisementURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 13, a)
}

func LCSAdvertisementURL_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 13)
}

type LCSAdvertisementInterval uint32

var LCSAdvertisementInterval_Strings = map[LCSAdvertisementInterval]string{}

func (a LCSAdvertisementInterval) String() string {
	if str, ok := LCSAdvertisementInterval_Strings[a]; ok {
		return str
	}
	return "LCSAdvertisementInterval(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LCSAdvertisementInterval_Add(p *radius.Packet, value LCSAdvertisementInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Lancom_AddVendor(p, 14, a)
}

func LCSAdvertisementInterval_Get(p *radius.Packet) (value LCSAdvertisementInterval) {
	value, _ = LCSAdvertisementInterval_Lookup(p)
	return
}

func LCSAdvertisementInterval_Gets(p *radius.Packet) (values []LCSAdvertisementInterval, err error) {
	var i uint32
	for _, attr := range _Lancom_GetsVendor(p, 14) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LCSAdvertisementInterval(i))
	}
	return
}

func LCSAdvertisementInterval_Lookup(p *radius.Packet) (value LCSAdvertisementInterval, err error) {
	a, ok := _Lancom_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LCSAdvertisementInterval(i)
	return
}

func LCSAdvertisementInterval_Set(p *radius.Packet, value LCSAdvertisementInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Lancom_SetVendor(p, 14, a)
}

func LCSAdvertisementInterval_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 14)
}

type LCSTrafficLimitGigawords uint32

var LCSTrafficLimitGigawords_Strings = map[LCSTrafficLimitGigawords]string{}

func (a LCSTrafficLimitGigawords) String() string {
	if str, ok := LCSTrafficLimitGigawords_Strings[a]; ok {
		return str
	}
	return "LCSTrafficLimitGigawords(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LCSTrafficLimitGigawords_Add(p *radius.Packet, value LCSTrafficLimitGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Lancom_AddVendor(p, 15, a)
}

func LCSTrafficLimitGigawords_Get(p *radius.Packet) (value LCSTrafficLimitGigawords) {
	value, _ = LCSTrafficLimitGigawords_Lookup(p)
	return
}

func LCSTrafficLimitGigawords_Gets(p *radius.Packet) (values []LCSTrafficLimitGigawords, err error) {
	var i uint32
	for _, attr := range _Lancom_GetsVendor(p, 15) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LCSTrafficLimitGigawords(i))
	}
	return
}

func LCSTrafficLimitGigawords_Lookup(p *radius.Packet) (value LCSTrafficLimitGigawords, err error) {
	a, ok := _Lancom_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LCSTrafficLimitGigawords(i)
	return
}

func LCSTrafficLimitGigawords_Set(p *radius.Packet, value LCSTrafficLimitGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Lancom_SetVendor(p, 15, a)
}

func LCSTrafficLimitGigawords_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 15)
}

func LCSOrigNASIdentifier_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 16, a)
}

func LCSOrigNASIdentifier_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 16, a)
}

func LCSOrigNASIdentifier_Get(p *radius.Packet) (value []byte) {
	value, _ = LCSOrigNASIdentifier_Lookup(p)
	return
}

func LCSOrigNASIdentifier_GetString(p *radius.Packet) (value string) {
	value, _ = LCSOrigNASIdentifier_LookupString(p)
	return
}

func LCSOrigNASIdentifier_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Lancom_GetsVendor(p, 16) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSOrigNASIdentifier_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Lancom_GetsVendor(p, 16) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSOrigNASIdentifier_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Lancom_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LCSOrigNASIdentifier_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Lancom_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LCSOrigNASIdentifier_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 16, a)
}

func LCSOrigNASIdentifier_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 16, a)
}

func LCSOrigNASIdentifier_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 16)
}

func LCSOrigNASIPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 17, a)
}

func LCSOrigNASIPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = LCSOrigNASIPAddress_Lookup(p)
	return
}

func LCSOrigNASIPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Lancom_GetsVendor(p, 17) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSOrigNASIPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Lancom_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func LCSOrigNASIPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 17, a)
}

func LCSOrigNASIPAddress_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 17)
}

func LCSOrigNASIPv6Address_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 18, a)
}

func LCSOrigNASIPv6Address_Get(p *radius.Packet) (value net.IP) {
	value, _ = LCSOrigNASIPv6Address_Lookup(p)
	return
}

func LCSOrigNASIPv6Address_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Lancom_GetsVendor(p, 18) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSOrigNASIPv6Address_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Lancom_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func LCSOrigNASIPv6Address_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 18, a)
}

func LCSOrigNASIPv6Address_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 18)
}

func LCSIKEv2LocalPassword_Add(p *radius.Packet, tag byte, value []byte) (err error) {
	var a radius.Attribute
	var salt [2]byte
	_, err = rand.Read(salt[:])
	if err != nil {
		return
	}
	a, err = radius.NewTunnelPassword(value, salt[:], p.Secret, p.Authenticator[:])
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Lancom_AddVendor(p, 19, a)
}

func LCSIKEv2LocalPassword_AddString(p *radius.Packet, tag byte, value string) (err error) {
	var a radius.Attribute
	var salt [2]byte
	_, err = rand.Read(salt[:])
	if err != nil {
		return
	}
	a, err = radius.NewTunnelPassword([]byte(value), salt[:], p.Secret, p.Authenticator[:])
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Lancom_AddVendor(p, 19, a)
}

func LCSIKEv2LocalPassword_Get(p *radius.Packet) (tag byte, value []byte) {
	tag, value, _ = LCSIKEv2LocalPassword_Lookup(p)
	return
}

func LCSIKEv2LocalPassword_GetString(p *radius.Packet) (tag byte, value string) {
	tag, value, _ = LCSIKEv2LocalPassword_LookupString(p)
	return
}

func LCSIKEv2LocalPassword_Gets(p *radius.Packet) (tags []byte, values [][]byte, err error) {
	var i []byte
	for _, attr := range _Lancom_GetsVendor(p, 19) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr = attr[1:]
		}
		i, _, err = radius.TunnelPassword(attr, p.Secret, p.Authenticator[:])
		if err != nil {
			return
		}
		values = append(values, i)
		tags = append(tags, tag)
	}
	return
}

func LCSIKEv2LocalPassword_GetStrings(p *radius.Packet) (tags []byte, values []string, err error) {
	var i string
	for _, attr := range _Lancom_GetsVendor(p, 19) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr = attr[1:]
		}
		var up []byte
		up, _, err = radius.TunnelPassword(attr, p.Secret, p.Authenticator[:])
		if err == nil {
			i = string(up)
		}
		if err != nil {
			return
		}
		values = append(values, i)
		tags = append(tags, tag)
	}
	return
}

func LCSIKEv2LocalPassword_Lookup(p *radius.Packet) (tag byte, value []byte, err error) {
	a, ok := _Lancom_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a = a[1:]
	}
	value, _, err = radius.TunnelPassword(a, p.Secret, p.Authenticator[:])
	return
}

func LCSIKEv2LocalPassword_LookupString(p *radius.Packet) (tag byte, value string, err error) {
	a, ok := _Lancom_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a = a[1:]
	}
	var b []byte
	b, _, err = radius.TunnelPassword(a, p.Secret, p.Authenticator[:])
	if err == nil {
		value = string(b)
	}
	return
}

func LCSIKEv2LocalPassword_Set(p *radius.Packet, tag byte, value []byte) (err error) {
	var a radius.Attribute
	var salt [2]byte
	_, err = rand.Read(salt[:])
	if err != nil {
		return
	}
	a, err = radius.NewTunnelPassword(value, salt[:], p.Secret, p.Authenticator[:])
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Lancom_SetVendor(p, 19, a)
}

func LCSIKEv2LocalPassword_SetString(p *radius.Packet, tag byte, value string) (err error) {
	var a radius.Attribute
	var salt [2]byte
	_, err = rand.Read(salt[:])
	if err != nil {
		return
	}
	a, err = radius.NewTunnelPassword([]byte(value), salt[:], p.Secret, p.Authenticator[:])
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Lancom_SetVendor(p, 19, a)
}

func LCSIKEv2LocalPassword_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 19)
}

func LCSIKEv2RemotePassword_Add(p *radius.Packet, tag byte, value []byte) (err error) {
	var a radius.Attribute
	var salt [2]byte
	_, err = rand.Read(salt[:])
	if err != nil {
		return
	}
	a, err = radius.NewTunnelPassword(value, salt[:], p.Secret, p.Authenticator[:])
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Lancom_AddVendor(p, 20, a)
}

func LCSIKEv2RemotePassword_AddString(p *radius.Packet, tag byte, value string) (err error) {
	var a radius.Attribute
	var salt [2]byte
	_, err = rand.Read(salt[:])
	if err != nil {
		return
	}
	a, err = radius.NewTunnelPassword([]byte(value), salt[:], p.Secret, p.Authenticator[:])
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Lancom_AddVendor(p, 20, a)
}

func LCSIKEv2RemotePassword_Get(p *radius.Packet) (tag byte, value []byte) {
	tag, value, _ = LCSIKEv2RemotePassword_Lookup(p)
	return
}

func LCSIKEv2RemotePassword_GetString(p *radius.Packet) (tag byte, value string) {
	tag, value, _ = LCSIKEv2RemotePassword_LookupString(p)
	return
}

func LCSIKEv2RemotePassword_Gets(p *radius.Packet) (tags []byte, values [][]byte, err error) {
	var i []byte
	for _, attr := range _Lancom_GetsVendor(p, 20) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr = attr[1:]
		}
		i, _, err = radius.TunnelPassword(attr, p.Secret, p.Authenticator[:])
		if err != nil {
			return
		}
		values = append(values, i)
		tags = append(tags, tag)
	}
	return
}

func LCSIKEv2RemotePassword_GetStrings(p *radius.Packet) (tags []byte, values []string, err error) {
	var i string
	for _, attr := range _Lancom_GetsVendor(p, 20) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr = attr[1:]
		}
		var up []byte
		up, _, err = radius.TunnelPassword(attr, p.Secret, p.Authenticator[:])
		if err == nil {
			i = string(up)
		}
		if err != nil {
			return
		}
		values = append(values, i)
		tags = append(tags, tag)
	}
	return
}

func LCSIKEv2RemotePassword_Lookup(p *radius.Packet) (tag byte, value []byte, err error) {
	a, ok := _Lancom_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a = a[1:]
	}
	value, _, err = radius.TunnelPassword(a, p.Secret, p.Authenticator[:])
	return
}

func LCSIKEv2RemotePassword_LookupString(p *radius.Packet) (tag byte, value string, err error) {
	a, ok := _Lancom_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a = a[1:]
	}
	var b []byte
	b, _, err = radius.TunnelPassword(a, p.Secret, p.Authenticator[:])
	if err == nil {
		value = string(b)
	}
	return
}

func LCSIKEv2RemotePassword_Set(p *radius.Packet, tag byte, value []byte) (err error) {
	var a radius.Attribute
	var salt [2]byte
	_, err = rand.Read(salt[:])
	if err != nil {
		return
	}
	a, err = radius.NewTunnelPassword(value, salt[:], p.Secret, p.Authenticator[:])
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Lancom_SetVendor(p, 20, a)
}

func LCSIKEv2RemotePassword_SetString(p *radius.Packet, tag byte, value string) (err error) {
	var a radius.Attribute
	var salt [2]byte
	_, err = rand.Read(salt[:])
	if err != nil {
		return
	}
	a, err = radius.NewTunnelPassword([]byte(value), salt[:], p.Secret, p.Authenticator[:])
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Lancom_SetVendor(p, 20, a)
}

func LCSIKEv2RemotePassword_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 20)
}

func LCSDNSServerIPv4Address_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 21, a)
}

func LCSDNSServerIPv4Address_Get(p *radius.Packet) (value net.IP) {
	value, _ = LCSDNSServerIPv4Address_Lookup(p)
	return
}

func LCSDNSServerIPv4Address_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Lancom_GetsVendor(p, 21) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSDNSServerIPv4Address_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Lancom_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func LCSDNSServerIPv4Address_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 21, a)
}

func LCSDNSServerIPv4Address_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 21)
}

func LCSVPNIPv4Rule_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 22, a)
}

func LCSVPNIPv4Rule_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 22, a)
}

func LCSVPNIPv4Rule_Get(p *radius.Packet) (value []byte) {
	value, _ = LCSVPNIPv4Rule_Lookup(p)
	return
}

func LCSVPNIPv4Rule_GetString(p *radius.Packet) (value string) {
	value, _ = LCSVPNIPv4Rule_LookupString(p)
	return
}

func LCSVPNIPv4Rule_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Lancom_GetsVendor(p, 22) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSVPNIPv4Rule_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Lancom_GetsVendor(p, 22) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSVPNIPv4Rule_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Lancom_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LCSVPNIPv4Rule_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Lancom_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LCSVPNIPv4Rule_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 22, a)
}

func LCSVPNIPv4Rule_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 22, a)
}

func LCSVPNIPv4Rule_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 22)
}

func LCSVPNIPv6Rule_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 23, a)
}

func LCSVPNIPv6Rule_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 23, a)
}

func LCSVPNIPv6Rule_Get(p *radius.Packet) (value []byte) {
	value, _ = LCSVPNIPv6Rule_Lookup(p)
	return
}

func LCSVPNIPv6Rule_GetString(p *radius.Packet) (value string) {
	value, _ = LCSVPNIPv6Rule_LookupString(p)
	return
}

func LCSVPNIPv6Rule_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Lancom_GetsVendor(p, 23) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSVPNIPv6Rule_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Lancom_GetsVendor(p, 23) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSVPNIPv6Rule_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Lancom_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LCSVPNIPv6Rule_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Lancom_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LCSVPNIPv6Rule_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 23, a)
}

func LCSVPNIPv6Rule_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 23, a)
}

func LCSVPNIPv6Rule_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 23)
}

type LCSRoutingTag uint32

var LCSRoutingTag_Strings = map[LCSRoutingTag]string{}

func (a LCSRoutingTag) String() string {
	if str, ok := LCSRoutingTag_Strings[a]; ok {
		return str
	}
	return "LCSRoutingTag(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LCSRoutingTag_Add(p *radius.Packet, value LCSRoutingTag) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Lancom_AddVendor(p, 24, a)
}

func LCSRoutingTag_Get(p *radius.Packet) (value LCSRoutingTag) {
	value, _ = LCSRoutingTag_Lookup(p)
	return
}

func LCSRoutingTag_Gets(p *radius.Packet) (values []LCSRoutingTag, err error) {
	var i uint32
	for _, attr := range _Lancom_GetsVendor(p, 24) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LCSRoutingTag(i))
	}
	return
}

func LCSRoutingTag_Lookup(p *radius.Packet) (value LCSRoutingTag, err error) {
	a, ok := _Lancom_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LCSRoutingTag(i)
	return
}

func LCSRoutingTag_Set(p *radius.Packet, value LCSRoutingTag) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Lancom_SetVendor(p, 24, a)
}

func LCSRoutingTag_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 24)
}

func LCSIKEv2IPv4Route_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 25, a)
}

func LCSIKEv2IPv4Route_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 25, a)
}

func LCSIKEv2IPv4Route_Get(p *radius.Packet) (value []byte) {
	value, _ = LCSIKEv2IPv4Route_Lookup(p)
	return
}

func LCSIKEv2IPv4Route_GetString(p *radius.Packet) (value string) {
	value, _ = LCSIKEv2IPv4Route_LookupString(p)
	return
}

func LCSIKEv2IPv4Route_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Lancom_GetsVendor(p, 25) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSIKEv2IPv4Route_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Lancom_GetsVendor(p, 25) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSIKEv2IPv4Route_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Lancom_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LCSIKEv2IPv4Route_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Lancom_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LCSIKEv2IPv4Route_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 25, a)
}

func LCSIKEv2IPv4Route_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 25, a)
}

func LCSIKEv2IPv4Route_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 25)
}

func LCSIKEv2IPv6Route_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 26, a)
}

func LCSIKEv2IPv6Route_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 26, a)
}

func LCSIKEv2IPv6Route_Get(p *radius.Packet) (value []byte) {
	value, _ = LCSIKEv2IPv6Route_Lookup(p)
	return
}

func LCSIKEv2IPv6Route_GetString(p *radius.Packet) (value string) {
	value, _ = LCSIKEv2IPv6Route_LookupString(p)
	return
}

func LCSIKEv2IPv6Route_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Lancom_GetsVendor(p, 26) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSIKEv2IPv6Route_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Lancom_GetsVendor(p, 26) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSIKEv2IPv6Route_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Lancom_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LCSIKEv2IPv6Route_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Lancom_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LCSIKEv2IPv6Route_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 26, a)
}

func LCSIKEv2IPv6Route_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 26, a)
}

func LCSIKEv2IPv6Route_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 26)
}

func LCSIKEv2DNSDomain_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 27, a)
}

func LCSIKEv2DNSDomain_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 27, a)
}

func LCSIKEv2DNSDomain_Get(p *radius.Packet) (value []byte) {
	value, _ = LCSIKEv2DNSDomain_Lookup(p)
	return
}

func LCSIKEv2DNSDomain_GetString(p *radius.Packet) (value string) {
	value, _ = LCSIKEv2DNSDomain_LookupString(p)
	return
}

func LCSIKEv2DNSDomain_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Lancom_GetsVendor(p, 27) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSIKEv2DNSDomain_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Lancom_GetsVendor(p, 27) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSIKEv2DNSDomain_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Lancom_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LCSIKEv2DNSDomain_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Lancom_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LCSIKEv2DNSDomain_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 27, a)
}

func LCSIKEv2DNSDomain_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 27, a)
}

func LCSIKEv2DNSDomain_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 27)
}

func LCSLoadBalancer_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 28, a)
}

func LCSLoadBalancer_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_AddVendor(p, 28, a)
}

func LCSLoadBalancer_Get(p *radius.Packet) (value []byte) {
	value, _ = LCSLoadBalancer_Lookup(p)
	return
}

func LCSLoadBalancer_GetString(p *radius.Packet) (value string) {
	value, _ = LCSLoadBalancer_LookupString(p)
	return
}

func LCSLoadBalancer_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Lancom_GetsVendor(p, 28) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSLoadBalancer_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Lancom_GetsVendor(p, 28) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LCSLoadBalancer_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Lancom_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LCSLoadBalancer_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Lancom_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LCSLoadBalancer_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 28, a)
}

func LCSLoadBalancer_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Lancom_SetVendor(p, 28, a)
}

func LCSLoadBalancer_Del(p *radius.Packet) {
	_Lancom_DelVendor(p, 28)
}
