// Code generated by radius-dict-gen. DO NOT EDIT.

package alcatel

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Alcatel_VendorID = 3041
)

func _Alcatel_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Alcatel_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Alcatel_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Alcatel_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Alcatel_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Alcatel_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Alcatel_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Alcatel_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Alcatel_AddVendor(p, typ, attr)
}

func _Alcatel_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Alcatel_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func AATClientPrimaryDNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 5, a)
}

func AATClientPrimaryDNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = AATClientPrimaryDNS_Lookup(p)
	return
}

func AATClientPrimaryDNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Alcatel_GetsVendor(p, 5) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATClientPrimaryDNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Alcatel_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AATClientPrimaryDNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 5, a)
}

func AATClientPrimaryDNS_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 5)
}

func AATClientPrimaryWINSNBNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 6, a)
}

func AATClientPrimaryWINSNBNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = AATClientPrimaryWINSNBNS_Lookup(p)
	return
}

func AATClientPrimaryWINSNBNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Alcatel_GetsVendor(p, 6) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATClientPrimaryWINSNBNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Alcatel_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AATClientPrimaryWINSNBNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 6, a)
}

func AATClientPrimaryWINSNBNS_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 6)
}

func AATClientSecondaryWINSNBNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 7, a)
}

func AATClientSecondaryWINSNBNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = AATClientSecondaryWINSNBNS_Lookup(p)
	return
}

func AATClientSecondaryWINSNBNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Alcatel_GetsVendor(p, 7) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATClientSecondaryWINSNBNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Alcatel_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AATClientSecondaryWINSNBNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 7, a)
}

func AATClientSecondaryWINSNBNS_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 7)
}

func AATClientSecondaryDNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 8, a)
}

func AATClientSecondaryDNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = AATClientSecondaryDNS_Lookup(p)
	return
}

func AATClientSecondaryDNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Alcatel_GetsVendor(p, 8) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATClientSecondaryDNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Alcatel_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AATClientSecondaryDNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 8, a)
}

func AATClientSecondaryDNS_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 8)
}

func AATPPPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 9, a)
}

func AATPPPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = AATPPPAddress_Lookup(p)
	return
}

func AATPPPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Alcatel_GetsVendor(p, 9) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATPPPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Alcatel_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AATPPPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 9, a)
}

func AATPPPAddress_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 9)
}

func AATPPPNetmask_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 10, a)
}

func AATPPPNetmask_Get(p *radius.Packet) (value net.IP) {
	value, _ = AATPPPNetmask_Lookup(p)
	return
}

func AATPPPNetmask_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Alcatel_GetsVendor(p, 10) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATPPPNetmask_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Alcatel_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AATPPPNetmask_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 10, a)
}

func AATPPPNetmask_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 10)
}

func AATPrimaryHomeAgent_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 12, a)
}

func AATPrimaryHomeAgent_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 12, a)
}

func AATPrimaryHomeAgent_Get(p *radius.Packet) (value []byte) {
	value, _ = AATPrimaryHomeAgent_Lookup(p)
	return
}

func AATPrimaryHomeAgent_GetString(p *radius.Packet) (value string) {
	value, _ = AATPrimaryHomeAgent_LookupString(p)
	return
}

func AATPrimaryHomeAgent_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATPrimaryHomeAgent_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATPrimaryHomeAgent_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AATPrimaryHomeAgent_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AATPrimaryHomeAgent_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 12, a)
}

func AATPrimaryHomeAgent_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 12, a)
}

func AATPrimaryHomeAgent_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 12)
}

func AATSecondaryHomeAgent_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 13, a)
}

func AATSecondaryHomeAgent_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 13, a)
}

func AATSecondaryHomeAgent_Get(p *radius.Packet) (value []byte) {
	value, _ = AATSecondaryHomeAgent_Lookup(p)
	return
}

func AATSecondaryHomeAgent_GetString(p *radius.Packet) (value string) {
	value, _ = AATSecondaryHomeAgent_LookupString(p)
	return
}

func AATSecondaryHomeAgent_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 13) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATSecondaryHomeAgent_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 13) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATSecondaryHomeAgent_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AATSecondaryHomeAgent_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AATSecondaryHomeAgent_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 13, a)
}

func AATSecondaryHomeAgent_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 13, a)
}

func AATSecondaryHomeAgent_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 13)
}

func AATHomeAgentPassword_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 14, a)
}

func AATHomeAgentPassword_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 14, a)
}

func AATHomeAgentPassword_Get(p *radius.Packet) (value []byte) {
	value, _ = AATHomeAgentPassword_Lookup(p)
	return
}

func AATHomeAgentPassword_GetString(p *radius.Packet) (value string) {
	value, _ = AATHomeAgentPassword_LookupString(p)
	return
}

func AATHomeAgentPassword_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 14) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATHomeAgentPassword_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 14) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATHomeAgentPassword_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AATHomeAgentPassword_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AATHomeAgentPassword_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 14, a)
}

func AATHomeAgentPassword_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 14, a)
}

func AATHomeAgentPassword_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 14)
}

func AATHomeNetworkName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 15, a)
}

func AATHomeNetworkName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 15, a)
}

func AATHomeNetworkName_Get(p *radius.Packet) (value []byte) {
	value, _ = AATHomeNetworkName_Lookup(p)
	return
}

func AATHomeNetworkName_GetString(p *radius.Packet) (value string) {
	value, _ = AATHomeNetworkName_LookupString(p)
	return
}

func AATHomeNetworkName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 15) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATHomeNetworkName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 15) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATHomeNetworkName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AATHomeNetworkName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AATHomeNetworkName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 15, a)
}

func AATHomeNetworkName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 15, a)
}

func AATHomeNetworkName_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 15)
}

type AATHomeAgentUDPPort uint32

var AATHomeAgentUDPPort_Strings = map[AATHomeAgentUDPPort]string{}

func (a AATHomeAgentUDPPort) String() string {
	if str, ok := AATHomeAgentUDPPort_Strings[a]; ok {
		return str
	}
	return "AATHomeAgentUDPPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AATHomeAgentUDPPort_Add(p *radius.Packet, value AATHomeAgentUDPPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 16, a)
}

func AATHomeAgentUDPPort_Get(p *radius.Packet) (value AATHomeAgentUDPPort) {
	value, _ = AATHomeAgentUDPPort_Lookup(p)
	return
}

func AATHomeAgentUDPPort_Gets(p *radius.Packet) (values []AATHomeAgentUDPPort, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 16) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AATHomeAgentUDPPort(i))
	}
	return
}

func AATHomeAgentUDPPort_Lookup(p *radius.Packet) (value AATHomeAgentUDPPort, err error) {
	a, ok := _Alcatel_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AATHomeAgentUDPPort(i)
	return
}

func AATHomeAgentUDPPort_Set(p *radius.Packet, value AATHomeAgentUDPPort) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 16, a)
}

func AATHomeAgentUDPPort_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 16)
}

func AATIPDirect_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 17, a)
}

func AATIPDirect_Get(p *radius.Packet) (value net.IP) {
	value, _ = AATIPDirect_Lookup(p)
	return
}

func AATIPDirect_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Alcatel_GetsVendor(p, 17) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATIPDirect_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Alcatel_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AATIPDirect_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 17, a)
}

func AATIPDirect_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 17)
}

type AATFRDirect uint32

const (
	AATFRDirect_Value_No  AATFRDirect = 0
	AATFRDirect_Value_Yes AATFRDirect = 1
)

var AATFRDirect_Strings = map[AATFRDirect]string{
	AATFRDirect_Value_No:  "No",
	AATFRDirect_Value_Yes: "Yes",
}

func (a AATFRDirect) String() string {
	if str, ok := AATFRDirect_Strings[a]; ok {
		return str
	}
	return "AATFRDirect(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AATFRDirect_Add(p *radius.Packet, value AATFRDirect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 18, a)
}

func AATFRDirect_Get(p *radius.Packet) (value AATFRDirect) {
	value, _ = AATFRDirect_Lookup(p)
	return
}

func AATFRDirect_Gets(p *radius.Packet) (values []AATFRDirect, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 18) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AATFRDirect(i))
	}
	return
}

func AATFRDirect_Lookup(p *radius.Packet) (value AATFRDirect, err error) {
	a, ok := _Alcatel_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AATFRDirect(i)
	return
}

func AATFRDirect_Set(p *radius.Packet, value AATFRDirect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 18, a)
}

func AATFRDirect_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 18)
}

func AATFRDirectProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 19, a)
}

func AATFRDirectProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 19, a)
}

func AATFRDirectProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = AATFRDirectProfile_Lookup(p)
	return
}

func AATFRDirectProfile_GetString(p *radius.Packet) (value string) {
	value, _ = AATFRDirectProfile_LookupString(p)
	return
}

func AATFRDirectProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 19) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATFRDirectProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 19) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATFRDirectProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AATFRDirectProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AATFRDirectProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 19, a)
}

func AATFRDirectProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 19, a)
}

func AATFRDirectProfile_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 19)
}

type AATFRDirectDLCI uint32

var AATFRDirectDLCI_Strings = map[AATFRDirectDLCI]string{}

func (a AATFRDirectDLCI) String() string {
	if str, ok := AATFRDirectDLCI_Strings[a]; ok {
		return str
	}
	return "AATFRDirectDLCI(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AATFRDirectDLCI_Add(p *radius.Packet, value AATFRDirectDLCI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 20, a)
}

func AATFRDirectDLCI_Get(p *radius.Packet) (value AATFRDirectDLCI) {
	value, _ = AATFRDirectDLCI_Lookup(p)
	return
}

func AATFRDirectDLCI_Gets(p *radius.Packet) (values []AATFRDirectDLCI, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 20) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AATFRDirectDLCI(i))
	}
	return
}

func AATFRDirectDLCI_Lookup(p *radius.Packet) (value AATFRDirectDLCI, err error) {
	a, ok := _Alcatel_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AATFRDirectDLCI(i)
	return
}

func AATFRDirectDLCI_Set(p *radius.Packet, value AATFRDirectDLCI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 20, a)
}

func AATFRDirectDLCI_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 20)
}

func AATATMDirect_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 21, a)
}

func AATATMDirect_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 21, a)
}

func AATATMDirect_Get(p *radius.Packet) (value []byte) {
	value, _ = AATATMDirect_Lookup(p)
	return
}

func AATATMDirect_GetString(p *radius.Packet) (value string) {
	value, _ = AATATMDirect_LookupString(p)
	return
}

func AATATMDirect_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 21) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATATMDirect_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 21) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATATMDirect_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AATATMDirect_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AATATMDirect_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 21, a)
}

func AATATMDirect_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 21, a)
}

func AATATMDirect_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 21)
}

type AATIPTOS uint32

const (
	AATIPTOS_Value_IPTOSNormal      AATIPTOS = 0
	AATIPTOS_Value_IPTOSDisabled    AATIPTOS = 1
	AATIPTOS_Value_IPTOSCost        AATIPTOS = 2
	AATIPTOS_Value_IPTOSReliability AATIPTOS = 4
	AATIPTOS_Value_IPTOSThroughput  AATIPTOS = 8
	AATIPTOS_Value_IPTOSLatency     AATIPTOS = 16
)

var AATIPTOS_Strings = map[AATIPTOS]string{
	AATIPTOS_Value_IPTOSNormal:      "IP-TOS-Normal",
	AATIPTOS_Value_IPTOSDisabled:    "IP-TOS-Disabled",
	AATIPTOS_Value_IPTOSCost:        "IP-TOS-Cost",
	AATIPTOS_Value_IPTOSReliability: "IP-TOS-Reliability",
	AATIPTOS_Value_IPTOSThroughput:  "IP-TOS-Throughput",
	AATIPTOS_Value_IPTOSLatency:     "IP-TOS-Latency",
}

func (a AATIPTOS) String() string {
	if str, ok := AATIPTOS_Strings[a]; ok {
		return str
	}
	return "AATIPTOS(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AATIPTOS_Add(p *radius.Packet, value AATIPTOS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 22, a)
}

func AATIPTOS_Get(p *radius.Packet) (value AATIPTOS) {
	value, _ = AATIPTOS_Lookup(p)
	return
}

func AATIPTOS_Gets(p *radius.Packet) (values []AATIPTOS, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 22) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AATIPTOS(i))
	}
	return
}

func AATIPTOS_Lookup(p *radius.Packet) (value AATIPTOS, err error) {
	a, ok := _Alcatel_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AATIPTOS(i)
	return
}

func AATIPTOS_Set(p *radius.Packet, value AATIPTOS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 22, a)
}

func AATIPTOS_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 22)
}

type AATIPTOSPrecedence uint32

const (
	AATIPTOSPrecedence_Value_IPTOSPrecedencePriNormal AATIPTOSPrecedence = 0
	AATIPTOSPrecedence_Value_IPTOSPrecedencePriOne    AATIPTOSPrecedence = 32
	AATIPTOSPrecedence_Value_IPTOSPrecedencePriTwo    AATIPTOSPrecedence = 64
	AATIPTOSPrecedence_Value_IPTOSPrecedencePriThree  AATIPTOSPrecedence = 96
	AATIPTOSPrecedence_Value_IPTOSPrecedencePriFour   AATIPTOSPrecedence = 128
	AATIPTOSPrecedence_Value_IPTOSPrecedencePriFive   AATIPTOSPrecedence = 160
	AATIPTOSPrecedence_Value_IPTOSPrecedencePriSix    AATIPTOSPrecedence = 192
	AATIPTOSPrecedence_Value_IPTOSPrecedencePriSeven  AATIPTOSPrecedence = 224
)

var AATIPTOSPrecedence_Strings = map[AATIPTOSPrecedence]string{
	AATIPTOSPrecedence_Value_IPTOSPrecedencePriNormal: "IP-TOS-Precedence-Pri-Normal",
	AATIPTOSPrecedence_Value_IPTOSPrecedencePriOne:    "IP-TOS-Precedence-Pri-One",
	AATIPTOSPrecedence_Value_IPTOSPrecedencePriTwo:    "IP-TOS-Precedence-Pri-Two",
	AATIPTOSPrecedence_Value_IPTOSPrecedencePriThree:  "IP-TOS-Precedence-Pri-Three",
	AATIPTOSPrecedence_Value_IPTOSPrecedencePriFour:   "IP-TOS-Precedence-Pri-Four",
	AATIPTOSPrecedence_Value_IPTOSPrecedencePriFive:   "IP-TOS-Precedence-Pri-Five",
	AATIPTOSPrecedence_Value_IPTOSPrecedencePriSix:    "IP-TOS-Precedence-Pri-Six",
	AATIPTOSPrecedence_Value_IPTOSPrecedencePriSeven:  "IP-TOS-Precedence-Pri-Seven",
}

func (a AATIPTOSPrecedence) String() string {
	if str, ok := AATIPTOSPrecedence_Strings[a]; ok {
		return str
	}
	return "AATIPTOSPrecedence(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AATIPTOSPrecedence_Add(p *radius.Packet, value AATIPTOSPrecedence) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 23, a)
}

func AATIPTOSPrecedence_Get(p *radius.Packet) (value AATIPTOSPrecedence) {
	value, _ = AATIPTOSPrecedence_Lookup(p)
	return
}

func AATIPTOSPrecedence_Gets(p *radius.Packet) (values []AATIPTOSPrecedence, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 23) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AATIPTOSPrecedence(i))
	}
	return
}

func AATIPTOSPrecedence_Lookup(p *radius.Packet) (value AATIPTOSPrecedence, err error) {
	a, ok := _Alcatel_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AATIPTOSPrecedence(i)
	return
}

func AATIPTOSPrecedence_Set(p *radius.Packet, value AATIPTOSPrecedence) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 23, a)
}

func AATIPTOSPrecedence_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 23)
}

type AATIPTOSApplyTo uint32

const (
	AATIPTOSApplyTo_Value_IPTOSApplyToIncoming AATIPTOSApplyTo = 1024
	AATIPTOSApplyTo_Value_IPTOSApplyToOutgoing AATIPTOSApplyTo = 2048
	AATIPTOSApplyTo_Value_IPTOSApplyToBoth     AATIPTOSApplyTo = 3072
)

var AATIPTOSApplyTo_Strings = map[AATIPTOSApplyTo]string{
	AATIPTOSApplyTo_Value_IPTOSApplyToIncoming: "IP-TOS-Apply-To-Incoming",
	AATIPTOSApplyTo_Value_IPTOSApplyToOutgoing: "IP-TOS-Apply-To-Outgoing",
	AATIPTOSApplyTo_Value_IPTOSApplyToBoth:     "IP-TOS-Apply-To-Both",
}

func (a AATIPTOSApplyTo) String() string {
	if str, ok := AATIPTOSApplyTo_Strings[a]; ok {
		return str
	}
	return "AATIPTOSApplyTo(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AATIPTOSApplyTo_Add(p *radius.Packet, value AATIPTOSApplyTo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 24, a)
}

func AATIPTOSApplyTo_Get(p *radius.Packet) (value AATIPTOSApplyTo) {
	value, _ = AATIPTOSApplyTo_Lookup(p)
	return
}

func AATIPTOSApplyTo_Gets(p *radius.Packet) (values []AATIPTOSApplyTo, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 24) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AATIPTOSApplyTo(i))
	}
	return
}

func AATIPTOSApplyTo_Lookup(p *radius.Packet) (value AATIPTOSApplyTo, err error) {
	a, ok := _Alcatel_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AATIPTOSApplyTo(i)
	return
}

func AATIPTOSApplyTo_Set(p *radius.Packet, value AATIPTOSApplyTo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 24, a)
}

func AATIPTOSApplyTo_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 24)
}

type AATMCastClient uint32

const (
	AATMCastClient_Value_MulticastNo  AATMCastClient = 0
	AATMCastClient_Value_MulticastYes AATMCastClient = 1
)

var AATMCastClient_Strings = map[AATMCastClient]string{
	AATMCastClient_Value_MulticastNo:  "Multicast-No",
	AATMCastClient_Value_MulticastYes: "Multicast-Yes",
}

func (a AATMCastClient) String() string {
	if str, ok := AATMCastClient_Strings[a]; ok {
		return str
	}
	return "AATMCastClient(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AATMCastClient_Add(p *radius.Packet, value AATMCastClient) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 27, a)
}

func AATMCastClient_Get(p *radius.Packet) (value AATMCastClient) {
	value, _ = AATMCastClient_Lookup(p)
	return
}

func AATMCastClient_Gets(p *radius.Packet) (values []AATMCastClient, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 27) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AATMCastClient(i))
	}
	return
}

func AATMCastClient_Lookup(p *radius.Packet) (value AATMCastClient, err error) {
	a, ok := _Alcatel_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AATMCastClient(i)
	return
}

func AATMCastClient_Set(p *radius.Packet, value AATMCastClient) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 27, a)
}

func AATMCastClient_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 27)
}

type AATModemPortNo uint32

var AATModemPortNo_Strings = map[AATModemPortNo]string{}

func (a AATModemPortNo) String() string {
	if str, ok := AATModemPortNo_Strings[a]; ok {
		return str
	}
	return "AATModemPortNo(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AATModemPortNo_Add(p *radius.Packet, value AATModemPortNo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 28, a)
}

func AATModemPortNo_Get(p *radius.Packet) (value AATModemPortNo) {
	value, _ = AATModemPortNo_Lookup(p)
	return
}

func AATModemPortNo_Gets(p *radius.Packet) (values []AATModemPortNo, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 28) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AATModemPortNo(i))
	}
	return
}

func AATModemPortNo_Lookup(p *radius.Packet) (value AATModemPortNo, err error) {
	a, ok := _Alcatel_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AATModemPortNo(i)
	return
}

func AATModemPortNo_Set(p *radius.Packet, value AATModemPortNo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 28, a)
}

func AATModemPortNo_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 28)
}

type AATModemSlotNo uint32

var AATModemSlotNo_Strings = map[AATModemSlotNo]string{}

func (a AATModemSlotNo) String() string {
	if str, ok := AATModemSlotNo_Strings[a]; ok {
		return str
	}
	return "AATModemSlotNo(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AATModemSlotNo_Add(p *radius.Packet, value AATModemSlotNo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 29, a)
}

func AATModemSlotNo_Get(p *radius.Packet) (value AATModemSlotNo) {
	value, _ = AATModemSlotNo_Lookup(p)
	return
}

func AATModemSlotNo_Gets(p *radius.Packet) (values []AATModemSlotNo, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 29) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AATModemSlotNo(i))
	}
	return
}

func AATModemSlotNo_Lookup(p *radius.Packet) (value AATModemSlotNo, err error) {
	a, ok := _Alcatel_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AATModemSlotNo(i)
	return
}

func AATModemSlotNo_Set(p *radius.Packet, value AATModemSlotNo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 29, a)
}

func AATModemSlotNo_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 29)
}

type AATModemShelfNo uint32

var AATModemShelfNo_Strings = map[AATModemShelfNo]string{}

func (a AATModemShelfNo) String() string {
	if str, ok := AATModemShelfNo_Strings[a]; ok {
		return str
	}
	return "AATModemShelfNo(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AATModemShelfNo_Add(p *radius.Packet, value AATModemShelfNo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 30, a)
}

func AATModemShelfNo_Get(p *radius.Packet) (value AATModemShelfNo) {
	value, _ = AATModemShelfNo_Lookup(p)
	return
}

func AATModemShelfNo_Gets(p *radius.Packet) (values []AATModemShelfNo, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 30) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AATModemShelfNo(i))
	}
	return
}

func AATModemShelfNo_Lookup(p *radius.Packet) (value AATModemShelfNo, err error) {
	a, ok := _Alcatel_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AATModemShelfNo(i)
	return
}

func AATModemShelfNo_Set(p *radius.Packet, value AATModemShelfNo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 30, a)
}

func AATModemShelfNo_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 30)
}

func AATFilter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 60, a)
}

func AATFilter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 60, a)
}

func AATFilter_Get(p *radius.Packet) (value []byte) {
	value, _ = AATFilter_Lookup(p)
	return
}

func AATFilter_GetString(p *radius.Packet) (value string) {
	value, _ = AATFilter_LookupString(p)
	return
}

func AATFilter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 60) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATFilter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 60) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATFilter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AATFilter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AATFilter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 60, a)
}

func AATFilter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 60, a)
}

func AATFilter_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 60)
}

func AATVrouterName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 61, a)
}

func AATVrouterName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 61, a)
}

func AATVrouterName_Get(p *radius.Packet) (value []byte) {
	value, _ = AATVrouterName_Lookup(p)
	return
}

func AATVrouterName_GetString(p *radius.Packet) (value string) {
	value, _ = AATVrouterName_LookupString(p)
	return
}

func AATVrouterName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 61) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATVrouterName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 61) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATVrouterName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AATVrouterName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AATVrouterName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 61, a)
}

func AATVrouterName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 61, a)
}

func AATVrouterName_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 61)
}

type AATRequireAuth uint32

const (
	AATRequireAuth_Value_NotRequireAuth AATRequireAuth = 0
	AATRequireAuth_Value_RequireAuth    AATRequireAuth = 1
)

var AATRequireAuth_Strings = map[AATRequireAuth]string{
	AATRequireAuth_Value_NotRequireAuth: "Not-Require-Auth",
	AATRequireAuth_Value_RequireAuth:    "Require-Auth",
}

func (a AATRequireAuth) String() string {
	if str, ok := AATRequireAuth_Strings[a]; ok {
		return str
	}
	return "AATRequireAuth(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AATRequireAuth_Add(p *radius.Packet, value AATRequireAuth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 62, a)
}

func AATRequireAuth_Get(p *radius.Packet) (value AATRequireAuth) {
	value, _ = AATRequireAuth_Lookup(p)
	return
}

func AATRequireAuth_Gets(p *radius.Packet) (values []AATRequireAuth, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 62) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AATRequireAuth(i))
	}
	return
}

func AATRequireAuth_Lookup(p *radius.Packet) (value AATRequireAuth, err error) {
	a, ok := _Alcatel_LookupVendor(p, 62)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AATRequireAuth(i)
	return
}

func AATRequireAuth_Set(p *radius.Packet, value AATRequireAuth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 62, a)
}

func AATRequireAuth_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 62)
}

func AATIPPoolDefinition_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 63, a)
}

func AATIPPoolDefinition_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 63, a)
}

func AATIPPoolDefinition_Get(p *radius.Packet) (value []byte) {
	value, _ = AATIPPoolDefinition_Lookup(p)
	return
}

func AATIPPoolDefinition_GetString(p *radius.Packet) (value string) {
	value, _ = AATIPPoolDefinition_LookupString(p)
	return
}

func AATIPPoolDefinition_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 63) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATIPPoolDefinition_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 63) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATIPPoolDefinition_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AATIPPoolDefinition_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AATIPPoolDefinition_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 63, a)
}

func AATIPPoolDefinition_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 63, a)
}

func AATIPPoolDefinition_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 63)
}

type AATAssignIPPool uint32

var AATAssignIPPool_Strings = map[AATAssignIPPool]string{}

func (a AATAssignIPPool) String() string {
	if str, ok := AATAssignIPPool_Strings[a]; ok {
		return str
	}
	return "AATAssignIPPool(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AATAssignIPPool_Add(p *radius.Packet, value AATAssignIPPool) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 64, a)
}

func AATAssignIPPool_Get(p *radius.Packet) (value AATAssignIPPool) {
	value, _ = AATAssignIPPool_Lookup(p)
	return
}

func AATAssignIPPool_Gets(p *radius.Packet) (values []AATAssignIPPool, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 64) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AATAssignIPPool(i))
	}
	return
}

func AATAssignIPPool_Lookup(p *radius.Packet) (value AATAssignIPPool, err error) {
	a, ok := _Alcatel_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AATAssignIPPool(i)
	return
}

func AATAssignIPPool_Set(p *radius.Packet, value AATAssignIPPool) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 64, a)
}

func AATAssignIPPool_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 64)
}

func AATDataFilter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 65, a)
}

func AATDataFilter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 65, a)
}

func AATDataFilter_Get(p *radius.Packet) (value []byte) {
	value, _ = AATDataFilter_Lookup(p)
	return
}

func AATDataFilter_GetString(p *radius.Packet) (value string) {
	value, _ = AATDataFilter_LookupString(p)
	return
}

func AATDataFilter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 65) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATDataFilter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 65) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATDataFilter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AATDataFilter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AATDataFilter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 65, a)
}

func AATDataFilter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 65, a)
}

func AATDataFilter_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 65)
}

type AATSourceIPCheck uint32

const (
	AATSourceIPCheck_Value_SourceIPCheckNo  AATSourceIPCheck = 0
	AATSourceIPCheck_Value_SourceIPCheckYes AATSourceIPCheck = 1
)

var AATSourceIPCheck_Strings = map[AATSourceIPCheck]string{
	AATSourceIPCheck_Value_SourceIPCheckNo:  "Source-IP-Check-No",
	AATSourceIPCheck_Value_SourceIPCheckYes: "Source-IP-Check-Yes",
}

func (a AATSourceIPCheck) String() string {
	if str, ok := AATSourceIPCheck_Strings[a]; ok {
		return str
	}
	return "AATSourceIPCheck(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AATSourceIPCheck_Add(p *radius.Packet, value AATSourceIPCheck) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 66, a)
}

func AATSourceIPCheck_Get(p *radius.Packet) (value AATSourceIPCheck) {
	value, _ = AATSourceIPCheck_Lookup(p)
	return
}

func AATSourceIPCheck_Gets(p *radius.Packet) (values []AATSourceIPCheck, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 66) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AATSourceIPCheck(i))
	}
	return
}

func AATSourceIPCheck_Lookup(p *radius.Packet) (value AATSourceIPCheck, err error) {
	a, ok := _Alcatel_LookupVendor(p, 66)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AATSourceIPCheck(i)
	return
}

func AATSourceIPCheck_Set(p *radius.Packet, value AATSourceIPCheck) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 66, a)
}

func AATSourceIPCheck_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 66)
}

func AATModemAnswerString_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 67, a)
}

func AATModemAnswerString_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 67, a)
}

func AATModemAnswerString_Get(p *radius.Packet) (value []byte) {
	value, _ = AATModemAnswerString_Lookup(p)
	return
}

func AATModemAnswerString_GetString(p *radius.Packet) (value string) {
	value, _ = AATModemAnswerString_LookupString(p)
	return
}

func AATModemAnswerString_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 67) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATModemAnswerString_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 67) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATModemAnswerString_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 67)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AATModemAnswerString_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 67)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AATModemAnswerString_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 67, a)
}

func AATModemAnswerString_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 67, a)
}

func AATModemAnswerString_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 67)
}

type AATAuthType uint32

const (
	AATAuthType_Value_AATAuthNone    AATAuthType = 0
	AATAuthType_Value_AATAuthDefault AATAuthType = 1
	AATAuthType_Value_AATAuthAny     AATAuthType = 2
	AATAuthType_Value_AATAuthPAP     AATAuthType = 3
	AATAuthType_Value_AATAuthCHAP    AATAuthType = 4
	AATAuthType_Value_AATAuthMSCHAP  AATAuthType = 5
)

var AATAuthType_Strings = map[AATAuthType]string{
	AATAuthType_Value_AATAuthNone:    "AAT-Auth-None",
	AATAuthType_Value_AATAuthDefault: "AAT-Auth-Default",
	AATAuthType_Value_AATAuthAny:     "AAT-Auth-Any",
	AATAuthType_Value_AATAuthPAP:     "AAT-Auth-PAP",
	AATAuthType_Value_AATAuthCHAP:    "AAT-Auth-CHAP",
	AATAuthType_Value_AATAuthMSCHAP:  "AAT-Auth-MS-CHAP",
}

func (a AATAuthType) String() string {
	if str, ok := AATAuthType_Strings[a]; ok {
		return str
	}
	return "AATAuthType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AATAuthType_Add(p *radius.Packet, value AATAuthType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 68, a)
}

func AATAuthType_Get(p *radius.Packet) (value AATAuthType) {
	value, _ = AATAuthType_Lookup(p)
	return
}

func AATAuthType_Gets(p *radius.Packet) (values []AATAuthType, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 68) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AATAuthType(i))
	}
	return
}

func AATAuthType_Lookup(p *radius.Packet) (value AATAuthType, err error) {
	a, ok := _Alcatel_LookupVendor(p, 68)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AATAuthType(i)
	return
}

func AATAuthType_Set(p *radius.Packet, value AATAuthType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 68, a)
}

func AATAuthType_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 68)
}

type AATQos uint32

var AATQos_Strings = map[AATQos]string{}

func (a AATQos) String() string {
	if str, ok := AATQos_Strings[a]; ok {
		return str
	}
	return "AATQos(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AATQos_Add(p *radius.Packet, value AATQos) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 70, a)
}

func AATQos_Get(p *radius.Packet) (value AATQos) {
	value, _ = AATQos_Lookup(p)
	return
}

func AATQos_Gets(p *radius.Packet) (values []AATQos, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 70) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AATQos(i))
	}
	return
}

func AATQos_Lookup(p *radius.Packet) (value AATQos, err error) {
	a, ok := _Alcatel_LookupVendor(p, 70)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AATQos(i)
	return
}

func AATQos_Set(p *radius.Packet, value AATQos) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 70, a)
}

func AATQos_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 70)
}

type AATQoa uint32

var AATQoa_Strings = map[AATQoa]string{}

func (a AATQoa) String() string {
	if str, ok := AATQoa_Strings[a]; ok {
		return str
	}
	return "AATQoa(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AATQoa_Add(p *radius.Packet, value AATQoa) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 71, a)
}

func AATQoa_Get(p *radius.Packet) (value AATQoa) {
	value, _ = AATQoa_Lookup(p)
	return
}

func AATQoa_Gets(p *radius.Packet) (values []AATQoa, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 71) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AATQoa(i))
	}
	return
}

func AATQoa_Lookup(p *radius.Packet) (value AATQoa, err error) {
	a, ok := _Alcatel_LookupVendor(p, 71)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AATQoa(i)
	return
}

func AATQoa_Set(p *radius.Packet, value AATQoa) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 71, a)
}

func AATQoa_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 71)
}

type AATClientAssignDNS uint32

const (
	AATClientAssignDNS_Value_DNSAssignNo  AATClientAssignDNS = 0
	AATClientAssignDNS_Value_DNSAssignYes AATClientAssignDNS = 1
)

var AATClientAssignDNS_Strings = map[AATClientAssignDNS]string{
	AATClientAssignDNS_Value_DNSAssignNo:  "DNS-Assign-No",
	AATClientAssignDNS_Value_DNSAssignYes: "DNS-Assign-Yes",
}

func (a AATClientAssignDNS) String() string {
	if str, ok := AATClientAssignDNS_Strings[a]; ok {
		return str
	}
	return "AATClientAssignDNS(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AATClientAssignDNS_Add(p *radius.Packet, value AATClientAssignDNS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 72, a)
}

func AATClientAssignDNS_Get(p *radius.Packet) (value AATClientAssignDNS) {
	value, _ = AATClientAssignDNS_Lookup(p)
	return
}

func AATClientAssignDNS_Gets(p *radius.Packet) (values []AATClientAssignDNS, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 72) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AATClientAssignDNS(i))
	}
	return
}

func AATClientAssignDNS_Lookup(p *radius.Packet) (value AATClientAssignDNS, err error) {
	a, ok := _Alcatel_LookupVendor(p, 72)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AATClientAssignDNS(i)
	return
}

func AATClientAssignDNS_Set(p *radius.Packet, value AATClientAssignDNS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 72, a)
}

func AATClientAssignDNS_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 72)
}

type AATATMVPI uint32

var AATATMVPI_Strings = map[AATATMVPI]string{}

func (a AATATMVPI) String() string {
	if str, ok := AATATMVPI_Strings[a]; ok {
		return str
	}
	return "AATATMVPI(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AATATMVPI_Add(p *radius.Packet, value AATATMVPI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 128, a)
}

func AATATMVPI_Get(p *radius.Packet) (value AATATMVPI) {
	value, _ = AATATMVPI_Lookup(p)
	return
}

func AATATMVPI_Gets(p *radius.Packet) (values []AATATMVPI, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 128) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AATATMVPI(i))
	}
	return
}

func AATATMVPI_Lookup(p *radius.Packet) (value AATATMVPI, err error) {
	a, ok := _Alcatel_LookupVendor(p, 128)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AATATMVPI(i)
	return
}

func AATATMVPI_Set(p *radius.Packet, value AATATMVPI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 128, a)
}

func AATATMVPI_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 128)
}

type AATATMVCI uint32

var AATATMVCI_Strings = map[AATATMVCI]string{}

func (a AATATMVCI) String() string {
	if str, ok := AATATMVCI_Strings[a]; ok {
		return str
	}
	return "AATATMVCI(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AATATMVCI_Add(p *radius.Packet, value AATATMVCI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 129, a)
}

func AATATMVCI_Get(p *radius.Packet) (value AATATMVCI) {
	value, _ = AATATMVCI_Lookup(p)
	return
}

func AATATMVCI_Gets(p *radius.Packet) (values []AATATMVCI, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 129) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AATATMVCI(i))
	}
	return
}

func AATATMVCI_Lookup(p *radius.Packet) (value AATATMVCI, err error) {
	a, ok := _Alcatel_LookupVendor(p, 129)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AATATMVCI(i)
	return
}

func AATATMVCI_Set(p *radius.Packet, value AATATMVCI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 129, a)
}

func AATATMVCI_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 129)
}

type AATInputOctetsDiff uint32

var AATInputOctetsDiff_Strings = map[AATInputOctetsDiff]string{}

func (a AATInputOctetsDiff) String() string {
	if str, ok := AATInputOctetsDiff_Strings[a]; ok {
		return str
	}
	return "AATInputOctetsDiff(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AATInputOctetsDiff_Add(p *radius.Packet, value AATInputOctetsDiff) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 130, a)
}

func AATInputOctetsDiff_Get(p *radius.Packet) (value AATInputOctetsDiff) {
	value, _ = AATInputOctetsDiff_Lookup(p)
	return
}

func AATInputOctetsDiff_Gets(p *radius.Packet) (values []AATInputOctetsDiff, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 130) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AATInputOctetsDiff(i))
	}
	return
}

func AATInputOctetsDiff_Lookup(p *radius.Packet) (value AATInputOctetsDiff, err error) {
	a, ok := _Alcatel_LookupVendor(p, 130)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AATInputOctetsDiff(i)
	return
}

func AATInputOctetsDiff_Set(p *radius.Packet, value AATInputOctetsDiff) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 130, a)
}

func AATInputOctetsDiff_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 130)
}

type AATOutputOctetsDiff uint32

var AATOutputOctetsDiff_Strings = map[AATOutputOctetsDiff]string{}

func (a AATOutputOctetsDiff) String() string {
	if str, ok := AATOutputOctetsDiff_Strings[a]; ok {
		return str
	}
	return "AATOutputOctetsDiff(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AATOutputOctetsDiff_Add(p *radius.Packet, value AATOutputOctetsDiff) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_AddVendor(p, 131, a)
}

func AATOutputOctetsDiff_Get(p *radius.Packet) (value AATOutputOctetsDiff) {
	value, _ = AATOutputOctetsDiff_Lookup(p)
	return
}

func AATOutputOctetsDiff_Gets(p *radius.Packet) (values []AATOutputOctetsDiff, err error) {
	var i uint32
	for _, attr := range _Alcatel_GetsVendor(p, 131) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AATOutputOctetsDiff(i))
	}
	return
}

func AATOutputOctetsDiff_Lookup(p *radius.Packet) (value AATOutputOctetsDiff, err error) {
	a, ok := _Alcatel_LookupVendor(p, 131)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AATOutputOctetsDiff(i)
	return
}

func AATOutputOctetsDiff_Set(p *radius.Packet, value AATOutputOctetsDiff) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Alcatel_SetVendor(p, 131, a)
}

func AATOutputOctetsDiff_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 131)
}

func AATUserMACAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 132, a)
}

func AATUserMACAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 132, a)
}

func AATUserMACAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = AATUserMACAddress_Lookup(p)
	return
}

func AATUserMACAddress_GetString(p *radius.Packet) (value string) {
	value, _ = AATUserMACAddress_LookupString(p)
	return
}

func AATUserMACAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 132) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATUserMACAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 132) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATUserMACAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 132)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AATUserMACAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 132)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AATUserMACAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 132, a)
}

func AATUserMACAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 132, a)
}

func AATUserMACAddress_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 132)
}

func AATATMTrafficProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 133, a)
}

func AATATMTrafficProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_AddVendor(p, 133, a)
}

func AATATMTrafficProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = AATATMTrafficProfile_Lookup(p)
	return
}

func AATATMTrafficProfile_GetString(p *radius.Packet) (value string) {
	value, _ = AATATMTrafficProfile_LookupString(p)
	return
}

func AATATMTrafficProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Alcatel_GetsVendor(p, 133) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATATMTrafficProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Alcatel_GetsVendor(p, 133) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AATATMTrafficProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Alcatel_LookupVendor(p, 133)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AATATMTrafficProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Alcatel_LookupVendor(p, 133)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AATATMTrafficProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 133, a)
}

func AATATMTrafficProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Alcatel_SetVendor(p, 133, a)
}

func AATATMTrafficProfile_Del(p *radius.Packet) {
	_Alcatel_DelVendor(p, 133)
}
