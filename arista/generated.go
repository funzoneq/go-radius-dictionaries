// Code generated by radius-dict-gen. DO NOT EDIT.

package arista

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Arista_VendorID = 30065
)

func _Arista_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Arista_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Arista_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Arista_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Arista_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Arista_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Arista_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Arista_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Arista_AddVendor(p, typ, attr)
}

func _Arista_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Arista_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func AristaAVPair_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Arista_AddVendor(p, 1, a)
}

func AristaAVPair_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Arista_AddVendor(p, 1, a)
}

func AristaAVPair_Get(p *radius.Packet) (value []byte) {
	value, _ = AristaAVPair_Lookup(p)
	return
}

func AristaAVPair_GetString(p *radius.Packet) (value string) {
	value, _ = AristaAVPair_LookupString(p)
	return
}

func AristaAVPair_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Arista_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AristaAVPair_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Arista_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AristaAVPair_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Arista_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AristaAVPair_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Arista_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AristaAVPair_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Arista_SetVendor(p, 1, a)
}

func AristaAVPair_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Arista_SetVendor(p, 1, a)
}

func AristaAVPair_Del(p *radius.Packet) {
	_Arista_DelVendor(p, 1)
}

type AristaUserPrivLevel uint32

var AristaUserPrivLevel_Strings = map[AristaUserPrivLevel]string{}

func (a AristaUserPrivLevel) String() string {
	if str, ok := AristaUserPrivLevel_Strings[a]; ok {
		return str
	}
	return "AristaUserPrivLevel(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AristaUserPrivLevel_Add(p *radius.Packet, value AristaUserPrivLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Arista_AddVendor(p, 2, a)
}

func AristaUserPrivLevel_Get(p *radius.Packet) (value AristaUserPrivLevel) {
	value, _ = AristaUserPrivLevel_Lookup(p)
	return
}

func AristaUserPrivLevel_Gets(p *radius.Packet) (values []AristaUserPrivLevel, err error) {
	var i uint32
	for _, attr := range _Arista_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AristaUserPrivLevel(i))
	}
	return
}

func AristaUserPrivLevel_Lookup(p *radius.Packet) (value AristaUserPrivLevel, err error) {
	a, ok := _Arista_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AristaUserPrivLevel(i)
	return
}

func AristaUserPrivLevel_Set(p *radius.Packet, value AristaUserPrivLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Arista_SetVendor(p, 2, a)
}

func AristaUserPrivLevel_Del(p *radius.Packet) {
	_Arista_DelVendor(p, 2)
}

func AristaUserRole_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Arista_AddVendor(p, 3, a)
}

func AristaUserRole_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Arista_AddVendor(p, 3, a)
}

func AristaUserRole_Get(p *radius.Packet) (value []byte) {
	value, _ = AristaUserRole_Lookup(p)
	return
}

func AristaUserRole_GetString(p *radius.Packet) (value string) {
	value, _ = AristaUserRole_LookupString(p)
	return
}

func AristaUserRole_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Arista_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AristaUserRole_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Arista_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AristaUserRole_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Arista_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AristaUserRole_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Arista_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AristaUserRole_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Arista_SetVendor(p, 3, a)
}

func AristaUserRole_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Arista_SetVendor(p, 3, a)
}

func AristaUserRole_Del(p *radius.Packet) {
	_Arista_DelVendor(p, 3)
}

func AristaCVPRole_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Arista_AddVendor(p, 4, a)
}

func AristaCVPRole_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Arista_AddVendor(p, 4, a)
}

func AristaCVPRole_Get(p *radius.Packet) (value []byte) {
	value, _ = AristaCVPRole_Lookup(p)
	return
}

func AristaCVPRole_GetString(p *radius.Packet) (value string) {
	value, _ = AristaCVPRole_LookupString(p)
	return
}

func AristaCVPRole_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Arista_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AristaCVPRole_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Arista_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AristaCVPRole_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Arista_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AristaCVPRole_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Arista_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AristaCVPRole_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Arista_SetVendor(p, 4, a)
}

func AristaCVPRole_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Arista_SetVendor(p, 4, a)
}

func AristaCVPRole_Del(p *radius.Packet) {
	_Arista_DelVendor(p, 4)
}

func AristaCommand_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Arista_AddVendor(p, 5, a)
}

func AristaCommand_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Arista_AddVendor(p, 5, a)
}

func AristaCommand_Get(p *radius.Packet) (value []byte) {
	value, _ = AristaCommand_Lookup(p)
	return
}

func AristaCommand_GetString(p *radius.Packet) (value string) {
	value, _ = AristaCommand_LookupString(p)
	return
}

func AristaCommand_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Arista_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AristaCommand_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Arista_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AristaCommand_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Arista_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AristaCommand_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Arista_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AristaCommand_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Arista_SetVendor(p, 5, a)
}

func AristaCommand_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Arista_SetVendor(p, 5, a)
}

func AristaCommand_Del(p *radius.Packet) {
	_Arista_DelVendor(p, 5)
}

type AristaWebAuth uint32

const (
	AristaWebAuth_Value_Start    AristaWebAuth = 0
	AristaWebAuth_Value_Complete AristaWebAuth = 1
)

var AristaWebAuth_Strings = map[AristaWebAuth]string{
	AristaWebAuth_Value_Start:    "start",
	AristaWebAuth_Value_Complete: "complete",
}

func (a AristaWebAuth) String() string {
	if str, ok := AristaWebAuth_Strings[a]; ok {
		return str
	}
	return "AristaWebAuth(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AristaWebAuth_Add(p *radius.Packet, value AristaWebAuth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Arista_AddVendor(p, 6, a)
}

func AristaWebAuth_Get(p *radius.Packet) (value AristaWebAuth) {
	value, _ = AristaWebAuth_Lookup(p)
	return
}

func AristaWebAuth_Gets(p *radius.Packet) (values []AristaWebAuth, err error) {
	var i uint32
	for _, attr := range _Arista_GetsVendor(p, 6) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AristaWebAuth(i))
	}
	return
}

func AristaWebAuth_Lookup(p *radius.Packet) (value AristaWebAuth, err error) {
	a, ok := _Arista_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AristaWebAuth(i)
	return
}

func AristaWebAuth_Set(p *radius.Packet, value AristaWebAuth) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Arista_SetVendor(p, 6, a)
}

func AristaWebAuth_Del(p *radius.Packet) {
	_Arista_DelVendor(p, 6)
}

func AristaBlockMac_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Arista_AddVendor(p, 7, a)
}

func AristaBlockMac_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Arista_AddVendor(p, 7, a)
}

func AristaBlockMac_Get(p *radius.Packet) (value []byte) {
	value, _ = AristaBlockMac_Lookup(p)
	return
}

func AristaBlockMac_GetString(p *radius.Packet) (value string) {
	value, _ = AristaBlockMac_LookupString(p)
	return
}

func AristaBlockMac_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Arista_GetsVendor(p, 7) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AristaBlockMac_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Arista_GetsVendor(p, 7) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AristaBlockMac_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Arista_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AristaBlockMac_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Arista_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AristaBlockMac_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Arista_SetVendor(p, 7, a)
}

func AristaBlockMac_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Arista_SetVendor(p, 7, a)
}

func AristaBlockMac_Del(p *radius.Packet) {
	_Arista_DelVendor(p, 7)
}

func AristaUnblockMac_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Arista_AddVendor(p, 8, a)
}

func AristaUnblockMac_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Arista_AddVendor(p, 8, a)
}

func AristaUnblockMac_Get(p *radius.Packet) (value []byte) {
	value, _ = AristaUnblockMac_Lookup(p)
	return
}

func AristaUnblockMac_GetString(p *radius.Packet) (value string) {
	value, _ = AristaUnblockMac_LookupString(p)
	return
}

func AristaUnblockMac_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Arista_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AristaUnblockMac_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Arista_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AristaUnblockMac_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Arista_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AristaUnblockMac_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Arista_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AristaUnblockMac_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Arista_SetVendor(p, 8, a)
}

func AristaUnblockMac_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Arista_SetVendor(p, 8, a)
}

func AristaUnblockMac_Del(p *radius.Packet) {
	_Arista_DelVendor(p, 8)
}

type AristaPortFlap uint32

var AristaPortFlap_Strings = map[AristaPortFlap]string{}

func (a AristaPortFlap) String() string {
	if str, ok := AristaPortFlap_Strings[a]; ok {
		return str
	}
	return "AristaPortFlap(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AristaPortFlap_Add(p *radius.Packet, value AristaPortFlap) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Arista_AddVendor(p, 9, a)
}

func AristaPortFlap_Get(p *radius.Packet) (value AristaPortFlap) {
	value, _ = AristaPortFlap_Lookup(p)
	return
}

func AristaPortFlap_Gets(p *radius.Packet) (values []AristaPortFlap, err error) {
	var i uint32
	for _, attr := range _Arista_GetsVendor(p, 9) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AristaPortFlap(i))
	}
	return
}

func AristaPortFlap_Lookup(p *radius.Packet) (value AristaPortFlap, err error) {
	a, ok := _Arista_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AristaPortFlap(i)
	return
}

func AristaPortFlap_Set(p *radius.Packet, value AristaPortFlap) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Arista_SetVendor(p, 9, a)
}

func AristaPortFlap_Del(p *radius.Packet) {
	_Arista_DelVendor(p, 9)
}
