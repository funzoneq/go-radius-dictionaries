// Code generated by radius-dict-gen. DO NOT EDIT.

package t_systems_nova

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_TSystemsNova_VendorID = 16787
)

func _TSystemsNova_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_TSystemsNova_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _TSystemsNova_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _TSystemsNova_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _TSystemsNova_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _TSystemsNova_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _TSystemsNova_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _TSystemsNova_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _TSystemsNova_AddVendor(p, typ, attr)
}

func _TSystemsNova_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _TSystemsNova_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

func TSystemsNovaLocationID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TSystemsNova_AddVendor(p, 1, a)
}

func TSystemsNovaLocationID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TSystemsNova_AddVendor(p, 1, a)
}

func TSystemsNovaLocationID_Get(p *radius.Packet) (value []byte) {
	value, _ = TSystemsNovaLocationID_Lookup(p)
	return
}

func TSystemsNovaLocationID_GetString(p *radius.Packet) (value string) {
	value, _ = TSystemsNovaLocationID_LookupString(p)
	return
}

func TSystemsNovaLocationID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _TSystemsNova_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TSystemsNovaLocationID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _TSystemsNova_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TSystemsNovaLocationID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TSystemsNovaLocationID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TSystemsNovaLocationID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TSystemsNova_SetVendor(p, 1, a)
}

func TSystemsNovaLocationID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TSystemsNova_SetVendor(p, 1, a)
}

func TSystemsNovaLocationID_Del(p *radius.Packet) {
	_TSystemsNova_DelVendor(p, 1)
}

func TSystemsNovaLocationName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TSystemsNova_AddVendor(p, 2, a)
}

func TSystemsNovaLocationName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TSystemsNova_AddVendor(p, 2, a)
}

func TSystemsNovaLocationName_Get(p *radius.Packet) (value []byte) {
	value, _ = TSystemsNovaLocationName_Lookup(p)
	return
}

func TSystemsNovaLocationName_GetString(p *radius.Packet) (value string) {
	value, _ = TSystemsNovaLocationName_LookupString(p)
	return
}

func TSystemsNovaLocationName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _TSystemsNova_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TSystemsNovaLocationName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _TSystemsNova_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TSystemsNovaLocationName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TSystemsNovaLocationName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TSystemsNovaLocationName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TSystemsNova_SetVendor(p, 2, a)
}

func TSystemsNovaLocationName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TSystemsNova_SetVendor(p, 2, a)
}

func TSystemsNovaLocationName_Del(p *radius.Packet) {
	_TSystemsNova_DelVendor(p, 2)
}

func TSystemsNovaLogoffURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TSystemsNova_AddVendor(p, 3, a)
}

func TSystemsNovaLogoffURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TSystemsNova_AddVendor(p, 3, a)
}

func TSystemsNovaLogoffURL_Get(p *radius.Packet) (value []byte) {
	value, _ = TSystemsNovaLogoffURL_Lookup(p)
	return
}

func TSystemsNovaLogoffURL_GetString(p *radius.Packet) (value string) {
	value, _ = TSystemsNovaLogoffURL_LookupString(p)
	return
}

func TSystemsNovaLogoffURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _TSystemsNova_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TSystemsNovaLogoffURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _TSystemsNova_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TSystemsNovaLogoffURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TSystemsNovaLogoffURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TSystemsNovaLogoffURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TSystemsNova_SetVendor(p, 3, a)
}

func TSystemsNovaLogoffURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TSystemsNova_SetVendor(p, 3, a)
}

func TSystemsNovaLogoffURL_Del(p *radius.Packet) {
	_TSystemsNova_DelVendor(p, 3)
}

func TSystemsNovaRedirectionURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TSystemsNova_AddVendor(p, 4, a)
}

func TSystemsNovaRedirectionURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TSystemsNova_AddVendor(p, 4, a)
}

func TSystemsNovaRedirectionURL_Get(p *radius.Packet) (value []byte) {
	value, _ = TSystemsNovaRedirectionURL_Lookup(p)
	return
}

func TSystemsNovaRedirectionURL_GetString(p *radius.Packet) (value string) {
	value, _ = TSystemsNovaRedirectionURL_LookupString(p)
	return
}

func TSystemsNovaRedirectionURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _TSystemsNova_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TSystemsNovaRedirectionURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _TSystemsNova_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TSystemsNovaRedirectionURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TSystemsNovaRedirectionURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TSystemsNovaRedirectionURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TSystemsNova_SetVendor(p, 4, a)
}

func TSystemsNovaRedirectionURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TSystemsNova_SetVendor(p, 4, a)
}

func TSystemsNovaRedirectionURL_Del(p *radius.Packet) {
	_TSystemsNova_DelVendor(p, 4)
}

type TSystemsNovaBandwidthMinUp uint32

var TSystemsNovaBandwidthMinUp_Strings = map[TSystemsNovaBandwidthMinUp]string{}

func (a TSystemsNovaBandwidthMinUp) String() string {
	if str, ok := TSystemsNovaBandwidthMinUp_Strings[a]; ok {
		return str
	}
	return "TSystemsNovaBandwidthMinUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TSystemsNovaBandwidthMinUp_Add(p *radius.Packet, value TSystemsNovaBandwidthMinUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _TSystemsNova_AddVendor(p, 5, a)
}

func TSystemsNovaBandwidthMinUp_Get(p *radius.Packet) (value TSystemsNovaBandwidthMinUp) {
	value, _ = TSystemsNovaBandwidthMinUp_Lookup(p)
	return
}

func TSystemsNovaBandwidthMinUp_Gets(p *radius.Packet) (values []TSystemsNovaBandwidthMinUp, err error) {
	var i uint32
	for _, attr := range _TSystemsNova_GetsVendor(p, 5) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TSystemsNovaBandwidthMinUp(i))
	}
	return
}

func TSystemsNovaBandwidthMinUp_Lookup(p *radius.Packet) (value TSystemsNovaBandwidthMinUp, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TSystemsNovaBandwidthMinUp(i)
	return
}

func TSystemsNovaBandwidthMinUp_Set(p *radius.Packet, value TSystemsNovaBandwidthMinUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _TSystemsNova_SetVendor(p, 5, a)
}

func TSystemsNovaBandwidthMinUp_Del(p *radius.Packet) {
	_TSystemsNova_DelVendor(p, 5)
}

type TSystemsNovaBandwidthMinDown uint32

var TSystemsNovaBandwidthMinDown_Strings = map[TSystemsNovaBandwidthMinDown]string{}

func (a TSystemsNovaBandwidthMinDown) String() string {
	if str, ok := TSystemsNovaBandwidthMinDown_Strings[a]; ok {
		return str
	}
	return "TSystemsNovaBandwidthMinDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TSystemsNovaBandwidthMinDown_Add(p *radius.Packet, value TSystemsNovaBandwidthMinDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _TSystemsNova_AddVendor(p, 6, a)
}

func TSystemsNovaBandwidthMinDown_Get(p *radius.Packet) (value TSystemsNovaBandwidthMinDown) {
	value, _ = TSystemsNovaBandwidthMinDown_Lookup(p)
	return
}

func TSystemsNovaBandwidthMinDown_Gets(p *radius.Packet) (values []TSystemsNovaBandwidthMinDown, err error) {
	var i uint32
	for _, attr := range _TSystemsNova_GetsVendor(p, 6) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TSystemsNovaBandwidthMinDown(i))
	}
	return
}

func TSystemsNovaBandwidthMinDown_Lookup(p *radius.Packet) (value TSystemsNovaBandwidthMinDown, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TSystemsNovaBandwidthMinDown(i)
	return
}

func TSystemsNovaBandwidthMinDown_Set(p *radius.Packet, value TSystemsNovaBandwidthMinDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _TSystemsNova_SetVendor(p, 6, a)
}

func TSystemsNovaBandwidthMinDown_Del(p *radius.Packet) {
	_TSystemsNova_DelVendor(p, 6)
}

type TSystemsNovaBandwidthMaxUp uint32

var TSystemsNovaBandwidthMaxUp_Strings = map[TSystemsNovaBandwidthMaxUp]string{}

func (a TSystemsNovaBandwidthMaxUp) String() string {
	if str, ok := TSystemsNovaBandwidthMaxUp_Strings[a]; ok {
		return str
	}
	return "TSystemsNovaBandwidthMaxUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TSystemsNovaBandwidthMaxUp_Add(p *radius.Packet, value TSystemsNovaBandwidthMaxUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _TSystemsNova_AddVendor(p, 7, a)
}

func TSystemsNovaBandwidthMaxUp_Get(p *radius.Packet) (value TSystemsNovaBandwidthMaxUp) {
	value, _ = TSystemsNovaBandwidthMaxUp_Lookup(p)
	return
}

func TSystemsNovaBandwidthMaxUp_Gets(p *radius.Packet) (values []TSystemsNovaBandwidthMaxUp, err error) {
	var i uint32
	for _, attr := range _TSystemsNova_GetsVendor(p, 7) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TSystemsNovaBandwidthMaxUp(i))
	}
	return
}

func TSystemsNovaBandwidthMaxUp_Lookup(p *radius.Packet) (value TSystemsNovaBandwidthMaxUp, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TSystemsNovaBandwidthMaxUp(i)
	return
}

func TSystemsNovaBandwidthMaxUp_Set(p *radius.Packet, value TSystemsNovaBandwidthMaxUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _TSystemsNova_SetVendor(p, 7, a)
}

func TSystemsNovaBandwidthMaxUp_Del(p *radius.Packet) {
	_TSystemsNova_DelVendor(p, 7)
}

type TSystemsNovaBandwidthMaxDown uint32

var TSystemsNovaBandwidthMaxDown_Strings = map[TSystemsNovaBandwidthMaxDown]string{}

func (a TSystemsNovaBandwidthMaxDown) String() string {
	if str, ok := TSystemsNovaBandwidthMaxDown_Strings[a]; ok {
		return str
	}
	return "TSystemsNovaBandwidthMaxDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TSystemsNovaBandwidthMaxDown_Add(p *radius.Packet, value TSystemsNovaBandwidthMaxDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _TSystemsNova_AddVendor(p, 8, a)
}

func TSystemsNovaBandwidthMaxDown_Get(p *radius.Packet) (value TSystemsNovaBandwidthMaxDown) {
	value, _ = TSystemsNovaBandwidthMaxDown_Lookup(p)
	return
}

func TSystemsNovaBandwidthMaxDown_Gets(p *radius.Packet) (values []TSystemsNovaBandwidthMaxDown, err error) {
	var i uint32
	for _, attr := range _TSystemsNova_GetsVendor(p, 8) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TSystemsNovaBandwidthMaxDown(i))
	}
	return
}

func TSystemsNovaBandwidthMaxDown_Lookup(p *radius.Packet) (value TSystemsNovaBandwidthMaxDown, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TSystemsNovaBandwidthMaxDown(i)
	return
}

func TSystemsNovaBandwidthMaxDown_Set(p *radius.Packet, value TSystemsNovaBandwidthMaxDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _TSystemsNova_SetVendor(p, 8, a)
}

func TSystemsNovaBandwidthMaxDown_Del(p *radius.Packet) {
	_TSystemsNova_DelVendor(p, 8)
}

type TSystemsNovaSessionTerminateTime uint32

var TSystemsNovaSessionTerminateTime_Strings = map[TSystemsNovaSessionTerminateTime]string{}

func (a TSystemsNovaSessionTerminateTime) String() string {
	if str, ok := TSystemsNovaSessionTerminateTime_Strings[a]; ok {
		return str
	}
	return "TSystemsNovaSessionTerminateTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TSystemsNovaSessionTerminateTime_Add(p *radius.Packet, value TSystemsNovaSessionTerminateTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _TSystemsNova_AddVendor(p, 9, a)
}

func TSystemsNovaSessionTerminateTime_Get(p *radius.Packet) (value TSystemsNovaSessionTerminateTime) {
	value, _ = TSystemsNovaSessionTerminateTime_Lookup(p)
	return
}

func TSystemsNovaSessionTerminateTime_Gets(p *radius.Packet) (values []TSystemsNovaSessionTerminateTime, err error) {
	var i uint32
	for _, attr := range _TSystemsNova_GetsVendor(p, 9) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TSystemsNovaSessionTerminateTime(i))
	}
	return
}

func TSystemsNovaSessionTerminateTime_Lookup(p *radius.Packet) (value TSystemsNovaSessionTerminateTime, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TSystemsNovaSessionTerminateTime(i)
	return
}

func TSystemsNovaSessionTerminateTime_Set(p *radius.Packet, value TSystemsNovaSessionTerminateTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _TSystemsNova_SetVendor(p, 9, a)
}

func TSystemsNovaSessionTerminateTime_Del(p *radius.Packet) {
	_TSystemsNova_DelVendor(p, 9)
}

type TSystemsNovaSessionTerminateEoD uint32

var TSystemsNovaSessionTerminateEoD_Strings = map[TSystemsNovaSessionTerminateEoD]string{}

func (a TSystemsNovaSessionTerminateEoD) String() string {
	if str, ok := TSystemsNovaSessionTerminateEoD_Strings[a]; ok {
		return str
	}
	return "TSystemsNovaSessionTerminateEoD(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TSystemsNovaSessionTerminateEoD_Add(p *radius.Packet, value TSystemsNovaSessionTerminateEoD) (err error) {
	a := radius.NewInteger(uint32(value))
	return _TSystemsNova_AddVendor(p, 10, a)
}

func TSystemsNovaSessionTerminateEoD_Get(p *radius.Packet) (value TSystemsNovaSessionTerminateEoD) {
	value, _ = TSystemsNovaSessionTerminateEoD_Lookup(p)
	return
}

func TSystemsNovaSessionTerminateEoD_Gets(p *radius.Packet) (values []TSystemsNovaSessionTerminateEoD, err error) {
	var i uint32
	for _, attr := range _TSystemsNova_GetsVendor(p, 10) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TSystemsNovaSessionTerminateEoD(i))
	}
	return
}

func TSystemsNovaSessionTerminateEoD_Lookup(p *radius.Packet) (value TSystemsNovaSessionTerminateEoD, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TSystemsNovaSessionTerminateEoD(i)
	return
}

func TSystemsNovaSessionTerminateEoD_Set(p *radius.Packet, value TSystemsNovaSessionTerminateEoD) (err error) {
	a := radius.NewInteger(uint32(value))
	return _TSystemsNova_SetVendor(p, 10, a)
}

func TSystemsNovaSessionTerminateEoD_Del(p *radius.Packet) {
	_TSystemsNova_DelVendor(p, 10)
}

func TSystemsNovaBillingClassOfService_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TSystemsNova_AddVendor(p, 11, a)
}

func TSystemsNovaBillingClassOfService_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TSystemsNova_AddVendor(p, 11, a)
}

func TSystemsNovaBillingClassOfService_Get(p *radius.Packet) (value []byte) {
	value, _ = TSystemsNovaBillingClassOfService_Lookup(p)
	return
}

func TSystemsNovaBillingClassOfService_GetString(p *radius.Packet) (value string) {
	value, _ = TSystemsNovaBillingClassOfService_LookupString(p)
	return
}

func TSystemsNovaBillingClassOfService_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _TSystemsNova_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TSystemsNovaBillingClassOfService_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _TSystemsNova_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TSystemsNovaBillingClassOfService_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TSystemsNovaBillingClassOfService_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TSystemsNovaBillingClassOfService_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TSystemsNova_SetVendor(p, 11, a)
}

func TSystemsNovaBillingClassOfService_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TSystemsNova_SetVendor(p, 11, a)
}

func TSystemsNovaBillingClassOfService_Del(p *radius.Packet) {
	_TSystemsNova_DelVendor(p, 11)
}

func TSystemsNovaServiceName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TSystemsNova_AddVendor(p, 12, a)
}

func TSystemsNovaServiceName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TSystemsNova_AddVendor(p, 12, a)
}

func TSystemsNovaServiceName_Get(p *radius.Packet) (value []byte) {
	value, _ = TSystemsNovaServiceName_Lookup(p)
	return
}

func TSystemsNovaServiceName_GetString(p *radius.Packet) (value string) {
	value, _ = TSystemsNovaServiceName_LookupString(p)
	return
}

func TSystemsNovaServiceName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _TSystemsNova_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TSystemsNovaServiceName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _TSystemsNova_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TSystemsNovaServiceName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TSystemsNovaServiceName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TSystemsNovaServiceName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TSystemsNova_SetVendor(p, 12, a)
}

func TSystemsNovaServiceName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TSystemsNova_SetVendor(p, 12, a)
}

func TSystemsNovaServiceName_Del(p *radius.Packet) {
	_TSystemsNova_DelVendor(p, 12)
}

type TSystemsNovaPriceOfService uint32

var TSystemsNovaPriceOfService_Strings = map[TSystemsNovaPriceOfService]string{}

func (a TSystemsNovaPriceOfService) String() string {
	if str, ok := TSystemsNovaPriceOfService_Strings[a]; ok {
		return str
	}
	return "TSystemsNovaPriceOfService(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func TSystemsNovaPriceOfService_Add(p *radius.Packet, value TSystemsNovaPriceOfService) (err error) {
	a := radius.NewInteger(uint32(value))
	return _TSystemsNova_AddVendor(p, 13, a)
}

func TSystemsNovaPriceOfService_Get(p *radius.Packet) (value TSystemsNovaPriceOfService) {
	value, _ = TSystemsNovaPriceOfService_Lookup(p)
	return
}

func TSystemsNovaPriceOfService_Gets(p *radius.Packet) (values []TSystemsNovaPriceOfService, err error) {
	var i uint32
	for _, attr := range _TSystemsNova_GetsVendor(p, 13) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, TSystemsNovaPriceOfService(i))
	}
	return
}

func TSystemsNovaPriceOfService_Lookup(p *radius.Packet) (value TSystemsNovaPriceOfService, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = TSystemsNovaPriceOfService(i)
	return
}

func TSystemsNovaPriceOfService_Set(p *radius.Packet, value TSystemsNovaPriceOfService) (err error) {
	a := radius.NewInteger(uint32(value))
	return _TSystemsNova_SetVendor(p, 13, a)
}

func TSystemsNovaPriceOfService_Del(p *radius.Packet) {
	_TSystemsNova_DelVendor(p, 13)
}

func TSystemsNovaVisitingProviderCode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TSystemsNova_AddVendor(p, 14, a)
}

func TSystemsNovaVisitingProviderCode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TSystemsNova_AddVendor(p, 14, a)
}

func TSystemsNovaVisitingProviderCode_Get(p *radius.Packet) (value []byte) {
	value, _ = TSystemsNovaVisitingProviderCode_Lookup(p)
	return
}

func TSystemsNovaVisitingProviderCode_GetString(p *radius.Packet) (value string) {
	value, _ = TSystemsNovaVisitingProviderCode_LookupString(p)
	return
}

func TSystemsNovaVisitingProviderCode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _TSystemsNova_GetsVendor(p, 14) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TSystemsNovaVisitingProviderCode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _TSystemsNova_GetsVendor(p, 14) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TSystemsNovaVisitingProviderCode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TSystemsNovaVisitingProviderCode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TSystemsNovaVisitingProviderCode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TSystemsNova_SetVendor(p, 14, a)
}

func TSystemsNovaVisitingProviderCode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TSystemsNova_SetVendor(p, 14, a)
}

func TSystemsNovaVisitingProviderCode_Del(p *radius.Packet) {
	_TSystemsNova_DelVendor(p, 14)
}

func TSystemsNovaUnknownAVP_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TSystemsNova_AddVendor(p, 15, a)
}

func TSystemsNovaUnknownAVP_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TSystemsNova_AddVendor(p, 15, a)
}

func TSystemsNovaUnknownAVP_Get(p *radius.Packet) (value []byte) {
	value, _ = TSystemsNovaUnknownAVP_Lookup(p)
	return
}

func TSystemsNovaUnknownAVP_GetString(p *radius.Packet) (value string) {
	value, _ = TSystemsNovaUnknownAVP_LookupString(p)
	return
}

func TSystemsNovaUnknownAVP_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _TSystemsNova_GetsVendor(p, 15) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TSystemsNovaUnknownAVP_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _TSystemsNova_GetsVendor(p, 15) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func TSystemsNovaUnknownAVP_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func TSystemsNovaUnknownAVP_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _TSystemsNova_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func TSystemsNovaUnknownAVP_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _TSystemsNova_SetVendor(p, 15, a)
}

func TSystemsNovaUnknownAVP_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _TSystemsNova_SetVendor(p, 15, a)
}

func TSystemsNovaUnknownAVP_Del(p *radius.Packet) {
	_TSystemsNova_DelVendor(p, 15)
}
