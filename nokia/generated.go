// Code generated by radius-dict-gen. DO NOT EDIT.

package nokia

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Nokia_VendorID = 94
)

func _Nokia_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Nokia_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Nokia_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Nokia_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Nokia_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Nokia_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Nokia_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Nokia_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Nokia_AddVendor(p, typ, attr)
}

func _Nokia_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Nokia_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

func NokiaAVPair_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 1, a)
}

func NokiaAVPair_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 1, a)
}

func NokiaAVPair_Get(p *radius.Packet) (value []byte) {
	value, _ = NokiaAVPair_Lookup(p)
	return
}

func NokiaAVPair_GetString(p *radius.Packet) (value string) {
	value, _ = NokiaAVPair_LookupString(p)
	return
}

func NokiaAVPair_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Nokia_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaAVPair_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Nokia_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaAVPair_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Nokia_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NokiaAVPair_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Nokia_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NokiaAVPair_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 1, a)
}

func NokiaAVPair_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 1, a)
}

func NokiaAVPair_Del(p *radius.Packet) {
	_Nokia_DelVendor(p, 1)
}

func NokiaUserProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 2, a)
}

func NokiaUserProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 2, a)
}

func NokiaUserProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = NokiaUserProfile_Lookup(p)
	return
}

func NokiaUserProfile_GetString(p *radius.Packet) (value string) {
	value, _ = NokiaUserProfile_LookupString(p)
	return
}

func NokiaUserProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Nokia_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaUserProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Nokia_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaUserProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Nokia_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NokiaUserProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Nokia_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NokiaUserProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 2, a)
}

func NokiaUserProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 2, a)
}

func NokiaUserProfile_Del(p *radius.Packet) {
	_Nokia_DelVendor(p, 2)
}

func NokiaServiceName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 3, a)
}

func NokiaServiceName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 3, a)
}

func NokiaServiceName_Get(p *radius.Packet) (value []byte) {
	value, _ = NokiaServiceName_Lookup(p)
	return
}

func NokiaServiceName_GetString(p *radius.Packet) (value string) {
	value, _ = NokiaServiceName_LookupString(p)
	return
}

func NokiaServiceName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Nokia_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaServiceName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Nokia_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaServiceName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Nokia_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NokiaServiceName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Nokia_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NokiaServiceName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 3, a)
}

func NokiaServiceName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 3, a)
}

func NokiaServiceName_Del(p *radius.Packet) {
	_Nokia_DelVendor(p, 3)
}

func NokiaServiceID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 4, a)
}

func NokiaServiceID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 4, a)
}

func NokiaServiceID_Get(p *radius.Packet) (value []byte) {
	value, _ = NokiaServiceID_Lookup(p)
	return
}

func NokiaServiceID_GetString(p *radius.Packet) (value string) {
	value, _ = NokiaServiceID_LookupString(p)
	return
}

func NokiaServiceID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Nokia_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaServiceID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Nokia_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaServiceID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Nokia_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NokiaServiceID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Nokia_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NokiaServiceID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 4, a)
}

func NokiaServiceID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 4, a)
}

func NokiaServiceID_Del(p *radius.Packet) {
	_Nokia_DelVendor(p, 4)
}

func NokiaServiceUsername_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 5, a)
}

func NokiaServiceUsername_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 5, a)
}

func NokiaServiceUsername_Get(p *radius.Packet) (value []byte) {
	value, _ = NokiaServiceUsername_Lookup(p)
	return
}

func NokiaServiceUsername_GetString(p *radius.Packet) (value string) {
	value, _ = NokiaServiceUsername_LookupString(p)
	return
}

func NokiaServiceUsername_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Nokia_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaServiceUsername_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Nokia_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaServiceUsername_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Nokia_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NokiaServiceUsername_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Nokia_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NokiaServiceUsername_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 5, a)
}

func NokiaServiceUsername_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 5, a)
}

func NokiaServiceUsername_Del(p *radius.Packet) {
	_Nokia_DelVendor(p, 5)
}

func NokiaServicePassword_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 6, a)
}

func NokiaServicePassword_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 6, a)
}

func NokiaServicePassword_Get(p *radius.Packet) (value []byte) {
	value, _ = NokiaServicePassword_Lookup(p)
	return
}

func NokiaServicePassword_GetString(p *radius.Packet) (value string) {
	value, _ = NokiaServicePassword_LookupString(p)
	return
}

func NokiaServicePassword_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Nokia_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaServicePassword_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Nokia_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaServicePassword_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Nokia_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NokiaServicePassword_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Nokia_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NokiaServicePassword_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 6, a)
}

func NokiaServicePassword_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 6, a)
}

func NokiaServicePassword_Del(p *radius.Packet) {
	_Nokia_DelVendor(p, 6)
}

func NokiaServicePrimaryIndicator_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 7, a)
}

func NokiaServicePrimaryIndicator_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 7, a)
}

func NokiaServicePrimaryIndicator_Get(p *radius.Packet) (value []byte) {
	value, _ = NokiaServicePrimaryIndicator_Lookup(p)
	return
}

func NokiaServicePrimaryIndicator_GetString(p *radius.Packet) (value string) {
	value, _ = NokiaServicePrimaryIndicator_LookupString(p)
	return
}

func NokiaServicePrimaryIndicator_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Nokia_GetsVendor(p, 7) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaServicePrimaryIndicator_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Nokia_GetsVendor(p, 7) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaServicePrimaryIndicator_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Nokia_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NokiaServicePrimaryIndicator_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Nokia_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NokiaServicePrimaryIndicator_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 7, a)
}

func NokiaServicePrimaryIndicator_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 7, a)
}

func NokiaServicePrimaryIndicator_Del(p *radius.Packet) {
	_Nokia_DelVendor(p, 7)
}

func NokiaServiceChargingType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 8, a)
}

func NokiaServiceChargingType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 8, a)
}

func NokiaServiceChargingType_Get(p *radius.Packet) (value []byte) {
	value, _ = NokiaServiceChargingType_Lookup(p)
	return
}

func NokiaServiceChargingType_GetString(p *radius.Packet) (value string) {
	value, _ = NokiaServiceChargingType_LookupString(p)
	return
}

func NokiaServiceChargingType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Nokia_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaServiceChargingType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Nokia_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaServiceChargingType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Nokia_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NokiaServiceChargingType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Nokia_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NokiaServiceChargingType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 8, a)
}

func NokiaServiceChargingType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 8, a)
}

func NokiaServiceChargingType_Del(p *radius.Packet) {
	_Nokia_DelVendor(p, 8)
}

func NokiaServiceEncryptedPassword_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 9, a)
}

func NokiaServiceEncryptedPassword_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 9, a)
}

func NokiaServiceEncryptedPassword_Get(p *radius.Packet) (value []byte) {
	value, _ = NokiaServiceEncryptedPassword_Lookup(p)
	return
}

func NokiaServiceEncryptedPassword_GetString(p *radius.Packet) (value string) {
	value, _ = NokiaServiceEncryptedPassword_LookupString(p)
	return
}

func NokiaServiceEncryptedPassword_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Nokia_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaServiceEncryptedPassword_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Nokia_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaServiceEncryptedPassword_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Nokia_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NokiaServiceEncryptedPassword_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Nokia_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NokiaServiceEncryptedPassword_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 9, a)
}

func NokiaServiceEncryptedPassword_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 9, a)
}

func NokiaServiceEncryptedPassword_Del(p *radius.Packet) {
	_Nokia_DelVendor(p, 9)
}

func NokiaSessionAccessMethod_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 10, a)
}

func NokiaSessionAccessMethod_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 10, a)
}

func NokiaSessionAccessMethod_Get(p *radius.Packet) (value []byte) {
	value, _ = NokiaSessionAccessMethod_Lookup(p)
	return
}

func NokiaSessionAccessMethod_GetString(p *radius.Packet) (value string) {
	value, _ = NokiaSessionAccessMethod_LookupString(p)
	return
}

func NokiaSessionAccessMethod_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Nokia_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaSessionAccessMethod_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Nokia_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaSessionAccessMethod_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Nokia_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NokiaSessionAccessMethod_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Nokia_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NokiaSessionAccessMethod_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 10, a)
}

func NokiaSessionAccessMethod_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 10, a)
}

func NokiaSessionAccessMethod_Del(p *radius.Packet) {
	_Nokia_DelVendor(p, 10)
}

func NokiaSessionChargingType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 11, a)
}

func NokiaSessionChargingType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 11, a)
}

func NokiaSessionChargingType_Get(p *radius.Packet) (value []byte) {
	value, _ = NokiaSessionChargingType_Lookup(p)
	return
}

func NokiaSessionChargingType_GetString(p *radius.Packet) (value string) {
	value, _ = NokiaSessionChargingType_LookupString(p)
	return
}

func NokiaSessionChargingType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Nokia_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaSessionChargingType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Nokia_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaSessionChargingType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Nokia_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NokiaSessionChargingType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Nokia_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NokiaSessionChargingType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 11, a)
}

func NokiaSessionChargingType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 11, a)
}

func NokiaSessionChargingType_Del(p *radius.Packet) {
	_Nokia_DelVendor(p, 11)
}

type NokiaOCSID1 uint32

var NokiaOCSID1_Strings = map[NokiaOCSID1]string{}

func (a NokiaOCSID1) String() string {
	if str, ok := NokiaOCSID1_Strings[a]; ok {
		return str
	}
	return "NokiaOCSID1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NokiaOCSID1_Add(p *radius.Packet, value NokiaOCSID1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Nokia_AddVendor(p, 12, a)
}

func NokiaOCSID1_Get(p *radius.Packet) (value NokiaOCSID1) {
	value, _ = NokiaOCSID1_Lookup(p)
	return
}

func NokiaOCSID1_Gets(p *radius.Packet) (values []NokiaOCSID1, err error) {
	var i uint32
	for _, attr := range _Nokia_GetsVendor(p, 12) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NokiaOCSID1(i))
	}
	return
}

func NokiaOCSID1_Lookup(p *radius.Packet) (value NokiaOCSID1, err error) {
	a, ok := _Nokia_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NokiaOCSID1(i)
	return
}

func NokiaOCSID1_Set(p *radius.Packet, value NokiaOCSID1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Nokia_SetVendor(p, 12, a)
}

func NokiaOCSID1_Del(p *radius.Packet) {
	_Nokia_DelVendor(p, 12)
}

type NokiaOCSID2 uint32

var NokiaOCSID2_Strings = map[NokiaOCSID2]string{}

func (a NokiaOCSID2) String() string {
	if str, ok := NokiaOCSID2_Strings[a]; ok {
		return str
	}
	return "NokiaOCSID2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NokiaOCSID2_Add(p *radius.Packet, value NokiaOCSID2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Nokia_AddVendor(p, 13, a)
}

func NokiaOCSID2_Get(p *radius.Packet) (value NokiaOCSID2) {
	value, _ = NokiaOCSID2_Lookup(p)
	return
}

func NokiaOCSID2_Gets(p *radius.Packet) (values []NokiaOCSID2, err error) {
	var i uint32
	for _, attr := range _Nokia_GetsVendor(p, 13) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NokiaOCSID2(i))
	}
	return
}

func NokiaOCSID2_Lookup(p *radius.Packet) (value NokiaOCSID2, err error) {
	a, ok := _Nokia_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NokiaOCSID2(i)
	return
}

func NokiaOCSID2_Set(p *radius.Packet, value NokiaOCSID2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Nokia_SetVendor(p, 13, a)
}

func NokiaOCSID2_Del(p *radius.Packet) {
	_Nokia_DelVendor(p, 13)
}

type NokiaTRECIndex uint32

var NokiaTRECIndex_Strings = map[NokiaTRECIndex]string{}

func (a NokiaTRECIndex) String() string {
	if str, ok := NokiaTRECIndex_Strings[a]; ok {
		return str
	}
	return "NokiaTRECIndex(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NokiaTRECIndex_Add(p *radius.Packet, value NokiaTRECIndex) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Nokia_AddVendor(p, 14, a)
}

func NokiaTRECIndex_Get(p *radius.Packet) (value NokiaTRECIndex) {
	value, _ = NokiaTRECIndex_Lookup(p)
	return
}

func NokiaTRECIndex_Gets(p *radius.Packet) (values []NokiaTRECIndex, err error) {
	var i uint32
	for _, attr := range _Nokia_GetsVendor(p, 14) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NokiaTRECIndex(i))
	}
	return
}

func NokiaTRECIndex_Lookup(p *radius.Packet) (value NokiaTRECIndex, err error) {
	a, ok := _Nokia_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NokiaTRECIndex(i)
	return
}

func NokiaTRECIndex_Set(p *radius.Packet, value NokiaTRECIndex) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Nokia_SetVendor(p, 14, a)
}

func NokiaTRECIndex_Del(p *radius.Packet) {
	_Nokia_DelVendor(p, 14)
}

func NokiaRequestedAPN_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 15, a)
}

func NokiaRequestedAPN_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_AddVendor(p, 15, a)
}

func NokiaRequestedAPN_Get(p *radius.Packet) (value []byte) {
	value, _ = NokiaRequestedAPN_Lookup(p)
	return
}

func NokiaRequestedAPN_GetString(p *radius.Packet) (value string) {
	value, _ = NokiaRequestedAPN_LookupString(p)
	return
}

func NokiaRequestedAPN_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Nokia_GetsVendor(p, 15) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaRequestedAPN_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Nokia_GetsVendor(p, 15) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NokiaRequestedAPN_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Nokia_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NokiaRequestedAPN_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Nokia_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NokiaRequestedAPN_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 15, a)
}

func NokiaRequestedAPN_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Nokia_SetVendor(p, 15, a)
}

func NokiaRequestedAPN_Del(p *radius.Packet) {
	_Nokia_DelVendor(p, 15)
}
