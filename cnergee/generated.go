// Code generated by radius-dict-gen. DO NOT EDIT.

package cnergee

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Cnergee_VendorID = 49426
)

func _Cnergee_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Cnergee_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Cnergee_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Cnergee_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Cnergee_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Cnergee_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Cnergee_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Cnergee_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Cnergee_AddVendor(p, typ, attr)
}

func _Cnergee_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Cnergee_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

type BELRASUpSpeedLimit uint32

var BELRASUpSpeedLimit_Strings = map[BELRASUpSpeedLimit]string{}

func (a BELRASUpSpeedLimit) String() string {
	if str, ok := BELRASUpSpeedLimit_Strings[a]; ok {
		return str
	}
	return "BELRASUpSpeedLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BELRASUpSpeedLimit_Add(p *radius.Packet, value BELRASUpSpeedLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_AddVendor(p, 1, a)
}

func BELRASUpSpeedLimit_Get(p *radius.Packet) (value BELRASUpSpeedLimit) {
	value, _ = BELRASUpSpeedLimit_Lookup(p)
	return
}

func BELRASUpSpeedLimit_Gets(p *radius.Packet) (values []BELRASUpSpeedLimit, err error) {
	var i uint32
	for _, attr := range _Cnergee_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BELRASUpSpeedLimit(i))
	}
	return
}

func BELRASUpSpeedLimit_Lookup(p *radius.Packet) (value BELRASUpSpeedLimit, err error) {
	a, ok := _Cnergee_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BELRASUpSpeedLimit(i)
	return
}

func BELRASUpSpeedLimit_Set(p *radius.Packet, value BELRASUpSpeedLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_SetVendor(p, 1, a)
}

func BELRASUpSpeedLimit_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 1)
}

type BELRASDownSpeedLimit uint32

var BELRASDownSpeedLimit_Strings = map[BELRASDownSpeedLimit]string{}

func (a BELRASDownSpeedLimit) String() string {
	if str, ok := BELRASDownSpeedLimit_Strings[a]; ok {
		return str
	}
	return "BELRASDownSpeedLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BELRASDownSpeedLimit_Add(p *radius.Packet, value BELRASDownSpeedLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_AddVendor(p, 2, a)
}

func BELRASDownSpeedLimit_Get(p *radius.Packet) (value BELRASDownSpeedLimit) {
	value, _ = BELRASDownSpeedLimit_Lookup(p)
	return
}

func BELRASDownSpeedLimit_Gets(p *radius.Packet) (values []BELRASDownSpeedLimit, err error) {
	var i uint32
	for _, attr := range _Cnergee_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BELRASDownSpeedLimit(i))
	}
	return
}

func BELRASDownSpeedLimit_Lookup(p *radius.Packet) (value BELRASDownSpeedLimit, err error) {
	a, ok := _Cnergee_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BELRASDownSpeedLimit(i)
	return
}

func BELRASDownSpeedLimit_Set(p *radius.Packet, value BELRASDownSpeedLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_SetVendor(p, 2, a)
}

func BELRASDownSpeedLimit_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 2)
}

type BELRASQosSpeed uint32

var BELRASQosSpeed_Strings = map[BELRASQosSpeed]string{}

func (a BELRASQosSpeed) String() string {
	if str, ok := BELRASQosSpeed_Strings[a]; ok {
		return str
	}
	return "BELRASQosSpeed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BELRASQosSpeed_Add(p *radius.Packet, value BELRASQosSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_AddVendor(p, 3, a)
}

func BELRASQosSpeed_Get(p *radius.Packet) (value BELRASQosSpeed) {
	value, _ = BELRASQosSpeed_Lookup(p)
	return
}

func BELRASQosSpeed_Gets(p *radius.Packet) (values []BELRASQosSpeed, err error) {
	var i uint32
	for _, attr := range _Cnergee_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BELRASQosSpeed(i))
	}
	return
}

func BELRASQosSpeed_Lookup(p *radius.Packet) (value BELRASQosSpeed, err error) {
	a, ok := _Cnergee_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BELRASQosSpeed(i)
	return
}

func BELRASQosSpeed_Set(p *radius.Packet, value BELRASQosSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_SetVendor(p, 3, a)
}

func BELRASQosSpeed_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 3)
}

func BELRASUser_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cnergee_AddVendor(p, 4, a)
}

func BELRASUser_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cnergee_AddVendor(p, 4, a)
}

func BELRASUser_Get(p *radius.Packet) (value []byte) {
	value, _ = BELRASUser_Lookup(p)
	return
}

func BELRASUser_GetString(p *radius.Packet) (value string) {
	value, _ = BELRASUser_LookupString(p)
	return
}

func BELRASUser_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cnergee_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BELRASUser_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cnergee_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BELRASUser_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cnergee_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BELRASUser_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cnergee_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BELRASUser_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cnergee_SetVendor(p, 4, a)
}

func BELRASUser_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cnergee_SetVendor(p, 4, a)
}

func BELRASUser_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 4)
}

func BELRASDHCPRouterIPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Cnergee_AddVendor(p, 5, a)
}

func BELRASDHCPRouterIPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = BELRASDHCPRouterIPAddress_Lookup(p)
	return
}

func BELRASDHCPRouterIPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Cnergee_GetsVendor(p, 5) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BELRASDHCPRouterIPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Cnergee_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func BELRASDHCPRouterIPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Cnergee_SetVendor(p, 5, a)
}

func BELRASDHCPRouterIPAddress_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 5)
}

type BELRASDHCPMask uint32

var BELRASDHCPMask_Strings = map[BELRASDHCPMask]string{}

func (a BELRASDHCPMask) String() string {
	if str, ok := BELRASDHCPMask_Strings[a]; ok {
		return str
	}
	return "BELRASDHCPMask(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BELRASDHCPMask_Add(p *radius.Packet, value BELRASDHCPMask) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_AddVendor(p, 6, a)
}

func BELRASDHCPMask_Get(p *radius.Packet) (value BELRASDHCPMask) {
	value, _ = BELRASDHCPMask_Lookup(p)
	return
}

func BELRASDHCPMask_Gets(p *radius.Packet) (values []BELRASDHCPMask, err error) {
	var i uint32
	for _, attr := range _Cnergee_GetsVendor(p, 6) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BELRASDHCPMask(i))
	}
	return
}

func BELRASDHCPMask_Lookup(p *radius.Packet) (value BELRASDHCPMask, err error) {
	a, ok := _Cnergee_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BELRASDHCPMask(i)
	return
}

func BELRASDHCPMask_Set(p *radius.Packet, value BELRASDHCPMask) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_SetVendor(p, 6, a)
}

func BELRASDHCPMask_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 6)
}

type BELRASRedirect uint32

var BELRASRedirect_Strings = map[BELRASRedirect]string{}

func (a BELRASRedirect) String() string {
	if str, ok := BELRASRedirect_Strings[a]; ok {
		return str
	}
	return "BELRASRedirect(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BELRASRedirect_Add(p *radius.Packet, value BELRASRedirect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_AddVendor(p, 7, a)
}

func BELRASRedirect_Get(p *radius.Packet) (value BELRASRedirect) {
	value, _ = BELRASRedirect_Lookup(p)
	return
}

func BELRASRedirect_Gets(p *radius.Packet) (values []BELRASRedirect, err error) {
	var i uint32
	for _, attr := range _Cnergee_GetsVendor(p, 7) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BELRASRedirect(i))
	}
	return
}

func BELRASRedirect_Lookup(p *radius.Packet) (value BELRASRedirect, err error) {
	a, ok := _Cnergee_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BELRASRedirect(i)
	return
}

func BELRASRedirect_Set(p *radius.Packet, value BELRASRedirect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_SetVendor(p, 7, a)
}

func BELRASRedirect_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 7)
}

type BELRASRedirectPool uint32

const (
	BELRASRedirectPool_Value_Deleted      BELRASRedirectPool = 1
	BELRASRedirectPool_Value_Disabled     BELRASRedirectPool = 2
	BELRASRedirectPool_Value_Disputes     BELRASRedirectPool = 3
	BELRASRedirectPool_Value_Expired      BELRASRedirectPool = 4
	BELRASRedirectPool_Value_Unknown      BELRASRedirectPool = 5
	BELRASRedirectPool_Value_Exhausted    BELRASRedirectPool = 6
	BELRASRedirectPool_Value_WrongMAC     BELRASRedirectPool = 7
	BELRASRedirectPool_Value_VLANmismatch BELRASRedirectPool = 8
)

var BELRASRedirectPool_Strings = map[BELRASRedirectPool]string{
	BELRASRedirectPool_Value_Deleted:      "Deleted",
	BELRASRedirectPool_Value_Disabled:     "Disabled",
	BELRASRedirectPool_Value_Disputes:     "Disputes",
	BELRASRedirectPool_Value_Expired:      "Expired",
	BELRASRedirectPool_Value_Unknown:      "Unknown",
	BELRASRedirectPool_Value_Exhausted:    "Exhausted",
	BELRASRedirectPool_Value_WrongMAC:     "WrongMAC",
	BELRASRedirectPool_Value_VLANmismatch: "VLANmismatch",
}

func (a BELRASRedirectPool) String() string {
	if str, ok := BELRASRedirectPool_Strings[a]; ok {
		return str
	}
	return "BELRASRedirectPool(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BELRASRedirectPool_Add(p *radius.Packet, value BELRASRedirectPool) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_AddVendor(p, 8, a)
}

func BELRASRedirectPool_Get(p *radius.Packet) (value BELRASRedirectPool) {
	value, _ = BELRASRedirectPool_Lookup(p)
	return
}

func BELRASRedirectPool_Gets(p *radius.Packet) (values []BELRASRedirectPool, err error) {
	var i uint32
	for _, attr := range _Cnergee_GetsVendor(p, 8) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BELRASRedirectPool(i))
	}
	return
}

func BELRASRedirectPool_Lookup(p *radius.Packet) (value BELRASRedirectPool, err error) {
	a, ok := _Cnergee_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BELRASRedirectPool(i)
	return
}

func BELRASRedirectPool_Set(p *radius.Packet, value BELRASRedirectPool) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_SetVendor(p, 8, a)
}

func BELRASRedirectPool_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 8)
}

func BELRASDHCPOption82_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cnergee_AddVendor(p, 9, a)
}

func BELRASDHCPOption82_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cnergee_AddVendor(p, 9, a)
}

func BELRASDHCPOption82_Get(p *radius.Packet) (value []byte) {
	value, _ = BELRASDHCPOption82_Lookup(p)
	return
}

func BELRASDHCPOption82_GetString(p *radius.Packet) (value string) {
	value, _ = BELRASDHCPOption82_LookupString(p)
	return
}

func BELRASDHCPOption82_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cnergee_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BELRASDHCPOption82_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cnergee_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BELRASDHCPOption82_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cnergee_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BELRASDHCPOption82_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cnergee_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BELRASDHCPOption82_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cnergee_SetVendor(p, 9, a)
}

func BELRASDHCPOption82_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cnergee_SetVendor(p, 9, a)
}

func BELRASDHCPOption82_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 9)
}

type BELRASSessionOctetsLimit uint32

var BELRASSessionOctetsLimit_Strings = map[BELRASSessionOctetsLimit]string{}

func (a BELRASSessionOctetsLimit) String() string {
	if str, ok := BELRASSessionOctetsLimit_Strings[a]; ok {
		return str
	}
	return "BELRASSessionOctetsLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BELRASSessionOctetsLimit_Add(p *radius.Packet, value BELRASSessionOctetsLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_AddVendor(p, 10, a)
}

func BELRASSessionOctetsLimit_Get(p *radius.Packet) (value BELRASSessionOctetsLimit) {
	value, _ = BELRASSessionOctetsLimit_Lookup(p)
	return
}

func BELRASSessionOctetsLimit_Gets(p *radius.Packet) (values []BELRASSessionOctetsLimit, err error) {
	var i uint32
	for _, attr := range _Cnergee_GetsVendor(p, 10) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BELRASSessionOctetsLimit(i))
	}
	return
}

func BELRASSessionOctetsLimit_Lookup(p *radius.Packet) (value BELRASSessionOctetsLimit, err error) {
	a, ok := _Cnergee_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BELRASSessionOctetsLimit(i)
	return
}

func BELRASSessionOctetsLimit_Set(p *radius.Packet, value BELRASSessionOctetsLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_SetVendor(p, 10, a)
}

func BELRASSessionOctetsLimit_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 10)
}

type BELRASOctetsDirection uint32

var BELRASOctetsDirection_Strings = map[BELRASOctetsDirection]string{}

func (a BELRASOctetsDirection) String() string {
	if str, ok := BELRASOctetsDirection_Strings[a]; ok {
		return str
	}
	return "BELRASOctetsDirection(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BELRASOctetsDirection_Add(p *radius.Packet, value BELRASOctetsDirection) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_AddVendor(p, 11, a)
}

func BELRASOctetsDirection_Get(p *radius.Packet) (value BELRASOctetsDirection) {
	value, _ = BELRASOctetsDirection_Lookup(p)
	return
}

func BELRASOctetsDirection_Gets(p *radius.Packet) (values []BELRASOctetsDirection, err error) {
	var i uint32
	for _, attr := range _Cnergee_GetsVendor(p, 11) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BELRASOctetsDirection(i))
	}
	return
}

func BELRASOctetsDirection_Lookup(p *radius.Packet) (value BELRASOctetsDirection, err error) {
	a, ok := _Cnergee_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BELRASOctetsDirection(i)
	return
}

func BELRASOctetsDirection_Set(p *radius.Packet, value BELRASOctetsDirection) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_SetVendor(p, 11, a)
}

func BELRASOctetsDirection_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 11)
}

type BELRASAKAMAISpeed uint32

var BELRASAKAMAISpeed_Strings = map[BELRASAKAMAISpeed]string{}

func (a BELRASAKAMAISpeed) String() string {
	if str, ok := BELRASAKAMAISpeed_Strings[a]; ok {
		return str
	}
	return "BELRASAKAMAISpeed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BELRASAKAMAISpeed_Add(p *radius.Packet, value BELRASAKAMAISpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_AddVendor(p, 12, a)
}

func BELRASAKAMAISpeed_Get(p *radius.Packet) (value BELRASAKAMAISpeed) {
	value, _ = BELRASAKAMAISpeed_Lookup(p)
	return
}

func BELRASAKAMAISpeed_Gets(p *radius.Packet) (values []BELRASAKAMAISpeed, err error) {
	var i uint32
	for _, attr := range _Cnergee_GetsVendor(p, 12) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BELRASAKAMAISpeed(i))
	}
	return
}

func BELRASAKAMAISpeed_Lookup(p *radius.Packet) (value BELRASAKAMAISpeed, err error) {
	a, ok := _Cnergee_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BELRASAKAMAISpeed(i)
	return
}

func BELRASAKAMAISpeed_Set(p *radius.Packet, value BELRASAKAMAISpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_SetVendor(p, 12, a)
}

func BELRASAKAMAISpeed_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 12)
}

type BELRASCACHESpeed uint32

var BELRASCACHESpeed_Strings = map[BELRASCACHESpeed]string{}

func (a BELRASCACHESpeed) String() string {
	if str, ok := BELRASCACHESpeed_Strings[a]; ok {
		return str
	}
	return "BELRASCACHESpeed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BELRASCACHESpeed_Add(p *radius.Packet, value BELRASCACHESpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_AddVendor(p, 13, a)
}

func BELRASCACHESpeed_Get(p *radius.Packet) (value BELRASCACHESpeed) {
	value, _ = BELRASCACHESpeed_Lookup(p)
	return
}

func BELRASCACHESpeed_Gets(p *radius.Packet) (values []BELRASCACHESpeed, err error) {
	var i uint32
	for _, attr := range _Cnergee_GetsVendor(p, 13) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BELRASCACHESpeed(i))
	}
	return
}

func BELRASCACHESpeed_Lookup(p *radius.Packet) (value BELRASCACHESpeed, err error) {
	a, ok := _Cnergee_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BELRASCACHESpeed(i)
	return
}

func BELRASCACHESpeed_Set(p *radius.Packet, value BELRASCACHESpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_SetVendor(p, 13, a)
}

func BELRASCACHESpeed_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 13)
}

type BELRASCacheFlySpeed uint32

var BELRASCacheFlySpeed_Strings = map[BELRASCacheFlySpeed]string{}

func (a BELRASCacheFlySpeed) String() string {
	if str, ok := BELRASCacheFlySpeed_Strings[a]; ok {
		return str
	}
	return "BELRASCacheFlySpeed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BELRASCacheFlySpeed_Add(p *radius.Packet, value BELRASCacheFlySpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_AddVendor(p, 14, a)
}

func BELRASCacheFlySpeed_Get(p *radius.Packet) (value BELRASCacheFlySpeed) {
	value, _ = BELRASCacheFlySpeed_Lookup(p)
	return
}

func BELRASCacheFlySpeed_Gets(p *radius.Packet) (values []BELRASCacheFlySpeed, err error) {
	var i uint32
	for _, attr := range _Cnergee_GetsVendor(p, 14) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BELRASCacheFlySpeed(i))
	}
	return
}

func BELRASCacheFlySpeed_Lookup(p *radius.Packet) (value BELRASCacheFlySpeed, err error) {
	a, ok := _Cnergee_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BELRASCacheFlySpeed(i)
	return
}

func BELRASCacheFlySpeed_Set(p *radius.Packet, value BELRASCacheFlySpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_SetVendor(p, 14, a)
}

func BELRASCacheFlySpeed_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 14)
}

type BELRASGGCSpeed uint32

var BELRASGGCSpeed_Strings = map[BELRASGGCSpeed]string{}

func (a BELRASGGCSpeed) String() string {
	if str, ok := BELRASGGCSpeed_Strings[a]; ok {
		return str
	}
	return "BELRASGGCSpeed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BELRASGGCSpeed_Add(p *radius.Packet, value BELRASGGCSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_AddVendor(p, 15, a)
}

func BELRASGGCSpeed_Get(p *radius.Packet) (value BELRASGGCSpeed) {
	value, _ = BELRASGGCSpeed_Lookup(p)
	return
}

func BELRASGGCSpeed_Gets(p *radius.Packet) (values []BELRASGGCSpeed, err error) {
	var i uint32
	for _, attr := range _Cnergee_GetsVendor(p, 15) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BELRASGGCSpeed(i))
	}
	return
}

func BELRASGGCSpeed_Lookup(p *radius.Packet) (value BELRASGGCSpeed, err error) {
	a, ok := _Cnergee_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BELRASGGCSpeed(i)
	return
}

func BELRASGGCSpeed_Set(p *radius.Packet, value BELRASGGCSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_SetVendor(p, 15, a)
}

func BELRASGGCSpeed_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 15)
}

type BELRASGOOGLESpeed uint32

var BELRASGOOGLESpeed_Strings = map[BELRASGOOGLESpeed]string{}

func (a BELRASGOOGLESpeed) String() string {
	if str, ok := BELRASGOOGLESpeed_Strings[a]; ok {
		return str
	}
	return "BELRASGOOGLESpeed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BELRASGOOGLESpeed_Add(p *radius.Packet, value BELRASGOOGLESpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_AddVendor(p, 16, a)
}

func BELRASGOOGLESpeed_Get(p *radius.Packet) (value BELRASGOOGLESpeed) {
	value, _ = BELRASGOOGLESpeed_Lookup(p)
	return
}

func BELRASGOOGLESpeed_Gets(p *radius.Packet) (values []BELRASGOOGLESpeed, err error) {
	var i uint32
	for _, attr := range _Cnergee_GetsVendor(p, 16) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BELRASGOOGLESpeed(i))
	}
	return
}

func BELRASGOOGLESpeed_Lookup(p *radius.Packet) (value BELRASGOOGLESpeed, err error) {
	a, ok := _Cnergee_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BELRASGOOGLESpeed(i)
	return
}

func BELRASGOOGLESpeed_Set(p *radius.Packet, value BELRASGOOGLESpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_SetVendor(p, 16, a)
}

func BELRASGOOGLESpeed_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 16)
}

type BELRASIncapsulaSpeed uint32

var BELRASIncapsulaSpeed_Strings = map[BELRASIncapsulaSpeed]string{}

func (a BELRASIncapsulaSpeed) String() string {
	if str, ok := BELRASIncapsulaSpeed_Strings[a]; ok {
		return str
	}
	return "BELRASIncapsulaSpeed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BELRASIncapsulaSpeed_Add(p *radius.Packet, value BELRASIncapsulaSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_AddVendor(p, 17, a)
}

func BELRASIncapsulaSpeed_Get(p *radius.Packet) (value BELRASIncapsulaSpeed) {
	value, _ = BELRASIncapsulaSpeed_Lookup(p)
	return
}

func BELRASIncapsulaSpeed_Gets(p *radius.Packet) (values []BELRASIncapsulaSpeed, err error) {
	var i uint32
	for _, attr := range _Cnergee_GetsVendor(p, 17) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BELRASIncapsulaSpeed(i))
	}
	return
}

func BELRASIncapsulaSpeed_Lookup(p *radius.Packet) (value BELRASIncapsulaSpeed, err error) {
	a, ok := _Cnergee_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BELRASIncapsulaSpeed(i)
	return
}

func BELRASIncapsulaSpeed_Set(p *radius.Packet, value BELRASIncapsulaSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_SetVendor(p, 17, a)
}

func BELRASIncapsulaSpeed_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 17)
}

type BELRASLIMELIGHTSpeed uint32

var BELRASLIMELIGHTSpeed_Strings = map[BELRASLIMELIGHTSpeed]string{}

func (a BELRASLIMELIGHTSpeed) String() string {
	if str, ok := BELRASLIMELIGHTSpeed_Strings[a]; ok {
		return str
	}
	return "BELRASLIMELIGHTSpeed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BELRASLIMELIGHTSpeed_Add(p *radius.Packet, value BELRASLIMELIGHTSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_AddVendor(p, 18, a)
}

func BELRASLIMELIGHTSpeed_Get(p *radius.Packet) (value BELRASLIMELIGHTSpeed) {
	value, _ = BELRASLIMELIGHTSpeed_Lookup(p)
	return
}

func BELRASLIMELIGHTSpeed_Gets(p *radius.Packet) (values []BELRASLIMELIGHTSpeed, err error) {
	var i uint32
	for _, attr := range _Cnergee_GetsVendor(p, 18) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BELRASLIMELIGHTSpeed(i))
	}
	return
}

func BELRASLIMELIGHTSpeed_Lookup(p *radius.Packet) (value BELRASLIMELIGHTSpeed, err error) {
	a, ok := _Cnergee_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BELRASLIMELIGHTSpeed(i)
	return
}

func BELRASLIMELIGHTSpeed_Set(p *radius.Packet, value BELRASLIMELIGHTSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_SetVendor(p, 18, a)
}

func BELRASLIMELIGHTSpeed_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 18)
}

type BELRASOTHERSSpeed uint32

var BELRASOTHERSSpeed_Strings = map[BELRASOTHERSSpeed]string{}

func (a BELRASOTHERSSpeed) String() string {
	if str, ok := BELRASOTHERSSpeed_Strings[a]; ok {
		return str
	}
	return "BELRASOTHERSSpeed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BELRASOTHERSSpeed_Add(p *radius.Packet, value BELRASOTHERSSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_AddVendor(p, 19, a)
}

func BELRASOTHERSSpeed_Get(p *radius.Packet) (value BELRASOTHERSSpeed) {
	value, _ = BELRASOTHERSSpeed_Lookup(p)
	return
}

func BELRASOTHERSSpeed_Gets(p *radius.Packet) (values []BELRASOTHERSSpeed, err error) {
	var i uint32
	for _, attr := range _Cnergee_GetsVendor(p, 19) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BELRASOTHERSSpeed(i))
	}
	return
}

func BELRASOTHERSSpeed_Lookup(p *radius.Packet) (value BELRASOTHERSSpeed, err error) {
	a, ok := _Cnergee_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BELRASOTHERSSpeed(i)
	return
}

func BELRASOTHERSSpeed_Set(p *radius.Packet, value BELRASOTHERSSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_SetVendor(p, 19, a)
}

func BELRASOTHERSSpeed_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 19)
}

type BELRASREDIFFSpeed uint32

var BELRASREDIFFSpeed_Strings = map[BELRASREDIFFSpeed]string{}

func (a BELRASREDIFFSpeed) String() string {
	if str, ok := BELRASREDIFFSpeed_Strings[a]; ok {
		return str
	}
	return "BELRASREDIFFSpeed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BELRASREDIFFSpeed_Add(p *radius.Packet, value BELRASREDIFFSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_AddVendor(p, 20, a)
}

func BELRASREDIFFSpeed_Get(p *radius.Packet) (value BELRASREDIFFSpeed) {
	value, _ = BELRASREDIFFSpeed_Lookup(p)
	return
}

func BELRASREDIFFSpeed_Gets(p *radius.Packet) (values []BELRASREDIFFSpeed, err error) {
	var i uint32
	for _, attr := range _Cnergee_GetsVendor(p, 20) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BELRASREDIFFSpeed(i))
	}
	return
}

func BELRASREDIFFSpeed_Lookup(p *radius.Packet) (value BELRASREDIFFSpeed, err error) {
	a, ok := _Cnergee_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BELRASREDIFFSpeed(i)
	return
}

func BELRASREDIFFSpeed_Set(p *radius.Packet, value BELRASREDIFFSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_SetVendor(p, 20, a)
}

func BELRASREDIFFSpeed_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 20)
}

type BELRASTORRENTSpeed uint32

var BELRASTORRENTSpeed_Strings = map[BELRASTORRENTSpeed]string{}

func (a BELRASTORRENTSpeed) String() string {
	if str, ok := BELRASTORRENTSpeed_Strings[a]; ok {
		return str
	}
	return "BELRASTORRENTSpeed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BELRASTORRENTSpeed_Add(p *radius.Packet, value BELRASTORRENTSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_AddVendor(p, 21, a)
}

func BELRASTORRENTSpeed_Get(p *radius.Packet) (value BELRASTORRENTSpeed) {
	value, _ = BELRASTORRENTSpeed_Lookup(p)
	return
}

func BELRASTORRENTSpeed_Gets(p *radius.Packet) (values []BELRASTORRENTSpeed, err error) {
	var i uint32
	for _, attr := range _Cnergee_GetsVendor(p, 21) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BELRASTORRENTSpeed(i))
	}
	return
}

func BELRASTORRENTSpeed_Lookup(p *radius.Packet) (value BELRASTORRENTSpeed, err error) {
	a, ok := _Cnergee_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BELRASTORRENTSpeed(i)
	return
}

func BELRASTORRENTSpeed_Set(p *radius.Packet, value BELRASTORRENTSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_SetVendor(p, 21, a)
}

func BELRASTORRENTSpeed_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 21)
}

type BELRASBELCACHESpeed uint32

var BELRASBELCACHESpeed_Strings = map[BELRASBELCACHESpeed]string{}

func (a BELRASBELCACHESpeed) String() string {
	if str, ok := BELRASBELCACHESpeed_Strings[a]; ok {
		return str
	}
	return "BELRASBELCACHESpeed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BELRASBELCACHESpeed_Add(p *radius.Packet, value BELRASBELCACHESpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_AddVendor(p, 22, a)
}

func BELRASBELCACHESpeed_Get(p *radius.Packet) (value BELRASBELCACHESpeed) {
	value, _ = BELRASBELCACHESpeed_Lookup(p)
	return
}

func BELRASBELCACHESpeed_Gets(p *radius.Packet) (values []BELRASBELCACHESpeed, err error) {
	var i uint32
	for _, attr := range _Cnergee_GetsVendor(p, 22) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BELRASBELCACHESpeed(i))
	}
	return
}

func BELRASBELCACHESpeed_Lookup(p *radius.Packet) (value BELRASBELCACHESpeed, err error) {
	a, ok := _Cnergee_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BELRASBELCACHESpeed(i)
	return
}

func BELRASBELCACHESpeed_Set(p *radius.Packet, value BELRASBELCACHESpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_SetVendor(p, 22, a)
}

func BELRASBELCACHESpeed_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 22)
}

type BELRASDHCPLeaseTime uint32

var BELRASDHCPLeaseTime_Strings = map[BELRASDHCPLeaseTime]string{}

func (a BELRASDHCPLeaseTime) String() string {
	if str, ok := BELRASDHCPLeaseTime_Strings[a]; ok {
		return str
	}
	return "BELRASDHCPLeaseTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BELRASDHCPLeaseTime_Add(p *radius.Packet, value BELRASDHCPLeaseTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_AddVendor(p, 23, a)
}

func BELRASDHCPLeaseTime_Get(p *radius.Packet) (value BELRASDHCPLeaseTime) {
	value, _ = BELRASDHCPLeaseTime_Lookup(p)
	return
}

func BELRASDHCPLeaseTime_Gets(p *radius.Packet) (values []BELRASDHCPLeaseTime, err error) {
	var i uint32
	for _, attr := range _Cnergee_GetsVendor(p, 23) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BELRASDHCPLeaseTime(i))
	}
	return
}

func BELRASDHCPLeaseTime_Lookup(p *radius.Packet) (value BELRASDHCPLeaseTime, err error) {
	a, ok := _Cnergee_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BELRASDHCPLeaseTime(i)
	return
}

func BELRASDHCPLeaseTime_Set(p *radius.Packet, value BELRASDHCPLeaseTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cnergee_SetVendor(p, 23, a)
}

func BELRASDHCPLeaseTime_Del(p *radius.Packet) {
	_Cnergee_DelVendor(p, 23)
}
