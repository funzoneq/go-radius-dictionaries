// Code generated by radius-dict-gen. DO NOT EDIT.

package issanni

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Issanni_VendorID = 5948
)

func _Issanni_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Issanni_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Issanni_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Issanni_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Issanni_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Issanni_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Issanni_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Issanni_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Issanni_AddVendor(p, typ, attr)
}

func _Issanni_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Issanni_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func IssanniSoftFlowTemplate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 1, a)
}

func IssanniSoftFlowTemplate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 1, a)
}

func IssanniSoftFlowTemplate_Get(p *radius.Packet) (value []byte) {
	value, _ = IssanniSoftFlowTemplate_Lookup(p)
	return
}

func IssanniSoftFlowTemplate_GetString(p *radius.Packet) (value string) {
	value, _ = IssanniSoftFlowTemplate_LookupString(p)
	return
}

func IssanniSoftFlowTemplate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Issanni_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniSoftFlowTemplate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Issanni_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniSoftFlowTemplate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Issanni_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func IssanniSoftFlowTemplate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Issanni_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func IssanniSoftFlowTemplate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 1, a)
}

func IssanniSoftFlowTemplate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 1, a)
}

func IssanniSoftFlowTemplate_Del(p *radius.Packet) {
	_Issanni_DelVendor(p, 1)
}

func IssanniNATSupport_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 2, a)
}

func IssanniNATSupport_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 2, a)
}

func IssanniNATSupport_Get(p *radius.Packet) (value []byte) {
	value, _ = IssanniNATSupport_Lookup(p)
	return
}

func IssanniNATSupport_GetString(p *radius.Packet) (value string) {
	value, _ = IssanniNATSupport_LookupString(p)
	return
}

func IssanniNATSupport_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Issanni_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniNATSupport_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Issanni_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniNATSupport_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Issanni_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func IssanniNATSupport_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Issanni_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func IssanniNATSupport_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 2, a)
}

func IssanniNATSupport_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 2, a)
}

func IssanniNATSupport_Del(p *radius.Packet) {
	_Issanni_DelVendor(p, 2)
}

func IssanniRoutingContext_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 3, a)
}

func IssanniRoutingContext_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 3, a)
}

func IssanniRoutingContext_Get(p *radius.Packet) (value []byte) {
	value, _ = IssanniRoutingContext_Lookup(p)
	return
}

func IssanniRoutingContext_GetString(p *radius.Packet) (value string) {
	value, _ = IssanniRoutingContext_LookupString(p)
	return
}

func IssanniRoutingContext_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Issanni_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniRoutingContext_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Issanni_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniRoutingContext_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Issanni_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func IssanniRoutingContext_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Issanni_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func IssanniRoutingContext_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 3, a)
}

func IssanniRoutingContext_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 3, a)
}

func IssanniRoutingContext_Del(p *radius.Packet) {
	_Issanni_DelVendor(p, 3)
}

func IssanniTunnelName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 4, a)
}

func IssanniTunnelName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 4, a)
}

func IssanniTunnelName_Get(p *radius.Packet) (value []byte) {
	value, _ = IssanniTunnelName_Lookup(p)
	return
}

func IssanniTunnelName_GetString(p *radius.Packet) (value string) {
	value, _ = IssanniTunnelName_LookupString(p)
	return
}

func IssanniTunnelName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Issanni_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniTunnelName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Issanni_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniTunnelName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Issanni_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func IssanniTunnelName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Issanni_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func IssanniTunnelName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 4, a)
}

func IssanniTunnelName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 4, a)
}

func IssanniTunnelName_Del(p *radius.Packet) {
	_Issanni_DelVendor(p, 4)
}

func IssanniIPPoolName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 5, a)
}

func IssanniIPPoolName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 5, a)
}

func IssanniIPPoolName_Get(p *radius.Packet) (value []byte) {
	value, _ = IssanniIPPoolName_Lookup(p)
	return
}

func IssanniIPPoolName_GetString(p *radius.Packet) (value string) {
	value, _ = IssanniIPPoolName_LookupString(p)
	return
}

func IssanniIPPoolName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Issanni_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniIPPoolName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Issanni_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniIPPoolName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Issanni_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func IssanniIPPoolName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Issanni_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func IssanniIPPoolName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 5, a)
}

func IssanniIPPoolName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 5, a)
}

func IssanniIPPoolName_Del(p *radius.Packet) {
	_Issanni_DelVendor(p, 5)
}

func IssanniPPPoEURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 6, a)
}

func IssanniPPPoEURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 6, a)
}

func IssanniPPPoEURL_Get(p *radius.Packet) (value []byte) {
	value, _ = IssanniPPPoEURL_Lookup(p)
	return
}

func IssanniPPPoEURL_GetString(p *radius.Packet) (value string) {
	value, _ = IssanniPPPoEURL_LookupString(p)
	return
}

func IssanniPPPoEURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Issanni_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniPPPoEURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Issanni_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniPPPoEURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Issanni_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func IssanniPPPoEURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Issanni_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func IssanniPPPoEURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 6, a)
}

func IssanniPPPoEURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 6, a)
}

func IssanniPPPoEURL_Del(p *radius.Packet) {
	_Issanni_DelVendor(p, 6)
}

func IssanniPPPoEMOTM_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 7, a)
}

func IssanniPPPoEMOTM_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 7, a)
}

func IssanniPPPoEMOTM_Get(p *radius.Packet) (value []byte) {
	value, _ = IssanniPPPoEMOTM_Lookup(p)
	return
}

func IssanniPPPoEMOTM_GetString(p *radius.Packet) (value string) {
	value, _ = IssanniPPPoEMOTM_LookupString(p)
	return
}

func IssanniPPPoEMOTM_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Issanni_GetsVendor(p, 7) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniPPPoEMOTM_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Issanni_GetsVendor(p, 7) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniPPPoEMOTM_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Issanni_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func IssanniPPPoEMOTM_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Issanni_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func IssanniPPPoEMOTM_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 7, a)
}

func IssanniPPPoEMOTM_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 7, a)
}

func IssanniPPPoEMOTM_Del(p *radius.Packet) {
	_Issanni_DelVendor(p, 7)
}

func IssanniService_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 8, a)
}

func IssanniService_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 8, a)
}

func IssanniService_Get(p *radius.Packet) (value []byte) {
	value, _ = IssanniService_Lookup(p)
	return
}

func IssanniService_GetString(p *radius.Packet) (value string) {
	value, _ = IssanniService_LookupString(p)
	return
}

func IssanniService_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Issanni_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniService_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Issanni_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniService_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Issanni_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func IssanniService_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Issanni_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func IssanniService_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 8, a)
}

func IssanniService_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 8, a)
}

func IssanniService_Del(p *radius.Packet) {
	_Issanni_DelVendor(p, 8)
}

func IssanniPriDNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 9, a)
}

func IssanniPriDNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = IssanniPriDNS_Lookup(p)
	return
}

func IssanniPriDNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Issanni_GetsVendor(p, 9) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniPriDNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Issanni_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func IssanniPriDNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 9, a)
}

func IssanniPriDNS_Del(p *radius.Packet) {
	_Issanni_DelVendor(p, 9)
}

func IssanniSecDNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 10, a)
}

func IssanniSecDNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = IssanniSecDNS_Lookup(p)
	return
}

func IssanniSecDNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Issanni_GetsVendor(p, 10) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniSecDNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Issanni_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func IssanniSecDNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 10, a)
}

func IssanniSecDNS_Del(p *radius.Packet) {
	_Issanni_DelVendor(p, 10)
}

func IssanniPriNBNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 11, a)
}

func IssanniPriNBNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = IssanniPriNBNS_Lookup(p)
	return
}

func IssanniPriNBNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Issanni_GetsVendor(p, 11) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniPriNBNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Issanni_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func IssanniPriNBNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 11, a)
}

func IssanniPriNBNS_Del(p *radius.Packet) {
	_Issanni_DelVendor(p, 11)
}

func IssanniSecNBNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 12, a)
}

func IssanniSecNBNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = IssanniSecNBNS_Lookup(p)
	return
}

func IssanniSecNBNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Issanni_GetsVendor(p, 12) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniSecNBNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Issanni_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func IssanniSecNBNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 12, a)
}

func IssanniSecNBNS_Del(p *radius.Packet) {
	_Issanni_DelVendor(p, 12)
}

func IssanniTrafficClass_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 13, a)
}

func IssanniTrafficClass_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 13, a)
}

func IssanniTrafficClass_Get(p *radius.Packet) (value []byte) {
	value, _ = IssanniTrafficClass_Lookup(p)
	return
}

func IssanniTrafficClass_GetString(p *radius.Packet) (value string) {
	value, _ = IssanniTrafficClass_LookupString(p)
	return
}

func IssanniTrafficClass_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Issanni_GetsVendor(p, 13) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniTrafficClass_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Issanni_GetsVendor(p, 13) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniTrafficClass_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Issanni_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func IssanniTrafficClass_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Issanni_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func IssanniTrafficClass_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 13, a)
}

func IssanniTrafficClass_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 13, a)
}

func IssanniTrafficClass_Del(p *radius.Packet) {
	_Issanni_DelVendor(p, 13)
}

type IssanniTunnelType uint32

const (
	IssanniTunnelType_Value_IPIP IssanniTunnelType = 1
	IssanniTunnelType_Value_ESP  IssanniTunnelType = 2
	IssanniTunnelType_Value_L2TP IssanniTunnelType = 3
)

var IssanniTunnelType_Strings = map[IssanniTunnelType]string{
	IssanniTunnelType_Value_IPIP: "IP-IP",
	IssanniTunnelType_Value_ESP:  "ESP",
	IssanniTunnelType_Value_L2TP: "L2TP",
}

func (a IssanniTunnelType) String() string {
	if str, ok := IssanniTunnelType_Strings[a]; ok {
		return str
	}
	return "IssanniTunnelType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func IssanniTunnelType_Add(p *radius.Packet, value IssanniTunnelType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Issanni_AddVendor(p, 14, a)
}

func IssanniTunnelType_Get(p *radius.Packet) (value IssanniTunnelType) {
	value, _ = IssanniTunnelType_Lookup(p)
	return
}

func IssanniTunnelType_Gets(p *radius.Packet) (values []IssanniTunnelType, err error) {
	var i uint32
	for _, attr := range _Issanni_GetsVendor(p, 14) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, IssanniTunnelType(i))
	}
	return
}

func IssanniTunnelType_Lookup(p *radius.Packet) (value IssanniTunnelType, err error) {
	a, ok := _Issanni_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = IssanniTunnelType(i)
	return
}

func IssanniTunnelType_Set(p *radius.Packet, value IssanniTunnelType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Issanni_SetVendor(p, 14, a)
}

func IssanniTunnelType_Del(p *radius.Packet) {
	_Issanni_DelVendor(p, 14)
}

type IssanniNATType uint32

const (
	IssanniNATType_Value_NAT  IssanniNATType = 1
	IssanniNATType_Value_NAPT IssanniNATType = 2
)

var IssanniNATType_Strings = map[IssanniNATType]string{
	IssanniNATType_Value_NAT:  "NAT",
	IssanniNATType_Value_NAPT: "NAPT",
}

func (a IssanniNATType) String() string {
	if str, ok := IssanniNATType_Strings[a]; ok {
		return str
	}
	return "IssanniNATType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func IssanniNATType_Add(p *radius.Packet, value IssanniNATType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Issanni_AddVendor(p, 15, a)
}

func IssanniNATType_Get(p *radius.Packet) (value IssanniNATType) {
	value, _ = IssanniNATType_Lookup(p)
	return
}

func IssanniNATType_Gets(p *radius.Packet) (values []IssanniNATType, err error) {
	var i uint32
	for _, attr := range _Issanni_GetsVendor(p, 15) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, IssanniNATType(i))
	}
	return
}

func IssanniNATType_Lookup(p *radius.Packet) (value IssanniNATType, err error) {
	a, ok := _Issanni_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = IssanniNATType(i)
	return
}

func IssanniNATType_Set(p *radius.Packet, value IssanniNATType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Issanni_SetVendor(p, 15, a)
}

func IssanniNATType_Del(p *radius.Packet) {
	_Issanni_DelVendor(p, 15)
}

func IssanniQOSClass_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 16, a)
}

func IssanniQOSClass_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 16, a)
}

func IssanniQOSClass_Get(p *radius.Packet) (value []byte) {
	value, _ = IssanniQOSClass_Lookup(p)
	return
}

func IssanniQOSClass_GetString(p *radius.Packet) (value string) {
	value, _ = IssanniQOSClass_LookupString(p)
	return
}

func IssanniQOSClass_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Issanni_GetsVendor(p, 16) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniQOSClass_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Issanni_GetsVendor(p, 16) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniQOSClass_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Issanni_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func IssanniQOSClass_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Issanni_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func IssanniQOSClass_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 16, a)
}

func IssanniQOSClass_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 16, a)
}

func IssanniQOSClass_Del(p *radius.Packet) {
	_Issanni_DelVendor(p, 16)
}

func IssanniInterfaceName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 17, a)
}

func IssanniInterfaceName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_AddVendor(p, 17, a)
}

func IssanniInterfaceName_Get(p *radius.Packet) (value []byte) {
	value, _ = IssanniInterfaceName_Lookup(p)
	return
}

func IssanniInterfaceName_GetString(p *radius.Packet) (value string) {
	value, _ = IssanniInterfaceName_LookupString(p)
	return
}

func IssanniInterfaceName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Issanni_GetsVendor(p, 17) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniInterfaceName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Issanni_GetsVendor(p, 17) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IssanniInterfaceName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Issanni_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func IssanniInterfaceName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Issanni_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func IssanniInterfaceName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 17, a)
}

func IssanniInterfaceName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Issanni_SetVendor(p, 17, a)
}

func IssanniInterfaceName_Del(p *radius.Packet) {
	_Issanni_DelVendor(p, 17)
}
