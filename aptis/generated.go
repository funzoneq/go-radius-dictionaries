// Code generated by radius-dict-gen. DO NOT EDIT.

package aptis

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Aptis_VendorID = 2637
)

func _Aptis_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Aptis_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Aptis_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Aptis_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Aptis_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Aptis_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Aptis_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Aptis_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Aptis_AddVendor(p, typ, attr)
}

func _Aptis_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Aptis_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func CVXIdentification_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptis_AddVendor(p, 1, a)
}

func CVXIdentification_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptis_AddVendor(p, 1, a)
}

func CVXIdentification_Get(p *radius.Packet) (value []byte) {
	value, _ = CVXIdentification_Lookup(p)
	return
}

func CVXIdentification_GetString(p *radius.Packet) (value string) {
	value, _ = CVXIdentification_LookupString(p)
	return
}

func CVXIdentification_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptis_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CVXIdentification_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptis_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CVXIdentification_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptis_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CVXIdentification_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptis_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CVXIdentification_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptis_SetVendor(p, 1, a)
}

func CVXIdentification_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptis_SetVendor(p, 1, a)
}

func CVXIdentification_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 1)
}

type CVXVPOPID uint32

var CVXVPOPID_Strings = map[CVXVPOPID]string{}

func (a CVXVPOPID) String() string {
	if str, ok := CVXVPOPID_Strings[a]; ok {
		return str
	}
	return "CVXVPOPID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXVPOPID_Add(p *radius.Packet, value CVXVPOPID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 2, a)
}

func CVXVPOPID_Get(p *radius.Packet) (value CVXVPOPID) {
	value, _ = CVXVPOPID_Lookup(p)
	return
}

func CVXVPOPID_Gets(p *radius.Packet) (values []CVXVPOPID, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXVPOPID(i))
	}
	return
}

func CVXVPOPID_Lookup(p *radius.Packet) (value CVXVPOPID, err error) {
	a, ok := _Aptis_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXVPOPID(i)
	return
}

func CVXVPOPID_Set(p *radius.Packet, value CVXVPOPID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 2, a)
}

func CVXVPOPID_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 2)
}

type CVXSS7SessionIDType uint32

var CVXSS7SessionIDType_Strings = map[CVXSS7SessionIDType]string{}

func (a CVXSS7SessionIDType) String() string {
	if str, ok := CVXSS7SessionIDType_Strings[a]; ok {
		return str
	}
	return "CVXSS7SessionIDType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXSS7SessionIDType_Add(p *radius.Packet, value CVXSS7SessionIDType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 3, a)
}

func CVXSS7SessionIDType_Get(p *radius.Packet) (value CVXSS7SessionIDType) {
	value, _ = CVXSS7SessionIDType_Lookup(p)
	return
}

func CVXSS7SessionIDType_Gets(p *radius.Packet) (values []CVXSS7SessionIDType, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXSS7SessionIDType(i))
	}
	return
}

func CVXSS7SessionIDType_Lookup(p *radius.Packet) (value CVXSS7SessionIDType, err error) {
	a, ok := _Aptis_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXSS7SessionIDType(i)
	return
}

func CVXSS7SessionIDType_Set(p *radius.Packet, value CVXSS7SessionIDType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 3, a)
}

func CVXSS7SessionIDType_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 3)
}

type CVXRadiusRedirect uint32

var CVXRadiusRedirect_Strings = map[CVXRadiusRedirect]string{}

func (a CVXRadiusRedirect) String() string {
	if str, ok := CVXRadiusRedirect_Strings[a]; ok {
		return str
	}
	return "CVXRadiusRedirect(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXRadiusRedirect_Add(p *radius.Packet, value CVXRadiusRedirect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 4, a)
}

func CVXRadiusRedirect_Get(p *radius.Packet) (value CVXRadiusRedirect) {
	value, _ = CVXRadiusRedirect_Lookup(p)
	return
}

func CVXRadiusRedirect_Gets(p *radius.Packet) (values []CVXRadiusRedirect, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 4) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXRadiusRedirect(i))
	}
	return
}

func CVXRadiusRedirect_Lookup(p *radius.Packet) (value CVXRadiusRedirect, err error) {
	a, ok := _Aptis_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXRadiusRedirect(i)
	return
}

func CVXRadiusRedirect_Set(p *radius.Packet, value CVXRadiusRedirect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 4, a)
}

func CVXRadiusRedirect_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 4)
}

type CVXIPSVCAZNLVL uint32

var CVXIPSVCAZNLVL_Strings = map[CVXIPSVCAZNLVL]string{}

func (a CVXIPSVCAZNLVL) String() string {
	if str, ok := CVXIPSVCAZNLVL_Strings[a]; ok {
		return str
	}
	return "CVXIPSVCAZNLVL(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXIPSVCAZNLVL_Add(p *radius.Packet, value CVXIPSVCAZNLVL) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 5, a)
}

func CVXIPSVCAZNLVL_Get(p *radius.Packet) (value CVXIPSVCAZNLVL) {
	value, _ = CVXIPSVCAZNLVL_Lookup(p)
	return
}

func CVXIPSVCAZNLVL_Gets(p *radius.Packet) (values []CVXIPSVCAZNLVL, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 5) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXIPSVCAZNLVL(i))
	}
	return
}

func CVXIPSVCAZNLVL_Lookup(p *radius.Packet) (value CVXIPSVCAZNLVL, err error) {
	a, ok := _Aptis_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXIPSVCAZNLVL(i)
	return
}

func CVXIPSVCAZNLVL_Set(p *radius.Packet, value CVXIPSVCAZNLVL) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 5, a)
}

func CVXIPSVCAZNLVL_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 5)
}

type CVXIPSVCMask uint32

var CVXIPSVCMask_Strings = map[CVXIPSVCMask]string{}

func (a CVXIPSVCMask) String() string {
	if str, ok := CVXIPSVCMask_Strings[a]; ok {
		return str
	}
	return "CVXIPSVCMask(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXIPSVCMask_Add(p *radius.Packet, value CVXIPSVCMask) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 6, a)
}

func CVXIPSVCMask_Get(p *radius.Packet) (value CVXIPSVCMask) {
	value, _ = CVXIPSVCMask_Lookup(p)
	return
}

func CVXIPSVCMask_Gets(p *radius.Packet) (values []CVXIPSVCMask, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 6) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXIPSVCMask(i))
	}
	return
}

func CVXIPSVCMask_Lookup(p *radius.Packet) (value CVXIPSVCMask, err error) {
	a, ok := _Aptis_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXIPSVCMask(i)
	return
}

func CVXIPSVCMask_Set(p *radius.Packet, value CVXIPSVCMask) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 6, a)
}

func CVXIPSVCMask_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 6)
}

type CVXMultilinkMatchInfo uint32

var CVXMultilinkMatchInfo_Strings = map[CVXMultilinkMatchInfo]string{}

func (a CVXMultilinkMatchInfo) String() string {
	if str, ok := CVXMultilinkMatchInfo_Strings[a]; ok {
		return str
	}
	return "CVXMultilinkMatchInfo(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXMultilinkMatchInfo_Add(p *radius.Packet, value CVXMultilinkMatchInfo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 7, a)
}

func CVXMultilinkMatchInfo_Get(p *radius.Packet) (value CVXMultilinkMatchInfo) {
	value, _ = CVXMultilinkMatchInfo_Lookup(p)
	return
}

func CVXMultilinkMatchInfo_Gets(p *radius.Packet) (values []CVXMultilinkMatchInfo, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 7) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXMultilinkMatchInfo(i))
	}
	return
}

func CVXMultilinkMatchInfo_Lookup(p *radius.Packet) (value CVXMultilinkMatchInfo, err error) {
	a, ok := _Aptis_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXMultilinkMatchInfo(i)
	return
}

func CVXMultilinkMatchInfo_Set(p *radius.Packet, value CVXMultilinkMatchInfo) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 7, a)
}

func CVXMultilinkMatchInfo_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 7)
}

type CVXMultilinkGroupNumber uint32

var CVXMultilinkGroupNumber_Strings = map[CVXMultilinkGroupNumber]string{}

func (a CVXMultilinkGroupNumber) String() string {
	if str, ok := CVXMultilinkGroupNumber_Strings[a]; ok {
		return str
	}
	return "CVXMultilinkGroupNumber(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXMultilinkGroupNumber_Add(p *radius.Packet, value CVXMultilinkGroupNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 8, a)
}

func CVXMultilinkGroupNumber_Get(p *radius.Packet) (value CVXMultilinkGroupNumber) {
	value, _ = CVXMultilinkGroupNumber_Lookup(p)
	return
}

func CVXMultilinkGroupNumber_Gets(p *radius.Packet) (values []CVXMultilinkGroupNumber, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 8) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXMultilinkGroupNumber(i))
	}
	return
}

func CVXMultilinkGroupNumber_Lookup(p *radius.Packet) (value CVXMultilinkGroupNumber, err error) {
	a, ok := _Aptis_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXMultilinkGroupNumber(i)
	return
}

func CVXMultilinkGroupNumber_Set(p *radius.Packet, value CVXMultilinkGroupNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 8, a)
}

func CVXMultilinkGroupNumber_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 8)
}

type CVXPPPLogMask uint32

var CVXPPPLogMask_Strings = map[CVXPPPLogMask]string{}

func (a CVXPPPLogMask) String() string {
	if str, ok := CVXPPPLogMask_Strings[a]; ok {
		return str
	}
	return "CVXPPPLogMask(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXPPPLogMask_Add(p *radius.Packet, value CVXPPPLogMask) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 9, a)
}

func CVXPPPLogMask_Get(p *radius.Packet) (value CVXPPPLogMask) {
	value, _ = CVXPPPLogMask_Lookup(p)
	return
}

func CVXPPPLogMask_Gets(p *radius.Packet) (values []CVXPPPLogMask, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 9) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXPPPLogMask(i))
	}
	return
}

func CVXPPPLogMask_Lookup(p *radius.Packet) (value CVXPPPLogMask, err error) {
	a, ok := _Aptis_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXPPPLogMask(i)
	return
}

func CVXPPPLogMask_Set(p *radius.Packet, value CVXPPPLogMask) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 9, a)
}

func CVXPPPLogMask_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 9)
}

func CVXModemBeginModulation_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptis_AddVendor(p, 10, a)
}

func CVXModemBeginModulation_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptis_AddVendor(p, 10, a)
}

func CVXModemBeginModulation_Get(p *radius.Packet) (value []byte) {
	value, _ = CVXModemBeginModulation_Lookup(p)
	return
}

func CVXModemBeginModulation_GetString(p *radius.Packet) (value string) {
	value, _ = CVXModemBeginModulation_LookupString(p)
	return
}

func CVXModemBeginModulation_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptis_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CVXModemBeginModulation_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptis_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CVXModemBeginModulation_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptis_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CVXModemBeginModulation_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptis_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CVXModemBeginModulation_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptis_SetVendor(p, 10, a)
}

func CVXModemBeginModulation_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptis_SetVendor(p, 10, a)
}

func CVXModemBeginModulation_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 10)
}

func CVXModemEndModulation_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptis_AddVendor(p, 11, a)
}

func CVXModemEndModulation_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptis_AddVendor(p, 11, a)
}

func CVXModemEndModulation_Get(p *radius.Packet) (value []byte) {
	value, _ = CVXModemEndModulation_Lookup(p)
	return
}

func CVXModemEndModulation_GetString(p *radius.Packet) (value string) {
	value, _ = CVXModemEndModulation_LookupString(p)
	return
}

func CVXModemEndModulation_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptis_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CVXModemEndModulation_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptis_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CVXModemEndModulation_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptis_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CVXModemEndModulation_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptis_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CVXModemEndModulation_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptis_SetVendor(p, 11, a)
}

func CVXModemEndModulation_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptis_SetVendor(p, 11, a)
}

func CVXModemEndModulation_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 11)
}

func CVXModemErrorCorrection_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptis_AddVendor(p, 12, a)
}

func CVXModemErrorCorrection_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptis_AddVendor(p, 12, a)
}

func CVXModemErrorCorrection_Get(p *radius.Packet) (value []byte) {
	value, _ = CVXModemErrorCorrection_Lookup(p)
	return
}

func CVXModemErrorCorrection_GetString(p *radius.Packet) (value string) {
	value, _ = CVXModemErrorCorrection_LookupString(p)
	return
}

func CVXModemErrorCorrection_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptis_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CVXModemErrorCorrection_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptis_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CVXModemErrorCorrection_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptis_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CVXModemErrorCorrection_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptis_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CVXModemErrorCorrection_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptis_SetVendor(p, 12, a)
}

func CVXModemErrorCorrection_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptis_SetVendor(p, 12, a)
}

func CVXModemErrorCorrection_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 12)
}

func CVXModemDataCompression_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptis_AddVendor(p, 13, a)
}

func CVXModemDataCompression_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptis_AddVendor(p, 13, a)
}

func CVXModemDataCompression_Get(p *radius.Packet) (value []byte) {
	value, _ = CVXModemDataCompression_Lookup(p)
	return
}

func CVXModemDataCompression_GetString(p *radius.Packet) (value string) {
	value, _ = CVXModemDataCompression_LookupString(p)
	return
}

func CVXModemDataCompression_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptis_GetsVendor(p, 13) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CVXModemDataCompression_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptis_GetsVendor(p, 13) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CVXModemDataCompression_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptis_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CVXModemDataCompression_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptis_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CVXModemDataCompression_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptis_SetVendor(p, 13, a)
}

func CVXModemDataCompression_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptis_SetVendor(p, 13, a)
}

func CVXModemDataCompression_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 13)
}

type CVXModemTxPackets uint32

var CVXModemTxPackets_Strings = map[CVXModemTxPackets]string{}

func (a CVXModemTxPackets) String() string {
	if str, ok := CVXModemTxPackets_Strings[a]; ok {
		return str
	}
	return "CVXModemTxPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXModemTxPackets_Add(p *radius.Packet, value CVXModemTxPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 14, a)
}

func CVXModemTxPackets_Get(p *radius.Packet) (value CVXModemTxPackets) {
	value, _ = CVXModemTxPackets_Lookup(p)
	return
}

func CVXModemTxPackets_Gets(p *radius.Packet) (values []CVXModemTxPackets, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 14) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXModemTxPackets(i))
	}
	return
}

func CVXModemTxPackets_Lookup(p *radius.Packet) (value CVXModemTxPackets, err error) {
	a, ok := _Aptis_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXModemTxPackets(i)
	return
}

func CVXModemTxPackets_Set(p *radius.Packet, value CVXModemTxPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 14, a)
}

func CVXModemTxPackets_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 14)
}

type CVXModemReTxPackets uint32

var CVXModemReTxPackets_Strings = map[CVXModemReTxPackets]string{}

func (a CVXModemReTxPackets) String() string {
	if str, ok := CVXModemReTxPackets_Strings[a]; ok {
		return str
	}
	return "CVXModemReTxPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXModemReTxPackets_Add(p *radius.Packet, value CVXModemReTxPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 15, a)
}

func CVXModemReTxPackets_Get(p *radius.Packet) (value CVXModemReTxPackets) {
	value, _ = CVXModemReTxPackets_Lookup(p)
	return
}

func CVXModemReTxPackets_Gets(p *radius.Packet) (values []CVXModemReTxPackets, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 15) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXModemReTxPackets(i))
	}
	return
}

func CVXModemReTxPackets_Lookup(p *radius.Packet) (value CVXModemReTxPackets, err error) {
	a, ok := _Aptis_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXModemReTxPackets(i)
	return
}

func CVXModemReTxPackets_Set(p *radius.Packet, value CVXModemReTxPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 15, a)
}

func CVXModemReTxPackets_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 15)
}

type CVXModemSNR uint32

var CVXModemSNR_Strings = map[CVXModemSNR]string{}

func (a CVXModemSNR) String() string {
	if str, ok := CVXModemSNR_Strings[a]; ok {
		return str
	}
	return "CVXModemSNR(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXModemSNR_Add(p *radius.Packet, value CVXModemSNR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 16, a)
}

func CVXModemSNR_Get(p *radius.Packet) (value CVXModemSNR) {
	value, _ = CVXModemSNR_Lookup(p)
	return
}

func CVXModemSNR_Gets(p *radius.Packet) (values []CVXModemSNR, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 16) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXModemSNR(i))
	}
	return
}

func CVXModemSNR_Lookup(p *radius.Packet) (value CVXModemSNR, err error) {
	a, ok := _Aptis_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXModemSNR(i)
	return
}

func CVXModemSNR_Set(p *radius.Packet, value CVXModemSNR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 16, a)
}

func CVXModemSNR_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 16)
}

type CVXModemLocalRetrains uint32

var CVXModemLocalRetrains_Strings = map[CVXModemLocalRetrains]string{}

func (a CVXModemLocalRetrains) String() string {
	if str, ok := CVXModemLocalRetrains_Strings[a]; ok {
		return str
	}
	return "CVXModemLocalRetrains(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXModemLocalRetrains_Add(p *radius.Packet, value CVXModemLocalRetrains) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 17, a)
}

func CVXModemLocalRetrains_Get(p *radius.Packet) (value CVXModemLocalRetrains) {
	value, _ = CVXModemLocalRetrains_Lookup(p)
	return
}

func CVXModemLocalRetrains_Gets(p *radius.Packet) (values []CVXModemLocalRetrains, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 17) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXModemLocalRetrains(i))
	}
	return
}

func CVXModemLocalRetrains_Lookup(p *radius.Packet) (value CVXModemLocalRetrains, err error) {
	a, ok := _Aptis_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXModemLocalRetrains(i)
	return
}

func CVXModemLocalRetrains_Set(p *radius.Packet, value CVXModemLocalRetrains) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 17, a)
}

func CVXModemLocalRetrains_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 17)
}

type CVXModemRemoteRetrains uint32

var CVXModemRemoteRetrains_Strings = map[CVXModemRemoteRetrains]string{}

func (a CVXModemRemoteRetrains) String() string {
	if str, ok := CVXModemRemoteRetrains_Strings[a]; ok {
		return str
	}
	return "CVXModemRemoteRetrains(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXModemRemoteRetrains_Add(p *radius.Packet, value CVXModemRemoteRetrains) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 18, a)
}

func CVXModemRemoteRetrains_Get(p *radius.Packet) (value CVXModemRemoteRetrains) {
	value, _ = CVXModemRemoteRetrains_Lookup(p)
	return
}

func CVXModemRemoteRetrains_Gets(p *radius.Packet) (values []CVXModemRemoteRetrains, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 18) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXModemRemoteRetrains(i))
	}
	return
}

func CVXModemRemoteRetrains_Lookup(p *radius.Packet) (value CVXModemRemoteRetrains, err error) {
	a, ok := _Aptis_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXModemRemoteRetrains(i)
	return
}

func CVXModemRemoteRetrains_Set(p *radius.Packet, value CVXModemRemoteRetrains) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 18, a)
}

func CVXModemRemoteRetrains_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 18)
}

type CVXModemLocalRateNegs uint32

var CVXModemLocalRateNegs_Strings = map[CVXModemLocalRateNegs]string{}

func (a CVXModemLocalRateNegs) String() string {
	if str, ok := CVXModemLocalRateNegs_Strings[a]; ok {
		return str
	}
	return "CVXModemLocalRateNegs(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXModemLocalRateNegs_Add(p *radius.Packet, value CVXModemLocalRateNegs) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 19, a)
}

func CVXModemLocalRateNegs_Get(p *radius.Packet) (value CVXModemLocalRateNegs) {
	value, _ = CVXModemLocalRateNegs_Lookup(p)
	return
}

func CVXModemLocalRateNegs_Gets(p *radius.Packet) (values []CVXModemLocalRateNegs, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 19) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXModemLocalRateNegs(i))
	}
	return
}

func CVXModemLocalRateNegs_Lookup(p *radius.Packet) (value CVXModemLocalRateNegs, err error) {
	a, ok := _Aptis_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXModemLocalRateNegs(i)
	return
}

func CVXModemLocalRateNegs_Set(p *radius.Packet, value CVXModemLocalRateNegs) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 19, a)
}

func CVXModemLocalRateNegs_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 19)
}

type CVXModemRemoteRateNegs uint32

var CVXModemRemoteRateNegs_Strings = map[CVXModemRemoteRateNegs]string{}

func (a CVXModemRemoteRateNegs) String() string {
	if str, ok := CVXModemRemoteRateNegs_Strings[a]; ok {
		return str
	}
	return "CVXModemRemoteRateNegs(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXModemRemoteRateNegs_Add(p *radius.Packet, value CVXModemRemoteRateNegs) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 20, a)
}

func CVXModemRemoteRateNegs_Get(p *radius.Packet) (value CVXModemRemoteRateNegs) {
	value, _ = CVXModemRemoteRateNegs_Lookup(p)
	return
}

func CVXModemRemoteRateNegs_Gets(p *radius.Packet) (values []CVXModemRemoteRateNegs, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 20) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXModemRemoteRateNegs(i))
	}
	return
}

func CVXModemRemoteRateNegs_Lookup(p *radius.Packet) (value CVXModemRemoteRateNegs, err error) {
	a, ok := _Aptis_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXModemRemoteRateNegs(i)
	return
}

func CVXModemRemoteRateNegs_Set(p *radius.Packet, value CVXModemRemoteRateNegs) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 20, a)
}

func CVXModemRemoteRateNegs_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 20)
}

type CVXModemBeginRecvLineLvl uint32

var CVXModemBeginRecvLineLvl_Strings = map[CVXModemBeginRecvLineLvl]string{}

func (a CVXModemBeginRecvLineLvl) String() string {
	if str, ok := CVXModemBeginRecvLineLvl_Strings[a]; ok {
		return str
	}
	return "CVXModemBeginRecvLineLvl(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXModemBeginRecvLineLvl_Add(p *radius.Packet, value CVXModemBeginRecvLineLvl) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 21, a)
}

func CVXModemBeginRecvLineLvl_Get(p *radius.Packet) (value CVXModemBeginRecvLineLvl) {
	value, _ = CVXModemBeginRecvLineLvl_Lookup(p)
	return
}

func CVXModemBeginRecvLineLvl_Gets(p *radius.Packet) (values []CVXModemBeginRecvLineLvl, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 21) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXModemBeginRecvLineLvl(i))
	}
	return
}

func CVXModemBeginRecvLineLvl_Lookup(p *radius.Packet) (value CVXModemBeginRecvLineLvl, err error) {
	a, ok := _Aptis_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXModemBeginRecvLineLvl(i)
	return
}

func CVXModemBeginRecvLineLvl_Set(p *radius.Packet, value CVXModemBeginRecvLineLvl) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 21, a)
}

func CVXModemBeginRecvLineLvl_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 21)
}

type CVXModemEndRecvLineLvl uint32

var CVXModemEndRecvLineLvl_Strings = map[CVXModemEndRecvLineLvl]string{}

func (a CVXModemEndRecvLineLvl) String() string {
	if str, ok := CVXModemEndRecvLineLvl_Strings[a]; ok {
		return str
	}
	return "CVXModemEndRecvLineLvl(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXModemEndRecvLineLvl_Add(p *radius.Packet, value CVXModemEndRecvLineLvl) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 22, a)
}

func CVXModemEndRecvLineLvl_Get(p *radius.Packet) (value CVXModemEndRecvLineLvl) {
	value, _ = CVXModemEndRecvLineLvl_Lookup(p)
	return
}

func CVXModemEndRecvLineLvl_Gets(p *radius.Packet) (values []CVXModemEndRecvLineLvl, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 22) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXModemEndRecvLineLvl(i))
	}
	return
}

func CVXModemEndRecvLineLvl_Lookup(p *radius.Packet) (value CVXModemEndRecvLineLvl, err error) {
	a, ok := _Aptis_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXModemEndRecvLineLvl(i)
	return
}

func CVXModemEndRecvLineLvl_Set(p *radius.Packet, value CVXModemEndRecvLineLvl) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 22, a)
}

func CVXModemEndRecvLineLvl_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 22)
}

type CVXTerminateComponent uint32

var CVXTerminateComponent_Strings = map[CVXTerminateComponent]string{}

func (a CVXTerminateComponent) String() string {
	if str, ok := CVXTerminateComponent_Strings[a]; ok {
		return str
	}
	return "CVXTerminateComponent(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXTerminateComponent_Add(p *radius.Packet, value CVXTerminateComponent) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 23, a)
}

func CVXTerminateComponent_Get(p *radius.Packet) (value CVXTerminateComponent) {
	value, _ = CVXTerminateComponent_Lookup(p)
	return
}

func CVXTerminateComponent_Gets(p *radius.Packet) (values []CVXTerminateComponent, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 23) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXTerminateComponent(i))
	}
	return
}

func CVXTerminateComponent_Lookup(p *radius.Packet) (value CVXTerminateComponent, err error) {
	a, ok := _Aptis_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXTerminateComponent(i)
	return
}

func CVXTerminateComponent_Set(p *radius.Packet, value CVXTerminateComponent) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 23, a)
}

func CVXTerminateComponent_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 23)
}

type CVXTerminateCause uint32

var CVXTerminateCause_Strings = map[CVXTerminateCause]string{}

func (a CVXTerminateCause) String() string {
	if str, ok := CVXTerminateCause_Strings[a]; ok {
		return str
	}
	return "CVXTerminateCause(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXTerminateCause_Add(p *radius.Packet, value CVXTerminateCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 24, a)
}

func CVXTerminateCause_Get(p *radius.Packet) (value CVXTerminateCause) {
	value, _ = CVXTerminateCause_Lookup(p)
	return
}

func CVXTerminateCause_Gets(p *radius.Packet) (values []CVXTerminateCause, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 24) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXTerminateCause(i))
	}
	return
}

func CVXTerminateCause_Lookup(p *radius.Packet) (value CVXTerminateCause, err error) {
	a, ok := _Aptis_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXTerminateCause(i)
	return
}

func CVXTerminateCause_Set(p *radius.Packet, value CVXTerminateCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 24, a)
}

func CVXTerminateCause_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 24)
}

type CVXRejectReason uint32

var CVXRejectReason_Strings = map[CVXRejectReason]string{}

func (a CVXRejectReason) String() string {
	if str, ok := CVXRejectReason_Strings[a]; ok {
		return str
	}
	return "CVXRejectReason(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXRejectReason_Add(p *radius.Packet, value CVXRejectReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 25, a)
}

func CVXRejectReason_Get(p *radius.Packet) (value CVXRejectReason) {
	value, _ = CVXRejectReason_Lookup(p)
	return
}

func CVXRejectReason_Gets(p *radius.Packet) (values []CVXRejectReason, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 25) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXRejectReason(i))
	}
	return
}

func CVXRejectReason_Lookup(p *radius.Packet) (value CVXRejectReason, err error) {
	a, ok := _Aptis_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXRejectReason(i)
	return
}

func CVXRejectReason_Set(p *radius.Packet, value CVXRejectReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 25, a)
}

func CVXRejectReason_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 25)
}

func CVXPrimaryDNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Aptis_AddVendor(p, 135, a)
}

func CVXPrimaryDNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = CVXPrimaryDNS_Lookup(p)
	return
}

func CVXPrimaryDNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Aptis_GetsVendor(p, 135) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CVXPrimaryDNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Aptis_LookupVendor(p, 135)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func CVXPrimaryDNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Aptis_SetVendor(p, 135, a)
}

func CVXPrimaryDNS_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 135)
}

func CVXSecondaryDNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Aptis_AddVendor(p, 136, a)
}

func CVXSecondaryDNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = CVXSecondaryDNS_Lookup(p)
	return
}

func CVXSecondaryDNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Aptis_GetsVendor(p, 136) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CVXSecondaryDNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Aptis_LookupVendor(p, 136)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func CVXSecondaryDNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Aptis_SetVendor(p, 136, a)
}

func CVXSecondaryDNS_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 136)
}

type CVXClientAssignDNS uint32

var CVXClientAssignDNS_Strings = map[CVXClientAssignDNS]string{}

func (a CVXClientAssignDNS) String() string {
	if str, ok := CVXClientAssignDNS_Strings[a]; ok {
		return str
	}
	return "CVXClientAssignDNS(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXClientAssignDNS_Add(p *radius.Packet, value CVXClientAssignDNS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 137, a)
}

func CVXClientAssignDNS_Get(p *radius.Packet) (value CVXClientAssignDNS) {
	value, _ = CVXClientAssignDNS_Lookup(p)
	return
}

func CVXClientAssignDNS_Gets(p *radius.Packet) (values []CVXClientAssignDNS, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 137) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXClientAssignDNS(i))
	}
	return
}

func CVXClientAssignDNS_Lookup(p *radius.Packet) (value CVXClientAssignDNS, err error) {
	a, ok := _Aptis_LookupVendor(p, 137)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXClientAssignDNS(i)
	return
}

func CVXClientAssignDNS_Set(p *radius.Packet, value CVXClientAssignDNS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 137, a)
}

func CVXClientAssignDNS_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 137)
}

type CVXMulticastRateLimit uint32

var CVXMulticastRateLimit_Strings = map[CVXMulticastRateLimit]string{}

func (a CVXMulticastRateLimit) String() string {
	if str, ok := CVXMulticastRateLimit_Strings[a]; ok {
		return str
	}
	return "CVXMulticastRateLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXMulticastRateLimit_Add(p *radius.Packet, value CVXMulticastRateLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 152, a)
}

func CVXMulticastRateLimit_Get(p *radius.Packet) (value CVXMulticastRateLimit) {
	value, _ = CVXMulticastRateLimit_Lookup(p)
	return
}

func CVXMulticastRateLimit_Gets(p *radius.Packet) (values []CVXMulticastRateLimit, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 152) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXMulticastRateLimit(i))
	}
	return
}

func CVXMulticastRateLimit_Lookup(p *radius.Packet) (value CVXMulticastRateLimit, err error) {
	a, ok := _Aptis_LookupVendor(p, 152)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXMulticastRateLimit(i)
	return
}

func CVXMulticastRateLimit_Set(p *radius.Packet, value CVXMulticastRateLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 152, a)
}

func CVXMulticastRateLimit_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 152)
}

type CVXMulticastClient uint32

var CVXMulticastClient_Strings = map[CVXMulticastClient]string{}

func (a CVXMulticastClient) String() string {
	if str, ok := CVXMulticastClient_Strings[a]; ok {
		return str
	}
	return "CVXMulticastClient(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXMulticastClient_Add(p *radius.Packet, value CVXMulticastClient) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 155, a)
}

func CVXMulticastClient_Get(p *radius.Packet) (value CVXMulticastClient) {
	value, _ = CVXMulticastClient_Lookup(p)
	return
}

func CVXMulticastClient_Gets(p *radius.Packet) (values []CVXMulticastClient, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 155) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXMulticastClient(i))
	}
	return
}

func CVXMulticastClient_Lookup(p *radius.Packet) (value CVXMulticastClient, err error) {
	a, ok := _Aptis_LookupVendor(p, 155)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXMulticastClient(i)
	return
}

func CVXMulticastClient_Set(p *radius.Packet, value CVXMulticastClient) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 155, a)
}

func CVXMulticastClient_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 155)
}

type CVXDisconnectCause uint32

var CVXDisconnectCause_Strings = map[CVXDisconnectCause]string{}

func (a CVXDisconnectCause) String() string {
	if str, ok := CVXDisconnectCause_Strings[a]; ok {
		return str
	}
	return "CVXDisconnectCause(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXDisconnectCause_Add(p *radius.Packet, value CVXDisconnectCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 195, a)
}

func CVXDisconnectCause_Get(p *radius.Packet) (value CVXDisconnectCause) {
	value, _ = CVXDisconnectCause_Lookup(p)
	return
}

func CVXDisconnectCause_Gets(p *radius.Packet) (values []CVXDisconnectCause, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 195) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXDisconnectCause(i))
	}
	return
}

func CVXDisconnectCause_Lookup(p *radius.Packet) (value CVXDisconnectCause, err error) {
	a, ok := _Aptis_LookupVendor(p, 195)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXDisconnectCause(i)
	return
}

func CVXDisconnectCause_Set(p *radius.Packet, value CVXDisconnectCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 195, a)
}

func CVXDisconnectCause_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 195)
}

type CVXDataRate uint32

var CVXDataRate_Strings = map[CVXDataRate]string{}

func (a CVXDataRate) String() string {
	if str, ok := CVXDataRate_Strings[a]; ok {
		return str
	}
	return "CVXDataRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXDataRate_Add(p *radius.Packet, value CVXDataRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 197, a)
}

func CVXDataRate_Get(p *radius.Packet) (value CVXDataRate) {
	value, _ = CVXDataRate_Lookup(p)
	return
}

func CVXDataRate_Gets(p *radius.Packet) (values []CVXDataRate, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 197) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXDataRate(i))
	}
	return
}

func CVXDataRate_Lookup(p *radius.Packet) (value CVXDataRate, err error) {
	a, ok := _Aptis_LookupVendor(p, 197)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXDataRate(i)
	return
}

func CVXDataRate_Set(p *radius.Packet, value CVXDataRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 197, a)
}

func CVXDataRate_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 197)
}

type CVXPreSessionTime uint32

var CVXPreSessionTime_Strings = map[CVXPreSessionTime]string{}

func (a CVXPreSessionTime) String() string {
	if str, ok := CVXPreSessionTime_Strings[a]; ok {
		return str
	}
	return "CVXPreSessionTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXPreSessionTime_Add(p *radius.Packet, value CVXPreSessionTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 198, a)
}

func CVXPreSessionTime_Get(p *radius.Packet) (value CVXPreSessionTime) {
	value, _ = CVXPreSessionTime_Lookup(p)
	return
}

func CVXPreSessionTime_Gets(p *radius.Packet) (values []CVXPreSessionTime, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 198) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXPreSessionTime(i))
	}
	return
}

func CVXPreSessionTime_Lookup(p *radius.Packet) (value CVXPreSessionTime, err error) {
	a, ok := _Aptis_LookupVendor(p, 198)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXPreSessionTime(i)
	return
}

func CVXPreSessionTime_Set(p *radius.Packet, value CVXPreSessionTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 198, a)
}

func CVXPreSessionTime_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 198)
}

type CVXAssignIPPool uint32

var CVXAssignIPPool_Strings = map[CVXAssignIPPool]string{}

func (a CVXAssignIPPool) String() string {
	if str, ok := CVXAssignIPPool_Strings[a]; ok {
		return str
	}
	return "CVXAssignIPPool(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXAssignIPPool_Add(p *radius.Packet, value CVXAssignIPPool) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 218, a)
}

func CVXAssignIPPool_Get(p *radius.Packet) (value CVXAssignIPPool) {
	value, _ = CVXAssignIPPool_Lookup(p)
	return
}

func CVXAssignIPPool_Gets(p *radius.Packet) (values []CVXAssignIPPool, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 218) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXAssignIPPool(i))
	}
	return
}

func CVXAssignIPPool_Lookup(p *radius.Packet) (value CVXAssignIPPool, err error) {
	a, ok := _Aptis_LookupVendor(p, 218)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXAssignIPPool(i)
	return
}

func CVXAssignIPPool_Set(p *radius.Packet, value CVXAssignIPPool) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 218, a)
}

func CVXAssignIPPool_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 218)
}

type CVXMaximumChannels uint32

var CVXMaximumChannels_Strings = map[CVXMaximumChannels]string{}

func (a CVXMaximumChannels) String() string {
	if str, ok := CVXMaximumChannels_Strings[a]; ok {
		return str
	}
	return "CVXMaximumChannels(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXMaximumChannels_Add(p *radius.Packet, value CVXMaximumChannels) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 235, a)
}

func CVXMaximumChannels_Get(p *radius.Packet) (value CVXMaximumChannels) {
	value, _ = CVXMaximumChannels_Lookup(p)
	return
}

func CVXMaximumChannels_Gets(p *radius.Packet) (values []CVXMaximumChannels, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 235) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXMaximumChannels(i))
	}
	return
}

func CVXMaximumChannels_Lookup(p *radius.Packet) (value CVXMaximumChannels, err error) {
	a, ok := _Aptis_LookupVendor(p, 235)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXMaximumChannels(i)
	return
}

func CVXMaximumChannels_Set(p *radius.Packet, value CVXMaximumChannels) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 235, a)
}

func CVXMaximumChannels_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 235)
}

func CVXDataFilter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptis_AddVendor(p, 242, a)
}

func CVXDataFilter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptis_AddVendor(p, 242, a)
}

func CVXDataFilter_Get(p *radius.Packet) (value []byte) {
	value, _ = CVXDataFilter_Lookup(p)
	return
}

func CVXDataFilter_GetString(p *radius.Packet) (value string) {
	value, _ = CVXDataFilter_LookupString(p)
	return
}

func CVXDataFilter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptis_GetsVendor(p, 242) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CVXDataFilter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptis_GetsVendor(p, 242) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CVXDataFilter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptis_LookupVendor(p, 242)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CVXDataFilter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptis_LookupVendor(p, 242)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CVXDataFilter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptis_SetVendor(p, 242, a)
}

func CVXDataFilter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptis_SetVendor(p, 242, a)
}

func CVXDataFilter_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 242)
}

type CVXIdleLimit uint32

var CVXIdleLimit_Strings = map[CVXIdleLimit]string{}

func (a CVXIdleLimit) String() string {
	if str, ok := CVXIdleLimit_Strings[a]; ok {
		return str
	}
	return "CVXIdleLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXIdleLimit_Add(p *radius.Packet, value CVXIdleLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 244, a)
}

func CVXIdleLimit_Get(p *radius.Packet) (value CVXIdleLimit) {
	value, _ = CVXIdleLimit_Lookup(p)
	return
}

func CVXIdleLimit_Gets(p *radius.Packet) (values []CVXIdleLimit, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 244) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXIdleLimit(i))
	}
	return
}

func CVXIdleLimit_Lookup(p *radius.Packet) (value CVXIdleLimit, err error) {
	a, ok := _Aptis_LookupVendor(p, 244)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXIdleLimit(i)
	return
}

func CVXIdleLimit_Set(p *radius.Packet, value CVXIdleLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 244, a)
}

func CVXIdleLimit_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 244)
}

func CVXPPPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Aptis_AddVendor(p, 253, a)
}

func CVXPPPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = CVXPPPAddress_Lookup(p)
	return
}

func CVXPPPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Aptis_GetsVendor(p, 253) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CVXPPPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Aptis_LookupVendor(p, 253)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func CVXPPPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Aptis_SetVendor(p, 253, a)
}

func CVXPPPAddress_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 253)
}

type CVXXmitRate uint32

var CVXXmitRate_Strings = map[CVXXmitRate]string{}

func (a CVXXmitRate) String() string {
	if str, ok := CVXXmitRate_Strings[a]; ok {
		return str
	}
	return "CVXXmitRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CVXXmitRate_Add(p *radius.Packet, value CVXXmitRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_AddVendor(p, 255, a)
}

func CVXXmitRate_Get(p *radius.Packet) (value CVXXmitRate) {
	value, _ = CVXXmitRate_Lookup(p)
	return
}

func CVXXmitRate_Gets(p *radius.Packet) (values []CVXXmitRate, err error) {
	var i uint32
	for _, attr := range _Aptis_GetsVendor(p, 255) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CVXXmitRate(i))
	}
	return
}

func CVXXmitRate_Lookup(p *radius.Packet) (value CVXXmitRate, err error) {
	a, ok := _Aptis_LookupVendor(p, 255)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CVXXmitRate(i)
	return
}

func CVXXmitRate_Set(p *radius.Packet, value CVXXmitRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptis_SetVendor(p, 255, a)
}

func CVXXmitRate_Del(p *radius.Packet) {
	_Aptis_DelVendor(p, 255)
}
