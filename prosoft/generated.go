// Code generated by radius-dict-gen. DO NOT EDIT.

package prosoft

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Prosoft_VendorID = 4735
)

func _Prosoft_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Prosoft_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Prosoft_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Prosoft_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Prosoft_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Prosoft_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Prosoft_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Prosoft_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Prosoft_AddVendor(p, typ, attr)
}

func _Prosoft_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Prosoft_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func ProsoftHomeAgentAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Prosoft_AddVendor(p, 0, a)
}

func ProsoftHomeAgentAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = ProsoftHomeAgentAddress_Lookup(p)
	return
}

func ProsoftHomeAgentAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Prosoft_GetsVendor(p, 0) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ProsoftHomeAgentAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Prosoft_LookupVendor(p, 0)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func ProsoftHomeAgentAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Prosoft_SetVendor(p, 0, a)
}

func ProsoftHomeAgentAddress_Del(p *radius.Packet) {
	_Prosoft_DelVendor(p, 0)
}

func ProsoftDefaultGateway_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Prosoft_AddVendor(p, 1, a)
}

func ProsoftDefaultGateway_Get(p *radius.Packet) (value net.IP) {
	value, _ = ProsoftDefaultGateway_Lookup(p)
	return
}

func ProsoftDefaultGateway_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Prosoft_GetsVendor(p, 1) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ProsoftDefaultGateway_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Prosoft_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func ProsoftDefaultGateway_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Prosoft_SetVendor(p, 1, a)
}

func ProsoftDefaultGateway_Del(p *radius.Packet) {
	_Prosoft_DelVendor(p, 1)
}

func ProsoftPrimaryDNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Prosoft_AddVendor(p, 2, a)
}

func ProsoftPrimaryDNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = ProsoftPrimaryDNS_Lookup(p)
	return
}

func ProsoftPrimaryDNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Prosoft_GetsVendor(p, 2) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ProsoftPrimaryDNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Prosoft_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func ProsoftPrimaryDNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Prosoft_SetVendor(p, 2, a)
}

func ProsoftPrimaryDNS_Del(p *radius.Packet) {
	_Prosoft_DelVendor(p, 2)
}

func ProsoftSecondaryDNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Prosoft_AddVendor(p, 3, a)
}

func ProsoftSecondaryDNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = ProsoftSecondaryDNS_Lookup(p)
	return
}

func ProsoftSecondaryDNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Prosoft_GetsVendor(p, 3) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ProsoftSecondaryDNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Prosoft_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func ProsoftSecondaryDNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Prosoft_SetVendor(p, 3, a)
}

func ProsoftSecondaryDNS_Del(p *radius.Packet) {
	_Prosoft_DelVendor(p, 3)
}

type ProsoftSecurityParameterIndex uint32

var ProsoftSecurityParameterIndex_Strings = map[ProsoftSecurityParameterIndex]string{}

func (a ProsoftSecurityParameterIndex) String() string {
	if str, ok := ProsoftSecurityParameterIndex_Strings[a]; ok {
		return str
	}
	return "ProsoftSecurityParameterIndex(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ProsoftSecurityParameterIndex_Add(p *radius.Packet, value ProsoftSecurityParameterIndex) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Prosoft_AddVendor(p, 4, a)
}

func ProsoftSecurityParameterIndex_Get(p *radius.Packet) (value ProsoftSecurityParameterIndex) {
	value, _ = ProsoftSecurityParameterIndex_Lookup(p)
	return
}

func ProsoftSecurityParameterIndex_Gets(p *radius.Packet) (values []ProsoftSecurityParameterIndex, err error) {
	var i uint32
	for _, attr := range _Prosoft_GetsVendor(p, 4) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ProsoftSecurityParameterIndex(i))
	}
	return
}

func ProsoftSecurityParameterIndex_Lookup(p *radius.Packet) (value ProsoftSecurityParameterIndex, err error) {
	a, ok := _Prosoft_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ProsoftSecurityParameterIndex(i)
	return
}

func ProsoftSecurityParameterIndex_Set(p *radius.Packet, value ProsoftSecurityParameterIndex) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Prosoft_SetVendor(p, 4, a)
}

func ProsoftSecurityParameterIndex_Del(p *radius.Packet) {
	_Prosoft_DelVendor(p, 4)
}

func ProsoftSecurityKey_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Prosoft_AddVendor(p, 5, a)
}

func ProsoftSecurityKey_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Prosoft_AddVendor(p, 5, a)
}

func ProsoftSecurityKey_Get(p *radius.Packet) (value []byte) {
	value, _ = ProsoftSecurityKey_Lookup(p)
	return
}

func ProsoftSecurityKey_GetString(p *radius.Packet) (value string) {
	value, _ = ProsoftSecurityKey_LookupString(p)
	return
}

func ProsoftSecurityKey_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Prosoft_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ProsoftSecurityKey_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Prosoft_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ProsoftSecurityKey_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Prosoft_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ProsoftSecurityKey_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Prosoft_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ProsoftSecurityKey_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Prosoft_SetVendor(p, 5, a)
}

func ProsoftSecurityKey_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Prosoft_SetVendor(p, 5, a)
}

func ProsoftSecurityKey_Del(p *radius.Packet) {
	_Prosoft_DelVendor(p, 5)
}

func ProsoftMACAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Prosoft_AddVendor(p, 7, a)
}

func ProsoftMACAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Prosoft_AddVendor(p, 7, a)
}

func ProsoftMACAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = ProsoftMACAddress_Lookup(p)
	return
}

func ProsoftMACAddress_GetString(p *radius.Packet) (value string) {
	value, _ = ProsoftMACAddress_LookupString(p)
	return
}

func ProsoftMACAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Prosoft_GetsVendor(p, 7) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ProsoftMACAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Prosoft_GetsVendor(p, 7) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ProsoftMACAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Prosoft_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ProsoftMACAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Prosoft_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ProsoftMACAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Prosoft_SetVendor(p, 7, a)
}

func ProsoftMACAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Prosoft_SetVendor(p, 7, a)
}

func ProsoftMACAddress_Del(p *radius.Packet) {
	_Prosoft_DelVendor(p, 7)
}

type ProsoftAuthenticationReason uint32

var ProsoftAuthenticationReason_Strings = map[ProsoftAuthenticationReason]string{}

func (a ProsoftAuthenticationReason) String() string {
	if str, ok := ProsoftAuthenticationReason_Strings[a]; ok {
		return str
	}
	return "ProsoftAuthenticationReason(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ProsoftAuthenticationReason_Add(p *radius.Packet, value ProsoftAuthenticationReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Prosoft_AddVendor(p, 8, a)
}

func ProsoftAuthenticationReason_Get(p *radius.Packet) (value ProsoftAuthenticationReason) {
	value, _ = ProsoftAuthenticationReason_Lookup(p)
	return
}

func ProsoftAuthenticationReason_Gets(p *radius.Packet) (values []ProsoftAuthenticationReason, err error) {
	var i uint32
	for _, attr := range _Prosoft_GetsVendor(p, 8) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ProsoftAuthenticationReason(i))
	}
	return
}

func ProsoftAuthenticationReason_Lookup(p *radius.Packet) (value ProsoftAuthenticationReason, err error) {
	a, ok := _Prosoft_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ProsoftAuthenticationReason(i)
	return
}

func ProsoftAuthenticationReason_Set(p *radius.Packet, value ProsoftAuthenticationReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Prosoft_SetVendor(p, 8, a)
}

func ProsoftAuthenticationReason_Del(p *radius.Packet) {
	_Prosoft_DelVendor(p, 8)
}

type ProsoftATMInterface uint32

var ProsoftATMInterface_Strings = map[ProsoftATMInterface]string{}

func (a ProsoftATMInterface) String() string {
	if str, ok := ProsoftATMInterface_Strings[a]; ok {
		return str
	}
	return "ProsoftATMInterface(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ProsoftATMInterface_Add(p *radius.Packet, value ProsoftATMInterface) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Prosoft_AddVendor(p, 9, a)
}

func ProsoftATMInterface_Get(p *radius.Packet) (value ProsoftATMInterface) {
	value, _ = ProsoftATMInterface_Lookup(p)
	return
}

func ProsoftATMInterface_Gets(p *radius.Packet) (values []ProsoftATMInterface, err error) {
	var i uint32
	for _, attr := range _Prosoft_GetsVendor(p, 9) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ProsoftATMInterface(i))
	}
	return
}

func ProsoftATMInterface_Lookup(p *radius.Packet) (value ProsoftATMInterface, err error) {
	a, ok := _Prosoft_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ProsoftATMInterface(i)
	return
}

func ProsoftATMInterface_Set(p *radius.Packet, value ProsoftATMInterface) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Prosoft_SetVendor(p, 9, a)
}

func ProsoftATMInterface_Del(p *radius.Packet) {
	_Prosoft_DelVendor(p, 9)
}

type ProsoftATMVPI uint32

var ProsoftATMVPI_Strings = map[ProsoftATMVPI]string{}

func (a ProsoftATMVPI) String() string {
	if str, ok := ProsoftATMVPI_Strings[a]; ok {
		return str
	}
	return "ProsoftATMVPI(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ProsoftATMVPI_Add(p *radius.Packet, value ProsoftATMVPI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Prosoft_AddVendor(p, 10, a)
}

func ProsoftATMVPI_Get(p *radius.Packet) (value ProsoftATMVPI) {
	value, _ = ProsoftATMVPI_Lookup(p)
	return
}

func ProsoftATMVPI_Gets(p *radius.Packet) (values []ProsoftATMVPI, err error) {
	var i uint32
	for _, attr := range _Prosoft_GetsVendor(p, 10) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ProsoftATMVPI(i))
	}
	return
}

func ProsoftATMVPI_Lookup(p *radius.Packet) (value ProsoftATMVPI, err error) {
	a, ok := _Prosoft_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ProsoftATMVPI(i)
	return
}

func ProsoftATMVPI_Set(p *radius.Packet, value ProsoftATMVPI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Prosoft_SetVendor(p, 10, a)
}

func ProsoftATMVPI_Del(p *radius.Packet) {
	_Prosoft_DelVendor(p, 10)
}

type ProsoftATMVCI uint32

var ProsoftATMVCI_Strings = map[ProsoftATMVCI]string{}

func (a ProsoftATMVCI) String() string {
	if str, ok := ProsoftATMVCI_Strings[a]; ok {
		return str
	}
	return "ProsoftATMVCI(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ProsoftATMVCI_Add(p *radius.Packet, value ProsoftATMVCI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Prosoft_AddVendor(p, 11, a)
}

func ProsoftATMVCI_Get(p *radius.Packet) (value ProsoftATMVCI) {
	value, _ = ProsoftATMVCI_Lookup(p)
	return
}

func ProsoftATMVCI_Gets(p *radius.Packet) (values []ProsoftATMVCI, err error) {
	var i uint32
	for _, attr := range _Prosoft_GetsVendor(p, 11) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ProsoftATMVCI(i))
	}
	return
}

func ProsoftATMVCI_Lookup(p *radius.Packet) (value ProsoftATMVCI, err error) {
	a, ok := _Prosoft_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ProsoftATMVCI(i)
	return
}

func ProsoftATMVCI_Set(p *radius.Packet, value ProsoftATMVCI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Prosoft_SetVendor(p, 11, a)
}

func ProsoftATMVCI_Del(p *radius.Packet) {
	_Prosoft_DelVendor(p, 11)
}

func ProsoftRSCIdentifier_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Prosoft_AddVendor(p, 12, a)
}

func ProsoftRSCIdentifier_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Prosoft_AddVendor(p, 12, a)
}

func ProsoftRSCIdentifier_Get(p *radius.Packet) (value []byte) {
	value, _ = ProsoftRSCIdentifier_Lookup(p)
	return
}

func ProsoftRSCIdentifier_GetString(p *radius.Packet) (value string) {
	value, _ = ProsoftRSCIdentifier_LookupString(p)
	return
}

func ProsoftRSCIdentifier_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Prosoft_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ProsoftRSCIdentifier_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Prosoft_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ProsoftRSCIdentifier_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Prosoft_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ProsoftRSCIdentifier_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Prosoft_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ProsoftRSCIdentifier_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Prosoft_SetVendor(p, 12, a)
}

func ProsoftRSCIdentifier_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Prosoft_SetVendor(p, 12, a)
}

func ProsoftRSCIdentifier_Del(p *radius.Packet) {
	_Prosoft_DelVendor(p, 12)
}

func ProsoftNPMIdentifier_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Prosoft_AddVendor(p, 13, a)
}

func ProsoftNPMIdentifier_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Prosoft_AddVendor(p, 13, a)
}

func ProsoftNPMIdentifier_Get(p *radius.Packet) (value []byte) {
	value, _ = ProsoftNPMIdentifier_Lookup(p)
	return
}

func ProsoftNPMIdentifier_GetString(p *radius.Packet) (value string) {
	value, _ = ProsoftNPMIdentifier_LookupString(p)
	return
}

func ProsoftNPMIdentifier_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Prosoft_GetsVendor(p, 13) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ProsoftNPMIdentifier_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Prosoft_GetsVendor(p, 13) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ProsoftNPMIdentifier_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Prosoft_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ProsoftNPMIdentifier_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Prosoft_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ProsoftNPMIdentifier_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Prosoft_SetVendor(p, 13, a)
}

func ProsoftNPMIdentifier_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Prosoft_SetVendor(p, 13, a)
}

func ProsoftNPMIdentifier_Del(p *radius.Packet) {
	_Prosoft_DelVendor(p, 13)
}

func ProsoftNPMIP_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Prosoft_AddVendor(p, 14, a)
}

func ProsoftNPMIP_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Prosoft_AddVendor(p, 14, a)
}

func ProsoftNPMIP_Get(p *radius.Packet) (value []byte) {
	value, _ = ProsoftNPMIP_Lookup(p)
	return
}

func ProsoftNPMIP_GetString(p *radius.Packet) (value string) {
	value, _ = ProsoftNPMIP_LookupString(p)
	return
}

func ProsoftNPMIP_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Prosoft_GetsVendor(p, 14) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ProsoftNPMIP_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Prosoft_GetsVendor(p, 14) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ProsoftNPMIP_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Prosoft_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ProsoftNPMIP_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Prosoft_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ProsoftNPMIP_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Prosoft_SetVendor(p, 14, a)
}

func ProsoftNPMIP_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Prosoft_SetVendor(p, 14, a)
}

func ProsoftNPMIP_Del(p *radius.Packet) {
	_Prosoft_DelVendor(p, 14)
}

func ProsoftSectorID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Prosoft_AddVendor(p, 15, a)
}

func ProsoftSectorID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Prosoft_AddVendor(p, 15, a)
}

func ProsoftSectorID_Get(p *radius.Packet) (value []byte) {
	value, _ = ProsoftSectorID_Lookup(p)
	return
}

func ProsoftSectorID_GetString(p *radius.Packet) (value string) {
	value, _ = ProsoftSectorID_LookupString(p)
	return
}

func ProsoftSectorID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Prosoft_GetsVendor(p, 15) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ProsoftSectorID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Prosoft_GetsVendor(p, 15) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ProsoftSectorID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Prosoft_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ProsoftSectorID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Prosoft_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ProsoftSectorID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Prosoft_SetVendor(p, 15, a)
}

func ProsoftSectorID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Prosoft_SetVendor(p, 15, a)
}

func ProsoftSectorID_Del(p *radius.Packet) {
	_Prosoft_DelVendor(p, 15)
}

type ProsoftAuthRole uint32

const (
	ProsoftAuthRole_Value_ReadStatus ProsoftAuthRole = 0
	ProsoftAuthRole_Value_ReadConfig ProsoftAuthRole = 1
	ProsoftAuthRole_Value_ReadWrite  ProsoftAuthRole = 2
	ProsoftAuthRole_Value_Admin      ProsoftAuthRole = 3
	ProsoftAuthRole_Value_SuperUser  ProsoftAuthRole = 4
)

var ProsoftAuthRole_Strings = map[ProsoftAuthRole]string{
	ProsoftAuthRole_Value_ReadStatus: "Read-Status",
	ProsoftAuthRole_Value_ReadConfig: "Read-Config",
	ProsoftAuthRole_Value_ReadWrite:  "Read-Write",
	ProsoftAuthRole_Value_Admin:      "Admin",
	ProsoftAuthRole_Value_SuperUser:  "Super-user",
}

func (a ProsoftAuthRole) String() string {
	if str, ok := ProsoftAuthRole_Strings[a]; ok {
		return str
	}
	return "ProsoftAuthRole(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ProsoftAuthRole_Add(p *radius.Packet, value ProsoftAuthRole) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Prosoft_AddVendor(p, 16, a)
}

func ProsoftAuthRole_Get(p *radius.Packet) (value ProsoftAuthRole) {
	value, _ = ProsoftAuthRole_Lookup(p)
	return
}

func ProsoftAuthRole_Gets(p *radius.Packet) (values []ProsoftAuthRole, err error) {
	var i uint32
	for _, attr := range _Prosoft_GetsVendor(p, 16) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ProsoftAuthRole(i))
	}
	return
}

func ProsoftAuthRole_Lookup(p *radius.Packet) (value ProsoftAuthRole, err error) {
	a, ok := _Prosoft_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ProsoftAuthRole(i)
	return
}

func ProsoftAuthRole_Set(p *radius.Packet, value ProsoftAuthRole) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Prosoft_SetVendor(p, 16, a)
}

func ProsoftAuthRole_Del(p *radius.Packet) {
	_Prosoft_DelVendor(p, 16)
}
