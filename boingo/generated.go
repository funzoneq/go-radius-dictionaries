// Code generated by radius-dict-gen. DO NOT EDIT.

package boingo

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Boingo_VendorID = 22472
)

func _Boingo_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Boingo_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Boingo_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Boingo_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Boingo_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Boingo_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Boingo_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Boingo_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Boingo_AddVendor(p, typ, attr)
}

func _Boingo_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Boingo_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func BWVenueID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 7, a)
}

func BWVenueID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 7, a)
}

func BWVenueID_Get(p *radius.Packet) (value []byte) {
	value, _ = BWVenueID_Lookup(p)
	return
}

func BWVenueID_GetString(p *radius.Packet) (value string) {
	value, _ = BWVenueID_LookupString(p)
	return
}

func BWVenueID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 7) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWVenueID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 7) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWVenueID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BWVenueID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BWVenueID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 7, a)
}

func BWVenueID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 7, a)
}

func BWVenueID_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 7)
}

func BWVenueTZ_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 8, a)
}

func BWVenueTZ_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 8, a)
}

func BWVenueTZ_Get(p *radius.Packet) (value []byte) {
	value, _ = BWVenueTZ_Lookup(p)
	return
}

func BWVenueTZ_GetString(p *radius.Packet) (value string) {
	value, _ = BWVenueTZ_LookupString(p)
	return
}

func BWVenueTZ_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWVenueTZ_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWVenueTZ_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BWVenueTZ_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BWVenueTZ_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 8, a)
}

func BWVenueTZ_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 8, a)
}

func BWVenueTZ_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 8)
}

func BWServiceType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 9, a)
}

func BWServiceType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 9, a)
}

func BWServiceType_Get(p *radius.Packet) (value []byte) {
	value, _ = BWServiceType_Lookup(p)
	return
}

func BWServiceType_GetString(p *radius.Packet) (value string) {
	value, _ = BWServiceType_LookupString(p)
	return
}

func BWServiceType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWServiceType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWServiceType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BWServiceType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BWServiceType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 9, a)
}

func BWServiceType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 9, a)
}

func BWServiceType_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 9)
}

func BWClass_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 10, a)
}

func BWClass_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 10, a)
}

func BWClass_Get(p *radius.Packet) (value []byte) {
	value, _ = BWClass_Lookup(p)
	return
}

func BWClass_GetString(p *radius.Packet) (value string) {
	value, _ = BWClass_LookupString(p)
	return
}

func BWClass_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWClass_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWClass_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BWClass_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BWClass_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 10, a)
}

func BWClass_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 10, a)
}

func BWClass_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 10)
}

func BWVenueDescription_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 11, a)
}

func BWVenueDescription_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 11, a)
}

func BWVenueDescription_Get(p *radius.Packet) (value []byte) {
	value, _ = BWVenueDescription_Lookup(p)
	return
}

func BWVenueDescription_GetString(p *radius.Packet) (value string) {
	value, _ = BWVenueDescription_LookupString(p)
	return
}

func BWVenueDescription_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWVenueDescription_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWVenueDescription_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BWVenueDescription_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BWVenueDescription_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 11, a)
}

func BWVenueDescription_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 11, a)
}

func BWVenueDescription_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 11)
}

func BWVenuePriceType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 12, a)
}

func BWVenuePriceType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 12, a)
}

func BWVenuePriceType_Get(p *radius.Packet) (value []byte) {
	value, _ = BWVenuePriceType_Lookup(p)
	return
}

func BWVenuePriceType_GetString(p *radius.Packet) (value string) {
	value, _ = BWVenuePriceType_LookupString(p)
	return
}

func BWVenuePriceType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWVenuePriceType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWVenuePriceType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BWVenuePriceType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BWVenuePriceType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 12, a)
}

func BWVenuePriceType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 12, a)
}

func BWVenuePriceType_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 12)
}

func BWVenuePortType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 13, a)
}

func BWVenuePortType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 13, a)
}

func BWVenuePortType_Get(p *radius.Packet) (value []byte) {
	value, _ = BWVenuePortType_Lookup(p)
	return
}

func BWVenuePortType_GetString(p *radius.Packet) (value string) {
	value, _ = BWVenuePortType_LookupString(p)
	return
}

func BWVenuePortType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 13) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWVenuePortType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 13) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWVenuePortType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BWVenuePortType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BWVenuePortType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 13, a)
}

func BWVenuePortType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 13, a)
}

func BWVenuePortType_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 13)
}

func BWISOCountryCode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 14, a)
}

func BWISOCountryCode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 14, a)
}

func BWISOCountryCode_Get(p *radius.Packet) (value []byte) {
	value, _ = BWISOCountryCode_Lookup(p)
	return
}

func BWISOCountryCode_GetString(p *radius.Packet) (value string) {
	value, _ = BWISOCountryCode_LookupString(p)
	return
}

func BWISOCountryCode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 14) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWISOCountryCode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 14) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWISOCountryCode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BWISOCountryCode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BWISOCountryCode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 14, a)
}

func BWISOCountryCode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 14, a)
}

func BWISOCountryCode_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 14)
}

func BWE164CountryCode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 15, a)
}

func BWE164CountryCode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 15, a)
}

func BWE164CountryCode_Get(p *radius.Packet) (value []byte) {
	value, _ = BWE164CountryCode_Lookup(p)
	return
}

func BWE164CountryCode_GetString(p *radius.Packet) (value string) {
	value, _ = BWE164CountryCode_LookupString(p)
	return
}

func BWE164CountryCode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 15) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWE164CountryCode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 15) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWE164CountryCode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BWE164CountryCode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BWE164CountryCode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 15, a)
}

func BWE164CountryCode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 15, a)
}

func BWE164CountryCode_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 15)
}

func BWStateName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 16, a)
}

func BWStateName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 16, a)
}

func BWStateName_Get(p *radius.Packet) (value []byte) {
	value, _ = BWStateName_Lookup(p)
	return
}

func BWStateName_GetString(p *radius.Packet) (value string) {
	value, _ = BWStateName_LookupString(p)
	return
}

func BWStateName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 16) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWStateName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 16) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWStateName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BWStateName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BWStateName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 16, a)
}

func BWStateName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 16, a)
}

func BWStateName_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 16)
}

func BWCityName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 17, a)
}

func BWCityName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 17, a)
}

func BWCityName_Get(p *radius.Packet) (value []byte) {
	value, _ = BWCityName_Lookup(p)
	return
}

func BWCityName_GetString(p *radius.Packet) (value string) {
	value, _ = BWCityName_LookupString(p)
	return
}

func BWCityName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 17) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWCityName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 17) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWCityName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BWCityName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BWCityName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 17, a)
}

func BWCityName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 17, a)
}

func BWCityName_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 17)
}

type BWAreaCode uint32

var BWAreaCode_Strings = map[BWAreaCode]string{}

func (a BWAreaCode) String() string {
	if str, ok := BWAreaCode_Strings[a]; ok {
		return str
	}
	return "BWAreaCode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func BWAreaCode_Add(p *radius.Packet, value BWAreaCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Boingo_AddVendor(p, 18, a)
}

func BWAreaCode_Get(p *radius.Packet) (value BWAreaCode) {
	value, _ = BWAreaCode_Lookup(p)
	return
}

func BWAreaCode_Gets(p *radius.Packet) (values []BWAreaCode, err error) {
	var i uint32
	for _, attr := range _Boingo_GetsVendor(p, 18) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, BWAreaCode(i))
	}
	return
}

func BWAreaCode_Lookup(p *radius.Packet) (value BWAreaCode, err error) {
	a, ok := _Boingo_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = BWAreaCode(i)
	return
}

func BWAreaCode_Set(p *radius.Packet, value BWAreaCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Boingo_SetVendor(p, 18, a)
}

func BWAreaCode_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 18)
}

func CLBrand_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 19, a)
}

func CLBrand_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 19, a)
}

func CLBrand_Get(p *radius.Packet) (value []byte) {
	value, _ = CLBrand_Lookup(p)
	return
}

func CLBrand_GetString(p *radius.Packet) (value string) {
	value, _ = CLBrand_LookupString(p)
	return
}

func CLBrand_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 19) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CLBrand_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 19) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CLBrand_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CLBrand_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CLBrand_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 19, a)
}

func CLBrand_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 19, a)
}

func CLBrand_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 19)
}

func CLSoftwareVersion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 20, a)
}

func CLSoftwareVersion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 20, a)
}

func CLSoftwareVersion_Get(p *radius.Packet) (value []byte) {
	value, _ = CLSoftwareVersion_Lookup(p)
	return
}

func CLSoftwareVersion_GetString(p *radius.Packet) (value string) {
	value, _ = CLSoftwareVersion_LookupString(p)
	return
}

func CLSoftwareVersion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 20) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CLSoftwareVersion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 20) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CLSoftwareVersion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CLSoftwareVersion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CLSoftwareVersion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 20, a)
}

func CLSoftwareVersion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 20, a)
}

func CLSoftwareVersion_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 20)
}

func CLRegNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 21, a)
}

func CLRegNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 21, a)
}

func CLRegNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = CLRegNumber_Lookup(p)
	return
}

func CLRegNumber_GetString(p *radius.Packet) (value string) {
	value, _ = CLRegNumber_LookupString(p)
	return
}

func CLRegNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 21) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CLRegNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 21) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CLRegNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CLRegNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CLRegNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 21, a)
}

func CLRegNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 21, a)
}

func CLRegNumber_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 21)
}

func CLMethodVersion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 22, a)
}

func CLMethodVersion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 22, a)
}

func CLMethodVersion_Get(p *radius.Packet) (value []byte) {
	value, _ = CLMethodVersion_Lookup(p)
	return
}

func CLMethodVersion_GetString(p *radius.Packet) (value string) {
	value, _ = CLMethodVersion_LookupString(p)
	return
}

func CLMethodVersion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 22) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CLMethodVersion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 22) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CLMethodVersion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CLMethodVersion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CLMethodVersion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 22, a)
}

func CLMethodVersion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 22, a)
}

func CLMethodVersion_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 22)
}

func CLTokenVersion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 23, a)
}

func CLTokenVersion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 23, a)
}

func CLTokenVersion_Get(p *radius.Packet) (value []byte) {
	value, _ = CLTokenVersion_Lookup(p)
	return
}

func CLTokenVersion_GetString(p *radius.Packet) (value string) {
	value, _ = CLTokenVersion_LookupString(p)
	return
}

func CLTokenVersion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 23) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CLTokenVersion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 23) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CLTokenVersion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CLTokenVersion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CLTokenVersion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 23, a)
}

func CLTokenVersion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 23, a)
}

func CLTokenVersion_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 23)
}

func CLAPDBVersion_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 24, a)
}

func CLAPDBVersion_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 24, a)
}

func CLAPDBVersion_Get(p *radius.Packet) (value []byte) {
	value, _ = CLAPDBVersion_Lookup(p)
	return
}

func CLAPDBVersion_GetString(p *radius.Packet) (value string) {
	value, _ = CLAPDBVersion_LookupString(p)
	return
}

func CLAPDBVersion_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 24) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CLAPDBVersion_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 24) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CLAPDBVersion_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CLAPDBVersion_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CLAPDBVersion_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 24, a)
}

func CLAPDBVersion_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 24, a)
}

func CLAPDBVersion_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 24)
}

func CLUserAgent_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 25, a)
}

func CLUserAgent_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 25, a)
}

func CLUserAgent_Get(p *radius.Packet) (value []byte) {
	value, _ = CLUserAgent_Lookup(p)
	return
}

func CLUserAgent_GetString(p *radius.Packet) (value string) {
	value, _ = CLUserAgent_LookupString(p)
	return
}

func CLUserAgent_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 25) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CLUserAgent_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 25) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CLUserAgent_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CLUserAgent_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CLUserAgent_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 25, a)
}

func CLUserAgent_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 25, a)
}

func CLUserAgent_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 25)
}

func CLSSC_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 26, a)
}

func CLSSC_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 26, a)
}

func CLSSC_Get(p *radius.Packet) (value []byte) {
	value, _ = CLSSC_Lookup(p)
	return
}

func CLSSC_GetString(p *radius.Packet) (value string) {
	value, _ = CLSSC_LookupString(p)
	return
}

func CLSSC_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 26) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CLSSC_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 26) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CLSSC_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CLSSC_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CLSSC_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 26, a)
}

func CLSSC_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 26, a)
}

func CLSSC_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 26)
}

func BWUserGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 27, a)
}

func BWUserGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 27, a)
}

func BWUserGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = BWUserGroup_Lookup(p)
	return
}

func BWUserGroup_GetString(p *radius.Packet) (value string) {
	value, _ = BWUserGroup_LookupString(p)
	return
}

func BWUserGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 27) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWUserGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 27) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWUserGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BWUserGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BWUserGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 27, a)
}

func BWUserGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 27, a)
}

func BWUserGroup_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 27)
}

func BWVenueName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 29, a)
}

func BWVenueName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 29, a)
}

func BWVenueName_Get(p *radius.Packet) (value []byte) {
	value, _ = BWVenueName_Lookup(p)
	return
}

func BWVenueName_GetString(p *radius.Packet) (value string) {
	value, _ = BWVenueName_LookupString(p)
	return
}

func BWVenueName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 29) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWVenueName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 29) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWVenueName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BWVenueName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BWVenueName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 29, a)
}

func BWVenueName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 29, a)
}

func BWVenueName_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 29)
}

func BWCategory_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 30, a)
}

func BWCategory_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 30, a)
}

func BWCategory_Get(p *radius.Packet) (value []byte) {
	value, _ = BWCategory_Lookup(p)
	return
}

func BWCategory_GetString(p *radius.Packet) (value string) {
	value, _ = BWCategory_LookupString(p)
	return
}

func BWCategory_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 30) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWCategory_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 30) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWCategory_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BWCategory_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BWCategory_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 30, a)
}

func BWCategory_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 30, a)
}

func BWCategory_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 30)
}

func BWUserRole_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 32, a)
}

func BWUserRole_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 32, a)
}

func BWUserRole_Get(p *radius.Packet) (value []byte) {
	value, _ = BWUserRole_Lookup(p)
	return
}

func BWUserRole_GetString(p *radius.Packet) (value string) {
	value, _ = BWUserRole_LookupString(p)
	return
}

func BWUserRole_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 32) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWUserRole_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 32) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWUserRole_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BWUserRole_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BWUserRole_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 32, a)
}

func BWUserRole_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 32, a)
}

func BWUserRole_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 32)
}

func BWUserName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 33, a)
}

func BWUserName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 33, a)
}

func BWUserName_Get(p *radius.Packet) (value []byte) {
	value, _ = BWUserName_Lookup(p)
	return
}

func BWUserName_GetString(p *radius.Packet) (value string) {
	value, _ = BWUserName_LookupString(p)
	return
}

func BWUserName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 33) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWUserName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 33) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWUserName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BWUserName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BWUserName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 33, a)
}

func BWUserName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 33, a)
}

func BWUserName_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 33)
}

func BWUserPassword_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 34, a)
}

func BWUserPassword_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 34, a)
}

func BWUserPassword_Get(p *radius.Packet) (value []byte) {
	value, _ = BWUserPassword_Lookup(p)
	return
}

func BWUserPassword_GetString(p *radius.Packet) (value string) {
	value, _ = BWUserPassword_LookupString(p)
	return
}

func BWUserPassword_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 34) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWUserPassword_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 34) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWUserPassword_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BWUserPassword_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BWUserPassword_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 34, a)
}

func BWUserPassword_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 34, a)
}

func BWUserPassword_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 34)
}

func BWUserPrefix_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 35, a)
}

func BWUserPrefix_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 35, a)
}

func BWUserPrefix_Get(p *radius.Packet) (value []byte) {
	value, _ = BWUserPrefix_Lookup(p)
	return
}

func BWUserPrefix_GetString(p *radius.Packet) (value string) {
	value, _ = BWUserPrefix_LookupString(p)
	return
}

func BWUserPrefix_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 35) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWUserPrefix_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 35) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWUserPrefix_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BWUserPrefix_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BWUserPrefix_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 35, a)
}

func BWUserPrefix_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 35, a)
}

func BWUserPrefix_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 35)
}

func BWUserRealm_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 36, a)
}

func BWUserRealm_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 36, a)
}

func BWUserRealm_Get(p *radius.Packet) (value []byte) {
	value, _ = BWUserRealm_Lookup(p)
	return
}

func BWUserRealm_GetString(p *radius.Packet) (value string) {
	value, _ = BWUserRealm_LookupString(p)
	return
}

func BWUserRealm_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 36) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWUserRealm_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 36) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWUserRealm_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BWUserRealm_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BWUserRealm_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 36, a)
}

func BWUserRealm_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 36, a)
}

func BWUserRealm_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 36)
}

func BWOperatorName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 37, a)
}

func BWOperatorName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_AddVendor(p, 37, a)
}

func BWOperatorName_Get(p *radius.Packet) (value []byte) {
	value, _ = BWOperatorName_Lookup(p)
	return
}

func BWOperatorName_GetString(p *radius.Packet) (value string) {
	value, _ = BWOperatorName_LookupString(p)
	return
}

func BWOperatorName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Boingo_GetsVendor(p, 37) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWOperatorName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Boingo_GetsVendor(p, 37) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func BWOperatorName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Boingo_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func BWOperatorName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Boingo_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func BWOperatorName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 37, a)
}

func BWOperatorName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Boingo_SetVendor(p, 37, a)
}

func BWOperatorName_Del(p *radius.Packet) {
	_Boingo_DelVendor(p, 37)
}
