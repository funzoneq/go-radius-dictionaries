// Code generated by radius-dict-gen. DO NOT EDIT.

package sonicwall

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_SonicWall_VendorID = 8741
)

func _SonicWall_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_SonicWall_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _SonicWall_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _SonicWall_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _SonicWall_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _SonicWall_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _SonicWall_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _SonicWall_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _SonicWall_AddVendor(p, typ, attr)
}

func _SonicWall_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _SonicWall_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

type SS3FirewallUserPrivilege uint32

var SS3FirewallUserPrivilege_Strings = map[SS3FirewallUserPrivilege]string{}

func (a SS3FirewallUserPrivilege) String() string {
	if str, ok := SS3FirewallUserPrivilege_Strings[a]; ok {
		return str
	}
	return "SS3FirewallUserPrivilege(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SS3FirewallUserPrivilege_Add(p *radius.Packet, value SS3FirewallUserPrivilege) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SonicWall_AddVendor(p, 1, a)
}

func SS3FirewallUserPrivilege_Get(p *radius.Packet) (value SS3FirewallUserPrivilege) {
	value, _ = SS3FirewallUserPrivilege_Lookup(p)
	return
}

func SS3FirewallUserPrivilege_Gets(p *radius.Packet) (values []SS3FirewallUserPrivilege, err error) {
	var i uint32
	for _, attr := range _SonicWall_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SS3FirewallUserPrivilege(i))
	}
	return
}

func SS3FirewallUserPrivilege_Lookup(p *radius.Packet) (value SS3FirewallUserPrivilege, err error) {
	a, ok := _SonicWall_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SS3FirewallUserPrivilege(i)
	return
}

func SS3FirewallUserPrivilege_Set(p *radius.Packet, value SS3FirewallUserPrivilege) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SonicWall_SetVendor(p, 1, a)
}

func SS3FirewallUserPrivilege_Del(p *radius.Packet) {
	_SonicWall_DelVendor(p, 1)
}

type SonicWallUserPrivilege uint32

const (
	SonicWallUserPrivilege_Value_RemoteAccess      SonicWallUserPrivilege = 1
	SonicWallUserPrivilege_Value_BypassFilters     SonicWallUserPrivilege = 2
	SonicWallUserPrivilege_Value_VPNClientAccess   SonicWallUserPrivilege = 3
	SonicWallUserPrivilege_Value_AccessToVPN       SonicWallUserPrivilege = 4
	SonicWallUserPrivilege_Value_LimitedManagement SonicWallUserPrivilege = 5
	SonicWallUserPrivilege_Value_L2TPClientAccess  SonicWallUserPrivilege = 6
	SonicWallUserPrivilege_Value_WirelessGuest     SonicWallUserPrivilege = 7
	SonicWallUserPrivilege_Value_WirelessAddACL    SonicWallUserPrivilege = 8
	SonicWallUserPrivilege_Value_InternetAccess    SonicWallUserPrivilege = 9
)

var SonicWallUserPrivilege_Strings = map[SonicWallUserPrivilege]string{
	SonicWallUserPrivilege_Value_RemoteAccess:      "Remote-Access",
	SonicWallUserPrivilege_Value_BypassFilters:     "Bypass-Filters",
	SonicWallUserPrivilege_Value_VPNClientAccess:   "VPN-Client-Access",
	SonicWallUserPrivilege_Value_AccessToVPN:       "Access-To-VPN",
	SonicWallUserPrivilege_Value_LimitedManagement: "Limited-Management",
	SonicWallUserPrivilege_Value_L2TPClientAccess:  "L2TP-Client-Access",
	SonicWallUserPrivilege_Value_WirelessGuest:     "Wireless-Guest",
	SonicWallUserPrivilege_Value_WirelessAddACL:    "Wireless-Add-ACL",
	SonicWallUserPrivilege_Value_InternetAccess:    "Internet-Access",
}

func (a SonicWallUserPrivilege) String() string {
	if str, ok := SonicWallUserPrivilege_Strings[a]; ok {
		return str
	}
	return "SonicWallUserPrivilege(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SonicWallUserPrivilege_Add(p *radius.Packet, value SonicWallUserPrivilege) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SonicWall_AddVendor(p, 1, a)
}

func SonicWallUserPrivilege_Get(p *radius.Packet) (value SonicWallUserPrivilege) {
	value, _ = SonicWallUserPrivilege_Lookup(p)
	return
}

func SonicWallUserPrivilege_Gets(p *radius.Packet) (values []SonicWallUserPrivilege, err error) {
	var i uint32
	for _, attr := range _SonicWall_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SonicWallUserPrivilege(i))
	}
	return
}

func SonicWallUserPrivilege_Lookup(p *radius.Packet) (value SonicWallUserPrivilege, err error) {
	a, ok := _SonicWall_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SonicWallUserPrivilege(i)
	return
}

func SonicWallUserPrivilege_Set(p *radius.Packet, value SonicWallUserPrivilege) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SonicWall_SetVendor(p, 1, a)
}

func SonicWallUserPrivilege_Del(p *radius.Packet) {
	_SonicWall_DelVendor(p, 1)
}

func SonicWallUserGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SonicWall_AddVendor(p, 3, a)
}

func SonicWallUserGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SonicWall_AddVendor(p, 3, a)
}

func SonicWallUserGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = SonicWallUserGroup_Lookup(p)
	return
}

func SonicWallUserGroup_GetString(p *radius.Packet) (value string) {
	value, _ = SonicWallUserGroup_LookupString(p)
	return
}

func SonicWallUserGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SonicWall_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SonicWallUserGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SonicWall_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SonicWallUserGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SonicWall_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SonicWallUserGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SonicWall_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SonicWallUserGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SonicWall_SetVendor(p, 3, a)
}

func SonicWallUserGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SonicWall_SetVendor(p, 3, a)
}

func SonicWallUserGroup_Del(p *radius.Packet) {
	_SonicWall_DelVendor(p, 3)
}
