// Code generated by radius-dict-gen. DO NOT EDIT.

package digium

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Digium_VendorID = 22736
)

func _Digium_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Digium_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Digium_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Digium_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Digium_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Digium_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Digium_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Digium_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Digium_AddVendor(p, typ, attr)
}

func _Digium_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Digium_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

func AsteriskAccCode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 101, a)
}

func AsteriskAccCode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 101, a)
}

func AsteriskAccCode_Get(p *radius.Packet) (value []byte) {
	value, _ = AsteriskAccCode_Lookup(p)
	return
}

func AsteriskAccCode_GetString(p *radius.Packet) (value string) {
	value, _ = AsteriskAccCode_LookupString(p)
	return
}

func AsteriskAccCode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Digium_GetsVendor(p, 101) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskAccCode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Digium_GetsVendor(p, 101) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskAccCode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Digium_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AsteriskAccCode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Digium_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AsteriskAccCode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 101, a)
}

func AsteriskAccCode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 101, a)
}

func AsteriskAccCode_Del(p *radius.Packet) {
	_Digium_DelVendor(p, 101)
}

func AsteriskSrc_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 102, a)
}

func AsteriskSrc_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 102, a)
}

func AsteriskSrc_Get(p *radius.Packet) (value []byte) {
	value, _ = AsteriskSrc_Lookup(p)
	return
}

func AsteriskSrc_GetString(p *radius.Packet) (value string) {
	value, _ = AsteriskSrc_LookupString(p)
	return
}

func AsteriskSrc_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Digium_GetsVendor(p, 102) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskSrc_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Digium_GetsVendor(p, 102) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskSrc_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Digium_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AsteriskSrc_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Digium_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AsteriskSrc_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 102, a)
}

func AsteriskSrc_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 102, a)
}

func AsteriskSrc_Del(p *radius.Packet) {
	_Digium_DelVendor(p, 102)
}

func AsteriskDst_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 103, a)
}

func AsteriskDst_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 103, a)
}

func AsteriskDst_Get(p *radius.Packet) (value []byte) {
	value, _ = AsteriskDst_Lookup(p)
	return
}

func AsteriskDst_GetString(p *radius.Packet) (value string) {
	value, _ = AsteriskDst_LookupString(p)
	return
}

func AsteriskDst_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Digium_GetsVendor(p, 103) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskDst_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Digium_GetsVendor(p, 103) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskDst_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Digium_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AsteriskDst_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Digium_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AsteriskDst_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 103, a)
}

func AsteriskDst_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 103, a)
}

func AsteriskDst_Del(p *radius.Packet) {
	_Digium_DelVendor(p, 103)
}

func AsteriskDstCtx_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 104, a)
}

func AsteriskDstCtx_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 104, a)
}

func AsteriskDstCtx_Get(p *radius.Packet) (value []byte) {
	value, _ = AsteriskDstCtx_Lookup(p)
	return
}

func AsteriskDstCtx_GetString(p *radius.Packet) (value string) {
	value, _ = AsteriskDstCtx_LookupString(p)
	return
}

func AsteriskDstCtx_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Digium_GetsVendor(p, 104) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskDstCtx_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Digium_GetsVendor(p, 104) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskDstCtx_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Digium_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AsteriskDstCtx_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Digium_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AsteriskDstCtx_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 104, a)
}

func AsteriskDstCtx_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 104, a)
}

func AsteriskDstCtx_Del(p *radius.Packet) {
	_Digium_DelVendor(p, 104)
}

func AsteriskClid_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 105, a)
}

func AsteriskClid_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 105, a)
}

func AsteriskClid_Get(p *radius.Packet) (value []byte) {
	value, _ = AsteriskClid_Lookup(p)
	return
}

func AsteriskClid_GetString(p *radius.Packet) (value string) {
	value, _ = AsteriskClid_LookupString(p)
	return
}

func AsteriskClid_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Digium_GetsVendor(p, 105) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskClid_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Digium_GetsVendor(p, 105) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskClid_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Digium_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AsteriskClid_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Digium_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AsteriskClid_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 105, a)
}

func AsteriskClid_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 105, a)
}

func AsteriskClid_Del(p *radius.Packet) {
	_Digium_DelVendor(p, 105)
}

func AsteriskChan_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 106, a)
}

func AsteriskChan_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 106, a)
}

func AsteriskChan_Get(p *radius.Packet) (value []byte) {
	value, _ = AsteriskChan_Lookup(p)
	return
}

func AsteriskChan_GetString(p *radius.Packet) (value string) {
	value, _ = AsteriskChan_LookupString(p)
	return
}

func AsteriskChan_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Digium_GetsVendor(p, 106) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskChan_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Digium_GetsVendor(p, 106) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskChan_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Digium_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AsteriskChan_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Digium_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AsteriskChan_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 106, a)
}

func AsteriskChan_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 106, a)
}

func AsteriskChan_Del(p *radius.Packet) {
	_Digium_DelVendor(p, 106)
}

func AsteriskDstChan_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 107, a)
}

func AsteriskDstChan_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 107, a)
}

func AsteriskDstChan_Get(p *radius.Packet) (value []byte) {
	value, _ = AsteriskDstChan_Lookup(p)
	return
}

func AsteriskDstChan_GetString(p *radius.Packet) (value string) {
	value, _ = AsteriskDstChan_LookupString(p)
	return
}

func AsteriskDstChan_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Digium_GetsVendor(p, 107) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskDstChan_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Digium_GetsVendor(p, 107) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskDstChan_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Digium_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AsteriskDstChan_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Digium_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AsteriskDstChan_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 107, a)
}

func AsteriskDstChan_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 107, a)
}

func AsteriskDstChan_Del(p *radius.Packet) {
	_Digium_DelVendor(p, 107)
}

func AsteriskLastApp_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 108, a)
}

func AsteriskLastApp_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 108, a)
}

func AsteriskLastApp_Get(p *radius.Packet) (value []byte) {
	value, _ = AsteriskLastApp_Lookup(p)
	return
}

func AsteriskLastApp_GetString(p *radius.Packet) (value string) {
	value, _ = AsteriskLastApp_LookupString(p)
	return
}

func AsteriskLastApp_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Digium_GetsVendor(p, 108) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskLastApp_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Digium_GetsVendor(p, 108) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskLastApp_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Digium_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AsteriskLastApp_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Digium_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AsteriskLastApp_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 108, a)
}

func AsteriskLastApp_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 108, a)
}

func AsteriskLastApp_Del(p *radius.Packet) {
	_Digium_DelVendor(p, 108)
}

func AsteriskLastData_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 109, a)
}

func AsteriskLastData_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 109, a)
}

func AsteriskLastData_Get(p *radius.Packet) (value []byte) {
	value, _ = AsteriskLastData_Lookup(p)
	return
}

func AsteriskLastData_GetString(p *radius.Packet) (value string) {
	value, _ = AsteriskLastData_LookupString(p)
	return
}

func AsteriskLastData_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Digium_GetsVendor(p, 109) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskLastData_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Digium_GetsVendor(p, 109) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskLastData_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Digium_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AsteriskLastData_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Digium_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AsteriskLastData_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 109, a)
}

func AsteriskLastData_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 109, a)
}

func AsteriskLastData_Del(p *radius.Packet) {
	_Digium_DelVendor(p, 109)
}

func AsteriskStartTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 110, a)
}

func AsteriskStartTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 110, a)
}

func AsteriskStartTime_Get(p *radius.Packet) (value []byte) {
	value, _ = AsteriskStartTime_Lookup(p)
	return
}

func AsteriskStartTime_GetString(p *radius.Packet) (value string) {
	value, _ = AsteriskStartTime_LookupString(p)
	return
}

func AsteriskStartTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Digium_GetsVendor(p, 110) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskStartTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Digium_GetsVendor(p, 110) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskStartTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Digium_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AsteriskStartTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Digium_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AsteriskStartTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 110, a)
}

func AsteriskStartTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 110, a)
}

func AsteriskStartTime_Del(p *radius.Packet) {
	_Digium_DelVendor(p, 110)
}

func AsteriskAnswerTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 111, a)
}

func AsteriskAnswerTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 111, a)
}

func AsteriskAnswerTime_Get(p *radius.Packet) (value []byte) {
	value, _ = AsteriskAnswerTime_Lookup(p)
	return
}

func AsteriskAnswerTime_GetString(p *radius.Packet) (value string) {
	value, _ = AsteriskAnswerTime_LookupString(p)
	return
}

func AsteriskAnswerTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Digium_GetsVendor(p, 111) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskAnswerTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Digium_GetsVendor(p, 111) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskAnswerTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Digium_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AsteriskAnswerTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Digium_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AsteriskAnswerTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 111, a)
}

func AsteriskAnswerTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 111, a)
}

func AsteriskAnswerTime_Del(p *radius.Packet) {
	_Digium_DelVendor(p, 111)
}

func AsteriskEndTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 112, a)
}

func AsteriskEndTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 112, a)
}

func AsteriskEndTime_Get(p *radius.Packet) (value []byte) {
	value, _ = AsteriskEndTime_Lookup(p)
	return
}

func AsteriskEndTime_GetString(p *radius.Packet) (value string) {
	value, _ = AsteriskEndTime_LookupString(p)
	return
}

func AsteriskEndTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Digium_GetsVendor(p, 112) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskEndTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Digium_GetsVendor(p, 112) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskEndTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Digium_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AsteriskEndTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Digium_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AsteriskEndTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 112, a)
}

func AsteriskEndTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 112, a)
}

func AsteriskEndTime_Del(p *radius.Packet) {
	_Digium_DelVendor(p, 112)
}

type AsteriskDuration uint32

var AsteriskDuration_Strings = map[AsteriskDuration]string{}

func (a AsteriskDuration) String() string {
	if str, ok := AsteriskDuration_Strings[a]; ok {
		return str
	}
	return "AsteriskDuration(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AsteriskDuration_Add(p *radius.Packet, value AsteriskDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Digium_AddVendor(p, 113, a)
}

func AsteriskDuration_Get(p *radius.Packet) (value AsteriskDuration) {
	value, _ = AsteriskDuration_Lookup(p)
	return
}

func AsteriskDuration_Gets(p *radius.Packet) (values []AsteriskDuration, err error) {
	var i uint32
	for _, attr := range _Digium_GetsVendor(p, 113) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AsteriskDuration(i))
	}
	return
}

func AsteriskDuration_Lookup(p *radius.Packet) (value AsteriskDuration, err error) {
	a, ok := _Digium_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AsteriskDuration(i)
	return
}

func AsteriskDuration_Set(p *radius.Packet, value AsteriskDuration) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Digium_SetVendor(p, 113, a)
}

func AsteriskDuration_Del(p *radius.Packet) {
	_Digium_DelVendor(p, 113)
}

type AsteriskBillSec uint32

var AsteriskBillSec_Strings = map[AsteriskBillSec]string{}

func (a AsteriskBillSec) String() string {
	if str, ok := AsteriskBillSec_Strings[a]; ok {
		return str
	}
	return "AsteriskBillSec(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AsteriskBillSec_Add(p *radius.Packet, value AsteriskBillSec) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Digium_AddVendor(p, 114, a)
}

func AsteriskBillSec_Get(p *radius.Packet) (value AsteriskBillSec) {
	value, _ = AsteriskBillSec_Lookup(p)
	return
}

func AsteriskBillSec_Gets(p *radius.Packet) (values []AsteriskBillSec, err error) {
	var i uint32
	for _, attr := range _Digium_GetsVendor(p, 114) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AsteriskBillSec(i))
	}
	return
}

func AsteriskBillSec_Lookup(p *radius.Packet) (value AsteriskBillSec, err error) {
	a, ok := _Digium_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AsteriskBillSec(i)
	return
}

func AsteriskBillSec_Set(p *radius.Packet, value AsteriskBillSec) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Digium_SetVendor(p, 114, a)
}

func AsteriskBillSec_Del(p *radius.Packet) {
	_Digium_DelVendor(p, 114)
}

func AsteriskDisposition_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 115, a)
}

func AsteriskDisposition_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 115, a)
}

func AsteriskDisposition_Get(p *radius.Packet) (value []byte) {
	value, _ = AsteriskDisposition_Lookup(p)
	return
}

func AsteriskDisposition_GetString(p *radius.Packet) (value string) {
	value, _ = AsteriskDisposition_LookupString(p)
	return
}

func AsteriskDisposition_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Digium_GetsVendor(p, 115) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskDisposition_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Digium_GetsVendor(p, 115) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskDisposition_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Digium_LookupVendor(p, 115)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AsteriskDisposition_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Digium_LookupVendor(p, 115)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AsteriskDisposition_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 115, a)
}

func AsteriskDisposition_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 115, a)
}

func AsteriskDisposition_Del(p *radius.Packet) {
	_Digium_DelVendor(p, 115)
}

func AsteriskAMAFlags_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 116, a)
}

func AsteriskAMAFlags_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 116, a)
}

func AsteriskAMAFlags_Get(p *radius.Packet) (value []byte) {
	value, _ = AsteriskAMAFlags_Lookup(p)
	return
}

func AsteriskAMAFlags_GetString(p *radius.Packet) (value string) {
	value, _ = AsteriskAMAFlags_LookupString(p)
	return
}

func AsteriskAMAFlags_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Digium_GetsVendor(p, 116) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskAMAFlags_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Digium_GetsVendor(p, 116) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskAMAFlags_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Digium_LookupVendor(p, 116)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AsteriskAMAFlags_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Digium_LookupVendor(p, 116)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AsteriskAMAFlags_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 116, a)
}

func AsteriskAMAFlags_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 116, a)
}

func AsteriskAMAFlags_Del(p *radius.Packet) {
	_Digium_DelVendor(p, 116)
}

func AsteriskUniqueID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 117, a)
}

func AsteriskUniqueID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 117, a)
}

func AsteriskUniqueID_Get(p *radius.Packet) (value []byte) {
	value, _ = AsteriskUniqueID_Lookup(p)
	return
}

func AsteriskUniqueID_GetString(p *radius.Packet) (value string) {
	value, _ = AsteriskUniqueID_LookupString(p)
	return
}

func AsteriskUniqueID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Digium_GetsVendor(p, 117) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskUniqueID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Digium_GetsVendor(p, 117) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskUniqueID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Digium_LookupVendor(p, 117)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AsteriskUniqueID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Digium_LookupVendor(p, 117)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AsteriskUniqueID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 117, a)
}

func AsteriskUniqueID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 117, a)
}

func AsteriskUniqueID_Del(p *radius.Packet) {
	_Digium_DelVendor(p, 117)
}

func AsteriskUserField_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 118, a)
}

func AsteriskUserField_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_AddVendor(p, 118, a)
}

func AsteriskUserField_Get(p *radius.Packet) (value []byte) {
	value, _ = AsteriskUserField_Lookup(p)
	return
}

func AsteriskUserField_GetString(p *radius.Packet) (value string) {
	value, _ = AsteriskUserField_LookupString(p)
	return
}

func AsteriskUserField_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Digium_GetsVendor(p, 118) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskUserField_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Digium_GetsVendor(p, 118) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AsteriskUserField_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Digium_LookupVendor(p, 118)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AsteriskUserField_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Digium_LookupVendor(p, 118)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AsteriskUserField_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 118, a)
}

func AsteriskUserField_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Digium_SetVendor(p, 118, a)
}

func AsteriskUserField_Del(p *radius.Packet) {
	_Digium_DelVendor(p, 118)
}
