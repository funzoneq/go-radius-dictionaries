// Code generated by radius-dict-gen. DO NOT EDIT.

package apc

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_APC_VendorID = 318
)

func _APC_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_APC_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _APC_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _APC_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _APC_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _APC_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _APC_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _APC_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _APC_AddVendor(p, typ, attr)
}

func _APC_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _APC_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

type APCServiceType uint32

const (
	APCServiceType_Value_Admin    APCServiceType = 1
	APCServiceType_Value_Device   APCServiceType = 2
	APCServiceType_Value_ReadOnly APCServiceType = 3
	APCServiceType_Value_Outlet   APCServiceType = 4
	APCServiceType_Value_Card     APCServiceType = 5
)

var APCServiceType_Strings = map[APCServiceType]string{
	APCServiceType_Value_Admin:    "Admin",
	APCServiceType_Value_Device:   "Device",
	APCServiceType_Value_ReadOnly: "ReadOnly",
	APCServiceType_Value_Outlet:   "Outlet",
	APCServiceType_Value_Card:     "Card",
}

func (a APCServiceType) String() string {
	if str, ok := APCServiceType_Strings[a]; ok {
		return str
	}
	return "APCServiceType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func APCServiceType_Add(p *radius.Packet, value APCServiceType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _APC_AddVendor(p, 1, a)
}

func APCServiceType_Get(p *radius.Packet) (value APCServiceType) {
	value, _ = APCServiceType_Lookup(p)
	return
}

func APCServiceType_Gets(p *radius.Packet) (values []APCServiceType, err error) {
	var i uint32
	for _, attr := range _APC_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, APCServiceType(i))
	}
	return
}

func APCServiceType_Lookup(p *radius.Packet) (value APCServiceType, err error) {
	a, ok := _APC_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = APCServiceType(i)
	return
}

func APCServiceType_Set(p *radius.Packet, value APCServiceType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _APC_SetVendor(p, 1, a)
}

func APCServiceType_Del(p *radius.Packet) {
	_APC_DelVendor(p, 1)
}

func APCOutlets_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 2, a)
}

func APCOutlets_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 2, a)
}

func APCOutlets_Get(p *radius.Packet) (value []byte) {
	value, _ = APCOutlets_Lookup(p)
	return
}

func APCOutlets_GetString(p *radius.Packet) (value string) {
	value, _ = APCOutlets_LookupString(p)
	return
}

func APCOutlets_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _APC_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCOutlets_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _APC_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCOutlets_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _APC_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func APCOutlets_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _APC_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func APCOutlets_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 2, a)
}

func APCOutlets_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 2, a)
}

func APCOutlets_Del(p *radius.Packet) {
	_APC_DelVendor(p, 2)
}

func APCPerms_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 3, a)
}

func APCPerms_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 3, a)
}

func APCPerms_Get(p *radius.Packet) (value []byte) {
	value, _ = APCPerms_Lookup(p)
	return
}

func APCPerms_GetString(p *radius.Packet) (value string) {
	value, _ = APCPerms_LookupString(p)
	return
}

func APCPerms_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _APC_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCPerms_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _APC_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCPerms_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _APC_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func APCPerms_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _APC_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func APCPerms_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 3, a)
}

func APCPerms_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 3, a)
}

func APCPerms_Del(p *radius.Packet) {
	_APC_DelVendor(p, 3)
}

func APCUsername_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 4, a)
}

func APCUsername_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 4, a)
}

func APCUsername_Get(p *radius.Packet) (value []byte) {
	value, _ = APCUsername_Lookup(p)
	return
}

func APCUsername_GetString(p *radius.Packet) (value string) {
	value, _ = APCUsername_LookupString(p)
	return
}

func APCUsername_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _APC_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCUsername_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _APC_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCUsername_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _APC_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func APCUsername_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _APC_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func APCUsername_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 4, a)
}

func APCUsername_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 4, a)
}

func APCUsername_Del(p *radius.Packet) {
	_APC_DelVendor(p, 4)
}

func APCContact_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 5, a)
}

func APCContact_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 5, a)
}

func APCContact_Get(p *radius.Packet) (value []byte) {
	value, _ = APCContact_Lookup(p)
	return
}

func APCContact_GetString(p *radius.Packet) (value string) {
	value, _ = APCContact_LookupString(p)
	return
}

func APCContact_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _APC_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCContact_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _APC_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCContact_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _APC_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func APCContact_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _APC_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func APCContact_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 5, a)
}

func APCContact_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 5, a)
}

func APCContact_Del(p *radius.Packet) {
	_APC_DelVendor(p, 5)
}

func APCACCPXDoors_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 6, a)
}

func APCACCPXDoors_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 6, a)
}

func APCACCPXDoors_Get(p *radius.Packet) (value []byte) {
	value, _ = APCACCPXDoors_Lookup(p)
	return
}

func APCACCPXDoors_GetString(p *radius.Packet) (value string) {
	value, _ = APCACCPXDoors_LookupString(p)
	return
}

func APCACCPXDoors_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _APC_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCACCPXDoors_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _APC_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCACCPXDoors_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _APC_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func APCACCPXDoors_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _APC_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func APCACCPXDoors_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 6, a)
}

func APCACCPXDoors_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 6, a)
}

func APCACCPXDoors_Del(p *radius.Packet) {
	_APC_DelVendor(p, 6)
}

func APCACCPXStatus_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 7, a)
}

func APCACCPXStatus_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 7, a)
}

func APCACCPXStatus_Get(p *radius.Packet) (value []byte) {
	value, _ = APCACCPXStatus_Lookup(p)
	return
}

func APCACCPXStatus_GetString(p *radius.Packet) (value string) {
	value, _ = APCACCPXStatus_LookupString(p)
	return
}

func APCACCPXStatus_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _APC_GetsVendor(p, 7) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCACCPXStatus_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _APC_GetsVendor(p, 7) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCACCPXStatus_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _APC_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func APCACCPXStatus_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _APC_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func APCACCPXStatus_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 7, a)
}

func APCACCPXStatus_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 7, a)
}

func APCACCPXStatus_Del(p *radius.Packet) {
	_APC_DelVendor(p, 7)
}

func APCACCPXAccess1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 8, a)
}

func APCACCPXAccess1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 8, a)
}

func APCACCPXAccess1_Get(p *radius.Packet) (value []byte) {
	value, _ = APCACCPXAccess1_Lookup(p)
	return
}

func APCACCPXAccess1_GetString(p *radius.Packet) (value string) {
	value, _ = APCACCPXAccess1_LookupString(p)
	return
}

func APCACCPXAccess1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _APC_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCACCPXAccess1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _APC_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCACCPXAccess1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _APC_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func APCACCPXAccess1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _APC_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func APCACCPXAccess1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 8, a)
}

func APCACCPXAccess1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 8, a)
}

func APCACCPXAccess1_Del(p *radius.Packet) {
	_APC_DelVendor(p, 8)
}

func APCACCPXAccess2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 9, a)
}

func APCACCPXAccess2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 9, a)
}

func APCACCPXAccess2_Get(p *radius.Packet) (value []byte) {
	value, _ = APCACCPXAccess2_Lookup(p)
	return
}

func APCACCPXAccess2_GetString(p *radius.Packet) (value string) {
	value, _ = APCACCPXAccess2_LookupString(p)
	return
}

func APCACCPXAccess2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _APC_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCACCPXAccess2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _APC_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCACCPXAccess2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _APC_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func APCACCPXAccess2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _APC_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func APCACCPXAccess2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 9, a)
}

func APCACCPXAccess2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 9, a)
}

func APCACCPXAccess2_Del(p *radius.Packet) {
	_APC_DelVendor(p, 9)
}

func APCACCPXAccess3_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 10, a)
}

func APCACCPXAccess3_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 10, a)
}

func APCACCPXAccess3_Get(p *radius.Packet) (value []byte) {
	value, _ = APCACCPXAccess3_Lookup(p)
	return
}

func APCACCPXAccess3_GetString(p *radius.Packet) (value string) {
	value, _ = APCACCPXAccess3_LookupString(p)
	return
}

func APCACCPXAccess3_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _APC_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCACCPXAccess3_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _APC_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCACCPXAccess3_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _APC_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func APCACCPXAccess3_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _APC_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func APCACCPXAccess3_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 10, a)
}

func APCACCPXAccess3_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 10, a)
}

func APCACCPXAccess3_Del(p *radius.Packet) {
	_APC_DelVendor(p, 10)
}

func APCACCPXAccess4_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 11, a)
}

func APCACCPXAccess4_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 11, a)
}

func APCACCPXAccess4_Get(p *radius.Packet) (value []byte) {
	value, _ = APCACCPXAccess4_Lookup(p)
	return
}

func APCACCPXAccess4_GetString(p *radius.Packet) (value string) {
	value, _ = APCACCPXAccess4_LookupString(p)
	return
}

func APCACCPXAccess4_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _APC_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCACCPXAccess4_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _APC_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCACCPXAccess4_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _APC_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func APCACCPXAccess4_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _APC_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func APCACCPXAccess4_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 11, a)
}

func APCACCPXAccess4_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 11, a)
}

func APCACCPXAccess4_Del(p *radius.Packet) {
	_APC_DelVendor(p, 11)
}

func APCACCPXAccess5_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 12, a)
}

func APCACCPXAccess5_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 12, a)
}

func APCACCPXAccess5_Get(p *radius.Packet) (value []byte) {
	value, _ = APCACCPXAccess5_Lookup(p)
	return
}

func APCACCPXAccess5_GetString(p *radius.Packet) (value string) {
	value, _ = APCACCPXAccess5_LookupString(p)
	return
}

func APCACCPXAccess5_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _APC_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCACCPXAccess5_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _APC_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCACCPXAccess5_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _APC_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func APCACCPXAccess5_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _APC_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func APCACCPXAccess5_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 12, a)
}

func APCACCPXAccess5_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 12, a)
}

func APCACCPXAccess5_Del(p *radius.Packet) {
	_APC_DelVendor(p, 12)
}

func APCACCPXAccess6_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 13, a)
}

func APCACCPXAccess6_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 13, a)
}

func APCACCPXAccess6_Get(p *radius.Packet) (value []byte) {
	value, _ = APCACCPXAccess6_Lookup(p)
	return
}

func APCACCPXAccess6_GetString(p *radius.Packet) (value string) {
	value, _ = APCACCPXAccess6_LookupString(p)
	return
}

func APCACCPXAccess6_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _APC_GetsVendor(p, 13) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCACCPXAccess6_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _APC_GetsVendor(p, 13) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCACCPXAccess6_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _APC_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func APCACCPXAccess6_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _APC_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func APCACCPXAccess6_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 13, a)
}

func APCACCPXAccess6_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 13, a)
}

func APCACCPXAccess6_Del(p *radius.Packet) {
	_APC_DelVendor(p, 13)
}

func APCACCPXAccess7_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 14, a)
}

func APCACCPXAccess7_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_AddVendor(p, 14, a)
}

func APCACCPXAccess7_Get(p *radius.Packet) (value []byte) {
	value, _ = APCACCPXAccess7_Lookup(p)
	return
}

func APCACCPXAccess7_GetString(p *radius.Packet) (value string) {
	value, _ = APCACCPXAccess7_LookupString(p)
	return
}

func APCACCPXAccess7_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _APC_GetsVendor(p, 14) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCACCPXAccess7_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _APC_GetsVendor(p, 14) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func APCACCPXAccess7_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _APC_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func APCACCPXAccess7_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _APC_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func APCACCPXAccess7_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 14, a)
}

func APCACCPXAccess7_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _APC_SetVendor(p, 14, a)
}

func APCACCPXAccess7_Del(p *radius.Packet) {
	_APC_DelVendor(p, 14)
}
