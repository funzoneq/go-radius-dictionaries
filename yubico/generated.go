// Code generated by radius-dict-gen. DO NOT EDIT.

package yubico

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Yubico_VendorID = 41482
)

func _Yubico_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Yubico_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Yubico_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Yubico_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Yubico_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Yubico_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Yubico_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Yubico_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Yubico_AddVendor(p, typ, attr)
}

func _Yubico_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Yubico_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func YubikeyKey_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Yubico_AddVendor(p, 1, a)
}

func YubikeyKey_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Yubico_AddVendor(p, 1, a)
}

func YubikeyKey_Get(p *radius.Packet) (value []byte) {
	value, _ = YubikeyKey_Lookup(p)
	return
}

func YubikeyKey_GetString(p *radius.Packet) (value string) {
	value, _ = YubikeyKey_LookupString(p)
	return
}

func YubikeyKey_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Yubico_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func YubikeyKey_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Yubico_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func YubikeyKey_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Yubico_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func YubikeyKey_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Yubico_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func YubikeyKey_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Yubico_SetVendor(p, 1, a)
}

func YubikeyKey_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Yubico_SetVendor(p, 1, a)
}

func YubikeyKey_Del(p *radius.Packet) {
	_Yubico_DelVendor(p, 1)
}

func YubikeyPublicID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Yubico_AddVendor(p, 2, a)
}

func YubikeyPublicID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Yubico_AddVendor(p, 2, a)
}

func YubikeyPublicID_Get(p *radius.Packet) (value []byte) {
	value, _ = YubikeyPublicID_Lookup(p)
	return
}

func YubikeyPublicID_GetString(p *radius.Packet) (value string) {
	value, _ = YubikeyPublicID_LookupString(p)
	return
}

func YubikeyPublicID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Yubico_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func YubikeyPublicID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Yubico_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func YubikeyPublicID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Yubico_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func YubikeyPublicID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Yubico_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func YubikeyPublicID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Yubico_SetVendor(p, 2, a)
}

func YubikeyPublicID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Yubico_SetVendor(p, 2, a)
}

func YubikeyPublicID_Del(p *radius.Packet) {
	_Yubico_DelVendor(p, 2)
}

func YubikeyPrivateID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Yubico_AddVendor(p, 3, a)
}

func YubikeyPrivateID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Yubico_AddVendor(p, 3, a)
}

func YubikeyPrivateID_Get(p *radius.Packet) (value []byte) {
	value, _ = YubikeyPrivateID_Lookup(p)
	return
}

func YubikeyPrivateID_GetString(p *radius.Packet) (value string) {
	value, _ = YubikeyPrivateID_LookupString(p)
	return
}

func YubikeyPrivateID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Yubico_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func YubikeyPrivateID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Yubico_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func YubikeyPrivateID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Yubico_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func YubikeyPrivateID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Yubico_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func YubikeyPrivateID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Yubico_SetVendor(p, 3, a)
}

func YubikeyPrivateID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Yubico_SetVendor(p, 3, a)
}

func YubikeyPrivateID_Del(p *radius.Packet) {
	_Yubico_DelVendor(p, 3)
}

type YubikeyCounter uint32

var YubikeyCounter_Strings = map[YubikeyCounter]string{}

func (a YubikeyCounter) String() string {
	if str, ok := YubikeyCounter_Strings[a]; ok {
		return str
	}
	return "YubikeyCounter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func YubikeyCounter_Add(p *radius.Packet, value YubikeyCounter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Yubico_AddVendor(p, 4, a)
}

func YubikeyCounter_Get(p *radius.Packet) (value YubikeyCounter) {
	value, _ = YubikeyCounter_Lookup(p)
	return
}

func YubikeyCounter_Gets(p *radius.Packet) (values []YubikeyCounter, err error) {
	var i uint32
	for _, attr := range _Yubico_GetsVendor(p, 4) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, YubikeyCounter(i))
	}
	return
}

func YubikeyCounter_Lookup(p *radius.Packet) (value YubikeyCounter, err error) {
	a, ok := _Yubico_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = YubikeyCounter(i)
	return
}

func YubikeyCounter_Set(p *radius.Packet, value YubikeyCounter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Yubico_SetVendor(p, 4, a)
}

func YubikeyCounter_Del(p *radius.Packet) {
	_Yubico_DelVendor(p, 4)
}

type YubikeyTimestamp uint32

var YubikeyTimestamp_Strings = map[YubikeyTimestamp]string{}

func (a YubikeyTimestamp) String() string {
	if str, ok := YubikeyTimestamp_Strings[a]; ok {
		return str
	}
	return "YubikeyTimestamp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func YubikeyTimestamp_Add(p *radius.Packet, value YubikeyTimestamp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Yubico_AddVendor(p, 5, a)
}

func YubikeyTimestamp_Get(p *radius.Packet) (value YubikeyTimestamp) {
	value, _ = YubikeyTimestamp_Lookup(p)
	return
}

func YubikeyTimestamp_Gets(p *radius.Packet) (values []YubikeyTimestamp, err error) {
	var i uint32
	for _, attr := range _Yubico_GetsVendor(p, 5) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, YubikeyTimestamp(i))
	}
	return
}

func YubikeyTimestamp_Lookup(p *radius.Packet) (value YubikeyTimestamp, err error) {
	a, ok := _Yubico_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = YubikeyTimestamp(i)
	return
}

func YubikeyTimestamp_Set(p *radius.Packet, value YubikeyTimestamp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Yubico_SetVendor(p, 5, a)
}

func YubikeyTimestamp_Del(p *radius.Packet) {
	_Yubico_DelVendor(p, 5)
}

type YubikeyRandom uint32

var YubikeyRandom_Strings = map[YubikeyRandom]string{}

func (a YubikeyRandom) String() string {
	if str, ok := YubikeyRandom_Strings[a]; ok {
		return str
	}
	return "YubikeyRandom(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func YubikeyRandom_Add(p *radius.Packet, value YubikeyRandom) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Yubico_AddVendor(p, 6, a)
}

func YubikeyRandom_Get(p *radius.Packet) (value YubikeyRandom) {
	value, _ = YubikeyRandom_Lookup(p)
	return
}

func YubikeyRandom_Gets(p *radius.Packet) (values []YubikeyRandom, err error) {
	var i uint32
	for _, attr := range _Yubico_GetsVendor(p, 6) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, YubikeyRandom(i))
	}
	return
}

func YubikeyRandom_Lookup(p *radius.Packet) (value YubikeyRandom, err error) {
	a, ok := _Yubico_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = YubikeyRandom(i)
	return
}

func YubikeyRandom_Set(p *radius.Packet, value YubikeyRandom) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Yubico_SetVendor(p, 6, a)
}

func YubikeyRandom_Del(p *radius.Packet) {
	_Yubico_DelVendor(p, 6)
}

func YubikeyOTP_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Yubico_AddVendor(p, 7, a)
}

func YubikeyOTP_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Yubico_AddVendor(p, 7, a)
}

func YubikeyOTP_Get(p *radius.Packet) (value []byte) {
	value, _ = YubikeyOTP_Lookup(p)
	return
}

func YubikeyOTP_GetString(p *radius.Packet) (value string) {
	value, _ = YubikeyOTP_LookupString(p)
	return
}

func YubikeyOTP_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Yubico_GetsVendor(p, 7) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func YubikeyOTP_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Yubico_GetsVendor(p, 7) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func YubikeyOTP_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Yubico_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func YubikeyOTP_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Yubico_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func YubikeyOTP_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Yubico_SetVendor(p, 7, a)
}

func YubikeyOTP_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Yubico_SetVendor(p, 7, a)
}

func YubikeyOTP_Del(p *radius.Packet) {
	_Yubico_DelVendor(p, 7)
}
