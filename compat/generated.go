// Code generated by radius-dict-gen. DO NOT EDIT.

package compat

import (
	"net"
	"strconv"

	"layeh.com/radius"
)

const (
	ClientID_Type            radius.Type = 4
	ClientPortID_Type        radius.Type = 5
	UserServiceType_Type     radius.Type = 6
	FramedAddress_Type       radius.Type = 8
	FramedNetmask_Type       radius.Type = 9
	FramedFilterID_Type      radius.Type = 11
	LoginHost_Type           radius.Type = 14
	LoginPort_Type           radius.Type = 16
	OldPassword_Type         radius.Type = 17
	PortMessage_Type         radius.Type = 18
	DialbackNo_Type          radius.Type = 19
	DialbackName_Type        radius.Type = 20
	ChallengeState_Type      radius.Type = 24
	FramedCompression_Type   radius.Type = 13
	ServiceType_Type         radius.Type = 6
	LoginCallbackNumber_Type radius.Type = 19
	FramedCallbackID_Type    radius.Type = 20
	ClientPortDNIS_Type      radius.Type = 30
	CallerID_Type            radius.Type = 31
)

func ClientID_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	p.Add(ClientID_Type, a)
	return
}

func ClientID_Get(p *radius.Packet) (value net.IP) {
	value, _ = ClientID_Lookup(p)
	return
}

func ClientID_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, avp := range p.Attributes {
		if avp.Type != ClientID_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ClientID_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := p.Lookup(ClientID_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func ClientID_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	p.Set(ClientID_Type, a)
	return
}

func ClientID_Del(p *radius.Packet) {
	p.Attributes.Del(ClientID_Type)
}

type ClientPortID uint32

var ClientPortID_Strings = map[ClientPortID]string{}

func (a ClientPortID) String() string {
	if str, ok := ClientPortID_Strings[a]; ok {
		return str
	}
	return "ClientPortID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ClientPortID_Add(p *radius.Packet, value ClientPortID) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Add(ClientPortID_Type, a)
	return
}

func ClientPortID_Get(p *radius.Packet) (value ClientPortID) {
	value, _ = ClientPortID_Lookup(p)
	return
}

func ClientPortID_Gets(p *radius.Packet) (values []ClientPortID, err error) {
	var i uint32
	for _, avp := range p.Attributes {
		if avp.Type != ClientPortID_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ClientPortID(i))
	}
	return
}

func ClientPortID_Lookup(p *radius.Packet) (value ClientPortID, err error) {
	a, ok := p.Lookup(ClientPortID_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ClientPortID(i)
	return
}

func ClientPortID_Set(p *radius.Packet, value ClientPortID) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Set(ClientPortID_Type, a)
	return
}

func ClientPortID_Del(p *radius.Packet) {
	p.Attributes.Del(ClientPortID_Type)
}

type UserServiceType uint32

var UserServiceType_Strings = map[UserServiceType]string{}

func (a UserServiceType) String() string {
	if str, ok := UserServiceType_Strings[a]; ok {
		return str
	}
	return "UserServiceType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UserServiceType_Add(p *radius.Packet, value UserServiceType) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Add(UserServiceType_Type, a)
	return
}

func UserServiceType_Get(p *radius.Packet) (value UserServiceType) {
	value, _ = UserServiceType_Lookup(p)
	return
}

func UserServiceType_Gets(p *radius.Packet) (values []UserServiceType, err error) {
	var i uint32
	for _, avp := range p.Attributes {
		if avp.Type != UserServiceType_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UserServiceType(i))
	}
	return
}

func UserServiceType_Lookup(p *radius.Packet) (value UserServiceType, err error) {
	a, ok := p.Lookup(UserServiceType_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UserServiceType(i)
	return
}

func UserServiceType_Set(p *radius.Packet, value UserServiceType) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Set(UserServiceType_Type, a)
	return
}

func UserServiceType_Del(p *radius.Packet) {
	p.Attributes.Del(UserServiceType_Type)
}

func FramedAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	p.Add(FramedAddress_Type, a)
	return
}

func FramedAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = FramedAddress_Lookup(p)
	return
}

func FramedAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, avp := range p.Attributes {
		if avp.Type != FramedAddress_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FramedAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := p.Lookup(FramedAddress_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func FramedAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	p.Set(FramedAddress_Type, a)
	return
}

func FramedAddress_Del(p *radius.Packet) {
	p.Attributes.Del(FramedAddress_Type)
}

func FramedNetmask_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	p.Add(FramedNetmask_Type, a)
	return
}

func FramedNetmask_Get(p *radius.Packet) (value net.IP) {
	value, _ = FramedNetmask_Lookup(p)
	return
}

func FramedNetmask_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, avp := range p.Attributes {
		if avp.Type != FramedNetmask_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FramedNetmask_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := p.Lookup(FramedNetmask_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func FramedNetmask_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	p.Set(FramedNetmask_Type, a)
	return
}

func FramedNetmask_Del(p *radius.Packet) {
	p.Attributes.Del(FramedNetmask_Type)
}

func FramedFilterID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(FramedFilterID_Type, a)
	return
}

func FramedFilterID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(FramedFilterID_Type, a)
	return
}

func FramedFilterID_Get(p *radius.Packet) (value []byte) {
	value, _ = FramedFilterID_Lookup(p)
	return
}

func FramedFilterID_GetString(p *radius.Packet) (value string) {
	value, _ = FramedFilterID_LookupString(p)
	return
}

func FramedFilterID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != FramedFilterID_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FramedFilterID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != FramedFilterID_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FramedFilterID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(FramedFilterID_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FramedFilterID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(FramedFilterID_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FramedFilterID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(FramedFilterID_Type, a)
	return
}

func FramedFilterID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(FramedFilterID_Type, a)
	return
}

func FramedFilterID_Del(p *radius.Packet) {
	p.Attributes.Del(FramedFilterID_Type)
}

func LoginHost_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	p.Add(LoginHost_Type, a)
	return
}

func LoginHost_Get(p *radius.Packet) (value net.IP) {
	value, _ = LoginHost_Lookup(p)
	return
}

func LoginHost_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, avp := range p.Attributes {
		if avp.Type != LoginHost_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LoginHost_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := p.Lookup(LoginHost_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func LoginHost_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	p.Set(LoginHost_Type, a)
	return
}

func LoginHost_Del(p *radius.Packet) {
	p.Attributes.Del(LoginHost_Type)
}

type LoginPort uint32

var LoginPort_Strings = map[LoginPort]string{}

func (a LoginPort) String() string {
	if str, ok := LoginPort_Strings[a]; ok {
		return str
	}
	return "LoginPort(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LoginPort_Add(p *radius.Packet, value LoginPort) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Add(LoginPort_Type, a)
	return
}

func LoginPort_Get(p *radius.Packet) (value LoginPort) {
	value, _ = LoginPort_Lookup(p)
	return
}

func LoginPort_Gets(p *radius.Packet) (values []LoginPort, err error) {
	var i uint32
	for _, avp := range p.Attributes {
		if avp.Type != LoginPort_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LoginPort(i))
	}
	return
}

func LoginPort_Lookup(p *radius.Packet) (value LoginPort, err error) {
	a, ok := p.Lookup(LoginPort_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LoginPort(i)
	return
}

func LoginPort_Set(p *radius.Packet, value LoginPort) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Set(LoginPort_Type, a)
	return
}

func LoginPort_Del(p *radius.Packet) {
	p.Attributes.Del(LoginPort_Type)
}

func OldPassword_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(OldPassword_Type, a)
	return
}

func OldPassword_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(OldPassword_Type, a)
	return
}

func OldPassword_Get(p *radius.Packet) (value []byte) {
	value, _ = OldPassword_Lookup(p)
	return
}

func OldPassword_GetString(p *radius.Packet) (value string) {
	value, _ = OldPassword_LookupString(p)
	return
}

func OldPassword_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != OldPassword_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func OldPassword_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != OldPassword_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func OldPassword_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(OldPassword_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func OldPassword_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(OldPassword_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func OldPassword_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(OldPassword_Type, a)
	return
}

func OldPassword_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(OldPassword_Type, a)
	return
}

func OldPassword_Del(p *radius.Packet) {
	p.Attributes.Del(OldPassword_Type)
}

func PortMessage_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(PortMessage_Type, a)
	return
}

func PortMessage_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(PortMessage_Type, a)
	return
}

func PortMessage_Get(p *radius.Packet) (value []byte) {
	value, _ = PortMessage_Lookup(p)
	return
}

func PortMessage_GetString(p *radius.Packet) (value string) {
	value, _ = PortMessage_LookupString(p)
	return
}

func PortMessage_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != PortMessage_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PortMessage_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != PortMessage_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PortMessage_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(PortMessage_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PortMessage_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(PortMessage_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PortMessage_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(PortMessage_Type, a)
	return
}

func PortMessage_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(PortMessage_Type, a)
	return
}

func PortMessage_Del(p *radius.Packet) {
	p.Attributes.Del(PortMessage_Type)
}

func DialbackNo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DialbackNo_Type, a)
	return
}

func DialbackNo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DialbackNo_Type, a)
	return
}

func DialbackNo_Get(p *radius.Packet) (value []byte) {
	value, _ = DialbackNo_Lookup(p)
	return
}

func DialbackNo_GetString(p *radius.Packet) (value string) {
	value, _ = DialbackNo_LookupString(p)
	return
}

func DialbackNo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DialbackNo_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DialbackNo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DialbackNo_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DialbackNo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DialbackNo_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DialbackNo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DialbackNo_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DialbackNo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DialbackNo_Type, a)
	return
}

func DialbackNo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DialbackNo_Type, a)
	return
}

func DialbackNo_Del(p *radius.Packet) {
	p.Attributes.Del(DialbackNo_Type)
}

func DialbackName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(DialbackName_Type, a)
	return
}

func DialbackName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(DialbackName_Type, a)
	return
}

func DialbackName_Get(p *radius.Packet) (value []byte) {
	value, _ = DialbackName_Lookup(p)
	return
}

func DialbackName_GetString(p *radius.Packet) (value string) {
	value, _ = DialbackName_LookupString(p)
	return
}

func DialbackName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != DialbackName_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DialbackName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != DialbackName_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DialbackName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(DialbackName_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DialbackName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(DialbackName_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DialbackName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(DialbackName_Type, a)
	return
}

func DialbackName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(DialbackName_Type, a)
	return
}

func DialbackName_Del(p *radius.Packet) {
	p.Attributes.Del(DialbackName_Type)
}

func ChallengeState_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(ChallengeState_Type, a)
	return
}

func ChallengeState_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(ChallengeState_Type, a)
	return
}

func ChallengeState_Get(p *radius.Packet) (value []byte) {
	value, _ = ChallengeState_Lookup(p)
	return
}

func ChallengeState_GetString(p *radius.Packet) (value string) {
	value, _ = ChallengeState_LookupString(p)
	return
}

func ChallengeState_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != ChallengeState_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ChallengeState_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != ChallengeState_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ChallengeState_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(ChallengeState_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ChallengeState_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(ChallengeState_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ChallengeState_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(ChallengeState_Type, a)
	return
}

func ChallengeState_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(ChallengeState_Type, a)
	return
}

func ChallengeState_Del(p *radius.Packet) {
	p.Attributes.Del(ChallengeState_Type)
}

type FramedCompression uint32

const (
	FramedCompression_Value_VJTCPIP FramedCompression = 1
)

var FramedCompression_Strings = map[FramedCompression]string{
	FramedCompression_Value_VJTCPIP: "VJ-TCP-IP",
}

func (a FramedCompression) String() string {
	if str, ok := FramedCompression_Strings[a]; ok {
		return str
	}
	return "FramedCompression(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func FramedCompression_Add(p *radius.Packet, value FramedCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Add(FramedCompression_Type, a)
	return
}

func FramedCompression_Get(p *radius.Packet) (value FramedCompression) {
	value, _ = FramedCompression_Lookup(p)
	return
}

func FramedCompression_Gets(p *radius.Packet) (values []FramedCompression, err error) {
	var i uint32
	for _, avp := range p.Attributes {
		if avp.Type != FramedCompression_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, FramedCompression(i))
	}
	return
}

func FramedCompression_Lookup(p *radius.Packet) (value FramedCompression, err error) {
	a, ok := p.Lookup(FramedCompression_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = FramedCompression(i)
	return
}

func FramedCompression_Set(p *radius.Packet, value FramedCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Set(FramedCompression_Type, a)
	return
}

func FramedCompression_Del(p *radius.Packet) {
	p.Attributes.Del(FramedCompression_Type)
}

type ServiceType uint32

const (
	ServiceType_Value_Login             ServiceType = 1
	ServiceType_Value_Framed            ServiceType = 2
	ServiceType_Value_CallbackLogin     ServiceType = 3
	ServiceType_Value_CallbackFramed    ServiceType = 4
	ServiceType_Value_DialoutFramedUser ServiceType = 5
	ServiceType_Value_ShellUser         ServiceType = 6
	ServiceType_Value_ExecUser          ServiceType = 7
)

var ServiceType_Strings = map[ServiceType]string{
	ServiceType_Value_Login:             "Login",
	ServiceType_Value_Framed:            "Framed",
	ServiceType_Value_CallbackLogin:     "Callback-Login",
	ServiceType_Value_CallbackFramed:    "Callback-Framed",
	ServiceType_Value_DialoutFramedUser: "Dialout-Framed-User",
	ServiceType_Value_ShellUser:         "Shell-User",
	ServiceType_Value_ExecUser:          "Exec-User",
}

func (a ServiceType) String() string {
	if str, ok := ServiceType_Strings[a]; ok {
		return str
	}
	return "ServiceType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ServiceType_Add(p *radius.Packet, value ServiceType) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Add(ServiceType_Type, a)
	return
}

func ServiceType_Get(p *radius.Packet) (value ServiceType) {
	value, _ = ServiceType_Lookup(p)
	return
}

func ServiceType_Gets(p *radius.Packet) (values []ServiceType, err error) {
	var i uint32
	for _, avp := range p.Attributes {
		if avp.Type != ServiceType_Type {
			continue
		}
		attr := avp.Attribute
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ServiceType(i))
	}
	return
}

func ServiceType_Lookup(p *radius.Packet) (value ServiceType, err error) {
	a, ok := p.Lookup(ServiceType_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ServiceType(i)
	return
}

func ServiceType_Set(p *radius.Packet, value ServiceType) (err error) {
	a := radius.NewInteger(uint32(value))
	p.Set(ServiceType_Type, a)
	return
}

func ServiceType_Del(p *radius.Packet) {
	p.Attributes.Del(ServiceType_Type)
}

func LoginCallbackNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(LoginCallbackNumber_Type, a)
	return
}

func LoginCallbackNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(LoginCallbackNumber_Type, a)
	return
}

func LoginCallbackNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = LoginCallbackNumber_Lookup(p)
	return
}

func LoginCallbackNumber_GetString(p *radius.Packet) (value string) {
	value, _ = LoginCallbackNumber_LookupString(p)
	return
}

func LoginCallbackNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != LoginCallbackNumber_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LoginCallbackNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != LoginCallbackNumber_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LoginCallbackNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(LoginCallbackNumber_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LoginCallbackNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(LoginCallbackNumber_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LoginCallbackNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(LoginCallbackNumber_Type, a)
	return
}

func LoginCallbackNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(LoginCallbackNumber_Type, a)
	return
}

func LoginCallbackNumber_Del(p *radius.Packet) {
	p.Attributes.Del(LoginCallbackNumber_Type)
}

func FramedCallbackID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(FramedCallbackID_Type, a)
	return
}

func FramedCallbackID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(FramedCallbackID_Type, a)
	return
}

func FramedCallbackID_Get(p *radius.Packet) (value []byte) {
	value, _ = FramedCallbackID_Lookup(p)
	return
}

func FramedCallbackID_GetString(p *radius.Packet) (value string) {
	value, _ = FramedCallbackID_LookupString(p)
	return
}

func FramedCallbackID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != FramedCallbackID_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FramedCallbackID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != FramedCallbackID_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FramedCallbackID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(FramedCallbackID_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FramedCallbackID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(FramedCallbackID_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FramedCallbackID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(FramedCallbackID_Type, a)
	return
}

func FramedCallbackID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(FramedCallbackID_Type, a)
	return
}

func FramedCallbackID_Del(p *radius.Packet) {
	p.Attributes.Del(FramedCallbackID_Type)
}

func ClientPortDNIS_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(ClientPortDNIS_Type, a)
	return
}

func ClientPortDNIS_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(ClientPortDNIS_Type, a)
	return
}

func ClientPortDNIS_Get(p *radius.Packet) (value []byte) {
	value, _ = ClientPortDNIS_Lookup(p)
	return
}

func ClientPortDNIS_GetString(p *radius.Packet) (value string) {
	value, _ = ClientPortDNIS_LookupString(p)
	return
}

func ClientPortDNIS_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != ClientPortDNIS_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ClientPortDNIS_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != ClientPortDNIS_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ClientPortDNIS_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(ClientPortDNIS_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ClientPortDNIS_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(ClientPortDNIS_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ClientPortDNIS_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(ClientPortDNIS_Type, a)
	return
}

func ClientPortDNIS_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(ClientPortDNIS_Type, a)
	return
}

func ClientPortDNIS_Del(p *radius.Packet) {
	p.Attributes.Del(ClientPortDNIS_Type)
}

func CallerID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Add(CallerID_Type, a)
	return
}

func CallerID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Add(CallerID_Type, a)
	return
}

func CallerID_Get(p *radius.Packet) (value []byte) {
	value, _ = CallerID_Lookup(p)
	return
}

func CallerID_GetString(p *radius.Packet) (value string) {
	value, _ = CallerID_LookupString(p)
	return
}

func CallerID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, avp := range p.Attributes {
		if avp.Type != CallerID_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CallerID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, avp := range p.Attributes {
		if avp.Type != CallerID_Type {
			continue
		}
		attr := avp.Attribute
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CallerID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := p.Lookup(CallerID_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CallerID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := p.Lookup(CallerID_Type)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CallerID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	p.Set(CallerID_Type, a)
	return
}

func CallerID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	p.Set(CallerID_Type, a)
	return
}

func CallerID_Del(p *radius.Packet) {
	p.Attributes.Del(CallerID_Type)
}
