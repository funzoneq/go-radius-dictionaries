// Code generated by radius-dict-gen. DO NOT EDIT.

package unisphere

import (
	"crypto/rand"
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Unisphere_VendorID = 4874
)

func _Unisphere_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Unisphere_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Unisphere_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Unisphere_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Unisphere_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Unisphere_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Unisphere_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Unisphere_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Unisphere_AddVendor(p, typ, attr)
}

func _Unisphere_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Unisphere_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func UnisphereVirtualRouter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 1, a)
}

func UnisphereVirtualRouter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 1, a)
}

func UnisphereVirtualRouter_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereVirtualRouter_Lookup(p)
	return
}

func UnisphereVirtualRouter_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereVirtualRouter_LookupString(p)
	return
}

func UnisphereVirtualRouter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereVirtualRouter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereVirtualRouter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereVirtualRouter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereVirtualRouter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 1, a)
}

func UnisphereVirtualRouter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 1, a)
}

func UnisphereVirtualRouter_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 1)
}

func UnisphereLocalAddressPool_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 2, a)
}

func UnisphereLocalAddressPool_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 2, a)
}

func UnisphereLocalAddressPool_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereLocalAddressPool_Lookup(p)
	return
}

func UnisphereLocalAddressPool_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereLocalAddressPool_LookupString(p)
	return
}

func UnisphereLocalAddressPool_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereLocalAddressPool_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereLocalAddressPool_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereLocalAddressPool_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereLocalAddressPool_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 2, a)
}

func UnisphereLocalAddressPool_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 2, a)
}

func UnisphereLocalAddressPool_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 2)
}

func UnisphereLocalInterface_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 3, a)
}

func UnisphereLocalInterface_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 3, a)
}

func UnisphereLocalInterface_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereLocalInterface_Lookup(p)
	return
}

func UnisphereLocalInterface_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereLocalInterface_LookupString(p)
	return
}

func UnisphereLocalInterface_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereLocalInterface_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereLocalInterface_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereLocalInterface_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereLocalInterface_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 3, a)
}

func UnisphereLocalInterface_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 3, a)
}

func UnisphereLocalInterface_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 3)
}

func UnispherePrimaryDNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 4, a)
}

func UnispherePrimaryDNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = UnispherePrimaryDNS_Lookup(p)
	return
}

func UnispherePrimaryDNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Unisphere_GetsVendor(p, 4) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnispherePrimaryDNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Unisphere_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func UnispherePrimaryDNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 4, a)
}

func UnispherePrimaryDNS_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 4)
}

func UnisphereSecondaryDNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 5, a)
}

func UnisphereSecondaryDNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = UnisphereSecondaryDNS_Lookup(p)
	return
}

func UnisphereSecondaryDNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Unisphere_GetsVendor(p, 5) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereSecondaryDNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Unisphere_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func UnisphereSecondaryDNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 5, a)
}

func UnisphereSecondaryDNS_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 5)
}

func UnispherePrimaryWins_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 6, a)
}

func UnispherePrimaryWins_Get(p *radius.Packet) (value net.IP) {
	value, _ = UnispherePrimaryWins_Lookup(p)
	return
}

func UnispherePrimaryWins_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Unisphere_GetsVendor(p, 6) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnispherePrimaryWins_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Unisphere_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func UnispherePrimaryWins_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 6, a)
}

func UnispherePrimaryWins_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 6)
}

func UnisphereSecondaryWins_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 7, a)
}

func UnisphereSecondaryWins_Get(p *radius.Packet) (value net.IP) {
	value, _ = UnisphereSecondaryWins_Lookup(p)
	return
}

func UnisphereSecondaryWins_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Unisphere_GetsVendor(p, 7) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereSecondaryWins_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Unisphere_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func UnisphereSecondaryWins_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 7, a)
}

func UnisphereSecondaryWins_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 7)
}

func UnisphereTunnelVirtualRouter_Add(p *radius.Packet, tag byte, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Unisphere_AddVendor(p, 8, a)
}

func UnisphereTunnelVirtualRouter_AddString(p *radius.Packet, tag byte, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Unisphere_AddVendor(p, 8, a)
}

func UnisphereTunnelVirtualRouter_Get(p *radius.Packet) (tag byte, value []byte) {
	tag, value, _ = UnisphereTunnelVirtualRouter_Lookup(p)
	return
}

func UnisphereTunnelVirtualRouter_GetString(p *radius.Packet) (tag byte, value string) {
	tag, value, _ = UnisphereTunnelVirtualRouter_LookupString(p)
	return
}

func UnisphereTunnelVirtualRouter_Gets(p *radius.Packet) (tags []byte, values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 8) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr = attr[1:]
		}
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
		tags = append(tags, tag)
	}
	return
}

func UnisphereTunnelVirtualRouter_GetStrings(p *radius.Packet) (tags []byte, values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 8) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr = attr[1:]
		}
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
		tags = append(tags, tag)
	}
	return
}

func UnisphereTunnelVirtualRouter_Lookup(p *radius.Packet) (tag byte, value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a = a[1:]
	}
	value = radius.Bytes(a)
	return
}

func UnisphereTunnelVirtualRouter_LookupString(p *radius.Packet) (tag byte, value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a = a[1:]
	}
	value = radius.String(a)
	return
}

func UnisphereTunnelVirtualRouter_Set(p *radius.Packet, tag byte, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Unisphere_SetVendor(p, 8, a)
}

func UnisphereTunnelVirtualRouter_SetString(p *radius.Packet, tag byte, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Unisphere_SetVendor(p, 8, a)
}

func UnisphereTunnelVirtualRouter_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 8)
}

func UnisphereTunnelPassword_Add(p *radius.Packet, tag byte, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Unisphere_AddVendor(p, 9, a)
}

func UnisphereTunnelPassword_AddString(p *radius.Packet, tag byte, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Unisphere_AddVendor(p, 9, a)
}

func UnisphereTunnelPassword_Get(p *radius.Packet) (tag byte, value []byte) {
	tag, value, _ = UnisphereTunnelPassword_Lookup(p)
	return
}

func UnisphereTunnelPassword_GetString(p *radius.Packet) (tag byte, value string) {
	tag, value, _ = UnisphereTunnelPassword_LookupString(p)
	return
}

func UnisphereTunnelPassword_Gets(p *radius.Packet) (tags []byte, values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 9) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr = attr[1:]
		}
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
		tags = append(tags, tag)
	}
	return
}

func UnisphereTunnelPassword_GetStrings(p *radius.Packet) (tags []byte, values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 9) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr = attr[1:]
		}
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
		tags = append(tags, tag)
	}
	return
}

func UnisphereTunnelPassword_Lookup(p *radius.Packet) (tag byte, value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a = a[1:]
	}
	value = radius.Bytes(a)
	return
}

func UnisphereTunnelPassword_LookupString(p *radius.Packet) (tag byte, value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a = a[1:]
	}
	value = radius.String(a)
	return
}

func UnisphereTunnelPassword_Set(p *radius.Packet, tag byte, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Unisphere_SetVendor(p, 9, a)
}

func UnisphereTunnelPassword_SetString(p *radius.Packet, tag byte, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Unisphere_SetVendor(p, 9, a)
}

func UnisphereTunnelPassword_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 9)
}

func UnisphereIngressPolicyName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 10, a)
}

func UnisphereIngressPolicyName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 10, a)
}

func UnisphereIngressPolicyName_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereIngressPolicyName_Lookup(p)
	return
}

func UnisphereIngressPolicyName_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereIngressPolicyName_LookupString(p)
	return
}

func UnisphereIngressPolicyName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIngressPolicyName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIngressPolicyName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereIngressPolicyName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereIngressPolicyName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 10, a)
}

func UnisphereIngressPolicyName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 10, a)
}

func UnisphereIngressPolicyName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 10)
}

func UnisphereEgressPolicyName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 11, a)
}

func UnisphereEgressPolicyName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 11, a)
}

func UnisphereEgressPolicyName_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereEgressPolicyName_Lookup(p)
	return
}

func UnisphereEgressPolicyName_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereEgressPolicyName_LookupString(p)
	return
}

func UnisphereEgressPolicyName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereEgressPolicyName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereEgressPolicyName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereEgressPolicyName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereEgressPolicyName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 11, a)
}

func UnisphereEgressPolicyName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 11, a)
}

func UnisphereEgressPolicyName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 11)
}

type UnisphereIngressStatistics uint32

const (
	UnisphereIngressStatistics_Value_Disable UnisphereIngressStatistics = 0
	UnisphereIngressStatistics_Value_Enable  UnisphereIngressStatistics = 1
)

var UnisphereIngressStatistics_Strings = map[UnisphereIngressStatistics]string{
	UnisphereIngressStatistics_Value_Disable: "disable",
	UnisphereIngressStatistics_Value_Enable:  "enable",
}

func (a UnisphereIngressStatistics) String() string {
	if str, ok := UnisphereIngressStatistics_Strings[a]; ok {
		return str
	}
	return "UnisphereIngressStatistics(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereIngressStatistics_Add(p *radius.Packet, value UnisphereIngressStatistics) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 12, a)
}

func UnisphereIngressStatistics_Get(p *radius.Packet) (value UnisphereIngressStatistics) {
	value, _ = UnisphereIngressStatistics_Lookup(p)
	return
}

func UnisphereIngressStatistics_Gets(p *radius.Packet) (values []UnisphereIngressStatistics, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 12) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereIngressStatistics(i))
	}
	return
}

func UnisphereIngressStatistics_Lookup(p *radius.Packet) (value UnisphereIngressStatistics, err error) {
	a, ok := _Unisphere_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereIngressStatistics(i)
	return
}

func UnisphereIngressStatistics_Set(p *radius.Packet, value UnisphereIngressStatistics) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 12, a)
}

func UnisphereIngressStatistics_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 12)
}

type UnisphereEgressStatistics uint32

const (
	UnisphereEgressStatistics_Value_Disable UnisphereEgressStatistics = 0
	UnisphereEgressStatistics_Value_Enable  UnisphereEgressStatistics = 1
)

var UnisphereEgressStatistics_Strings = map[UnisphereEgressStatistics]string{
	UnisphereEgressStatistics_Value_Disable: "disable",
	UnisphereEgressStatistics_Value_Enable:  "enable",
}

func (a UnisphereEgressStatistics) String() string {
	if str, ok := UnisphereEgressStatistics_Strings[a]; ok {
		return str
	}
	return "UnisphereEgressStatistics(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereEgressStatistics_Add(p *radius.Packet, value UnisphereEgressStatistics) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 13, a)
}

func UnisphereEgressStatistics_Get(p *radius.Packet) (value UnisphereEgressStatistics) {
	value, _ = UnisphereEgressStatistics_Lookup(p)
	return
}

func UnisphereEgressStatistics_Gets(p *radius.Packet) (values []UnisphereEgressStatistics, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 13) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereEgressStatistics(i))
	}
	return
}

func UnisphereEgressStatistics_Lookup(p *radius.Packet) (value UnisphereEgressStatistics, err error) {
	a, ok := _Unisphere_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereEgressStatistics(i)
	return
}

func UnisphereEgressStatistics_Set(p *radius.Packet, value UnisphereEgressStatistics) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 13, a)
}

func UnisphereEgressStatistics_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 13)
}

type UnisphereServiceCategory uint32

const (
	UnisphereServiceCategory_Value_UBR    UnisphereServiceCategory = 1
	UnisphereServiceCategory_Value_UBRPCR UnisphereServiceCategory = 2
	UnisphereServiceCategory_Value_NrtVBR UnisphereServiceCategory = 3
	UnisphereServiceCategory_Value_CBR    UnisphereServiceCategory = 4
	UnisphereServiceCategory_Value_RtVBR  UnisphereServiceCategory = 5
)

var UnisphereServiceCategory_Strings = map[UnisphereServiceCategory]string{
	UnisphereServiceCategory_Value_UBR:    "UBR",
	UnisphereServiceCategory_Value_UBRPCR: "UBRPCR",
	UnisphereServiceCategory_Value_NrtVBR: "nrtVBR",
	UnisphereServiceCategory_Value_CBR:    "CBR",
	UnisphereServiceCategory_Value_RtVBR:  "rtVBR",
}

func (a UnisphereServiceCategory) String() string {
	if str, ok := UnisphereServiceCategory_Strings[a]; ok {
		return str
	}
	return "UnisphereServiceCategory(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereServiceCategory_Add(p *radius.Packet, value UnisphereServiceCategory) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 14, a)
}

func UnisphereServiceCategory_Get(p *radius.Packet) (value UnisphereServiceCategory) {
	value, _ = UnisphereServiceCategory_Lookup(p)
	return
}

func UnisphereServiceCategory_Gets(p *radius.Packet) (values []UnisphereServiceCategory, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 14) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereServiceCategory(i))
	}
	return
}

func UnisphereServiceCategory_Lookup(p *radius.Packet) (value UnisphereServiceCategory, err error) {
	a, ok := _Unisphere_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereServiceCategory(i)
	return
}

func UnisphereServiceCategory_Set(p *radius.Packet, value UnisphereServiceCategory) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 14, a)
}

func UnisphereServiceCategory_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 14)
}

type UnispherePCR uint32

var UnispherePCR_Strings = map[UnispherePCR]string{}

func (a UnispherePCR) String() string {
	if str, ok := UnispherePCR_Strings[a]; ok {
		return str
	}
	return "UnispherePCR(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnispherePCR_Add(p *radius.Packet, value UnispherePCR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 15, a)
}

func UnispherePCR_Get(p *radius.Packet) (value UnispherePCR) {
	value, _ = UnispherePCR_Lookup(p)
	return
}

func UnispherePCR_Gets(p *radius.Packet) (values []UnispherePCR, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 15) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnispherePCR(i))
	}
	return
}

func UnispherePCR_Lookup(p *radius.Packet) (value UnispherePCR, err error) {
	a, ok := _Unisphere_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnispherePCR(i)
	return
}

func UnispherePCR_Set(p *radius.Packet, value UnispherePCR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 15, a)
}

func UnispherePCR_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 15)
}

type UnisphereSCR uint32

var UnisphereSCR_Strings = map[UnisphereSCR]string{}

func (a UnisphereSCR) String() string {
	if str, ok := UnisphereSCR_Strings[a]; ok {
		return str
	}
	return "UnisphereSCR(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereSCR_Add(p *radius.Packet, value UnisphereSCR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 16, a)
}

func UnisphereSCR_Get(p *radius.Packet) (value UnisphereSCR) {
	value, _ = UnisphereSCR_Lookup(p)
	return
}

func UnisphereSCR_Gets(p *radius.Packet) (values []UnisphereSCR, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 16) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereSCR(i))
	}
	return
}

func UnisphereSCR_Lookup(p *radius.Packet) (value UnisphereSCR, err error) {
	a, ok := _Unisphere_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereSCR(i)
	return
}

func UnisphereSCR_Set(p *radius.Packet, value UnisphereSCR) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 16, a)
}

func UnisphereSCR_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 16)
}

type UnisphereMBS uint32

var UnisphereMBS_Strings = map[UnisphereMBS]string{}

func (a UnisphereMBS) String() string {
	if str, ok := UnisphereMBS_Strings[a]; ok {
		return str
	}
	return "UnisphereMBS(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereMBS_Add(p *radius.Packet, value UnisphereMBS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 17, a)
}

func UnisphereMBS_Get(p *radius.Packet) (value UnisphereMBS) {
	value, _ = UnisphereMBS_Lookup(p)
	return
}

func UnisphereMBS_Gets(p *radius.Packet) (values []UnisphereMBS, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 17) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereMBS(i))
	}
	return
}

func UnisphereMBS_Lookup(p *radius.Packet) (value UnisphereMBS, err error) {
	a, ok := _Unisphere_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereMBS(i)
	return
}

func UnisphereMBS_Set(p *radius.Packet, value UnisphereMBS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 17, a)
}

func UnisphereMBS_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 17)
}

func UnisphereInitCLIAccessLevel_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 18, a)
}

func UnisphereInitCLIAccessLevel_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 18, a)
}

func UnisphereInitCLIAccessLevel_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereInitCLIAccessLevel_Lookup(p)
	return
}

func UnisphereInitCLIAccessLevel_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereInitCLIAccessLevel_LookupString(p)
	return
}

func UnisphereInitCLIAccessLevel_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 18) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereInitCLIAccessLevel_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 18) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereInitCLIAccessLevel_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereInitCLIAccessLevel_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereInitCLIAccessLevel_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 18, a)
}

func UnisphereInitCLIAccessLevel_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 18, a)
}

func UnisphereInitCLIAccessLevel_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 18)
}

type UnisphereAllowAllVRAccess uint32

const (
	UnisphereAllowAllVRAccess_Value_Disable UnisphereAllowAllVRAccess = 0
	UnisphereAllowAllVRAccess_Value_Enable  UnisphereAllowAllVRAccess = 1
)

var UnisphereAllowAllVRAccess_Strings = map[UnisphereAllowAllVRAccess]string{
	UnisphereAllowAllVRAccess_Value_Disable: "disable",
	UnisphereAllowAllVRAccess_Value_Enable:  "enable",
}

func (a UnisphereAllowAllVRAccess) String() string {
	if str, ok := UnisphereAllowAllVRAccess_Strings[a]; ok {
		return str
	}
	return "UnisphereAllowAllVRAccess(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereAllowAllVRAccess_Add(p *radius.Packet, value UnisphereAllowAllVRAccess) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 19, a)
}

func UnisphereAllowAllVRAccess_Get(p *radius.Packet) (value UnisphereAllowAllVRAccess) {
	value, _ = UnisphereAllowAllVRAccess_Lookup(p)
	return
}

func UnisphereAllowAllVRAccess_Gets(p *radius.Packet) (values []UnisphereAllowAllVRAccess, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 19) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereAllowAllVRAccess(i))
	}
	return
}

func UnisphereAllowAllVRAccess_Lookup(p *radius.Packet) (value UnisphereAllowAllVRAccess, err error) {
	a, ok := _Unisphere_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereAllowAllVRAccess(i)
	return
}

func UnisphereAllowAllVRAccess_Set(p *radius.Packet, value UnisphereAllowAllVRAccess) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 19, a)
}

func UnisphereAllowAllVRAccess_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 19)
}

func UnisphereAltCLIAccessLevel_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 20, a)
}

func UnisphereAltCLIAccessLevel_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 20, a)
}

func UnisphereAltCLIAccessLevel_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereAltCLIAccessLevel_Lookup(p)
	return
}

func UnisphereAltCLIAccessLevel_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereAltCLIAccessLevel_LookupString(p)
	return
}

func UnisphereAltCLIAccessLevel_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 20) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereAltCLIAccessLevel_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 20) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereAltCLIAccessLevel_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereAltCLIAccessLevel_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereAltCLIAccessLevel_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 20, a)
}

func UnisphereAltCLIAccessLevel_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 20, a)
}

func UnisphereAltCLIAccessLevel_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 20)
}

func UnisphereAltCLIVRouterName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 21, a)
}

func UnisphereAltCLIVRouterName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 21, a)
}

func UnisphereAltCLIVRouterName_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereAltCLIVRouterName_Lookup(p)
	return
}

func UnisphereAltCLIVRouterName_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereAltCLIVRouterName_LookupString(p)
	return
}

func UnisphereAltCLIVRouterName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 21) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereAltCLIVRouterName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 21) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereAltCLIVRouterName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereAltCLIVRouterName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereAltCLIVRouterName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 21, a)
}

func UnisphereAltCLIVRouterName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 21, a)
}

func UnisphereAltCLIVRouterName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 21)
}

type UnisphereSAValidate uint32

const (
	UnisphereSAValidate_Value_Disable UnisphereSAValidate = 0
	UnisphereSAValidate_Value_Enable  UnisphereSAValidate = 1
)

var UnisphereSAValidate_Strings = map[UnisphereSAValidate]string{
	UnisphereSAValidate_Value_Disable: "disable",
	UnisphereSAValidate_Value_Enable:  "enable",
}

func (a UnisphereSAValidate) String() string {
	if str, ok := UnisphereSAValidate_Strings[a]; ok {
		return str
	}
	return "UnisphereSAValidate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereSAValidate_Add(p *radius.Packet, value UnisphereSAValidate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 22, a)
}

func UnisphereSAValidate_Get(p *radius.Packet) (value UnisphereSAValidate) {
	value, _ = UnisphereSAValidate_Lookup(p)
	return
}

func UnisphereSAValidate_Gets(p *radius.Packet) (values []UnisphereSAValidate, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 22) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereSAValidate(i))
	}
	return
}

func UnisphereSAValidate_Lookup(p *radius.Packet) (value UnisphereSAValidate, err error) {
	a, ok := _Unisphere_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereSAValidate(i)
	return
}

func UnisphereSAValidate_Set(p *radius.Packet, value UnisphereSAValidate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 22, a)
}

func UnisphereSAValidate_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 22)
}

type UnisphereIgmpEnable uint32

const (
	UnisphereIgmpEnable_Value_Disable UnisphereIgmpEnable = 0
	UnisphereIgmpEnable_Value_Enable  UnisphereIgmpEnable = 1
)

var UnisphereIgmpEnable_Strings = map[UnisphereIgmpEnable]string{
	UnisphereIgmpEnable_Value_Disable: "disable",
	UnisphereIgmpEnable_Value_Enable:  "enable",
}

func (a UnisphereIgmpEnable) String() string {
	if str, ok := UnisphereIgmpEnable_Strings[a]; ok {
		return str
	}
	return "UnisphereIgmpEnable(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereIgmpEnable_Add(p *radius.Packet, value UnisphereIgmpEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 23, a)
}

func UnisphereIgmpEnable_Get(p *radius.Packet) (value UnisphereIgmpEnable) {
	value, _ = UnisphereIgmpEnable_Lookup(p)
	return
}

func UnisphereIgmpEnable_Gets(p *radius.Packet) (values []UnisphereIgmpEnable, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 23) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereIgmpEnable(i))
	}
	return
}

func UnisphereIgmpEnable_Lookup(p *radius.Packet) (value UnisphereIgmpEnable, err error) {
	a, ok := _Unisphere_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereIgmpEnable(i)
	return
}

func UnisphereIgmpEnable_Set(p *radius.Packet, value UnisphereIgmpEnable) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 23, a)
}

func UnisphereIgmpEnable_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 23)
}

func UnispherePppoeDescription_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 24, a)
}

func UnispherePppoeDescription_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 24, a)
}

func UnispherePppoeDescription_Get(p *radius.Packet) (value []byte) {
	value, _ = UnispherePppoeDescription_Lookup(p)
	return
}

func UnispherePppoeDescription_GetString(p *radius.Packet) (value string) {
	value, _ = UnispherePppoeDescription_LookupString(p)
	return
}

func UnispherePppoeDescription_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 24) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnispherePppoeDescription_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 24) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnispherePppoeDescription_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnispherePppoeDescription_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnispherePppoeDescription_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 24, a)
}

func UnispherePppoeDescription_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 24, a)
}

func UnispherePppoeDescription_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 24)
}

func UnisphereRedirectVRouterName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 25, a)
}

func UnisphereRedirectVRouterName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 25, a)
}

func UnisphereRedirectVRouterName_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereRedirectVRouterName_Lookup(p)
	return
}

func UnisphereRedirectVRouterName_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereRedirectVRouterName_LookupString(p)
	return
}

func UnisphereRedirectVRouterName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 25) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereRedirectVRouterName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 25) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereRedirectVRouterName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereRedirectVRouterName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereRedirectVRouterName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 25, a)
}

func UnisphereRedirectVRouterName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 25, a)
}

func UnisphereRedirectVRouterName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 25)
}

func UnisphereQosProfileName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 26, a)
}

func UnisphereQosProfileName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 26, a)
}

func UnisphereQosProfileName_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereQosProfileName_Lookup(p)
	return
}

func UnisphereQosProfileName_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereQosProfileName_LookupString(p)
	return
}

func UnisphereQosProfileName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 26) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereQosProfileName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 26) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereQosProfileName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereQosProfileName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereQosProfileName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 26, a)
}

func UnisphereQosProfileName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 26, a)
}

func UnisphereQosProfileName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 26)
}

type UnispherePppoeMaxSessions uint32

var UnispherePppoeMaxSessions_Strings = map[UnispherePppoeMaxSessions]string{}

func (a UnispherePppoeMaxSessions) String() string {
	if str, ok := UnispherePppoeMaxSessions_Strings[a]; ok {
		return str
	}
	return "UnispherePppoeMaxSessions(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnispherePppoeMaxSessions_Add(p *radius.Packet, value UnispherePppoeMaxSessions) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 27, a)
}

func UnispherePppoeMaxSessions_Get(p *radius.Packet) (value UnispherePppoeMaxSessions) {
	value, _ = UnispherePppoeMaxSessions_Lookup(p)
	return
}

func UnispherePppoeMaxSessions_Gets(p *radius.Packet) (values []UnispherePppoeMaxSessions, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 27) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnispherePppoeMaxSessions(i))
	}
	return
}

func UnispherePppoeMaxSessions_Lookup(p *radius.Packet) (value UnispherePppoeMaxSessions, err error) {
	a, ok := _Unisphere_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnispherePppoeMaxSessions(i)
	return
}

func UnispherePppoeMaxSessions_Set(p *radius.Packet, value UnispherePppoeMaxSessions) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 27, a)
}

func UnispherePppoeMaxSessions_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 27)
}

func UnispherePppoeURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 28, a)
}

func UnispherePppoeURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 28, a)
}

func UnispherePppoeURL_Get(p *radius.Packet) (value []byte) {
	value, _ = UnispherePppoeURL_Lookup(p)
	return
}

func UnispherePppoeURL_GetString(p *radius.Packet) (value string) {
	value, _ = UnispherePppoeURL_LookupString(p)
	return
}

func UnispherePppoeURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 28) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnispherePppoeURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 28) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnispherePppoeURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnispherePppoeURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnispherePppoeURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 28, a)
}

func UnispherePppoeURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 28, a)
}

func UnispherePppoeURL_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 28)
}

type UnisphereQosProfileInterfaceType uint32

const (
	UnisphereQosProfileInterfaceType_Value_IP         UnisphereQosProfileInterfaceType = 1
	UnisphereQosProfileInterfaceType_Value_ATM        UnisphereQosProfileInterfaceType = 2
	UnisphereQosProfileInterfaceType_Value_HDLC       UnisphereQosProfileInterfaceType = 3
	UnisphereQosProfileInterfaceType_Value_ETHERNET   UnisphereQosProfileInterfaceType = 4
	UnisphereQosProfileInterfaceType_Value_SERVERPORT UnisphereQosProfileInterfaceType = 5
	UnisphereQosProfileInterfaceType_Value_ATM1483    UnisphereQosProfileInterfaceType = 6
	UnisphereQosProfileInterfaceType_Value_FRAMERELAY UnisphereQosProfileInterfaceType = 7
	UnisphereQosProfileInterfaceType_Value_MPLSMINOR  UnisphereQosProfileInterfaceType = 8
	UnisphereQosProfileInterfaceType_Value_CBF        UnisphereQosProfileInterfaceType = 9
	UnisphereQosProfileInterfaceType_Value_IPTUNNEL   UnisphereQosProfileInterfaceType = 10
	UnisphereQosProfileInterfaceType_Value_VLANSUB    UnisphereQosProfileInterfaceType = 11
	UnisphereQosProfileInterfaceType_Value_PPPOESUB   UnisphereQosProfileInterfaceType = 12
)

var UnisphereQosProfileInterfaceType_Strings = map[UnisphereQosProfileInterfaceType]string{
	UnisphereQosProfileInterfaceType_Value_IP:         "IP",
	UnisphereQosProfileInterfaceType_Value_ATM:        "ATM",
	UnisphereQosProfileInterfaceType_Value_HDLC:       "HDLC",
	UnisphereQosProfileInterfaceType_Value_ETHERNET:   "ETHERNET",
	UnisphereQosProfileInterfaceType_Value_SERVERPORT: "SERVER-PORT",
	UnisphereQosProfileInterfaceType_Value_ATM1483:    "ATM-1483",
	UnisphereQosProfileInterfaceType_Value_FRAMERELAY: "FRAME-RELAY",
	UnisphereQosProfileInterfaceType_Value_MPLSMINOR:  "MPLS-MINOR",
	UnisphereQosProfileInterfaceType_Value_CBF:        "CBF",
	UnisphereQosProfileInterfaceType_Value_IPTUNNEL:   "IP-TUNNEL",
	UnisphereQosProfileInterfaceType_Value_VLANSUB:    "VLAN-SUB",
	UnisphereQosProfileInterfaceType_Value_PPPOESUB:   "PPPOE-SUB",
}

func (a UnisphereQosProfileInterfaceType) String() string {
	if str, ok := UnisphereQosProfileInterfaceType_Strings[a]; ok {
		return str
	}
	return "UnisphereQosProfileInterfaceType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereQosProfileInterfaceType_Add(p *radius.Packet, value UnisphereQosProfileInterfaceType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 29, a)
}

func UnisphereQosProfileInterfaceType_Get(p *radius.Packet) (value UnisphereQosProfileInterfaceType) {
	value, _ = UnisphereQosProfileInterfaceType_Lookup(p)
	return
}

func UnisphereQosProfileInterfaceType_Gets(p *radius.Packet) (values []UnisphereQosProfileInterfaceType, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 29) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereQosProfileInterfaceType(i))
	}
	return
}

func UnisphereQosProfileInterfaceType_Lookup(p *radius.Packet) (value UnisphereQosProfileInterfaceType, err error) {
	a, ok := _Unisphere_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereQosProfileInterfaceType(i)
	return
}

func UnisphereQosProfileInterfaceType_Set(p *radius.Packet, value UnisphereQosProfileInterfaceType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 29, a)
}

func UnisphereQosProfileInterfaceType_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 29)
}

type UnisphereNasPortMethod uint32

const (
	UnisphereNasPortMethod_Value_None      UnisphereNasPortMethod = 0
	UnisphereNasPortMethod_Value_CISCOCLID UnisphereNasPortMethod = 1
)

var UnisphereNasPortMethod_Strings = map[UnisphereNasPortMethod]string{
	UnisphereNasPortMethod_Value_None:      "None",
	UnisphereNasPortMethod_Value_CISCOCLID: "CISCO-CLID",
}

func (a UnisphereNasPortMethod) String() string {
	if str, ok := UnisphereNasPortMethod_Strings[a]; ok {
		return str
	}
	return "UnisphereNasPortMethod(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereNasPortMethod_Add(p *radius.Packet, value UnisphereNasPortMethod) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 30, a)
}

func UnisphereNasPortMethod_Get(p *radius.Packet) (value UnisphereNasPortMethod) {
	value, _ = UnisphereNasPortMethod_Lookup(p)
	return
}

func UnisphereNasPortMethod_Gets(p *radius.Packet) (values []UnisphereNasPortMethod, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 30) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereNasPortMethod(i))
	}
	return
}

func UnisphereNasPortMethod_Lookup(p *radius.Packet) (value UnisphereNasPortMethod, err error) {
	a, ok := _Unisphere_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereNasPortMethod(i)
	return
}

func UnisphereNasPortMethod_Set(p *radius.Packet, value UnisphereNasPortMethod) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 30, a)
}

func UnisphereNasPortMethod_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 30)
}

func UnisphereServiceBundle_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 31, a)
}

func UnisphereServiceBundle_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 31, a)
}

func UnisphereServiceBundle_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereServiceBundle_Lookup(p)
	return
}

func UnisphereServiceBundle_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereServiceBundle_LookupString(p)
	return
}

func UnisphereServiceBundle_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 31) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereServiceBundle_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 31) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereServiceBundle_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereServiceBundle_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereServiceBundle_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 31, a)
}

func UnisphereServiceBundle_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 31, a)
}

func UnisphereServiceBundle_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 31)
}

type UnisphereTunnelTos uint32

var UnisphereTunnelTos_Strings = map[UnisphereTunnelTos]string{}

func (a UnisphereTunnelTos) String() string {
	if str, ok := UnisphereTunnelTos_Strings[a]; ok {
		return str
	}
	return "UnisphereTunnelTos(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereTunnelTos_Add(p *radius.Packet, value UnisphereTunnelTos) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 32, a)
}

func UnisphereTunnelTos_Get(p *radius.Packet) (value UnisphereTunnelTos) {
	value, _ = UnisphereTunnelTos_Lookup(p)
	return
}

func UnisphereTunnelTos_Gets(p *radius.Packet) (values []UnisphereTunnelTos, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 32) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereTunnelTos(i))
	}
	return
}

func UnisphereTunnelTos_Lookup(p *radius.Packet) (value UnisphereTunnelTos, err error) {
	a, ok := _Unisphere_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereTunnelTos(i)
	return
}

func UnisphereTunnelTos_Set(p *radius.Packet, value UnisphereTunnelTos) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 32, a)
}

func UnisphereTunnelTos_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 32)
}

type UnisphereTunnelMaxSessions uint32

var UnisphereTunnelMaxSessions_Strings = map[UnisphereTunnelMaxSessions]string{}

func (a UnisphereTunnelMaxSessions) String() string {
	if str, ok := UnisphereTunnelMaxSessions_Strings[a]; ok {
		return str
	}
	return "UnisphereTunnelMaxSessions(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereTunnelMaxSessions_Add(p *radius.Packet, tag byte, value UnisphereTunnelMaxSessions) (err error) {
	a := radius.NewInteger(uint32(value))
	if tag >= 0x01 && tag <= 0x1F {
		a[0] = tag
	} else {
		a[0] = 0x00
	}
	return _Unisphere_AddVendor(p, 33, a)
}

func UnisphereTunnelMaxSessions_Get(p *radius.Packet) (tag byte, value UnisphereTunnelMaxSessions) {
	tag, value, _ = UnisphereTunnelMaxSessions_Lookup(p)
	return
}

func UnisphereTunnelMaxSessions_Gets(p *radius.Packet) (tags []byte, values []UnisphereTunnelMaxSessions, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 33) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr[0] = 0x00
		}
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereTunnelMaxSessions(i))
		tags = append(tags, tag)
	}
	return
}

func UnisphereTunnelMaxSessions_Lookup(p *radius.Packet) (tag byte, value UnisphereTunnelMaxSessions, err error) {
	a, ok := _Unisphere_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a[0] = 0x00
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereTunnelMaxSessions(i)
	return
}

func UnisphereTunnelMaxSessions_Set(p *radius.Packet, tag byte, value UnisphereTunnelMaxSessions) (err error) {
	a := radius.NewInteger(uint32(value))
	if tag >= 0x01 && tag <= 0x1F {
		a[0] = tag
	} else {
		a[0] = 0x00
	}
	return _Unisphere_SetVendor(p, 33, a)
}

func UnisphereTunnelMaxSessions_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 33)
}

func UnisphereFramedIPRouteTag_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 34, a)
}

func UnisphereFramedIPRouteTag_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 34, a)
}

func UnisphereFramedIPRouteTag_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereFramedIPRouteTag_Lookup(p)
	return
}

func UnisphereFramedIPRouteTag_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereFramedIPRouteTag_LookupString(p)
	return
}

func UnisphereFramedIPRouteTag_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 34) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereFramedIPRouteTag_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 34) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereFramedIPRouteTag_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereFramedIPRouteTag_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereFramedIPRouteTag_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 34, a)
}

func UnisphereFramedIPRouteTag_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 34, a)
}

func UnisphereFramedIPRouteTag_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 34)
}

func UnisphereTunnelDialoutNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 35, a)
}

func UnisphereTunnelDialoutNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 35, a)
}

func UnisphereTunnelDialoutNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereTunnelDialoutNumber_Lookup(p)
	return
}

func UnisphereTunnelDialoutNumber_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereTunnelDialoutNumber_LookupString(p)
	return
}

func UnisphereTunnelDialoutNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 35) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereTunnelDialoutNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 35) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereTunnelDialoutNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereTunnelDialoutNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereTunnelDialoutNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 35, a)
}

func UnisphereTunnelDialoutNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 35, a)
}

func UnisphereTunnelDialoutNumber_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 35)
}

func UnispherePPPUsername_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 36, a)
}

func UnispherePPPUsername_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 36, a)
}

func UnispherePPPUsername_Get(p *radius.Packet) (value []byte) {
	value, _ = UnispherePPPUsername_Lookup(p)
	return
}

func UnispherePPPUsername_GetString(p *radius.Packet) (value string) {
	value, _ = UnispherePPPUsername_LookupString(p)
	return
}

func UnispherePPPUsername_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 36) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnispherePPPUsername_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 36) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnispherePPPUsername_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnispherePPPUsername_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnispherePPPUsername_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 36, a)
}

func UnispherePPPUsername_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 36, a)
}

func UnispherePPPUsername_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 36)
}

func UnispherePPPPassword_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 37, a)
}

func UnispherePPPPassword_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 37, a)
}

func UnispherePPPPassword_Get(p *radius.Packet) (value []byte) {
	value, _ = UnispherePPPPassword_Lookup(p)
	return
}

func UnispherePPPPassword_GetString(p *radius.Packet) (value string) {
	value, _ = UnispherePPPPassword_LookupString(p)
	return
}

func UnispherePPPPassword_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 37) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnispherePPPPassword_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 37) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnispherePPPPassword_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnispherePPPPassword_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnispherePPPPassword_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 37, a)
}

func UnispherePPPPassword_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 37, a)
}

func UnispherePPPPassword_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 37)
}

type UnispherePPPProtocol uint32

const (
	UnispherePPPProtocol_Value_None    UnispherePPPProtocol = 0
	UnispherePPPProtocol_Value_PAP     UnispherePPPProtocol = 1
	UnispherePPPProtocol_Value_CHAP    UnispherePPPProtocol = 2
	UnispherePPPProtocol_Value_PAPCHAP UnispherePPPProtocol = 3
	UnispherePPPProtocol_Value_CHAPPAP UnispherePPPProtocol = 4
)

var UnispherePPPProtocol_Strings = map[UnispherePPPProtocol]string{
	UnispherePPPProtocol_Value_None:    "None",
	UnispherePPPProtocol_Value_PAP:     "PAP",
	UnispherePPPProtocol_Value_CHAP:    "CHAP",
	UnispherePPPProtocol_Value_PAPCHAP: "PAP-CHAP",
	UnispherePPPProtocol_Value_CHAPPAP: "CHAP-PAP",
}

func (a UnispherePPPProtocol) String() string {
	if str, ok := UnispherePPPProtocol_Strings[a]; ok {
		return str
	}
	return "UnispherePPPProtocol(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnispherePPPProtocol_Add(p *radius.Packet, value UnispherePPPProtocol) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 38, a)
}

func UnispherePPPProtocol_Get(p *radius.Packet) (value UnispherePPPProtocol) {
	value, _ = UnispherePPPProtocol_Lookup(p)
	return
}

func UnispherePPPProtocol_Gets(p *radius.Packet) (values []UnispherePPPProtocol, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 38) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnispherePPPProtocol(i))
	}
	return
}

func UnispherePPPProtocol_Lookup(p *radius.Packet) (value UnispherePPPProtocol, err error) {
	a, ok := _Unisphere_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnispherePPPProtocol(i)
	return
}

func UnispherePPPProtocol_Set(p *radius.Packet, value UnispherePPPProtocol) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 38, a)
}

func UnispherePPPProtocol_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 38)
}

type UnisphereTunnelMinBps uint32

var UnisphereTunnelMinBps_Strings = map[UnisphereTunnelMinBps]string{}

func (a UnisphereTunnelMinBps) String() string {
	if str, ok := UnisphereTunnelMinBps_Strings[a]; ok {
		return str
	}
	return "UnisphereTunnelMinBps(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereTunnelMinBps_Add(p *radius.Packet, value UnisphereTunnelMinBps) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 39, a)
}

func UnisphereTunnelMinBps_Get(p *radius.Packet) (value UnisphereTunnelMinBps) {
	value, _ = UnisphereTunnelMinBps_Lookup(p)
	return
}

func UnisphereTunnelMinBps_Gets(p *radius.Packet) (values []UnisphereTunnelMinBps, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 39) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereTunnelMinBps(i))
	}
	return
}

func UnisphereTunnelMinBps_Lookup(p *radius.Packet) (value UnisphereTunnelMinBps, err error) {
	a, ok := _Unisphere_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereTunnelMinBps(i)
	return
}

func UnisphereTunnelMinBps_Set(p *radius.Packet, value UnisphereTunnelMinBps) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 39, a)
}

func UnisphereTunnelMinBps_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 39)
}

type UnisphereTunnelMaxBps uint32

var UnisphereTunnelMaxBps_Strings = map[UnisphereTunnelMaxBps]string{}

func (a UnisphereTunnelMaxBps) String() string {
	if str, ok := UnisphereTunnelMaxBps_Strings[a]; ok {
		return str
	}
	return "UnisphereTunnelMaxBps(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereTunnelMaxBps_Add(p *radius.Packet, value UnisphereTunnelMaxBps) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 40, a)
}

func UnisphereTunnelMaxBps_Get(p *radius.Packet) (value UnisphereTunnelMaxBps) {
	value, _ = UnisphereTunnelMaxBps_Lookup(p)
	return
}

func UnisphereTunnelMaxBps_Gets(p *radius.Packet) (values []UnisphereTunnelMaxBps, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 40) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereTunnelMaxBps(i))
	}
	return
}

func UnisphereTunnelMaxBps_Lookup(p *radius.Packet) (value UnisphereTunnelMaxBps, err error) {
	a, ok := _Unisphere_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereTunnelMaxBps(i)
	return
}

func UnisphereTunnelMaxBps_Set(p *radius.Packet, value UnisphereTunnelMaxBps) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 40, a)
}

func UnisphereTunnelMaxBps_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 40)
}

type UnisphereTunnelBearerType uint32

const (
	UnisphereTunnelBearerType_Value_None    UnisphereTunnelBearerType = 0
	UnisphereTunnelBearerType_Value_Analog  UnisphereTunnelBearerType = 1
	UnisphereTunnelBearerType_Value_Digital UnisphereTunnelBearerType = 2
)

var UnisphereTunnelBearerType_Strings = map[UnisphereTunnelBearerType]string{
	UnisphereTunnelBearerType_Value_None:    "None",
	UnisphereTunnelBearerType_Value_Analog:  "Analog",
	UnisphereTunnelBearerType_Value_Digital: "Digital",
}

func (a UnisphereTunnelBearerType) String() string {
	if str, ok := UnisphereTunnelBearerType_Strings[a]; ok {
		return str
	}
	return "UnisphereTunnelBearerType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereTunnelBearerType_Add(p *radius.Packet, value UnisphereTunnelBearerType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 41, a)
}

func UnisphereTunnelBearerType_Get(p *radius.Packet) (value UnisphereTunnelBearerType) {
	value, _ = UnisphereTunnelBearerType_Lookup(p)
	return
}

func UnisphereTunnelBearerType_Gets(p *radius.Packet) (values []UnisphereTunnelBearerType, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 41) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereTunnelBearerType(i))
	}
	return
}

func UnisphereTunnelBearerType_Lookup(p *radius.Packet) (value UnisphereTunnelBearerType, err error) {
	a, ok := _Unisphere_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereTunnelBearerType(i)
	return
}

func UnisphereTunnelBearerType_Set(p *radius.Packet, value UnisphereTunnelBearerType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 41, a)
}

func UnisphereTunnelBearerType_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 41)
}

type UnisphereInputGigapackets uint32

var UnisphereInputGigapackets_Strings = map[UnisphereInputGigapackets]string{}

func (a UnisphereInputGigapackets) String() string {
	if str, ok := UnisphereInputGigapackets_Strings[a]; ok {
		return str
	}
	return "UnisphereInputGigapackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereInputGigapackets_Add(p *radius.Packet, value UnisphereInputGigapackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 42, a)
}

func UnisphereInputGigapackets_Get(p *radius.Packet) (value UnisphereInputGigapackets) {
	value, _ = UnisphereInputGigapackets_Lookup(p)
	return
}

func UnisphereInputGigapackets_Gets(p *radius.Packet) (values []UnisphereInputGigapackets, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 42) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereInputGigapackets(i))
	}
	return
}

func UnisphereInputGigapackets_Lookup(p *radius.Packet) (value UnisphereInputGigapackets, err error) {
	a, ok := _Unisphere_LookupVendor(p, 42)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereInputGigapackets(i)
	return
}

func UnisphereInputGigapackets_Set(p *radius.Packet, value UnisphereInputGigapackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 42, a)
}

func UnisphereInputGigapackets_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 42)
}

type UnisphereOutputGigapackets uint32

var UnisphereOutputGigapackets_Strings = map[UnisphereOutputGigapackets]string{}

func (a UnisphereOutputGigapackets) String() string {
	if str, ok := UnisphereOutputGigapackets_Strings[a]; ok {
		return str
	}
	return "UnisphereOutputGigapackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereOutputGigapackets_Add(p *radius.Packet, value UnisphereOutputGigapackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 43, a)
}

func UnisphereOutputGigapackets_Get(p *radius.Packet) (value UnisphereOutputGigapackets) {
	value, _ = UnisphereOutputGigapackets_Lookup(p)
	return
}

func UnisphereOutputGigapackets_Gets(p *radius.Packet) (values []UnisphereOutputGigapackets, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 43) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereOutputGigapackets(i))
	}
	return
}

func UnisphereOutputGigapackets_Lookup(p *radius.Packet) (value UnisphereOutputGigapackets, err error) {
	a, ok := _Unisphere_LookupVendor(p, 43)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereOutputGigapackets(i)
	return
}

func UnisphereOutputGigapackets_Set(p *radius.Packet, value UnisphereOutputGigapackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 43, a)
}

func UnisphereOutputGigapackets_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 43)
}

func UnisphereTunnelInterfaceID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 44, a)
}

func UnisphereTunnelInterfaceID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 44, a)
}

func UnisphereTunnelInterfaceID_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereTunnelInterfaceID_Lookup(p)
	return
}

func UnisphereTunnelInterfaceID_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereTunnelInterfaceID_LookupString(p)
	return
}

func UnisphereTunnelInterfaceID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 44) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereTunnelInterfaceID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 44) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereTunnelInterfaceID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereTunnelInterfaceID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereTunnelInterfaceID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 44, a)
}

func UnisphereTunnelInterfaceID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 44, a)
}

func UnisphereTunnelInterfaceID_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 44)
}

func UnisphereIpV6VirtualRouter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 45, a)
}

func UnisphereIpV6VirtualRouter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 45, a)
}

func UnisphereIpV6VirtualRouter_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereIpV6VirtualRouter_Lookup(p)
	return
}

func UnisphereIpV6VirtualRouter_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereIpV6VirtualRouter_LookupString(p)
	return
}

func UnisphereIpV6VirtualRouter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 45) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIpV6VirtualRouter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 45) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIpV6VirtualRouter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereIpV6VirtualRouter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereIpV6VirtualRouter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 45, a)
}

func UnisphereIpV6VirtualRouter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 45, a)
}

func UnisphereIpV6VirtualRouter_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 45)
}

func UnisphereIpV6LocalInterface_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 46, a)
}

func UnisphereIpV6LocalInterface_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 46, a)
}

func UnisphereIpV6LocalInterface_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereIpV6LocalInterface_Lookup(p)
	return
}

func UnisphereIpV6LocalInterface_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereIpV6LocalInterface_LookupString(p)
	return
}

func UnisphereIpV6LocalInterface_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 46) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIpV6LocalInterface_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 46) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIpV6LocalInterface_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereIpV6LocalInterface_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereIpV6LocalInterface_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 46, a)
}

func UnisphereIpV6LocalInterface_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 46, a)
}

func UnisphereIpV6LocalInterface_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 46)
}

func UnisphereIpv6PrimaryDNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 47, a)
}

func UnisphereIpv6PrimaryDNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = UnisphereIpv6PrimaryDNS_Lookup(p)
	return
}

func UnisphereIpv6PrimaryDNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Unisphere_GetsVendor(p, 47) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIpv6PrimaryDNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Unisphere_LookupVendor(p, 47)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func UnisphereIpv6PrimaryDNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 47, a)
}

func UnisphereIpv6PrimaryDNS_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 47)
}

func UnisphereIpv6SecondaryDNS_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 48, a)
}

func UnisphereIpv6SecondaryDNS_Get(p *radius.Packet) (value net.IP) {
	value, _ = UnisphereIpv6SecondaryDNS_Lookup(p)
	return
}

func UnisphereIpv6SecondaryDNS_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Unisphere_GetsVendor(p, 48) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIpv6SecondaryDNS_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Unisphere_LookupVendor(p, 48)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func UnisphereIpv6SecondaryDNS_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 48, a)
}

func UnisphereIpv6SecondaryDNS_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 48)
}

func UnisphereServiceName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 49, a)
}

func UnisphereServiceName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 49, a)
}

func UnisphereServiceName_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereServiceName_Lookup(p)
	return
}

func UnisphereServiceName_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereServiceName_LookupString(p)
	return
}

func UnisphereServiceName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 49) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereServiceName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 49) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereServiceName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 49)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereServiceName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 49)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereServiceName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 49, a)
}

func UnisphereServiceName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 49, a)
}

func UnisphereServiceName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 49)
}

func UnisphereSessionVolumeQuota_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 50, a)
}

func UnisphereSessionVolumeQuota_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 50, a)
}

func UnisphereSessionVolumeQuota_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereSessionVolumeQuota_Lookup(p)
	return
}

func UnisphereSessionVolumeQuota_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereSessionVolumeQuota_LookupString(p)
	return
}

func UnisphereSessionVolumeQuota_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 50) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereSessionVolumeQuota_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 50) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereSessionVolumeQuota_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 50)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereSessionVolumeQuota_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 50)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereSessionVolumeQuota_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 50, a)
}

func UnisphereSessionVolumeQuota_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 50, a)
}

func UnisphereSessionVolumeQuota_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 50)
}

func UnisphereDisconnectCause_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 51, a)
}

func UnisphereDisconnectCause_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 51, a)
}

func UnisphereDisconnectCause_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereDisconnectCause_Lookup(p)
	return
}

func UnisphereDisconnectCause_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereDisconnectCause_LookupString(p)
	return
}

func UnisphereDisconnectCause_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 51) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereDisconnectCause_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 51) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereDisconnectCause_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 51)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereDisconnectCause_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 51)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereDisconnectCause_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 51, a)
}

func UnisphereDisconnectCause_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 51, a)
}

func UnisphereDisconnectCause_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 51)
}

func UnisphereRadiusClientAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 52, a)
}

func UnisphereRadiusClientAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = UnisphereRadiusClientAddress_Lookup(p)
	return
}

func UnisphereRadiusClientAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Unisphere_GetsVendor(p, 52) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereRadiusClientAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Unisphere_LookupVendor(p, 52)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func UnisphereRadiusClientAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 52, a)
}

func UnisphereRadiusClientAddress_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 52)
}

func UnisphereServiceDescription_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 53, a)
}

func UnisphereServiceDescription_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 53, a)
}

func UnisphereServiceDescription_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereServiceDescription_Lookup(p)
	return
}

func UnisphereServiceDescription_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereServiceDescription_LookupString(p)
	return
}

func UnisphereServiceDescription_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 53) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereServiceDescription_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 53) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereServiceDescription_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 53)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereServiceDescription_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 53)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereServiceDescription_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 53, a)
}

func UnisphereServiceDescription_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 53, a)
}

func UnisphereServiceDescription_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 53)
}

type UnisphereL2tpRecvWindowSize uint32

var UnisphereL2tpRecvWindowSize_Strings = map[UnisphereL2tpRecvWindowSize]string{}

func (a UnisphereL2tpRecvWindowSize) String() string {
	if str, ok := UnisphereL2tpRecvWindowSize_Strings[a]; ok {
		return str
	}
	return "UnisphereL2tpRecvWindowSize(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereL2tpRecvWindowSize_Add(p *radius.Packet, value UnisphereL2tpRecvWindowSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 54, a)
}

func UnisphereL2tpRecvWindowSize_Get(p *radius.Packet) (value UnisphereL2tpRecvWindowSize) {
	value, _ = UnisphereL2tpRecvWindowSize_Lookup(p)
	return
}

func UnisphereL2tpRecvWindowSize_Gets(p *radius.Packet) (values []UnisphereL2tpRecvWindowSize, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 54) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereL2tpRecvWindowSize(i))
	}
	return
}

func UnisphereL2tpRecvWindowSize_Lookup(p *radius.Packet) (value UnisphereL2tpRecvWindowSize, err error) {
	a, ok := _Unisphere_LookupVendor(p, 54)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereL2tpRecvWindowSize(i)
	return
}

func UnisphereL2tpRecvWindowSize_Set(p *radius.Packet, value UnisphereL2tpRecvWindowSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 54, a)
}

func UnisphereL2tpRecvWindowSize_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 54)
}

func UnisphereDhcpOptions_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 55, a)
}

func UnisphereDhcpOptions_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 55, a)
}

func UnisphereDhcpOptions_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereDhcpOptions_Lookup(p)
	return
}

func UnisphereDhcpOptions_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereDhcpOptions_LookupString(p)
	return
}

func UnisphereDhcpOptions_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 55) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereDhcpOptions_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 55) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereDhcpOptions_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 55)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereDhcpOptions_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 55)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereDhcpOptions_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 55, a)
}

func UnisphereDhcpOptions_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 55, a)
}

func UnisphereDhcpOptions_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 55)
}

func UnisphereDhcpMacAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 56, a)
}

func UnisphereDhcpMacAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 56, a)
}

func UnisphereDhcpMacAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereDhcpMacAddr_Lookup(p)
	return
}

func UnisphereDhcpMacAddr_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereDhcpMacAddr_LookupString(p)
	return
}

func UnisphereDhcpMacAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 56) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereDhcpMacAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 56) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereDhcpMacAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 56)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereDhcpMacAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 56)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereDhcpMacAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 56, a)
}

func UnisphereDhcpMacAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 56, a)
}

func UnisphereDhcpMacAddr_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 56)
}

func UnisphereDhcpGiAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 57, a)
}

func UnisphereDhcpGiAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = UnisphereDhcpGiAddress_Lookup(p)
	return
}

func UnisphereDhcpGiAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Unisphere_GetsVendor(p, 57) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereDhcpGiAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Unisphere_LookupVendor(p, 57)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func UnisphereDhcpGiAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 57, a)
}

func UnisphereDhcpGiAddress_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 57)
}

type UnisphereLIAction uint32

const (
	UnisphereLIAction_Value_Off  UnisphereLIAction = 0
	UnisphereLIAction_Value_On   UnisphereLIAction = 1
	UnisphereLIAction_Value_Noop UnisphereLIAction = 2
)

var UnisphereLIAction_Strings = map[UnisphereLIAction]string{
	UnisphereLIAction_Value_Off:  "off",
	UnisphereLIAction_Value_On:   "on",
	UnisphereLIAction_Value_Noop: "noop",
}

func (a UnisphereLIAction) String() string {
	if str, ok := UnisphereLIAction_Strings[a]; ok {
		return str
	}
	return "UnisphereLIAction(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereLIAction_Add(p *radius.Packet, value UnisphereLIAction) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 58, a)
}

func UnisphereLIAction_Get(p *radius.Packet) (value UnisphereLIAction) {
	value, _ = UnisphereLIAction_Lookup(p)
	return
}

func UnisphereLIAction_Gets(p *radius.Packet) (values []UnisphereLIAction, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 58) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereLIAction(i))
	}
	return
}

func UnisphereLIAction_Lookup(p *radius.Packet) (value UnisphereLIAction, err error) {
	a, ok := _Unisphere_LookupVendor(p, 58)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereLIAction(i)
	return
}

func UnisphereLIAction_Set(p *radius.Packet, value UnisphereLIAction) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 58, a)
}

func UnisphereLIAction_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 58)
}

func UnisphereMedDevHandle_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	var salt [2]byte
	_, err = rand.Read(salt[:])
	if err != nil {
		return
	}
	a, err = radius.NewTunnelPassword(value, salt[:], p.Secret, p.Authenticator[:])
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 59, a)
}

func UnisphereMedDevHandle_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	var salt [2]byte
	_, err = rand.Read(salt[:])
	if err != nil {
		return
	}
	a, err = radius.NewTunnelPassword([]byte(value), salt[:], p.Secret, p.Authenticator[:])
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 59, a)
}

func UnisphereMedDevHandle_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereMedDevHandle_Lookup(p)
	return
}

func UnisphereMedDevHandle_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereMedDevHandle_LookupString(p)
	return
}

func UnisphereMedDevHandle_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 59) {
		i, _, err = radius.TunnelPassword(attr, p.Secret, p.Authenticator[:])
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereMedDevHandle_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 59) {
		var up []byte
		up, _, err = radius.TunnelPassword(attr, p.Secret, p.Authenticator[:])
		if err == nil {
			i = string(up)
		}
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereMedDevHandle_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 59)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, _, err = radius.TunnelPassword(a, p.Secret, p.Authenticator[:])
	return
}

func UnisphereMedDevHandle_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 59)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var b []byte
	b, _, err = radius.TunnelPassword(a, p.Secret, p.Authenticator[:])
	if err == nil {
		value = string(b)
	}
	return
}

func UnisphereMedDevHandle_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	var salt [2]byte
	_, err = rand.Read(salt[:])
	if err != nil {
		return
	}
	a, err = radius.NewTunnelPassword(value, salt[:], p.Secret, p.Authenticator[:])
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 59, a)
}

func UnisphereMedDevHandle_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	var salt [2]byte
	_, err = rand.Read(salt[:])
	if err != nil {
		return
	}
	a, err = radius.NewTunnelPassword([]byte(value), salt[:], p.Secret, p.Authenticator[:])
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 59, a)
}

func UnisphereMedDevHandle_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 59)
}

func UnisphereMedIPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 60, a)
}

func UnisphereMedIPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = UnisphereMedIPAddress_Lookup(p)
	return
}

func UnisphereMedIPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Unisphere_GetsVendor(p, 60) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereMedIPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Unisphere_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func UnisphereMedIPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 60, a)
}

func UnisphereMedIPAddress_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 60)
}

type UnisphereMedPortNumber uint32

var UnisphereMedPortNumber_Strings = map[UnisphereMedPortNumber]string{}

func (a UnisphereMedPortNumber) String() string {
	if str, ok := UnisphereMedPortNumber_Strings[a]; ok {
		return str
	}
	return "UnisphereMedPortNumber(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereMedPortNumber_Add(p *radius.Packet, value UnisphereMedPortNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 61, a)
}

func UnisphereMedPortNumber_Get(p *radius.Packet) (value UnisphereMedPortNumber) {
	value, _ = UnisphereMedPortNumber_Lookup(p)
	return
}

func UnisphereMedPortNumber_Gets(p *radius.Packet) (values []UnisphereMedPortNumber, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 61) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereMedPortNumber(i))
	}
	return
}

func UnisphereMedPortNumber_Lookup(p *radius.Packet) (value UnisphereMedPortNumber, err error) {
	a, ok := _Unisphere_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereMedPortNumber(i)
	return
}

func UnisphereMedPortNumber_Set(p *radius.Packet, value UnisphereMedPortNumber) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 61, a)
}

func UnisphereMedPortNumber_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 61)
}

func UnisphereMLPPPBundleName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 62, a)
}

func UnisphereMLPPPBundleName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 62, a)
}

func UnisphereMLPPPBundleName_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereMLPPPBundleName_Lookup(p)
	return
}

func UnisphereMLPPPBundleName_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereMLPPPBundleName_LookupString(p)
	return
}

func UnisphereMLPPPBundleName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 62) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereMLPPPBundleName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 62) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereMLPPPBundleName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 62)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereMLPPPBundleName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 62)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereMLPPPBundleName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 62, a)
}

func UnisphereMLPPPBundleName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 62, a)
}

func UnisphereMLPPPBundleName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 62)
}

func UnisphereInterfaceDesc_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 63, a)
}

func UnisphereInterfaceDesc_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 63, a)
}

func UnisphereInterfaceDesc_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereInterfaceDesc_Lookup(p)
	return
}

func UnisphereInterfaceDesc_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereInterfaceDesc_LookupString(p)
	return
}

func UnisphereInterfaceDesc_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 63) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereInterfaceDesc_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 63) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereInterfaceDesc_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereInterfaceDesc_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereInterfaceDesc_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 63, a)
}

func UnisphereInterfaceDesc_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 63, a)
}

func UnisphereInterfaceDesc_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 63)
}

func UnisphereTunnelGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 64, a)
}

func UnisphereTunnelGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 64, a)
}

func UnisphereTunnelGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereTunnelGroup_Lookup(p)
	return
}

func UnisphereTunnelGroup_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereTunnelGroup_LookupString(p)
	return
}

func UnisphereTunnelGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 64) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereTunnelGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 64) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereTunnelGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereTunnelGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereTunnelGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 64, a)
}

func UnisphereTunnelGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 64, a)
}

func UnisphereTunnelGroup_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 64)
}

func UnisphereServiceActivate_Add(p *radius.Packet, tag byte, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Unisphere_AddVendor(p, 65, a)
}

func UnisphereServiceActivate_AddString(p *radius.Packet, tag byte, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Unisphere_AddVendor(p, 65, a)
}

func UnisphereServiceActivate_Get(p *radius.Packet) (tag byte, value []byte) {
	tag, value, _ = UnisphereServiceActivate_Lookup(p)
	return
}

func UnisphereServiceActivate_GetString(p *radius.Packet) (tag byte, value string) {
	tag, value, _ = UnisphereServiceActivate_LookupString(p)
	return
}

func UnisphereServiceActivate_Gets(p *radius.Packet) (tags []byte, values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 65) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr = attr[1:]
		}
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
		tags = append(tags, tag)
	}
	return
}

func UnisphereServiceActivate_GetStrings(p *radius.Packet) (tags []byte, values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 65) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr = attr[1:]
		}
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
		tags = append(tags, tag)
	}
	return
}

func UnisphereServiceActivate_Lookup(p *radius.Packet) (tag byte, value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a = a[1:]
	}
	value = radius.Bytes(a)
	return
}

func UnisphereServiceActivate_LookupString(p *radius.Packet) (tag byte, value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a = a[1:]
	}
	value = radius.String(a)
	return
}

func UnisphereServiceActivate_Set(p *radius.Packet, tag byte, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Unisphere_SetVendor(p, 65, a)
}

func UnisphereServiceActivate_SetString(p *radius.Packet, tag byte, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Unisphere_SetVendor(p, 65, a)
}

func UnisphereServiceActivate_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 65)
}

func UnisphereServiceDeactivate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 66, a)
}

func UnisphereServiceDeactivate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 66, a)
}

func UnisphereServiceDeactivate_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereServiceDeactivate_Lookup(p)
	return
}

func UnisphereServiceDeactivate_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereServiceDeactivate_LookupString(p)
	return
}

func UnisphereServiceDeactivate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 66) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereServiceDeactivate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 66) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereServiceDeactivate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 66)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereServiceDeactivate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 66)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereServiceDeactivate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 66, a)
}

func UnisphereServiceDeactivate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 66, a)
}

func UnisphereServiceDeactivate_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 66)
}

type UnisphereServiceVolume uint32

var UnisphereServiceVolume_Strings = map[UnisphereServiceVolume]string{}

func (a UnisphereServiceVolume) String() string {
	if str, ok := UnisphereServiceVolume_Strings[a]; ok {
		return str
	}
	return "UnisphereServiceVolume(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereServiceVolume_Add(p *radius.Packet, tag byte, value UnisphereServiceVolume) (err error) {
	a := radius.NewInteger(uint32(value))
	if tag >= 0x01 && tag <= 0x1F {
		a[0] = tag
	} else {
		a[0] = 0x00
	}
	return _Unisphere_AddVendor(p, 67, a)
}

func UnisphereServiceVolume_Get(p *radius.Packet) (tag byte, value UnisphereServiceVolume) {
	tag, value, _ = UnisphereServiceVolume_Lookup(p)
	return
}

func UnisphereServiceVolume_Gets(p *radius.Packet) (tags []byte, values []UnisphereServiceVolume, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 67) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr[0] = 0x00
		}
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereServiceVolume(i))
		tags = append(tags, tag)
	}
	return
}

func UnisphereServiceVolume_Lookup(p *radius.Packet) (tag byte, value UnisphereServiceVolume, err error) {
	a, ok := _Unisphere_LookupVendor(p, 67)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a[0] = 0x00
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereServiceVolume(i)
	return
}

func UnisphereServiceVolume_Set(p *radius.Packet, tag byte, value UnisphereServiceVolume) (err error) {
	a := radius.NewInteger(uint32(value))
	if tag >= 0x01 && tag <= 0x1F {
		a[0] = tag
	} else {
		a[0] = 0x00
	}
	return _Unisphere_SetVendor(p, 67, a)
}

func UnisphereServiceVolume_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 67)
}

type UnisphereServiceTimeout uint32

var UnisphereServiceTimeout_Strings = map[UnisphereServiceTimeout]string{}

func (a UnisphereServiceTimeout) String() string {
	if str, ok := UnisphereServiceTimeout_Strings[a]; ok {
		return str
	}
	return "UnisphereServiceTimeout(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereServiceTimeout_Add(p *radius.Packet, tag byte, value UnisphereServiceTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	if tag >= 0x01 && tag <= 0x1F {
		a[0] = tag
	} else {
		a[0] = 0x00
	}
	return _Unisphere_AddVendor(p, 68, a)
}

func UnisphereServiceTimeout_Get(p *radius.Packet) (tag byte, value UnisphereServiceTimeout) {
	tag, value, _ = UnisphereServiceTimeout_Lookup(p)
	return
}

func UnisphereServiceTimeout_Gets(p *radius.Packet) (tags []byte, values []UnisphereServiceTimeout, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 68) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr[0] = 0x00
		}
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereServiceTimeout(i))
		tags = append(tags, tag)
	}
	return
}

func UnisphereServiceTimeout_Lookup(p *radius.Packet) (tag byte, value UnisphereServiceTimeout, err error) {
	a, ok := _Unisphere_LookupVendor(p, 68)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a[0] = 0x00
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereServiceTimeout(i)
	return
}

func UnisphereServiceTimeout_Set(p *radius.Packet, tag byte, value UnisphereServiceTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	if tag >= 0x01 && tag <= 0x1F {
		a[0] = tag
	} else {
		a[0] = 0x00
	}
	return _Unisphere_SetVendor(p, 68, a)
}

func UnisphereServiceTimeout_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 68)
}

type UnisphereServiceStats uint32

const (
	UnisphereServiceStats_Value_Disabled   UnisphereServiceStats = 0
	UnisphereServiceStats_Value_Time       UnisphereServiceStats = 1
	UnisphereServiceStats_Value_TimeVolume UnisphereServiceStats = 2
)

var UnisphereServiceStats_Strings = map[UnisphereServiceStats]string{
	UnisphereServiceStats_Value_Disabled:   "disabled",
	UnisphereServiceStats_Value_Time:       "time",
	UnisphereServiceStats_Value_TimeVolume: "time-volume",
}

func (a UnisphereServiceStats) String() string {
	if str, ok := UnisphereServiceStats_Strings[a]; ok {
		return str
	}
	return "UnisphereServiceStats(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereServiceStats_Add(p *radius.Packet, tag byte, value UnisphereServiceStats) (err error) {
	a := radius.NewInteger(uint32(value))
	if tag >= 0x01 && tag <= 0x1F {
		a[0] = tag
	} else {
		a[0] = 0x00
	}
	return _Unisphere_AddVendor(p, 69, a)
}

func UnisphereServiceStats_Get(p *radius.Packet) (tag byte, value UnisphereServiceStats) {
	tag, value, _ = UnisphereServiceStats_Lookup(p)
	return
}

func UnisphereServiceStats_Gets(p *radius.Packet) (tags []byte, values []UnisphereServiceStats, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 69) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr[0] = 0x00
		}
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereServiceStats(i))
		tags = append(tags, tag)
	}
	return
}

func UnisphereServiceStats_Lookup(p *radius.Packet) (tag byte, value UnisphereServiceStats, err error) {
	a, ok := _Unisphere_LookupVendor(p, 69)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a[0] = 0x00
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereServiceStats(i)
	return
}

func UnisphereServiceStats_Set(p *radius.Packet, tag byte, value UnisphereServiceStats) (err error) {
	a := radius.NewInteger(uint32(value))
	if tag >= 0x01 && tag <= 0x1F {
		a[0] = tag
	} else {
		a[0] = 0x00
	}
	return _Unisphere_SetVendor(p, 69, a)
}

func UnisphereServiceStats_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 69)
}

type UnisphereDFBit uint32

const (
	UnisphereDFBit_Value_DontIgnoreDfBit UnisphereDFBit = 0
	UnisphereDFBit_Value_IgnoreDfBit     UnisphereDFBit = 1
)

var UnisphereDFBit_Strings = map[UnisphereDFBit]string{
	UnisphereDFBit_Value_DontIgnoreDfBit: "dont-ignore-df-bit",
	UnisphereDFBit_Value_IgnoreDfBit:     "ignore-df-bit",
}

func (a UnisphereDFBit) String() string {
	if str, ok := UnisphereDFBit_Strings[a]; ok {
		return str
	}
	return "UnisphereDFBit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereDFBit_Add(p *radius.Packet, value UnisphereDFBit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 70, a)
}

func UnisphereDFBit_Get(p *radius.Packet) (value UnisphereDFBit) {
	value, _ = UnisphereDFBit_Lookup(p)
	return
}

func UnisphereDFBit_Gets(p *radius.Packet) (values []UnisphereDFBit, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 70) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereDFBit(i))
	}
	return
}

func UnisphereDFBit_Lookup(p *radius.Packet) (value UnisphereDFBit, err error) {
	a, ok := _Unisphere_LookupVendor(p, 70)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereDFBit(i)
	return
}

func UnisphereDFBit_Set(p *radius.Packet, value UnisphereDFBit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 70, a)
}

func UnisphereDFBit_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 70)
}

func UnisphereIGMPAccessName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 71, a)
}

func UnisphereIGMPAccessName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 71, a)
}

func UnisphereIGMPAccessName_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereIGMPAccessName_Lookup(p)
	return
}

func UnisphereIGMPAccessName_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereIGMPAccessName_LookupString(p)
	return
}

func UnisphereIGMPAccessName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 71) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIGMPAccessName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 71) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIGMPAccessName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 71)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereIGMPAccessName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 71)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereIGMPAccessName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 71, a)
}

func UnisphereIGMPAccessName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 71, a)
}

func UnisphereIGMPAccessName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 71)
}

func UnisphereIGMPAccessSrcName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 72, a)
}

func UnisphereIGMPAccessSrcName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 72, a)
}

func UnisphereIGMPAccessSrcName_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereIGMPAccessSrcName_Lookup(p)
	return
}

func UnisphereIGMPAccessSrcName_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereIGMPAccessSrcName_LookupString(p)
	return
}

func UnisphereIGMPAccessSrcName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 72) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIGMPAccessSrcName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 72) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIGMPAccessSrcName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 72)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereIGMPAccessSrcName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 72)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereIGMPAccessSrcName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 72, a)
}

func UnisphereIGMPAccessSrcName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 72, a)
}

func UnisphereIGMPAccessSrcName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 72)
}

func UnisphereIGMPOIFMapName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 73, a)
}

func UnisphereIGMPOIFMapName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 73, a)
}

func UnisphereIGMPOIFMapName_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereIGMPOIFMapName_Lookup(p)
	return
}

func UnisphereIGMPOIFMapName_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereIGMPOIFMapName_LookupString(p)
	return
}

func UnisphereIGMPOIFMapName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 73) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIGMPOIFMapName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 73) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIGMPOIFMapName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereIGMPOIFMapName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereIGMPOIFMapName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 73, a)
}

func UnisphereIGMPOIFMapName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 73, a)
}

func UnisphereIGMPOIFMapName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 73)
}

func UnisphereMLDAccessName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 74, a)
}

func UnisphereMLDAccessName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 74, a)
}

func UnisphereMLDAccessName_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereMLDAccessName_Lookup(p)
	return
}

func UnisphereMLDAccessName_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereMLDAccessName_LookupString(p)
	return
}

func UnisphereMLDAccessName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 74) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereMLDAccessName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 74) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereMLDAccessName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 74)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereMLDAccessName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 74)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereMLDAccessName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 74, a)
}

func UnisphereMLDAccessName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 74, a)
}

func UnisphereMLDAccessName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 74)
}

func UnisphereMLDAccessSrcName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 75, a)
}

func UnisphereMLDAccessSrcName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 75, a)
}

func UnisphereMLDAccessSrcName_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereMLDAccessSrcName_Lookup(p)
	return
}

func UnisphereMLDAccessSrcName_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereMLDAccessSrcName_LookupString(p)
	return
}

func UnisphereMLDAccessSrcName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 75) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereMLDAccessSrcName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 75) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereMLDAccessSrcName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 75)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereMLDAccessSrcName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 75)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereMLDAccessSrcName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 75, a)
}

func UnisphereMLDAccessSrcName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 75, a)
}

func UnisphereMLDAccessSrcName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 75)
}

func UnisphereMLDOIFMapName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 76, a)
}

func UnisphereMLDOIFMapName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 76, a)
}

func UnisphereMLDOIFMapName_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereMLDOIFMapName_Lookup(p)
	return
}

func UnisphereMLDOIFMapName_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereMLDOIFMapName_LookupString(p)
	return
}

func UnisphereMLDOIFMapName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 76) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereMLDOIFMapName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 76) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereMLDOIFMapName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 76)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereMLDOIFMapName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 76)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereMLDOIFMapName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 76, a)
}

func UnisphereMLDOIFMapName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 76, a)
}

func UnisphereMLDOIFMapName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 76)
}

type UnisphereMLDVersion uint32

const (
	UnisphereMLDVersion_Value_V1 UnisphereMLDVersion = 1
	UnisphereMLDVersion_Value_V2 UnisphereMLDVersion = 2
)

var UnisphereMLDVersion_Strings = map[UnisphereMLDVersion]string{
	UnisphereMLDVersion_Value_V1: "v1",
	UnisphereMLDVersion_Value_V2: "v2",
}

func (a UnisphereMLDVersion) String() string {
	if str, ok := UnisphereMLDVersion_Strings[a]; ok {
		return str
	}
	return "UnisphereMLDVersion(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereMLDVersion_Add(p *radius.Packet, value UnisphereMLDVersion) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 77, a)
}

func UnisphereMLDVersion_Get(p *radius.Packet) (value UnisphereMLDVersion) {
	value, _ = UnisphereMLDVersion_Lookup(p)
	return
}

func UnisphereMLDVersion_Gets(p *radius.Packet) (values []UnisphereMLDVersion, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 77) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereMLDVersion(i))
	}
	return
}

func UnisphereMLDVersion_Lookup(p *radius.Packet) (value UnisphereMLDVersion, err error) {
	a, ok := _Unisphere_LookupVendor(p, 77)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereMLDVersion(i)
	return
}

func UnisphereMLDVersion_Set(p *radius.Packet, value UnisphereMLDVersion) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 77, a)
}

func UnisphereMLDVersion_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 77)
}

type UnisphereIGMPVersion uint32

const (
	UnisphereIGMPVersion_Value_V1 UnisphereIGMPVersion = 1
	UnisphereIGMPVersion_Value_V2 UnisphereIGMPVersion = 2
	UnisphereIGMPVersion_Value_V3 UnisphereIGMPVersion = 3
)

var UnisphereIGMPVersion_Strings = map[UnisphereIGMPVersion]string{
	UnisphereIGMPVersion_Value_V1: "v1",
	UnisphereIGMPVersion_Value_V2: "v2",
	UnisphereIGMPVersion_Value_V3: "v3",
}

func (a UnisphereIGMPVersion) String() string {
	if str, ok := UnisphereIGMPVersion_Strings[a]; ok {
		return str
	}
	return "UnisphereIGMPVersion(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereIGMPVersion_Add(p *radius.Packet, value UnisphereIGMPVersion) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 78, a)
}

func UnisphereIGMPVersion_Get(p *radius.Packet) (value UnisphereIGMPVersion) {
	value, _ = UnisphereIGMPVersion_Lookup(p)
	return
}

func UnisphereIGMPVersion_Gets(p *radius.Packet) (values []UnisphereIGMPVersion, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 78) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereIGMPVersion(i))
	}
	return
}

func UnisphereIGMPVersion_Lookup(p *radius.Packet) (value UnisphereIGMPVersion, err error) {
	a, ok := _Unisphere_LookupVendor(p, 78)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereIGMPVersion(i)
	return
}

func UnisphereIGMPVersion_Set(p *radius.Packet, value UnisphereIGMPVersion) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 78, a)
}

func UnisphereIGMPVersion_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 78)
}

type UnisphereIPMcastAdmBwLimit uint32

var UnisphereIPMcastAdmBwLimit_Strings = map[UnisphereIPMcastAdmBwLimit]string{}

func (a UnisphereIPMcastAdmBwLimit) String() string {
	if str, ok := UnisphereIPMcastAdmBwLimit_Strings[a]; ok {
		return str
	}
	return "UnisphereIPMcastAdmBwLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereIPMcastAdmBwLimit_Add(p *radius.Packet, value UnisphereIPMcastAdmBwLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 79, a)
}

func UnisphereIPMcastAdmBwLimit_Get(p *radius.Packet) (value UnisphereIPMcastAdmBwLimit) {
	value, _ = UnisphereIPMcastAdmBwLimit_Lookup(p)
	return
}

func UnisphereIPMcastAdmBwLimit_Gets(p *radius.Packet) (values []UnisphereIPMcastAdmBwLimit, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 79) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereIPMcastAdmBwLimit(i))
	}
	return
}

func UnisphereIPMcastAdmBwLimit_Lookup(p *radius.Packet) (value UnisphereIPMcastAdmBwLimit, err error) {
	a, ok := _Unisphere_LookupVendor(p, 79)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereIPMcastAdmBwLimit(i)
	return
}

func UnisphereIPMcastAdmBwLimit_Set(p *radius.Packet, value UnisphereIPMcastAdmBwLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 79, a)
}

func UnisphereIPMcastAdmBwLimit_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 79)
}

type UnisphereIPv6McastAdmBwLimit uint32

var UnisphereIPv6McastAdmBwLimit_Strings = map[UnisphereIPv6McastAdmBwLimit]string{}

func (a UnisphereIPv6McastAdmBwLimit) String() string {
	if str, ok := UnisphereIPv6McastAdmBwLimit_Strings[a]; ok {
		return str
	}
	return "UnisphereIPv6McastAdmBwLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereIPv6McastAdmBwLimit_Add(p *radius.Packet, value UnisphereIPv6McastAdmBwLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 80, a)
}

func UnisphereIPv6McastAdmBwLimit_Get(p *radius.Packet) (value UnisphereIPv6McastAdmBwLimit) {
	value, _ = UnisphereIPv6McastAdmBwLimit_Lookup(p)
	return
}

func UnisphereIPv6McastAdmBwLimit_Gets(p *radius.Packet) (values []UnisphereIPv6McastAdmBwLimit, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 80) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereIPv6McastAdmBwLimit(i))
	}
	return
}

func UnisphereIPv6McastAdmBwLimit_Lookup(p *radius.Packet) (value UnisphereIPv6McastAdmBwLimit, err error) {
	a, ok := _Unisphere_LookupVendor(p, 80)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereIPv6McastAdmBwLimit(i)
	return
}

func UnisphereIPv6McastAdmBwLimit_Set(p *radius.Packet, value UnisphereIPv6McastAdmBwLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 80, a)
}

func UnisphereIPv6McastAdmBwLimit_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 80)
}

func UnisphereL2cAccessLoopParameters_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 81, a)
}

func UnisphereL2cAccessLoopParameters_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 81, a)
}

func UnisphereL2cAccessLoopParameters_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereL2cAccessLoopParameters_Lookup(p)
	return
}

func UnisphereL2cAccessLoopParameters_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereL2cAccessLoopParameters_LookupString(p)
	return
}

func UnisphereL2cAccessLoopParameters_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 81) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereL2cAccessLoopParameters_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 81) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereL2cAccessLoopParameters_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 81)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereL2cAccessLoopParameters_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 81)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereL2cAccessLoopParameters_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 81, a)
}

func UnisphereL2cAccessLoopParameters_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 81, a)
}

func UnisphereL2cAccessLoopParameters_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 81)
}

func UnisphereQosParameters_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 82, a)
}

func UnisphereQosParameters_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 82, a)
}

func UnisphereQosParameters_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereQosParameters_Lookup(p)
	return
}

func UnisphereQosParameters_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereQosParameters_LookupString(p)
	return
}

func UnisphereQosParameters_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 82) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereQosParameters_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 82) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereQosParameters_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereQosParameters_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereQosParameters_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 82, a)
}

func UnisphereQosParameters_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 82, a)
}

func UnisphereQosParameters_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 82)
}

func UnisphereServiceSession_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 83, a)
}

func UnisphereServiceSession_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 83, a)
}

func UnisphereServiceSession_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereServiceSession_Lookup(p)
	return
}

func UnisphereServiceSession_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereServiceSession_LookupString(p)
	return
}

func UnisphereServiceSession_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 83) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereServiceSession_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 83) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereServiceSession_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 83)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereServiceSession_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 83)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereServiceSession_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 83, a)
}

func UnisphereServiceSession_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 83, a)
}

func UnisphereServiceSession_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 83)
}

type UnisphereMobileIPAlgorithm uint32

var UnisphereMobileIPAlgorithm_Strings = map[UnisphereMobileIPAlgorithm]string{}

func (a UnisphereMobileIPAlgorithm) String() string {
	if str, ok := UnisphereMobileIPAlgorithm_Strings[a]; ok {
		return str
	}
	return "UnisphereMobileIPAlgorithm(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereMobileIPAlgorithm_Add(p *radius.Packet, value UnisphereMobileIPAlgorithm) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 84, a)
}

func UnisphereMobileIPAlgorithm_Get(p *radius.Packet) (value UnisphereMobileIPAlgorithm) {
	value, _ = UnisphereMobileIPAlgorithm_Lookup(p)
	return
}

func UnisphereMobileIPAlgorithm_Gets(p *radius.Packet) (values []UnisphereMobileIPAlgorithm, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 84) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereMobileIPAlgorithm(i))
	}
	return
}

func UnisphereMobileIPAlgorithm_Lookup(p *radius.Packet) (value UnisphereMobileIPAlgorithm, err error) {
	a, ok := _Unisphere_LookupVendor(p, 84)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereMobileIPAlgorithm(i)
	return
}

func UnisphereMobileIPAlgorithm_Set(p *radius.Packet, value UnisphereMobileIPAlgorithm) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 84, a)
}

func UnisphereMobileIPAlgorithm_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 84)
}

type UnisphereMobileIPSPI uint32

var UnisphereMobileIPSPI_Strings = map[UnisphereMobileIPSPI]string{}

func (a UnisphereMobileIPSPI) String() string {
	if str, ok := UnisphereMobileIPSPI_Strings[a]; ok {
		return str
	}
	return "UnisphereMobileIPSPI(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereMobileIPSPI_Add(p *radius.Packet, value UnisphereMobileIPSPI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 85, a)
}

func UnisphereMobileIPSPI_Get(p *radius.Packet) (value UnisphereMobileIPSPI) {
	value, _ = UnisphereMobileIPSPI_Lookup(p)
	return
}

func UnisphereMobileIPSPI_Gets(p *radius.Packet) (values []UnisphereMobileIPSPI, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 85) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereMobileIPSPI(i))
	}
	return
}

func UnisphereMobileIPSPI_Lookup(p *radius.Packet) (value UnisphereMobileIPSPI, err error) {
	a, ok := _Unisphere_LookupVendor(p, 85)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereMobileIPSPI(i)
	return
}

func UnisphereMobileIPSPI_Set(p *radius.Packet, value UnisphereMobileIPSPI) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 85, a)
}

func UnisphereMobileIPSPI_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 85)
}

func UnisphereMobileIPKey_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 86, a)
}

func UnisphereMobileIPKey_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 86, a)
}

func UnisphereMobileIPKey_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereMobileIPKey_Lookup(p)
	return
}

func UnisphereMobileIPKey_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereMobileIPKey_LookupString(p)
	return
}

func UnisphereMobileIPKey_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 86) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereMobileIPKey_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 86) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereMobileIPKey_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 86)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereMobileIPKey_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 86)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereMobileIPKey_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 86, a)
}

func UnisphereMobileIPKey_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 86, a)
}

func UnisphereMobileIPKey_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 86)
}

type UnisphereMobileIPReplay uint32

var UnisphereMobileIPReplay_Strings = map[UnisphereMobileIPReplay]string{}

func (a UnisphereMobileIPReplay) String() string {
	if str, ok := UnisphereMobileIPReplay_Strings[a]; ok {
		return str
	}
	return "UnisphereMobileIPReplay(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereMobileIPReplay_Add(p *radius.Packet, value UnisphereMobileIPReplay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 87, a)
}

func UnisphereMobileIPReplay_Get(p *radius.Packet) (value UnisphereMobileIPReplay) {
	value, _ = UnisphereMobileIPReplay_Lookup(p)
	return
}

func UnisphereMobileIPReplay_Gets(p *radius.Packet) (values []UnisphereMobileIPReplay, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 87) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereMobileIPReplay(i))
	}
	return
}

func UnisphereMobileIPReplay_Lookup(p *radius.Packet) (value UnisphereMobileIPReplay, err error) {
	a, ok := _Unisphere_LookupVendor(p, 87)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereMobileIPReplay(i)
	return
}

func UnisphereMobileIPReplay_Set(p *radius.Packet, value UnisphereMobileIPReplay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 87, a)
}

func UnisphereMobileIPReplay_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 87)
}

func UnisphereMobileIPAccessControl_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 88, a)
}

func UnisphereMobileIPAccessControl_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 88, a)
}

func UnisphereMobileIPAccessControl_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereMobileIPAccessControl_Lookup(p)
	return
}

func UnisphereMobileIPAccessControl_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereMobileIPAccessControl_LookupString(p)
	return
}

func UnisphereMobileIPAccessControl_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 88) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereMobileIPAccessControl_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 88) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereMobileIPAccessControl_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 88)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereMobileIPAccessControl_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 88)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereMobileIPAccessControl_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 88, a)
}

func UnisphereMobileIPAccessControl_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 88, a)
}

func UnisphereMobileIPAccessControl_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 88)
}

type UnisphereMobileIPLifetime uint32

var UnisphereMobileIPLifetime_Strings = map[UnisphereMobileIPLifetime]string{}

func (a UnisphereMobileIPLifetime) String() string {
	if str, ok := UnisphereMobileIPLifetime_Strings[a]; ok {
		return str
	}
	return "UnisphereMobileIPLifetime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereMobileIPLifetime_Add(p *radius.Packet, value UnisphereMobileIPLifetime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 89, a)
}

func UnisphereMobileIPLifetime_Get(p *radius.Packet) (value UnisphereMobileIPLifetime) {
	value, _ = UnisphereMobileIPLifetime_Lookup(p)
	return
}

func UnisphereMobileIPLifetime_Gets(p *radius.Packet) (values []UnisphereMobileIPLifetime, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 89) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereMobileIPLifetime(i))
	}
	return
}

func UnisphereMobileIPLifetime_Lookup(p *radius.Packet) (value UnisphereMobileIPLifetime, err error) {
	a, ok := _Unisphere_LookupVendor(p, 89)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereMobileIPLifetime(i)
	return
}

func UnisphereMobileIPLifetime_Set(p *radius.Packet, value UnisphereMobileIPLifetime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 89, a)
}

func UnisphereMobileIPLifetime_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 89)
}

type UnisphereL2TPResynchMethod uint32

const (
	UnisphereL2TPResynchMethod_Value_Disable                  UnisphereL2TPResynchMethod = 0
	UnisphereL2TPResynchMethod_Value_Failover                 UnisphereL2TPResynchMethod = 1
	UnisphereL2TPResynchMethod_Value_SilentFailover           UnisphereL2TPResynchMethod = 2
	UnisphereL2TPResynchMethod_Value_FailoverWithSilentBackup UnisphereL2TPResynchMethod = 3
)

var UnisphereL2TPResynchMethod_Strings = map[UnisphereL2TPResynchMethod]string{
	UnisphereL2TPResynchMethod_Value_Disable:                  "disable",
	UnisphereL2TPResynchMethod_Value_Failover:                 "failover",
	UnisphereL2TPResynchMethod_Value_SilentFailover:           "silent-failover",
	UnisphereL2TPResynchMethod_Value_FailoverWithSilentBackup: "failover-with-silent-backup",
}

func (a UnisphereL2TPResynchMethod) String() string {
	if str, ok := UnisphereL2TPResynchMethod_Strings[a]; ok {
		return str
	}
	return "UnisphereL2TPResynchMethod(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereL2TPResynchMethod_Add(p *radius.Packet, value UnisphereL2TPResynchMethod) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 90, a)
}

func UnisphereL2TPResynchMethod_Get(p *radius.Packet) (value UnisphereL2TPResynchMethod) {
	value, _ = UnisphereL2TPResynchMethod_Lookup(p)
	return
}

func UnisphereL2TPResynchMethod_Gets(p *radius.Packet) (values []UnisphereL2TPResynchMethod, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 90) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereL2TPResynchMethod(i))
	}
	return
}

func UnisphereL2TPResynchMethod_Lookup(p *radius.Packet) (value UnisphereL2TPResynchMethod, err error) {
	a, ok := _Unisphere_LookupVendor(p, 90)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereL2TPResynchMethod(i)
	return
}

func UnisphereL2TPResynchMethod_Set(p *radius.Packet, value UnisphereL2TPResynchMethod) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 90, a)
}

func UnisphereL2TPResynchMethod_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 90)
}

func UnisphereTunnelSwitchProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 91, a)
}

func UnisphereTunnelSwitchProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 91, a)
}

func UnisphereTunnelSwitchProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereTunnelSwitchProfile_Lookup(p)
	return
}

func UnisphereTunnelSwitchProfile_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereTunnelSwitchProfile_LookupString(p)
	return
}

func UnisphereTunnelSwitchProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 91) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereTunnelSwitchProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 91) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereTunnelSwitchProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereTunnelSwitchProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereTunnelSwitchProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 91, a)
}

func UnisphereTunnelSwitchProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 91, a)
}

func UnisphereTunnelSwitchProfile_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 91)
}

func UnisphereL2cUpStreamData_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 92, a)
}

func UnisphereL2cUpStreamData_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 92, a)
}

func UnisphereL2cUpStreamData_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereL2cUpStreamData_Lookup(p)
	return
}

func UnisphereL2cUpStreamData_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereL2cUpStreamData_LookupString(p)
	return
}

func UnisphereL2cUpStreamData_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 92) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereL2cUpStreamData_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 92) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereL2cUpStreamData_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 92)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereL2cUpStreamData_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 92)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereL2cUpStreamData_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 92, a)
}

func UnisphereL2cUpStreamData_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 92, a)
}

func UnisphereL2cUpStreamData_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 92)
}

func UnisphereL2cDownStreamData_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 93, a)
}

func UnisphereL2cDownStreamData_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 93, a)
}

func UnisphereL2cDownStreamData_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereL2cDownStreamData_Lookup(p)
	return
}

func UnisphereL2cDownStreamData_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereL2cDownStreamData_LookupString(p)
	return
}

func UnisphereL2cDownStreamData_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 93) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereL2cDownStreamData_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 93) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereL2cDownStreamData_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 93)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereL2cDownStreamData_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 93)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereL2cDownStreamData_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 93, a)
}

func UnisphereL2cDownStreamData_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 93, a)
}

func UnisphereL2cDownStreamData_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 93)
}

type UnisphereTunnelTxSpeedMethod uint32

const (
	UnisphereTunnelTxSpeedMethod_Value_StaticLayer2  UnisphereTunnelTxSpeedMethod = 1
	UnisphereTunnelTxSpeedMethod_Value_DynamicLayer2 UnisphereTunnelTxSpeedMethod = 2
	UnisphereTunnelTxSpeedMethod_Value_Qos           UnisphereTunnelTxSpeedMethod = 3
	UnisphereTunnelTxSpeedMethod_Value_Actual        UnisphereTunnelTxSpeedMethod = 4
)

var UnisphereTunnelTxSpeedMethod_Strings = map[UnisphereTunnelTxSpeedMethod]string{
	UnisphereTunnelTxSpeedMethod_Value_StaticLayer2:  "static-layer2",
	UnisphereTunnelTxSpeedMethod_Value_DynamicLayer2: "dynamic-layer2",
	UnisphereTunnelTxSpeedMethod_Value_Qos:           "qos",
	UnisphereTunnelTxSpeedMethod_Value_Actual:        "actual",
}

func (a UnisphereTunnelTxSpeedMethod) String() string {
	if str, ok := UnisphereTunnelTxSpeedMethod_Strings[a]; ok {
		return str
	}
	return "UnisphereTunnelTxSpeedMethod(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereTunnelTxSpeedMethod_Add(p *radius.Packet, value UnisphereTunnelTxSpeedMethod) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 94, a)
}

func UnisphereTunnelTxSpeedMethod_Get(p *radius.Packet) (value UnisphereTunnelTxSpeedMethod) {
	value, _ = UnisphereTunnelTxSpeedMethod_Lookup(p)
	return
}

func UnisphereTunnelTxSpeedMethod_Gets(p *radius.Packet) (values []UnisphereTunnelTxSpeedMethod, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 94) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereTunnelTxSpeedMethod(i))
	}
	return
}

func UnisphereTunnelTxSpeedMethod_Lookup(p *radius.Packet) (value UnisphereTunnelTxSpeedMethod, err error) {
	a, ok := _Unisphere_LookupVendor(p, 94)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereTunnelTxSpeedMethod(i)
	return
}

func UnisphereTunnelTxSpeedMethod_Set(p *radius.Packet, value UnisphereTunnelTxSpeedMethod) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 94, a)
}

func UnisphereTunnelTxSpeedMethod_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 94)
}

type UnisphereIGMPQueryInterval uint32

var UnisphereIGMPQueryInterval_Strings = map[UnisphereIGMPQueryInterval]string{}

func (a UnisphereIGMPQueryInterval) String() string {
	if str, ok := UnisphereIGMPQueryInterval_Strings[a]; ok {
		return str
	}
	return "UnisphereIGMPQueryInterval(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereIGMPQueryInterval_Add(p *radius.Packet, value UnisphereIGMPQueryInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 95, a)
}

func UnisphereIGMPQueryInterval_Get(p *radius.Packet) (value UnisphereIGMPQueryInterval) {
	value, _ = UnisphereIGMPQueryInterval_Lookup(p)
	return
}

func UnisphereIGMPQueryInterval_Gets(p *radius.Packet) (values []UnisphereIGMPQueryInterval, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 95) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereIGMPQueryInterval(i))
	}
	return
}

func UnisphereIGMPQueryInterval_Lookup(p *radius.Packet) (value UnisphereIGMPQueryInterval, err error) {
	a, ok := _Unisphere_LookupVendor(p, 95)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereIGMPQueryInterval(i)
	return
}

func UnisphereIGMPQueryInterval_Set(p *radius.Packet, value UnisphereIGMPQueryInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 95, a)
}

func UnisphereIGMPQueryInterval_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 95)
}

type UnisphereIGMPMaxRespTime uint32

var UnisphereIGMPMaxRespTime_Strings = map[UnisphereIGMPMaxRespTime]string{}

func (a UnisphereIGMPMaxRespTime) String() string {
	if str, ok := UnisphereIGMPMaxRespTime_Strings[a]; ok {
		return str
	}
	return "UnisphereIGMPMaxRespTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereIGMPMaxRespTime_Add(p *radius.Packet, value UnisphereIGMPMaxRespTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 96, a)
}

func UnisphereIGMPMaxRespTime_Get(p *radius.Packet) (value UnisphereIGMPMaxRespTime) {
	value, _ = UnisphereIGMPMaxRespTime_Lookup(p)
	return
}

func UnisphereIGMPMaxRespTime_Gets(p *radius.Packet) (values []UnisphereIGMPMaxRespTime, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 96) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereIGMPMaxRespTime(i))
	}
	return
}

func UnisphereIGMPMaxRespTime_Lookup(p *radius.Packet) (value UnisphereIGMPMaxRespTime, err error) {
	a, ok := _Unisphere_LookupVendor(p, 96)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereIGMPMaxRespTime(i)
	return
}

func UnisphereIGMPMaxRespTime_Set(p *radius.Packet, value UnisphereIGMPMaxRespTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 96, a)
}

func UnisphereIGMPMaxRespTime_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 96)
}

type UnisphereIGMPImmediateLeave uint32

const (
	UnisphereIGMPImmediateLeave_Value_Disabled UnisphereIGMPImmediateLeave = 0
	UnisphereIGMPImmediateLeave_Value_Enabled  UnisphereIGMPImmediateLeave = 1
)

var UnisphereIGMPImmediateLeave_Strings = map[UnisphereIGMPImmediateLeave]string{
	UnisphereIGMPImmediateLeave_Value_Disabled: "disabled",
	UnisphereIGMPImmediateLeave_Value_Enabled:  "enabled",
}

func (a UnisphereIGMPImmediateLeave) String() string {
	if str, ok := UnisphereIGMPImmediateLeave_Strings[a]; ok {
		return str
	}
	return "UnisphereIGMPImmediateLeave(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereIGMPImmediateLeave_Add(p *radius.Packet, value UnisphereIGMPImmediateLeave) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 97, a)
}

func UnisphereIGMPImmediateLeave_Get(p *radius.Packet) (value UnisphereIGMPImmediateLeave) {
	value, _ = UnisphereIGMPImmediateLeave_Lookup(p)
	return
}

func UnisphereIGMPImmediateLeave_Gets(p *radius.Packet) (values []UnisphereIGMPImmediateLeave, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 97) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereIGMPImmediateLeave(i))
	}
	return
}

func UnisphereIGMPImmediateLeave_Lookup(p *radius.Packet) (value UnisphereIGMPImmediateLeave, err error) {
	a, ok := _Unisphere_LookupVendor(p, 97)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereIGMPImmediateLeave(i)
	return
}

func UnisphereIGMPImmediateLeave_Set(p *radius.Packet, value UnisphereIGMPImmediateLeave) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 97, a)
}

func UnisphereIGMPImmediateLeave_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 97)
}

type UnisphereMLDQueryInterval uint32

var UnisphereMLDQueryInterval_Strings = map[UnisphereMLDQueryInterval]string{}

func (a UnisphereMLDQueryInterval) String() string {
	if str, ok := UnisphereMLDQueryInterval_Strings[a]; ok {
		return str
	}
	return "UnisphereMLDQueryInterval(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereMLDQueryInterval_Add(p *radius.Packet, value UnisphereMLDQueryInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 98, a)
}

func UnisphereMLDQueryInterval_Get(p *radius.Packet) (value UnisphereMLDQueryInterval) {
	value, _ = UnisphereMLDQueryInterval_Lookup(p)
	return
}

func UnisphereMLDQueryInterval_Gets(p *radius.Packet) (values []UnisphereMLDQueryInterval, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 98) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereMLDQueryInterval(i))
	}
	return
}

func UnisphereMLDQueryInterval_Lookup(p *radius.Packet) (value UnisphereMLDQueryInterval, err error) {
	a, ok := _Unisphere_LookupVendor(p, 98)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereMLDQueryInterval(i)
	return
}

func UnisphereMLDQueryInterval_Set(p *radius.Packet, value UnisphereMLDQueryInterval) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 98, a)
}

func UnisphereMLDQueryInterval_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 98)
}

type UnisphereMLDMaxRespTime uint32

var UnisphereMLDMaxRespTime_Strings = map[UnisphereMLDMaxRespTime]string{}

func (a UnisphereMLDMaxRespTime) String() string {
	if str, ok := UnisphereMLDMaxRespTime_Strings[a]; ok {
		return str
	}
	return "UnisphereMLDMaxRespTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereMLDMaxRespTime_Add(p *radius.Packet, value UnisphereMLDMaxRespTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 99, a)
}

func UnisphereMLDMaxRespTime_Get(p *radius.Packet) (value UnisphereMLDMaxRespTime) {
	value, _ = UnisphereMLDMaxRespTime_Lookup(p)
	return
}

func UnisphereMLDMaxRespTime_Gets(p *radius.Packet) (values []UnisphereMLDMaxRespTime, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 99) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereMLDMaxRespTime(i))
	}
	return
}

func UnisphereMLDMaxRespTime_Lookup(p *radius.Packet) (value UnisphereMLDMaxRespTime, err error) {
	a, ok := _Unisphere_LookupVendor(p, 99)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereMLDMaxRespTime(i)
	return
}

func UnisphereMLDMaxRespTime_Set(p *radius.Packet, value UnisphereMLDMaxRespTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 99, a)
}

func UnisphereMLDMaxRespTime_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 99)
}

type UnisphereMLDImmediateLeave uint32

const (
	UnisphereMLDImmediateLeave_Value_Disabled UnisphereMLDImmediateLeave = 0
	UnisphereMLDImmediateLeave_Value_Enabled  UnisphereMLDImmediateLeave = 1
)

var UnisphereMLDImmediateLeave_Strings = map[UnisphereMLDImmediateLeave]string{
	UnisphereMLDImmediateLeave_Value_Disabled: "disabled",
	UnisphereMLDImmediateLeave_Value_Enabled:  "enabled",
}

func (a UnisphereMLDImmediateLeave) String() string {
	if str, ok := UnisphereMLDImmediateLeave_Strings[a]; ok {
		return str
	}
	return "UnisphereMLDImmediateLeave(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereMLDImmediateLeave_Add(p *radius.Packet, value UnisphereMLDImmediateLeave) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 100, a)
}

func UnisphereMLDImmediateLeave_Get(p *radius.Packet) (value UnisphereMLDImmediateLeave) {
	value, _ = UnisphereMLDImmediateLeave_Lookup(p)
	return
}

func UnisphereMLDImmediateLeave_Gets(p *radius.Packet) (values []UnisphereMLDImmediateLeave, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 100) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereMLDImmediateLeave(i))
	}
	return
}

func UnisphereMLDImmediateLeave_Lookup(p *radius.Packet) (value UnisphereMLDImmediateLeave, err error) {
	a, ok := _Unisphere_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereMLDImmediateLeave(i)
	return
}

func UnisphereMLDImmediateLeave_Set(p *radius.Packet, value UnisphereMLDImmediateLeave) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 100, a)
}

func UnisphereMLDImmediateLeave_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 100)
}

type UnisphereIPBlockMulticast uint32

const (
	UnisphereIPBlockMulticast_Value_Disabled UnisphereIPBlockMulticast = 0
	UnisphereIPBlockMulticast_Value_Enabled  UnisphereIPBlockMulticast = 1
)

var UnisphereIPBlockMulticast_Strings = map[UnisphereIPBlockMulticast]string{
	UnisphereIPBlockMulticast_Value_Disabled: "disabled",
	UnisphereIPBlockMulticast_Value_Enabled:  "enabled",
}

func (a UnisphereIPBlockMulticast) String() string {
	if str, ok := UnisphereIPBlockMulticast_Strings[a]; ok {
		return str
	}
	return "UnisphereIPBlockMulticast(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereIPBlockMulticast_Add(p *radius.Packet, value UnisphereIPBlockMulticast) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 101, a)
}

func UnisphereIPBlockMulticast_Get(p *radius.Packet) (value UnisphereIPBlockMulticast) {
	value, _ = UnisphereIPBlockMulticast_Lookup(p)
	return
}

func UnisphereIPBlockMulticast_Gets(p *radius.Packet) (values []UnisphereIPBlockMulticast, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 101) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereIPBlockMulticast(i))
	}
	return
}

func UnisphereIPBlockMulticast_Lookup(p *radius.Packet) (value UnisphereIPBlockMulticast, err error) {
	a, ok := _Unisphere_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereIPBlockMulticast(i)
	return
}

func UnisphereIPBlockMulticast_Set(p *radius.Packet, value UnisphereIPBlockMulticast) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 101, a)
}

func UnisphereIPBlockMulticast_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 101)
}

type UnisphereIGMPExplicitTracking uint32

const (
	UnisphereIGMPExplicitTracking_Value_Disabled UnisphereIGMPExplicitTracking = 0
	UnisphereIGMPExplicitTracking_Value_Enabled  UnisphereIGMPExplicitTracking = 1
)

var UnisphereIGMPExplicitTracking_Strings = map[UnisphereIGMPExplicitTracking]string{
	UnisphereIGMPExplicitTracking_Value_Disabled: "disabled",
	UnisphereIGMPExplicitTracking_Value_Enabled:  "enabled",
}

func (a UnisphereIGMPExplicitTracking) String() string {
	if str, ok := UnisphereIGMPExplicitTracking_Strings[a]; ok {
		return str
	}
	return "UnisphereIGMPExplicitTracking(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereIGMPExplicitTracking_Add(p *radius.Packet, value UnisphereIGMPExplicitTracking) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 102, a)
}

func UnisphereIGMPExplicitTracking_Get(p *radius.Packet) (value UnisphereIGMPExplicitTracking) {
	value, _ = UnisphereIGMPExplicitTracking_Lookup(p)
	return
}

func UnisphereIGMPExplicitTracking_Gets(p *radius.Packet) (values []UnisphereIGMPExplicitTracking, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 102) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereIGMPExplicitTracking(i))
	}
	return
}

func UnisphereIGMPExplicitTracking_Lookup(p *radius.Packet) (value UnisphereIGMPExplicitTracking, err error) {
	a, ok := _Unisphere_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereIGMPExplicitTracking(i)
	return
}

func UnisphereIGMPExplicitTracking_Set(p *radius.Packet, value UnisphereIGMPExplicitTracking) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 102, a)
}

func UnisphereIGMPExplicitTracking_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 102)
}

type UnisphereIGMPNoTrackingV2Grps uint32

const (
	UnisphereIGMPNoTrackingV2Grps_Value_Disabled UnisphereIGMPNoTrackingV2Grps = 0
	UnisphereIGMPNoTrackingV2Grps_Value_Enabled  UnisphereIGMPNoTrackingV2Grps = 1
)

var UnisphereIGMPNoTrackingV2Grps_Strings = map[UnisphereIGMPNoTrackingV2Grps]string{
	UnisphereIGMPNoTrackingV2Grps_Value_Disabled: "disabled",
	UnisphereIGMPNoTrackingV2Grps_Value_Enabled:  "enabled",
}

func (a UnisphereIGMPNoTrackingV2Grps) String() string {
	if str, ok := UnisphereIGMPNoTrackingV2Grps_Strings[a]; ok {
		return str
	}
	return "UnisphereIGMPNoTrackingV2Grps(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereIGMPNoTrackingV2Grps_Add(p *radius.Packet, value UnisphereIGMPNoTrackingV2Grps) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 103, a)
}

func UnisphereIGMPNoTrackingV2Grps_Get(p *radius.Packet) (value UnisphereIGMPNoTrackingV2Grps) {
	value, _ = UnisphereIGMPNoTrackingV2Grps_Lookup(p)
	return
}

func UnisphereIGMPNoTrackingV2Grps_Gets(p *radius.Packet) (values []UnisphereIGMPNoTrackingV2Grps, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 103) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereIGMPNoTrackingV2Grps(i))
	}
	return
}

func UnisphereIGMPNoTrackingV2Grps_Lookup(p *radius.Packet) (value UnisphereIGMPNoTrackingV2Grps, err error) {
	a, ok := _Unisphere_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereIGMPNoTrackingV2Grps(i)
	return
}

func UnisphereIGMPNoTrackingV2Grps_Set(p *radius.Packet, value UnisphereIGMPNoTrackingV2Grps) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 103, a)
}

func UnisphereIGMPNoTrackingV2Grps_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 103)
}

type UnisphereMLDExplicitTracking uint32

const (
	UnisphereMLDExplicitTracking_Value_Disabled UnisphereMLDExplicitTracking = 0
	UnisphereMLDExplicitTracking_Value_Enabled  UnisphereMLDExplicitTracking = 1
)

var UnisphereMLDExplicitTracking_Strings = map[UnisphereMLDExplicitTracking]string{
	UnisphereMLDExplicitTracking_Value_Disabled: "disabled",
	UnisphereMLDExplicitTracking_Value_Enabled:  "enabled",
}

func (a UnisphereMLDExplicitTracking) String() string {
	if str, ok := UnisphereMLDExplicitTracking_Strings[a]; ok {
		return str
	}
	return "UnisphereMLDExplicitTracking(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereMLDExplicitTracking_Add(p *radius.Packet, value UnisphereMLDExplicitTracking) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 104, a)
}

func UnisphereMLDExplicitTracking_Get(p *radius.Packet) (value UnisphereMLDExplicitTracking) {
	value, _ = UnisphereMLDExplicitTracking_Lookup(p)
	return
}

func UnisphereMLDExplicitTracking_Gets(p *radius.Packet) (values []UnisphereMLDExplicitTracking, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 104) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereMLDExplicitTracking(i))
	}
	return
}

func UnisphereMLDExplicitTracking_Lookup(p *radius.Packet) (value UnisphereMLDExplicitTracking, err error) {
	a, ok := _Unisphere_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereMLDExplicitTracking(i)
	return
}

func UnisphereMLDExplicitTracking_Set(p *radius.Packet, value UnisphereMLDExplicitTracking) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 104, a)
}

func UnisphereMLDExplicitTracking_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 104)
}

type UnisphereMLDNoTrackingV1Grps uint32

const (
	UnisphereMLDNoTrackingV1Grps_Value_Disabled UnisphereMLDNoTrackingV1Grps = 0
	UnisphereMLDNoTrackingV1Grps_Value_Enabled  UnisphereMLDNoTrackingV1Grps = 1
)

var UnisphereMLDNoTrackingV1Grps_Strings = map[UnisphereMLDNoTrackingV1Grps]string{
	UnisphereMLDNoTrackingV1Grps_Value_Disabled: "disabled",
	UnisphereMLDNoTrackingV1Grps_Value_Enabled:  "enabled",
}

func (a UnisphereMLDNoTrackingV1Grps) String() string {
	if str, ok := UnisphereMLDNoTrackingV1Grps_Strings[a]; ok {
		return str
	}
	return "UnisphereMLDNoTrackingV1Grps(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereMLDNoTrackingV1Grps_Add(p *radius.Packet, value UnisphereMLDNoTrackingV1Grps) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 105, a)
}

func UnisphereMLDNoTrackingV1Grps_Get(p *radius.Packet) (value UnisphereMLDNoTrackingV1Grps) {
	value, _ = UnisphereMLDNoTrackingV1Grps_Lookup(p)
	return
}

func UnisphereMLDNoTrackingV1Grps_Gets(p *radius.Packet) (values []UnisphereMLDNoTrackingV1Grps, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 105) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereMLDNoTrackingV1Grps(i))
	}
	return
}

func UnisphereMLDNoTrackingV1Grps_Lookup(p *radius.Packet) (value UnisphereMLDNoTrackingV1Grps, err error) {
	a, ok := _Unisphere_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereMLDNoTrackingV1Grps(i)
	return
}

func UnisphereMLDNoTrackingV1Grps_Set(p *radius.Packet, value UnisphereMLDNoTrackingV1Grps) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 105, a)
}

func UnisphereMLDNoTrackingV1Grps_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 105)
}

func JnprIPv6IngressPolicyName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 106, a)
}

func JnprIPv6IngressPolicyName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 106, a)
}

func JnprIPv6IngressPolicyName_Get(p *radius.Packet) (value []byte) {
	value, _ = JnprIPv6IngressPolicyName_Lookup(p)
	return
}

func JnprIPv6IngressPolicyName_GetString(p *radius.Packet) (value string) {
	value, _ = JnprIPv6IngressPolicyName_LookupString(p)
	return
}

func JnprIPv6IngressPolicyName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 106) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprIPv6IngressPolicyName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 106) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprIPv6IngressPolicyName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JnprIPv6IngressPolicyName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JnprIPv6IngressPolicyName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 106, a)
}

func JnprIPv6IngressPolicyName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 106, a)
}

func JnprIPv6IngressPolicyName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 106)
}

func JnprIPv6EgressPolicyName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 107, a)
}

func JnprIPv6EgressPolicyName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 107, a)
}

func JnprIPv6EgressPolicyName_Get(p *radius.Packet) (value []byte) {
	value, _ = JnprIPv6EgressPolicyName_Lookup(p)
	return
}

func JnprIPv6EgressPolicyName_GetString(p *radius.Packet) (value string) {
	value, _ = JnprIPv6EgressPolicyName_LookupString(p)
	return
}

func JnprIPv6EgressPolicyName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 107) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprIPv6EgressPolicyName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 107) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprIPv6EgressPolicyName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JnprIPv6EgressPolicyName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JnprIPv6EgressPolicyName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 107, a)
}

func JnprIPv6EgressPolicyName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 107, a)
}

func JnprIPv6EgressPolicyName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 107)
}

func JnprCoSParameterType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 108, a)
}

func JnprCoSParameterType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 108, a)
}

func JnprCoSParameterType_Get(p *radius.Packet) (value []byte) {
	value, _ = JnprCoSParameterType_Lookup(p)
	return
}

func JnprCoSParameterType_GetString(p *radius.Packet) (value string) {
	value, _ = JnprCoSParameterType_LookupString(p)
	return
}

func JnprCoSParameterType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 108) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprCoSParameterType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 108) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprCoSParameterType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JnprCoSParameterType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JnprCoSParameterType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 108, a)
}

func JnprCoSParameterType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 108, a)
}

func JnprCoSParameterType_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 108)
}

func JnprDHCPGuidedRelayServer_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 109, a)
}

func JnprDHCPGuidedRelayServer_Get(p *radius.Packet) (value net.IP) {
	value, _ = JnprDHCPGuidedRelayServer_Lookup(p)
	return
}

func JnprDHCPGuidedRelayServer_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Unisphere_GetsVendor(p, 109) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprDHCPGuidedRelayServer_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Unisphere_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func JnprDHCPGuidedRelayServer_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 109, a)
}

func JnprDHCPGuidedRelayServer_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 109)
}

func UnisphereAccLoopCirID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 110, a)
}

func UnisphereAccLoopCirID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 110, a)
}

func UnisphereAccLoopCirID_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereAccLoopCirID_Lookup(p)
	return
}

func UnisphereAccLoopCirID_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereAccLoopCirID_LookupString(p)
	return
}

func UnisphereAccLoopCirID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 110) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereAccLoopCirID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 110) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereAccLoopCirID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereAccLoopCirID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereAccLoopCirID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 110, a)
}

func UnisphereAccLoopCirID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 110, a)
}

func UnisphereAccLoopCirID_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 110)
}

func UnisphereAccAggrCirIDBin_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 111, a)
}

func UnisphereAccAggrCirIDBin_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 111, a)
}

func UnisphereAccAggrCirIDBin_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereAccAggrCirIDBin_Lookup(p)
	return
}

func UnisphereAccAggrCirIDBin_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereAccAggrCirIDBin_LookupString(p)
	return
}

func UnisphereAccAggrCirIDBin_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 111) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereAccAggrCirIDBin_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 111) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereAccAggrCirIDBin_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereAccAggrCirIDBin_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereAccAggrCirIDBin_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 111, a)
}

func UnisphereAccAggrCirIDBin_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 111, a)
}

func UnisphereAccAggrCirIDBin_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 111)
}

func UnisphereAccAggrCirIDAsc_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 112, a)
}

func UnisphereAccAggrCirIDAsc_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 112, a)
}

func UnisphereAccAggrCirIDAsc_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereAccAggrCirIDAsc_Lookup(p)
	return
}

func UnisphereAccAggrCirIDAsc_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereAccAggrCirIDAsc_LookupString(p)
	return
}

func UnisphereAccAggrCirIDAsc_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 112) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereAccAggrCirIDAsc_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 112) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereAccAggrCirIDAsc_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereAccAggrCirIDAsc_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereAccAggrCirIDAsc_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 112, a)
}

func UnisphereAccAggrCirIDAsc_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 112, a)
}

func UnisphereAccAggrCirIDAsc_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 112)
}

type UnisphereActDataRateUp uint32

var UnisphereActDataRateUp_Strings = map[UnisphereActDataRateUp]string{}

func (a UnisphereActDataRateUp) String() string {
	if str, ok := UnisphereActDataRateUp_Strings[a]; ok {
		return str
	}
	return "UnisphereActDataRateUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereActDataRateUp_Add(p *radius.Packet, value UnisphereActDataRateUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 113, a)
}

func UnisphereActDataRateUp_Get(p *radius.Packet) (value UnisphereActDataRateUp) {
	value, _ = UnisphereActDataRateUp_Lookup(p)
	return
}

func UnisphereActDataRateUp_Gets(p *radius.Packet) (values []UnisphereActDataRateUp, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 113) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereActDataRateUp(i))
	}
	return
}

func UnisphereActDataRateUp_Lookup(p *radius.Packet) (value UnisphereActDataRateUp, err error) {
	a, ok := _Unisphere_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereActDataRateUp(i)
	return
}

func UnisphereActDataRateUp_Set(p *radius.Packet, value UnisphereActDataRateUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 113, a)
}

func UnisphereActDataRateUp_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 113)
}

type UnisphereActDataRateDn uint32

var UnisphereActDataRateDn_Strings = map[UnisphereActDataRateDn]string{}

func (a UnisphereActDataRateDn) String() string {
	if str, ok := UnisphereActDataRateDn_Strings[a]; ok {
		return str
	}
	return "UnisphereActDataRateDn(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereActDataRateDn_Add(p *radius.Packet, value UnisphereActDataRateDn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 114, a)
}

func UnisphereActDataRateDn_Get(p *radius.Packet) (value UnisphereActDataRateDn) {
	value, _ = UnisphereActDataRateDn_Lookup(p)
	return
}

func UnisphereActDataRateDn_Gets(p *radius.Packet) (values []UnisphereActDataRateDn, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 114) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereActDataRateDn(i))
	}
	return
}

func UnisphereActDataRateDn_Lookup(p *radius.Packet) (value UnisphereActDataRateDn, err error) {
	a, ok := _Unisphere_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereActDataRateDn(i)
	return
}

func UnisphereActDataRateDn_Set(p *radius.Packet, value UnisphereActDataRateDn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 114, a)
}

func UnisphereActDataRateDn_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 114)
}

type UnisphereMinDataRateUp uint32

var UnisphereMinDataRateUp_Strings = map[UnisphereMinDataRateUp]string{}

func (a UnisphereMinDataRateUp) String() string {
	if str, ok := UnisphereMinDataRateUp_Strings[a]; ok {
		return str
	}
	return "UnisphereMinDataRateUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereMinDataRateUp_Add(p *radius.Packet, value UnisphereMinDataRateUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 115, a)
}

func UnisphereMinDataRateUp_Get(p *radius.Packet) (value UnisphereMinDataRateUp) {
	value, _ = UnisphereMinDataRateUp_Lookup(p)
	return
}

func UnisphereMinDataRateUp_Gets(p *radius.Packet) (values []UnisphereMinDataRateUp, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 115) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereMinDataRateUp(i))
	}
	return
}

func UnisphereMinDataRateUp_Lookup(p *radius.Packet) (value UnisphereMinDataRateUp, err error) {
	a, ok := _Unisphere_LookupVendor(p, 115)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereMinDataRateUp(i)
	return
}

func UnisphereMinDataRateUp_Set(p *radius.Packet, value UnisphereMinDataRateUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 115, a)
}

func UnisphereMinDataRateUp_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 115)
}

type UnisphereMinDataRateDn uint32

var UnisphereMinDataRateDn_Strings = map[UnisphereMinDataRateDn]string{}

func (a UnisphereMinDataRateDn) String() string {
	if str, ok := UnisphereMinDataRateDn_Strings[a]; ok {
		return str
	}
	return "UnisphereMinDataRateDn(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereMinDataRateDn_Add(p *radius.Packet, value UnisphereMinDataRateDn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 116, a)
}

func UnisphereMinDataRateDn_Get(p *radius.Packet) (value UnisphereMinDataRateDn) {
	value, _ = UnisphereMinDataRateDn_Lookup(p)
	return
}

func UnisphereMinDataRateDn_Gets(p *radius.Packet) (values []UnisphereMinDataRateDn, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 116) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereMinDataRateDn(i))
	}
	return
}

func UnisphereMinDataRateDn_Lookup(p *radius.Packet) (value UnisphereMinDataRateDn, err error) {
	a, ok := _Unisphere_LookupVendor(p, 116)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereMinDataRateDn(i)
	return
}

func UnisphereMinDataRateDn_Set(p *radius.Packet, value UnisphereMinDataRateDn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 116, a)
}

func UnisphereMinDataRateDn_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 116)
}

type UnisphereAttDataRateUp uint32

var UnisphereAttDataRateUp_Strings = map[UnisphereAttDataRateUp]string{}

func (a UnisphereAttDataRateUp) String() string {
	if str, ok := UnisphereAttDataRateUp_Strings[a]; ok {
		return str
	}
	return "UnisphereAttDataRateUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereAttDataRateUp_Add(p *radius.Packet, value UnisphereAttDataRateUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 117, a)
}

func UnisphereAttDataRateUp_Get(p *radius.Packet) (value UnisphereAttDataRateUp) {
	value, _ = UnisphereAttDataRateUp_Lookup(p)
	return
}

func UnisphereAttDataRateUp_Gets(p *radius.Packet) (values []UnisphereAttDataRateUp, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 117) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereAttDataRateUp(i))
	}
	return
}

func UnisphereAttDataRateUp_Lookup(p *radius.Packet) (value UnisphereAttDataRateUp, err error) {
	a, ok := _Unisphere_LookupVendor(p, 117)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereAttDataRateUp(i)
	return
}

func UnisphereAttDataRateUp_Set(p *radius.Packet, value UnisphereAttDataRateUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 117, a)
}

func UnisphereAttDataRateUp_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 117)
}

type UnisphereAttDataRateDn uint32

var UnisphereAttDataRateDn_Strings = map[UnisphereAttDataRateDn]string{}

func (a UnisphereAttDataRateDn) String() string {
	if str, ok := UnisphereAttDataRateDn_Strings[a]; ok {
		return str
	}
	return "UnisphereAttDataRateDn(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereAttDataRateDn_Add(p *radius.Packet, value UnisphereAttDataRateDn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 118, a)
}

func UnisphereAttDataRateDn_Get(p *radius.Packet) (value UnisphereAttDataRateDn) {
	value, _ = UnisphereAttDataRateDn_Lookup(p)
	return
}

func UnisphereAttDataRateDn_Gets(p *radius.Packet) (values []UnisphereAttDataRateDn, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 118) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereAttDataRateDn(i))
	}
	return
}

func UnisphereAttDataRateDn_Lookup(p *radius.Packet) (value UnisphereAttDataRateDn, err error) {
	a, ok := _Unisphere_LookupVendor(p, 118)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereAttDataRateDn(i)
	return
}

func UnisphereAttDataRateDn_Set(p *radius.Packet, value UnisphereAttDataRateDn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 118, a)
}

func UnisphereAttDataRateDn_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 118)
}

type UnisphereMaxDataRateUp uint32

var UnisphereMaxDataRateUp_Strings = map[UnisphereMaxDataRateUp]string{}

func (a UnisphereMaxDataRateUp) String() string {
	if str, ok := UnisphereMaxDataRateUp_Strings[a]; ok {
		return str
	}
	return "UnisphereMaxDataRateUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereMaxDataRateUp_Add(p *radius.Packet, value UnisphereMaxDataRateUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 119, a)
}

func UnisphereMaxDataRateUp_Get(p *radius.Packet) (value UnisphereMaxDataRateUp) {
	value, _ = UnisphereMaxDataRateUp_Lookup(p)
	return
}

func UnisphereMaxDataRateUp_Gets(p *radius.Packet) (values []UnisphereMaxDataRateUp, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 119) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereMaxDataRateUp(i))
	}
	return
}

func UnisphereMaxDataRateUp_Lookup(p *radius.Packet) (value UnisphereMaxDataRateUp, err error) {
	a, ok := _Unisphere_LookupVendor(p, 119)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereMaxDataRateUp(i)
	return
}

func UnisphereMaxDataRateUp_Set(p *radius.Packet, value UnisphereMaxDataRateUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 119, a)
}

func UnisphereMaxDataRateUp_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 119)
}

type UnisphereMaxDataRateDn uint32

var UnisphereMaxDataRateDn_Strings = map[UnisphereMaxDataRateDn]string{}

func (a UnisphereMaxDataRateDn) String() string {
	if str, ok := UnisphereMaxDataRateDn_Strings[a]; ok {
		return str
	}
	return "UnisphereMaxDataRateDn(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereMaxDataRateDn_Add(p *radius.Packet, value UnisphereMaxDataRateDn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 120, a)
}

func UnisphereMaxDataRateDn_Get(p *radius.Packet) (value UnisphereMaxDataRateDn) {
	value, _ = UnisphereMaxDataRateDn_Lookup(p)
	return
}

func UnisphereMaxDataRateDn_Gets(p *radius.Packet) (values []UnisphereMaxDataRateDn, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 120) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereMaxDataRateDn(i))
	}
	return
}

func UnisphereMaxDataRateDn_Lookup(p *radius.Packet) (value UnisphereMaxDataRateDn, err error) {
	a, ok := _Unisphere_LookupVendor(p, 120)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereMaxDataRateDn(i)
	return
}

func UnisphereMaxDataRateDn_Set(p *radius.Packet, value UnisphereMaxDataRateDn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 120, a)
}

func UnisphereMaxDataRateDn_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 120)
}

type UnisphereMinLPDataRateUp uint32

var UnisphereMinLPDataRateUp_Strings = map[UnisphereMinLPDataRateUp]string{}

func (a UnisphereMinLPDataRateUp) String() string {
	if str, ok := UnisphereMinLPDataRateUp_Strings[a]; ok {
		return str
	}
	return "UnisphereMinLPDataRateUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereMinLPDataRateUp_Add(p *radius.Packet, value UnisphereMinLPDataRateUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 121, a)
}

func UnisphereMinLPDataRateUp_Get(p *radius.Packet) (value UnisphereMinLPDataRateUp) {
	value, _ = UnisphereMinLPDataRateUp_Lookup(p)
	return
}

func UnisphereMinLPDataRateUp_Gets(p *radius.Packet) (values []UnisphereMinLPDataRateUp, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 121) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereMinLPDataRateUp(i))
	}
	return
}

func UnisphereMinLPDataRateUp_Lookup(p *radius.Packet) (value UnisphereMinLPDataRateUp, err error) {
	a, ok := _Unisphere_LookupVendor(p, 121)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereMinLPDataRateUp(i)
	return
}

func UnisphereMinLPDataRateUp_Set(p *radius.Packet, value UnisphereMinLPDataRateUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 121, a)
}

func UnisphereMinLPDataRateUp_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 121)
}

type UnisphereMinLPDataRateDn uint32

var UnisphereMinLPDataRateDn_Strings = map[UnisphereMinLPDataRateDn]string{}

func (a UnisphereMinLPDataRateDn) String() string {
	if str, ok := UnisphereMinLPDataRateDn_Strings[a]; ok {
		return str
	}
	return "UnisphereMinLPDataRateDn(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereMinLPDataRateDn_Add(p *radius.Packet, value UnisphereMinLPDataRateDn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 122, a)
}

func UnisphereMinLPDataRateDn_Get(p *radius.Packet) (value UnisphereMinLPDataRateDn) {
	value, _ = UnisphereMinLPDataRateDn_Lookup(p)
	return
}

func UnisphereMinLPDataRateDn_Gets(p *radius.Packet) (values []UnisphereMinLPDataRateDn, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 122) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereMinLPDataRateDn(i))
	}
	return
}

func UnisphereMinLPDataRateDn_Lookup(p *radius.Packet) (value UnisphereMinLPDataRateDn, err error) {
	a, ok := _Unisphere_LookupVendor(p, 122)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereMinLPDataRateDn(i)
	return
}

func UnisphereMinLPDataRateDn_Set(p *radius.Packet, value UnisphereMinLPDataRateDn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 122, a)
}

func UnisphereMinLPDataRateDn_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 122)
}

type UnisphereMaxInterlvDelayUp uint32

var UnisphereMaxInterlvDelayUp_Strings = map[UnisphereMaxInterlvDelayUp]string{}

func (a UnisphereMaxInterlvDelayUp) String() string {
	if str, ok := UnisphereMaxInterlvDelayUp_Strings[a]; ok {
		return str
	}
	return "UnisphereMaxInterlvDelayUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereMaxInterlvDelayUp_Add(p *radius.Packet, value UnisphereMaxInterlvDelayUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 123, a)
}

func UnisphereMaxInterlvDelayUp_Get(p *radius.Packet) (value UnisphereMaxInterlvDelayUp) {
	value, _ = UnisphereMaxInterlvDelayUp_Lookup(p)
	return
}

func UnisphereMaxInterlvDelayUp_Gets(p *radius.Packet) (values []UnisphereMaxInterlvDelayUp, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 123) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereMaxInterlvDelayUp(i))
	}
	return
}

func UnisphereMaxInterlvDelayUp_Lookup(p *radius.Packet) (value UnisphereMaxInterlvDelayUp, err error) {
	a, ok := _Unisphere_LookupVendor(p, 123)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereMaxInterlvDelayUp(i)
	return
}

func UnisphereMaxInterlvDelayUp_Set(p *radius.Packet, value UnisphereMaxInterlvDelayUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 123, a)
}

func UnisphereMaxInterlvDelayUp_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 123)
}

type UnisphereActInterlvDelayUp uint32

var UnisphereActInterlvDelayUp_Strings = map[UnisphereActInterlvDelayUp]string{}

func (a UnisphereActInterlvDelayUp) String() string {
	if str, ok := UnisphereActInterlvDelayUp_Strings[a]; ok {
		return str
	}
	return "UnisphereActInterlvDelayUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereActInterlvDelayUp_Add(p *radius.Packet, value UnisphereActInterlvDelayUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 124, a)
}

func UnisphereActInterlvDelayUp_Get(p *radius.Packet) (value UnisphereActInterlvDelayUp) {
	value, _ = UnisphereActInterlvDelayUp_Lookup(p)
	return
}

func UnisphereActInterlvDelayUp_Gets(p *radius.Packet) (values []UnisphereActInterlvDelayUp, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 124) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereActInterlvDelayUp(i))
	}
	return
}

func UnisphereActInterlvDelayUp_Lookup(p *radius.Packet) (value UnisphereActInterlvDelayUp, err error) {
	a, ok := _Unisphere_LookupVendor(p, 124)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereActInterlvDelayUp(i)
	return
}

func UnisphereActInterlvDelayUp_Set(p *radius.Packet, value UnisphereActInterlvDelayUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 124, a)
}

func UnisphereActInterlvDelayUp_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 124)
}

type UnisphereMaxInterlvDelayDn uint32

var UnisphereMaxInterlvDelayDn_Strings = map[UnisphereMaxInterlvDelayDn]string{}

func (a UnisphereMaxInterlvDelayDn) String() string {
	if str, ok := UnisphereMaxInterlvDelayDn_Strings[a]; ok {
		return str
	}
	return "UnisphereMaxInterlvDelayDn(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereMaxInterlvDelayDn_Add(p *radius.Packet, value UnisphereMaxInterlvDelayDn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 125, a)
}

func UnisphereMaxInterlvDelayDn_Get(p *radius.Packet) (value UnisphereMaxInterlvDelayDn) {
	value, _ = UnisphereMaxInterlvDelayDn_Lookup(p)
	return
}

func UnisphereMaxInterlvDelayDn_Gets(p *radius.Packet) (values []UnisphereMaxInterlvDelayDn, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 125) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereMaxInterlvDelayDn(i))
	}
	return
}

func UnisphereMaxInterlvDelayDn_Lookup(p *radius.Packet) (value UnisphereMaxInterlvDelayDn, err error) {
	a, ok := _Unisphere_LookupVendor(p, 125)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereMaxInterlvDelayDn(i)
	return
}

func UnisphereMaxInterlvDelayDn_Set(p *radius.Packet, value UnisphereMaxInterlvDelayDn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 125, a)
}

func UnisphereMaxInterlvDelayDn_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 125)
}

type UnisphereActInterlvDelayDn uint32

var UnisphereActInterlvDelayDn_Strings = map[UnisphereActInterlvDelayDn]string{}

func (a UnisphereActInterlvDelayDn) String() string {
	if str, ok := UnisphereActInterlvDelayDn_Strings[a]; ok {
		return str
	}
	return "UnisphereActInterlvDelayDn(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereActInterlvDelayDn_Add(p *radius.Packet, value UnisphereActInterlvDelayDn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 126, a)
}

func UnisphereActInterlvDelayDn_Get(p *radius.Packet) (value UnisphereActInterlvDelayDn) {
	value, _ = UnisphereActInterlvDelayDn_Lookup(p)
	return
}

func UnisphereActInterlvDelayDn_Gets(p *radius.Packet) (values []UnisphereActInterlvDelayDn, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 126) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereActInterlvDelayDn(i))
	}
	return
}

func UnisphereActInterlvDelayDn_Lookup(p *radius.Packet) (value UnisphereActInterlvDelayDn, err error) {
	a, ok := _Unisphere_LookupVendor(p, 126)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereActInterlvDelayDn(i)
	return
}

func UnisphereActInterlvDelayDn_Set(p *radius.Packet, value UnisphereActInterlvDelayDn) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 126, a)
}

func UnisphereActInterlvDelayDn_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 126)
}

type UnisphereDSLLineState uint32

const (
	UnisphereDSLLineState_Value_SHOWTIME UnisphereDSLLineState = 1
	UnisphereDSLLineState_Value_IDLE     UnisphereDSLLineState = 2
	UnisphereDSLLineState_Value_SILENT   UnisphereDSLLineState = 3
)

var UnisphereDSLLineState_Strings = map[UnisphereDSLLineState]string{
	UnisphereDSLLineState_Value_SHOWTIME: "SHOWTIME",
	UnisphereDSLLineState_Value_IDLE:     "IDLE",
	UnisphereDSLLineState_Value_SILENT:   "SILENT",
}

func (a UnisphereDSLLineState) String() string {
	if str, ok := UnisphereDSLLineState_Strings[a]; ok {
		return str
	}
	return "UnisphereDSLLineState(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereDSLLineState_Add(p *radius.Packet, value UnisphereDSLLineState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 127, a)
}

func UnisphereDSLLineState_Get(p *radius.Packet) (value UnisphereDSLLineState) {
	value, _ = UnisphereDSLLineState_Lookup(p)
	return
}

func UnisphereDSLLineState_Gets(p *radius.Packet) (values []UnisphereDSLLineState, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 127) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereDSLLineState(i))
	}
	return
}

func UnisphereDSLLineState_Lookup(p *radius.Packet) (value UnisphereDSLLineState, err error) {
	a, ok := _Unisphere_LookupVendor(p, 127)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereDSLLineState(i)
	return
}

func UnisphereDSLLineState_Set(p *radius.Packet, value UnisphereDSLLineState) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 127, a)
}

func UnisphereDSLLineState_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 127)
}

type UnisphereDSLType uint32

const (
	UnisphereDSLType_Value_ADSL1     UnisphereDSLType = 1
	UnisphereDSLType_Value_ADSL2     UnisphereDSLType = 2
	UnisphereDSLType_Value_ADSL2PLUS UnisphereDSLType = 3
	UnisphereDSLType_Value_VDSL1     UnisphereDSLType = 4
	UnisphereDSLType_Value_VDSL2     UnisphereDSLType = 5
	UnisphereDSLType_Value_SDSL      UnisphereDSLType = 6
	UnisphereDSLType_Value_UNKNOWN   UnisphereDSLType = 7
)

var UnisphereDSLType_Strings = map[UnisphereDSLType]string{
	UnisphereDSLType_Value_ADSL1:     "ADSL1",
	UnisphereDSLType_Value_ADSL2:     "ADSL2",
	UnisphereDSLType_Value_ADSL2PLUS: "ADSL2PLUS",
	UnisphereDSLType_Value_VDSL1:     "VDSL1",
	UnisphereDSLType_Value_VDSL2:     "VDSL2",
	UnisphereDSLType_Value_SDSL:      "SDSL",
	UnisphereDSLType_Value_UNKNOWN:   "UNKNOWN",
}

func (a UnisphereDSLType) String() string {
	if str, ok := UnisphereDSLType_Strings[a]; ok {
		return str
	}
	return "UnisphereDSLType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereDSLType_Add(p *radius.Packet, value UnisphereDSLType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 128, a)
}

func UnisphereDSLType_Get(p *radius.Packet) (value UnisphereDSLType) {
	value, _ = UnisphereDSLType_Lookup(p)
	return
}

func UnisphereDSLType_Gets(p *radius.Packet) (values []UnisphereDSLType, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 128) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereDSLType(i))
	}
	return
}

func UnisphereDSLType_Lookup(p *radius.Packet) (value UnisphereDSLType, err error) {
	a, ok := _Unisphere_LookupVendor(p, 128)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereDSLType(i)
	return
}

func UnisphereDSLType_Set(p *radius.Packet, value UnisphereDSLType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 128, a)
}

func UnisphereDSLType_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 128)
}

func UnisphereIPv6NdRaPrefix_Add(p *radius.Packet, value *net.IPNet) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Prefix(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 129, a)
}

func UnisphereIPv6NdRaPrefix_Get(p *radius.Packet) (value *net.IPNet) {
	value, _ = UnisphereIPv6NdRaPrefix_Lookup(p)
	return
}

func UnisphereIPv6NdRaPrefix_Gets(p *radius.Packet) (values []*net.IPNet, err error) {
	var i *net.IPNet
	for _, attr := range _Unisphere_GetsVendor(p, 129) {
		i, err = radius.IPv6Prefix(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIPv6NdRaPrefix_Lookup(p *radius.Packet) (value *net.IPNet, err error) {
	a, ok := _Unisphere_LookupVendor(p, 129)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Prefix(a)
	return
}

func UnisphereIPv6NdRaPrefix_Set(p *radius.Packet, value *net.IPNet) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Prefix(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 129, a)
}

func UnisphereIPv6NdRaPrefix_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 129)
}

func UnisphereQosSetName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 130, a)
}

func UnisphereQosSetName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 130, a)
}

func UnisphereQosSetName_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereQosSetName_Lookup(p)
	return
}

func UnisphereQosSetName_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereQosSetName_LookupString(p)
	return
}

func UnisphereQosSetName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 130) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereQosSetName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 130) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereQosSetName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 130)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereQosSetName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 130)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereQosSetName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 130, a)
}

func UnisphereQosSetName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 130, a)
}

func UnisphereQosSetName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 130)
}

type UnisphereServiceAcctInt uint32

var UnisphereServiceAcctInt_Strings = map[UnisphereServiceAcctInt]string{}

func (a UnisphereServiceAcctInt) String() string {
	if str, ok := UnisphereServiceAcctInt_Strings[a]; ok {
		return str
	}
	return "UnisphereServiceAcctInt(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereServiceAcctInt_Add(p *radius.Packet, tag byte, value UnisphereServiceAcctInt) (err error) {
	a := radius.NewInteger(uint32(value))
	if tag >= 0x01 && tag <= 0x1F {
		a[0] = tag
	} else {
		a[0] = 0x00
	}
	return _Unisphere_AddVendor(p, 140, a)
}

func UnisphereServiceAcctInt_Get(p *radius.Packet) (tag byte, value UnisphereServiceAcctInt) {
	tag, value, _ = UnisphereServiceAcctInt_Lookup(p)
	return
}

func UnisphereServiceAcctInt_Gets(p *radius.Packet) (tags []byte, values []UnisphereServiceAcctInt, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 140) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr[0] = 0x00
		}
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereServiceAcctInt(i))
		tags = append(tags, tag)
	}
	return
}

func UnisphereServiceAcctInt_Lookup(p *radius.Packet) (tag byte, value UnisphereServiceAcctInt, err error) {
	a, ok := _Unisphere_LookupVendor(p, 140)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a[0] = 0x00
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereServiceAcctInt(i)
	return
}

func UnisphereServiceAcctInt_Set(p *radius.Packet, tag byte, value UnisphereServiceAcctInt) (err error) {
	a := radius.NewInteger(uint32(value))
	if tag >= 0x01 && tag <= 0x1F {
		a[0] = tag
	} else {
		a[0] = 0x00
	}
	return _Unisphere_SetVendor(p, 140, a)
}

func UnisphereServiceAcctInt_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 140)
}

type UnisphereDownStreamCalcRate uint32

var UnisphereDownStreamCalcRate_Strings = map[UnisphereDownStreamCalcRate]string{}

func (a UnisphereDownStreamCalcRate) String() string {
	if str, ok := UnisphereDownStreamCalcRate_Strings[a]; ok {
		return str
	}
	return "UnisphereDownStreamCalcRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereDownStreamCalcRate_Add(p *radius.Packet, value UnisphereDownStreamCalcRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 141, a)
}

func UnisphereDownStreamCalcRate_Get(p *radius.Packet) (value UnisphereDownStreamCalcRate) {
	value, _ = UnisphereDownStreamCalcRate_Lookup(p)
	return
}

func UnisphereDownStreamCalcRate_Gets(p *radius.Packet) (values []UnisphereDownStreamCalcRate, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 141) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereDownStreamCalcRate(i))
	}
	return
}

func UnisphereDownStreamCalcRate_Lookup(p *radius.Packet) (value UnisphereDownStreamCalcRate, err error) {
	a, ok := _Unisphere_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereDownStreamCalcRate(i)
	return
}

func UnisphereDownStreamCalcRate_Set(p *radius.Packet, value UnisphereDownStreamCalcRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 141, a)
}

func UnisphereDownStreamCalcRate_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 141)
}

type UnisphereUpStreamCalcRate uint32

var UnisphereUpStreamCalcRate_Strings = map[UnisphereUpStreamCalcRate]string{}

func (a UnisphereUpStreamCalcRate) String() string {
	if str, ok := UnisphereUpStreamCalcRate_Strings[a]; ok {
		return str
	}
	return "UnisphereUpStreamCalcRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereUpStreamCalcRate_Add(p *radius.Packet, value UnisphereUpStreamCalcRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 142, a)
}

func UnisphereUpStreamCalcRate_Get(p *radius.Packet) (value UnisphereUpStreamCalcRate) {
	value, _ = UnisphereUpStreamCalcRate_Lookup(p)
	return
}

func UnisphereUpStreamCalcRate_Gets(p *radius.Packet) (values []UnisphereUpStreamCalcRate, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 142) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereUpStreamCalcRate(i))
	}
	return
}

func UnisphereUpStreamCalcRate_Lookup(p *radius.Packet) (value UnisphereUpStreamCalcRate, err error) {
	a, ok := _Unisphere_LookupVendor(p, 142)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereUpStreamCalcRate(i)
	return
}

func UnisphereUpStreamCalcRate_Set(p *radius.Packet, value UnisphereUpStreamCalcRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 142, a)
}

func UnisphereUpStreamCalcRate_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 142)
}

type JnprMaxClientsPerInterface uint32

var JnprMaxClientsPerInterface_Strings = map[JnprMaxClientsPerInterface]string{}

func (a JnprMaxClientsPerInterface) String() string {
	if str, ok := JnprMaxClientsPerInterface_Strings[a]; ok {
		return str
	}
	return "JnprMaxClientsPerInterface(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func JnprMaxClientsPerInterface_Add(p *radius.Packet, value JnprMaxClientsPerInterface) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 143, a)
}

func JnprMaxClientsPerInterface_Get(p *radius.Packet) (value JnprMaxClientsPerInterface) {
	value, _ = JnprMaxClientsPerInterface_Lookup(p)
	return
}

func JnprMaxClientsPerInterface_Gets(p *radius.Packet) (values []JnprMaxClientsPerInterface, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 143) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, JnprMaxClientsPerInterface(i))
	}
	return
}

func JnprMaxClientsPerInterface_Lookup(p *radius.Packet) (value JnprMaxClientsPerInterface, err error) {
	a, ok := _Unisphere_LookupVendor(p, 143)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = JnprMaxClientsPerInterface(i)
	return
}

func JnprMaxClientsPerInterface_Set(p *radius.Packet, value JnprMaxClientsPerInterface) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 143, a)
}

func JnprMaxClientsPerInterface_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 143)
}

type UnispherePPPIngressOnly uint32

const (
	UnispherePPPIngressOnly_Value_Disabled UnispherePPPIngressOnly = 0
	UnispherePPPIngressOnly_Value_Enabled  UnispherePPPIngressOnly = 1
)

var UnispherePPPIngressOnly_Strings = map[UnispherePPPIngressOnly]string{
	UnispherePPPIngressOnly_Value_Disabled: "disabled",
	UnispherePPPIngressOnly_Value_Enabled:  "enabled",
}

func (a UnispherePPPIngressOnly) String() string {
	if str, ok := UnispherePPPIngressOnly_Strings[a]; ok {
		return str
	}
	return "UnispherePPPIngressOnly(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnispherePPPIngressOnly_Add(p *radius.Packet, value UnispherePPPIngressOnly) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 144, a)
}

func UnispherePPPIngressOnly_Get(p *radius.Packet) (value UnispherePPPIngressOnly) {
	value, _ = UnispherePPPIngressOnly_Lookup(p)
	return
}

func UnispherePPPIngressOnly_Gets(p *radius.Packet) (values []UnispherePPPIngressOnly, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 144) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnispherePPPIngressOnly(i))
	}
	return
}

func UnispherePPPIngressOnly_Lookup(p *radius.Packet) (value UnispherePPPIngressOnly, err error) {
	a, ok := _Unisphere_LookupVendor(p, 144)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnispherePPPIngressOnly(i)
	return
}

func UnispherePPPIngressOnly_Set(p *radius.Packet, value UnispherePPPIngressOnly) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 144, a)
}

func UnispherePPPIngressOnly_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 144)
}

func JnprCoSSchedulerPmtType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 146, a)
}

func JnprCoSSchedulerPmtType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 146, a)
}

func JnprCoSSchedulerPmtType_Get(p *radius.Packet) (value []byte) {
	value, _ = JnprCoSSchedulerPmtType_Lookup(p)
	return
}

func JnprCoSSchedulerPmtType_GetString(p *radius.Packet) (value string) {
	value, _ = JnprCoSSchedulerPmtType_LookupString(p)
	return
}

func JnprCoSSchedulerPmtType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 146) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprCoSSchedulerPmtType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 146) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprCoSSchedulerPmtType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 146)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JnprCoSSchedulerPmtType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 146)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JnprCoSSchedulerPmtType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 146, a)
}

func JnprCoSSchedulerPmtType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 146, a)
}

func JnprCoSSchedulerPmtType_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 146)
}

func UnisphereBackupAddressPool_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 147, a)
}

func UnisphereBackupAddressPool_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 147, a)
}

func UnisphereBackupAddressPool_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereBackupAddressPool_Lookup(p)
	return
}

func UnisphereBackupAddressPool_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereBackupAddressPool_LookupString(p)
	return
}

func UnisphereBackupAddressPool_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 147) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereBackupAddressPool_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 147) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereBackupAddressPool_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 147)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereBackupAddressPool_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 147)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereBackupAddressPool_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 147, a)
}

func UnisphereBackupAddressPool_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 147, a)
}

func UnisphereBackupAddressPool_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 147)
}

func UnisphereICRPartitionID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 150, a)
}

func UnisphereICRPartitionID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 150, a)
}

func UnisphereICRPartitionID_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereICRPartitionID_Lookup(p)
	return
}

func UnisphereICRPartitionID_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereICRPartitionID_LookupString(p)
	return
}

func UnisphereICRPartitionID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 150) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereICRPartitionID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 150) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereICRPartitionID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 150)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereICRPartitionID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 150)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereICRPartitionID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 150, a)
}

func UnisphereICRPartitionID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 150, a)
}

func UnisphereICRPartitionID_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 150)
}

type UnisphereIPv6AcctInputOctets uint32

var UnisphereIPv6AcctInputOctets_Strings = map[UnisphereIPv6AcctInputOctets]string{}

func (a UnisphereIPv6AcctInputOctets) String() string {
	if str, ok := UnisphereIPv6AcctInputOctets_Strings[a]; ok {
		return str
	}
	return "UnisphereIPv6AcctInputOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereIPv6AcctInputOctets_Add(p *radius.Packet, value UnisphereIPv6AcctInputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 151, a)
}

func UnisphereIPv6AcctInputOctets_Get(p *radius.Packet) (value UnisphereIPv6AcctInputOctets) {
	value, _ = UnisphereIPv6AcctInputOctets_Lookup(p)
	return
}

func UnisphereIPv6AcctInputOctets_Gets(p *radius.Packet) (values []UnisphereIPv6AcctInputOctets, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 151) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereIPv6AcctInputOctets(i))
	}
	return
}

func UnisphereIPv6AcctInputOctets_Lookup(p *radius.Packet) (value UnisphereIPv6AcctInputOctets, err error) {
	a, ok := _Unisphere_LookupVendor(p, 151)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereIPv6AcctInputOctets(i)
	return
}

func UnisphereIPv6AcctInputOctets_Set(p *radius.Packet, value UnisphereIPv6AcctInputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 151, a)
}

func UnisphereIPv6AcctInputOctets_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 151)
}

type UnisphereIPv6AcctOutputOctets uint32

var UnisphereIPv6AcctOutputOctets_Strings = map[UnisphereIPv6AcctOutputOctets]string{}

func (a UnisphereIPv6AcctOutputOctets) String() string {
	if str, ok := UnisphereIPv6AcctOutputOctets_Strings[a]; ok {
		return str
	}
	return "UnisphereIPv6AcctOutputOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereIPv6AcctOutputOctets_Add(p *radius.Packet, value UnisphereIPv6AcctOutputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 152, a)
}

func UnisphereIPv6AcctOutputOctets_Get(p *radius.Packet) (value UnisphereIPv6AcctOutputOctets) {
	value, _ = UnisphereIPv6AcctOutputOctets_Lookup(p)
	return
}

func UnisphereIPv6AcctOutputOctets_Gets(p *radius.Packet) (values []UnisphereIPv6AcctOutputOctets, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 152) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereIPv6AcctOutputOctets(i))
	}
	return
}

func UnisphereIPv6AcctOutputOctets_Lookup(p *radius.Packet) (value UnisphereIPv6AcctOutputOctets, err error) {
	a, ok := _Unisphere_LookupVendor(p, 152)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereIPv6AcctOutputOctets(i)
	return
}

func UnisphereIPv6AcctOutputOctets_Set(p *radius.Packet, value UnisphereIPv6AcctOutputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 152, a)
}

func UnisphereIPv6AcctOutputOctets_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 152)
}

type UnisphereIPv6AcctInputPackets uint32

var UnisphereIPv6AcctInputPackets_Strings = map[UnisphereIPv6AcctInputPackets]string{}

func (a UnisphereIPv6AcctInputPackets) String() string {
	if str, ok := UnisphereIPv6AcctInputPackets_Strings[a]; ok {
		return str
	}
	return "UnisphereIPv6AcctInputPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereIPv6AcctInputPackets_Add(p *radius.Packet, value UnisphereIPv6AcctInputPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 153, a)
}

func UnisphereIPv6AcctInputPackets_Get(p *radius.Packet) (value UnisphereIPv6AcctInputPackets) {
	value, _ = UnisphereIPv6AcctInputPackets_Lookup(p)
	return
}

func UnisphereIPv6AcctInputPackets_Gets(p *radius.Packet) (values []UnisphereIPv6AcctInputPackets, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 153) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereIPv6AcctInputPackets(i))
	}
	return
}

func UnisphereIPv6AcctInputPackets_Lookup(p *radius.Packet) (value UnisphereIPv6AcctInputPackets, err error) {
	a, ok := _Unisphere_LookupVendor(p, 153)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereIPv6AcctInputPackets(i)
	return
}

func UnisphereIPv6AcctInputPackets_Set(p *radius.Packet, value UnisphereIPv6AcctInputPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 153, a)
}

func UnisphereIPv6AcctInputPackets_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 153)
}

type UnisphereIPv6AcctOutputPackets uint32

var UnisphereIPv6AcctOutputPackets_Strings = map[UnisphereIPv6AcctOutputPackets]string{}

func (a UnisphereIPv6AcctOutputPackets) String() string {
	if str, ok := UnisphereIPv6AcctOutputPackets_Strings[a]; ok {
		return str
	}
	return "UnisphereIPv6AcctOutputPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereIPv6AcctOutputPackets_Add(p *radius.Packet, value UnisphereIPv6AcctOutputPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 154, a)
}

func UnisphereIPv6AcctOutputPackets_Get(p *radius.Packet) (value UnisphereIPv6AcctOutputPackets) {
	value, _ = UnisphereIPv6AcctOutputPackets_Lookup(p)
	return
}

func UnisphereIPv6AcctOutputPackets_Gets(p *radius.Packet) (values []UnisphereIPv6AcctOutputPackets, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 154) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereIPv6AcctOutputPackets(i))
	}
	return
}

func UnisphereIPv6AcctOutputPackets_Lookup(p *radius.Packet) (value UnisphereIPv6AcctOutputPackets, err error) {
	a, ok := _Unisphere_LookupVendor(p, 154)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereIPv6AcctOutputPackets(i)
	return
}

func UnisphereIPv6AcctOutputPackets_Set(p *radius.Packet, value UnisphereIPv6AcctOutputPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 154, a)
}

func UnisphereIPv6AcctOutputPackets_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 154)
}

type UnisphereIPv6AcctInputGigawords uint32

var UnisphereIPv6AcctInputGigawords_Strings = map[UnisphereIPv6AcctInputGigawords]string{}

func (a UnisphereIPv6AcctInputGigawords) String() string {
	if str, ok := UnisphereIPv6AcctInputGigawords_Strings[a]; ok {
		return str
	}
	return "UnisphereIPv6AcctInputGigawords(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereIPv6AcctInputGigawords_Add(p *radius.Packet, value UnisphereIPv6AcctInputGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 155, a)
}

func UnisphereIPv6AcctInputGigawords_Get(p *radius.Packet) (value UnisphereIPv6AcctInputGigawords) {
	value, _ = UnisphereIPv6AcctInputGigawords_Lookup(p)
	return
}

func UnisphereIPv6AcctInputGigawords_Gets(p *radius.Packet) (values []UnisphereIPv6AcctInputGigawords, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 155) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereIPv6AcctInputGigawords(i))
	}
	return
}

func UnisphereIPv6AcctInputGigawords_Lookup(p *radius.Packet) (value UnisphereIPv6AcctInputGigawords, err error) {
	a, ok := _Unisphere_LookupVendor(p, 155)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereIPv6AcctInputGigawords(i)
	return
}

func UnisphereIPv6AcctInputGigawords_Set(p *radius.Packet, value UnisphereIPv6AcctInputGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 155, a)
}

func UnisphereIPv6AcctInputGigawords_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 155)
}

type UnisphereIPv6AcctOutputGigawords uint32

var UnisphereIPv6AcctOutputGigawords_Strings = map[UnisphereIPv6AcctOutputGigawords]string{}

func (a UnisphereIPv6AcctOutputGigawords) String() string {
	if str, ok := UnisphereIPv6AcctOutputGigawords_Strings[a]; ok {
		return str
	}
	return "UnisphereIPv6AcctOutputGigawords(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereIPv6AcctOutputGigawords_Add(p *radius.Packet, value UnisphereIPv6AcctOutputGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 156, a)
}

func UnisphereIPv6AcctOutputGigawords_Get(p *radius.Packet) (value UnisphereIPv6AcctOutputGigawords) {
	value, _ = UnisphereIPv6AcctOutputGigawords_Lookup(p)
	return
}

func UnisphereIPv6AcctOutputGigawords_Gets(p *radius.Packet) (values []UnisphereIPv6AcctOutputGigawords, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 156) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereIPv6AcctOutputGigawords(i))
	}
	return
}

func UnisphereIPv6AcctOutputGigawords_Lookup(p *radius.Packet) (value UnisphereIPv6AcctOutputGigawords, err error) {
	a, ok := _Unisphere_LookupVendor(p, 156)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereIPv6AcctOutputGigawords(i)
	return
}

func UnisphereIPv6AcctOutputGigawords_Set(p *radius.Packet, value UnisphereIPv6AcctOutputGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 156, a)
}

func UnisphereIPv6AcctOutputGigawords_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 156)
}

func JnprIPv6NdRaPoolName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 157, a)
}

func JnprIPv6NdRaPoolName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 157, a)
}

func JnprIPv6NdRaPoolName_Get(p *radius.Packet) (value []byte) {
	value, _ = JnprIPv6NdRaPoolName_Lookup(p)
	return
}

func JnprIPv6NdRaPoolName_GetString(p *radius.Packet) (value string) {
	value, _ = JnprIPv6NdRaPoolName_LookupString(p)
	return
}

func JnprIPv6NdRaPoolName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 157) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprIPv6NdRaPoolName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 157) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprIPv6NdRaPoolName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 157)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JnprIPv6NdRaPoolName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 157)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JnprIPv6NdRaPoolName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 157, a)
}

func JnprIPv6NdRaPoolName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 157, a)
}

func JnprIPv6NdRaPoolName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 157)
}

func JnprPppoEPadn_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 158, a)
}

func JnprPppoEPadn_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 158, a)
}

func JnprPppoEPadn_Get(p *radius.Packet) (value []byte) {
	value, _ = JnprPppoEPadn_Lookup(p)
	return
}

func JnprPppoEPadn_GetString(p *radius.Packet) (value string) {
	value, _ = JnprPppoEPadn_LookupString(p)
	return
}

func JnprPppoEPadn_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 158) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprPppoEPadn_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 158) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprPppoEPadn_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 158)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JnprPppoEPadn_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 158)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JnprPppoEPadn_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 158, a)
}

func JnprPppoEPadn_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 158, a)
}

func JnprPppoEPadn_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 158)
}

func UnisphereDhcpOption82_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 159, a)
}

func UnisphereDhcpOption82_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 159, a)
}

func UnisphereDhcpOption82_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereDhcpOption82_Lookup(p)
	return
}

func UnisphereDhcpOption82_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereDhcpOption82_LookupString(p)
	return
}

func UnisphereDhcpOption82_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 159) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereDhcpOption82_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 159) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereDhcpOption82_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 159)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereDhcpOption82_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 159)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereDhcpOption82_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 159, a)
}

func UnisphereDhcpOption82_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 159, a)
}

func UnisphereDhcpOption82_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 159)
}

type JnprVlanMapID uint32

var JnprVlanMapID_Strings = map[JnprVlanMapID]string{}

func (a JnprVlanMapID) String() string {
	if str, ok := JnprVlanMapID_Strings[a]; ok {
		return str
	}
	return "JnprVlanMapID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func JnprVlanMapID_Add(p *radius.Packet, value JnprVlanMapID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 160, a)
}

func JnprVlanMapID_Get(p *radius.Packet) (value JnprVlanMapID) {
	value, _ = JnprVlanMapID_Lookup(p)
	return
}

func JnprVlanMapID_Gets(p *radius.Packet) (values []JnprVlanMapID, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 160) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, JnprVlanMapID(i))
	}
	return
}

func JnprVlanMapID_Lookup(p *radius.Packet) (value JnprVlanMapID, err error) {
	a, ok := _Unisphere_LookupVendor(p, 160)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = JnprVlanMapID(i)
	return
}

func JnprVlanMapID_Set(p *radius.Packet, value JnprVlanMapID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 160, a)
}

func JnprVlanMapID_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 160)
}

func JnprIPv6DelegatedPoolName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 161, a)
}

func JnprIPv6DelegatedPoolName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 161, a)
}

func JnprIPv6DelegatedPoolName_Get(p *radius.Packet) (value []byte) {
	value, _ = JnprIPv6DelegatedPoolName_Lookup(p)
	return
}

func JnprIPv6DelegatedPoolName_GetString(p *radius.Packet) (value string) {
	value, _ = JnprIPv6DelegatedPoolName_LookupString(p)
	return
}

func JnprIPv6DelegatedPoolName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 161) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprIPv6DelegatedPoolName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 161) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprIPv6DelegatedPoolName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 161)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JnprIPv6DelegatedPoolName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 161)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JnprIPv6DelegatedPoolName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 161, a)
}

func JnprIPv6DelegatedPoolName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 161, a)
}

func JnprIPv6DelegatedPoolName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 161)
}

type JnprTxConnectSpeed uint32

var JnprTxConnectSpeed_Strings = map[JnprTxConnectSpeed]string{}

func (a JnprTxConnectSpeed) String() string {
	if str, ok := JnprTxConnectSpeed_Strings[a]; ok {
		return str
	}
	return "JnprTxConnectSpeed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func JnprTxConnectSpeed_Add(p *radius.Packet, value JnprTxConnectSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 162, a)
}

func JnprTxConnectSpeed_Get(p *radius.Packet) (value JnprTxConnectSpeed) {
	value, _ = JnprTxConnectSpeed_Lookup(p)
	return
}

func JnprTxConnectSpeed_Gets(p *radius.Packet) (values []JnprTxConnectSpeed, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 162) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, JnprTxConnectSpeed(i))
	}
	return
}

func JnprTxConnectSpeed_Lookup(p *radius.Packet) (value JnprTxConnectSpeed, err error) {
	a, ok := _Unisphere_LookupVendor(p, 162)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = JnprTxConnectSpeed(i)
	return
}

func JnprTxConnectSpeed_Set(p *radius.Packet, value JnprTxConnectSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 162, a)
}

func JnprTxConnectSpeed_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 162)
}

type JnprRxConnectSpeed uint32

var JnprRxConnectSpeed_Strings = map[JnprRxConnectSpeed]string{}

func (a JnprRxConnectSpeed) String() string {
	if str, ok := JnprRxConnectSpeed_Strings[a]; ok {
		return str
	}
	return "JnprRxConnectSpeed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func JnprRxConnectSpeed_Add(p *radius.Packet, value JnprRxConnectSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 163, a)
}

func JnprRxConnectSpeed_Get(p *radius.Packet) (value JnprRxConnectSpeed) {
	value, _ = JnprRxConnectSpeed_Lookup(p)
	return
}

func JnprRxConnectSpeed_Gets(p *radius.Packet) (values []JnprRxConnectSpeed, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 163) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, JnprRxConnectSpeed(i))
	}
	return
}

func JnprRxConnectSpeed_Lookup(p *radius.Packet) (value JnprRxConnectSpeed, err error) {
	a, ok := _Unisphere_LookupVendor(p, 163)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = JnprRxConnectSpeed(i)
	return
}

func JnprRxConnectSpeed_Set(p *radius.Packet, value JnprRxConnectSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 163, a)
}

func JnprRxConnectSpeed_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 163)
}

func UnisphereIpv4ReleaseControl_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 164, a)
}

func UnisphereIpv4ReleaseControl_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 164, a)
}

func UnisphereIpv4ReleaseControl_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereIpv4ReleaseControl_Lookup(p)
	return
}

func UnisphereIpv4ReleaseControl_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereIpv4ReleaseControl_LookupString(p)
	return
}

func UnisphereIpv4ReleaseControl_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 164) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIpv4ReleaseControl_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 164) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIpv4ReleaseControl_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 164)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereIpv4ReleaseControl_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 164)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereIpv4ReleaseControl_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 164, a)
}

func UnisphereIpv4ReleaseControl_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 164, a)
}

func UnisphereIpv4ReleaseControl_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 164)
}

func PcpServerName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 165, a)
}

func PcpServerName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 165, a)
}

func PcpServerName_Get(p *radius.Packet) (value []byte) {
	value, _ = PcpServerName_Lookup(p)
	return
}

func PcpServerName_GetString(p *radius.Packet) (value string) {
	value, _ = PcpServerName_LookupString(p)
	return
}

func PcpServerName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 165) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PcpServerName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 165) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PcpServerName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 165)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PcpServerName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 165)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PcpServerName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 165, a)
}

func PcpServerName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 165, a)
}

func PcpServerName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 165)
}

func UnisphereClientProfileName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 174, a)
}

func UnisphereClientProfileName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 174, a)
}

func UnisphereClientProfileName_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereClientProfileName_Lookup(p)
	return
}

func UnisphereClientProfileName_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereClientProfileName_LookupString(p)
	return
}

func UnisphereClientProfileName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 174) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereClientProfileName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 174) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereClientProfileName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 174)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereClientProfileName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 174)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereClientProfileName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 174, a)
}

func UnisphereClientProfileName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 174, a)
}

func UnisphereClientProfileName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 174)
}

func JnprRedirectGWAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 175, a)
}

func JnprRedirectGWAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = JnprRedirectGWAddress_Lookup(p)
	return
}

func JnprRedirectGWAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Unisphere_GetsVendor(p, 175) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprRedirectGWAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Unisphere_LookupVendor(p, 175)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func JnprRedirectGWAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 175, a)
}

func JnprRedirectGWAddress_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 175)
}

func JnprAPNName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 176, a)
}

func JnprAPNName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 176, a)
}

func JnprAPNName_Get(p *radius.Packet) (value []byte) {
	value, _ = JnprAPNName_Lookup(p)
	return
}

func JnprAPNName_GetString(p *radius.Packet) (value string) {
	value, _ = JnprAPNName_LookupString(p)
	return
}

func JnprAPNName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 176) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprAPNName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 176) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprAPNName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 176)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JnprAPNName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 176)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JnprAPNName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 176, a)
}

func JnprAPNName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 176, a)
}

func JnprAPNName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 176)
}

func UnisphereCosShapingRate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 177, a)
}

func UnisphereCosShapingRate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 177, a)
}

func UnisphereCosShapingRate_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereCosShapingRate_Lookup(p)
	return
}

func UnisphereCosShapingRate_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereCosShapingRate_LookupString(p)
	return
}

func UnisphereCosShapingRate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 177) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereCosShapingRate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 177) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereCosShapingRate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 177)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereCosShapingRate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 177)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereCosShapingRate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 177, a)
}

func UnisphereCosShapingRate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 177, a)
}

func UnisphereCosShapingRate_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 177)
}

func UnisphereActionReason_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 178, a)
}

func UnisphereActionReason_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 178, a)
}

func UnisphereActionReason_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereActionReason_Lookup(p)
	return
}

func UnisphereActionReason_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereActionReason_LookupString(p)
	return
}

func UnisphereActionReason_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 178) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereActionReason_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 178) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereActionReason_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 178)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereActionReason_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 178)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereActionReason_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 178, a)
}

func UnisphereActionReason_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 178, a)
}

func UnisphereActionReason_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 178)
}

type UnisphereServiceVolumeGigawords uint32

var UnisphereServiceVolumeGigawords_Strings = map[UnisphereServiceVolumeGigawords]string{}

func (a UnisphereServiceVolumeGigawords) String() string {
	if str, ok := UnisphereServiceVolumeGigawords_Strings[a]; ok {
		return str
	}
	return "UnisphereServiceVolumeGigawords(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereServiceVolumeGigawords_Add(p *radius.Packet, tag byte, value UnisphereServiceVolumeGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	if tag >= 0x01 && tag <= 0x1F {
		a[0] = tag
	} else {
		a[0] = 0x00
	}
	return _Unisphere_AddVendor(p, 179, a)
}

func UnisphereServiceVolumeGigawords_Get(p *radius.Packet) (tag byte, value UnisphereServiceVolumeGigawords) {
	tag, value, _ = UnisphereServiceVolumeGigawords_Lookup(p)
	return
}

func UnisphereServiceVolumeGigawords_Gets(p *radius.Packet) (tags []byte, values []UnisphereServiceVolumeGigawords, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 179) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr[0] = 0x00
		}
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereServiceVolumeGigawords(i))
		tags = append(tags, tag)
	}
	return
}

func UnisphereServiceVolumeGigawords_Lookup(p *radius.Packet) (tag byte, value UnisphereServiceVolumeGigawords, err error) {
	a, ok := _Unisphere_LookupVendor(p, 179)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a[0] = 0x00
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereServiceVolumeGigawords(i)
	return
}

func UnisphereServiceVolumeGigawords_Set(p *radius.Packet, tag byte, value UnisphereServiceVolumeGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	if tag >= 0x01 && tag <= 0x1F {
		a[0] = tag
	} else {
		a[0] = 0x00
	}
	return _Unisphere_SetVendor(p, 179, a)
}

func UnisphereServiceVolumeGigawords_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 179)
}

func UnisphereUpdateService_Add(p *radius.Packet, tag byte, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Unisphere_AddVendor(p, 180, a)
}

func UnisphereUpdateService_AddString(p *radius.Packet, tag byte, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Unisphere_AddVendor(p, 180, a)
}

func UnisphereUpdateService_Get(p *radius.Packet) (tag byte, value []byte) {
	tag, value, _ = UnisphereUpdateService_Lookup(p)
	return
}

func UnisphereUpdateService_GetString(p *radius.Packet) (tag byte, value string) {
	tag, value, _ = UnisphereUpdateService_LookupString(p)
	return
}

func UnisphereUpdateService_Gets(p *radius.Packet) (tags []byte, values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 180) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr = attr[1:]
		}
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
		tags = append(tags, tag)
	}
	return
}

func UnisphereUpdateService_GetStrings(p *radius.Packet) (tags []byte, values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 180) {
		var tag byte
		if len(attr) >= 1 && attr[0] <= 0x1F {
			tag = attr[0]
			attr = attr[1:]
		}
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
		tags = append(tags, tag)
	}
	return
}

func UnisphereUpdateService_Lookup(p *radius.Packet) (tag byte, value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 180)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a = a[1:]
	}
	value = radius.Bytes(a)
	return
}

func UnisphereUpdateService_LookupString(p *radius.Packet) (tag byte, value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 180)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	if len(a) >= 1 && a[0] <= 0x1F {
		tag = a[0]
		a = a[1:]
	}
	value = radius.String(a)
	return
}

func UnisphereUpdateService_Set(p *radius.Packet, tag byte, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Unisphere_SetVendor(p, 180, a)
}

func UnisphereUpdateService_SetString(p *radius.Packet, tag byte, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	if tag <= 0x1F {
		a = append(radius.Attribute{tag}, a...)
	}
	return _Unisphere_SetVendor(p, 180, a)
}

func UnisphereUpdateService_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 180)
}

func UnisphereAccLoopRemoteID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 182, a)
}

func UnisphereAccLoopRemoteID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 182, a)
}

func UnisphereAccLoopRemoteID_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereAccLoopRemoteID_Lookup(p)
	return
}

func UnisphereAccLoopRemoteID_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereAccLoopRemoteID_LookupString(p)
	return
}

func UnisphereAccLoopRemoteID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 182) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereAccLoopRemoteID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 182) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereAccLoopRemoteID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 182)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereAccLoopRemoteID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 182)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereAccLoopRemoteID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 182, a)
}

func UnisphereAccLoopRemoteID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 182, a)
}

func UnisphereAccLoopRemoteID_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 182)
}

func UnisphereAccLoopEncap_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 183, a)
}

func UnisphereAccLoopEncap_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 183, a)
}

func UnisphereAccLoopEncap_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereAccLoopEncap_Lookup(p)
	return
}

func UnisphereAccLoopEncap_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereAccLoopEncap_LookupString(p)
	return
}

func UnisphereAccLoopEncap_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 183) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereAccLoopEncap_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 183) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereAccLoopEncap_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 183)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereAccLoopEncap_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 183)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereAccLoopEncap_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 183, a)
}

func UnisphereAccLoopEncap_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 183, a)
}

func UnisphereAccLoopEncap_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 183)
}

type UnisphereInnerVlanMapID uint32

var UnisphereInnerVlanMapID_Strings = map[UnisphereInnerVlanMapID]string{}

func (a UnisphereInnerVlanMapID) String() string {
	if str, ok := UnisphereInnerVlanMapID_Strings[a]; ok {
		return str
	}
	return "UnisphereInnerVlanMapID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func UnisphereInnerVlanMapID_Add(p *radius.Packet, value UnisphereInnerVlanMapID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 184, a)
}

func UnisphereInnerVlanMapID_Get(p *radius.Packet) (value UnisphereInnerVlanMapID) {
	value, _ = UnisphereInnerVlanMapID_Lookup(p)
	return
}

func UnisphereInnerVlanMapID_Gets(p *radius.Packet) (values []UnisphereInnerVlanMapID, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 184) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, UnisphereInnerVlanMapID(i))
	}
	return
}

func UnisphereInnerVlanMapID_Lookup(p *radius.Packet) (value UnisphereInnerVlanMapID, err error) {
	a, ok := _Unisphere_LookupVendor(p, 184)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = UnisphereInnerVlanMapID(i)
	return
}

func UnisphereInnerVlanMapID_Set(p *radius.Packet, value UnisphereInnerVlanMapID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 184, a)
}

func UnisphereInnerVlanMapID_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 184)
}

func UnisphereCoreFacingInterface_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 185, a)
}

func UnisphereCoreFacingInterface_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 185, a)
}

func UnisphereCoreFacingInterface_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereCoreFacingInterface_Lookup(p)
	return
}

func UnisphereCoreFacingInterface_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereCoreFacingInterface_LookupString(p)
	return
}

func UnisphereCoreFacingInterface_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 185) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereCoreFacingInterface_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 185) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereCoreFacingInterface_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 185)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereCoreFacingInterface_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 185)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereCoreFacingInterface_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 185, a)
}

func UnisphereCoreFacingInterface_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 185, a)
}

func UnisphereCoreFacingInterface_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 185)
}

func UnispherePcpPortMap_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 186, a)
}

func UnispherePcpPortMap_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 186, a)
}

func UnispherePcpPortMap_Get(p *radius.Packet) (value []byte) {
	value, _ = UnispherePcpPortMap_Lookup(p)
	return
}

func UnispherePcpPortMap_GetString(p *radius.Packet) (value string) {
	value, _ = UnispherePcpPortMap_LookupString(p)
	return
}

func UnispherePcpPortMap_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 186) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnispherePcpPortMap_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 186) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnispherePcpPortMap_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 186)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnispherePcpPortMap_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 186)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnispherePcpPortMap_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 186, a)
}

func UnispherePcpPortMap_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 186, a)
}

func UnispherePcpPortMap_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 186)
}

func UnisphereVCPELanExtension_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 187, a)
}

func UnisphereVCPELanExtension_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 187, a)
}

func UnisphereVCPELanExtension_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereVCPELanExtension_Lookup(p)
	return
}

func UnisphereVCPELanExtension_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereVCPELanExtension_LookupString(p)
	return
}

func UnisphereVCPELanExtension_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 187) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereVCPELanExtension_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 187) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereVCPELanExtension_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 187)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereVCPELanExtension_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 187)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereVCPELanExtension_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 187, a)
}

func UnisphereVCPELanExtension_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 187, a)
}

func UnisphereVCPELanExtension_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 187)
}

func UnisphereVCPEIPv4Offload_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 188, a)
}

func UnisphereVCPEIPv4Offload_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 188, a)
}

func UnisphereVCPEIPv4Offload_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereVCPEIPv4Offload_Lookup(p)
	return
}

func UnisphereVCPEIPv4Offload_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereVCPEIPv4Offload_LookupString(p)
	return
}

func UnisphereVCPEIPv4Offload_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 188) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereVCPEIPv4Offload_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 188) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereVCPEIPv4Offload_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 188)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereVCPEIPv4Offload_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 188)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereVCPEIPv4Offload_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 188, a)
}

func UnisphereVCPEIPv4Offload_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 188, a)
}

func UnisphereVCPEIPv4Offload_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 188)
}

func JnprInputInterfaceFilter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 191, a)
}

func JnprInputInterfaceFilter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 191, a)
}

func JnprInputInterfaceFilter_Get(p *radius.Packet) (value []byte) {
	value, _ = JnprInputInterfaceFilter_Lookup(p)
	return
}

func JnprInputInterfaceFilter_GetString(p *radius.Packet) (value string) {
	value, _ = JnprInputInterfaceFilter_LookupString(p)
	return
}

func JnprInputInterfaceFilter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 191) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprInputInterfaceFilter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 191) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprInputInterfaceFilter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 191)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JnprInputInterfaceFilter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 191)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JnprInputInterfaceFilter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 191, a)
}

func JnprInputInterfaceFilter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 191, a)
}

func JnprInputInterfaceFilter_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 191)
}

func JnprOutputInterfaceFilter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 192, a)
}

func JnprOutputInterfaceFilter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 192, a)
}

func JnprOutputInterfaceFilter_Get(p *radius.Packet) (value []byte) {
	value, _ = JnprOutputInterfaceFilter_Lookup(p)
	return
}

func JnprOutputInterfaceFilter_GetString(p *radius.Packet) (value string) {
	value, _ = JnprOutputInterfaceFilter_LookupString(p)
	return
}

func JnprOutputInterfaceFilter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 192) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprOutputInterfaceFilter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 192) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func JnprOutputInterfaceFilter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 192)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func JnprOutputInterfaceFilter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 192)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func JnprOutputInterfaceFilter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 192, a)
}

func JnprOutputInterfaceFilter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 192, a)
}

func JnprOutputInterfaceFilter_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 192)
}

type ERXBulkCoATransactionID uint32

var ERXBulkCoATransactionID_Strings = map[ERXBulkCoATransactionID]string{}

func (a ERXBulkCoATransactionID) String() string {
	if str, ok := ERXBulkCoATransactionID_Strings[a]; ok {
		return str
	}
	return "ERXBulkCoATransactionID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ERXBulkCoATransactionID_Add(p *radius.Packet, value ERXBulkCoATransactionID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 194, a)
}

func ERXBulkCoATransactionID_Get(p *radius.Packet) (value ERXBulkCoATransactionID) {
	value, _ = ERXBulkCoATransactionID_Lookup(p)
	return
}

func ERXBulkCoATransactionID_Gets(p *radius.Packet) (values []ERXBulkCoATransactionID, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 194) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ERXBulkCoATransactionID(i))
	}
	return
}

func ERXBulkCoATransactionID_Lookup(p *radius.Packet) (value ERXBulkCoATransactionID, err error) {
	a, ok := _Unisphere_LookupVendor(p, 194)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ERXBulkCoATransactionID(i)
	return
}

func ERXBulkCoATransactionID_Set(p *radius.Packet, value ERXBulkCoATransactionID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 194, a)
}

func ERXBulkCoATransactionID_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 194)
}

type ERXBulkCoAIdentifier uint32

var ERXBulkCoAIdentifier_Strings = map[ERXBulkCoAIdentifier]string{}

func (a ERXBulkCoAIdentifier) String() string {
	if str, ok := ERXBulkCoAIdentifier_Strings[a]; ok {
		return str
	}
	return "ERXBulkCoAIdentifier(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ERXBulkCoAIdentifier_Add(p *radius.Packet, value ERXBulkCoAIdentifier) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_AddVendor(p, 195, a)
}

func ERXBulkCoAIdentifier_Get(p *radius.Packet) (value ERXBulkCoAIdentifier) {
	value, _ = ERXBulkCoAIdentifier_Lookup(p)
	return
}

func ERXBulkCoAIdentifier_Gets(p *radius.Packet) (values []ERXBulkCoAIdentifier, err error) {
	var i uint32
	for _, attr := range _Unisphere_GetsVendor(p, 195) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ERXBulkCoAIdentifier(i))
	}
	return
}

func ERXBulkCoAIdentifier_Lookup(p *radius.Packet) (value ERXBulkCoAIdentifier, err error) {
	a, ok := _Unisphere_LookupVendor(p, 195)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ERXBulkCoAIdentifier(i)
	return
}

func ERXBulkCoAIdentifier_Set(p *radius.Packet, value ERXBulkCoAIdentifier) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Unisphere_SetVendor(p, 195, a)
}

func ERXBulkCoAIdentifier_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 195)
}

func UnisphereIPv4InputServiceSet_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 196, a)
}

func UnisphereIPv4InputServiceSet_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 196, a)
}

func UnisphereIPv4InputServiceSet_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereIPv4InputServiceSet_Lookup(p)
	return
}

func UnisphereIPv4InputServiceSet_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereIPv4InputServiceSet_LookupString(p)
	return
}

func UnisphereIPv4InputServiceSet_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 196) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIPv4InputServiceSet_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 196) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIPv4InputServiceSet_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 196)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereIPv4InputServiceSet_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 196)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereIPv4InputServiceSet_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 196, a)
}

func UnisphereIPv4InputServiceSet_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 196, a)
}

func UnisphereIPv4InputServiceSet_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 196)
}

func UnisphereIPv4OutputServiceSet_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 197, a)
}

func UnisphereIPv4OutputServiceSet_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 197, a)
}

func UnisphereIPv4OutputServiceSet_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereIPv4OutputServiceSet_Lookup(p)
	return
}

func UnisphereIPv4OutputServiceSet_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereIPv4OutputServiceSet_LookupString(p)
	return
}

func UnisphereIPv4OutputServiceSet_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 197) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIPv4OutputServiceSet_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 197) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIPv4OutputServiceSet_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 197)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereIPv4OutputServiceSet_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 197)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereIPv4OutputServiceSet_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 197, a)
}

func UnisphereIPv4OutputServiceSet_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 197, a)
}

func UnisphereIPv4OutputServiceSet_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 197)
}

func UnisphereIPv4InputServiceFilter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 198, a)
}

func UnisphereIPv4InputServiceFilter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 198, a)
}

func UnisphereIPv4InputServiceFilter_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereIPv4InputServiceFilter_Lookup(p)
	return
}

func UnisphereIPv4InputServiceFilter_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereIPv4InputServiceFilter_LookupString(p)
	return
}

func UnisphereIPv4InputServiceFilter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 198) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIPv4InputServiceFilter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 198) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIPv4InputServiceFilter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 198)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereIPv4InputServiceFilter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 198)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereIPv4InputServiceFilter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 198, a)
}

func UnisphereIPv4InputServiceFilter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 198, a)
}

func UnisphereIPv4InputServiceFilter_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 198)
}

func UnisphereIPv4OutputServiceFilter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 199, a)
}

func UnisphereIPv4OutputServiceFilter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 199, a)
}

func UnisphereIPv4OutputServiceFilter_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereIPv4OutputServiceFilter_Lookup(p)
	return
}

func UnisphereIPv4OutputServiceFilter_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereIPv4OutputServiceFilter_LookupString(p)
	return
}

func UnisphereIPv4OutputServiceFilter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 199) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIPv4OutputServiceFilter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 199) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIPv4OutputServiceFilter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 199)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereIPv4OutputServiceFilter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 199)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereIPv4OutputServiceFilter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 199, a)
}

func UnisphereIPv4OutputServiceFilter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 199, a)
}

func UnisphereIPv4OutputServiceFilter_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 199)
}

func UnisphereIPv6InputServiceSet_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 200, a)
}

func UnisphereIPv6InputServiceSet_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 200, a)
}

func UnisphereIPv6InputServiceSet_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereIPv6InputServiceSet_Lookup(p)
	return
}

func UnisphereIPv6InputServiceSet_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereIPv6InputServiceSet_LookupString(p)
	return
}

func UnisphereIPv6InputServiceSet_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 200) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIPv6InputServiceSet_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 200) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIPv6InputServiceSet_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 200)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereIPv6InputServiceSet_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 200)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereIPv6InputServiceSet_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 200, a)
}

func UnisphereIPv6InputServiceSet_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 200, a)
}

func UnisphereIPv6InputServiceSet_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 200)
}

func UnisphereIPv6OutputServiceSet_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 201, a)
}

func UnisphereIPv6OutputServiceSet_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 201, a)
}

func UnisphereIPv6OutputServiceSet_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereIPv6OutputServiceSet_Lookup(p)
	return
}

func UnisphereIPv6OutputServiceSet_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereIPv6OutputServiceSet_LookupString(p)
	return
}

func UnisphereIPv6OutputServiceSet_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 201) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIPv6OutputServiceSet_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 201) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIPv6OutputServiceSet_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 201)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereIPv6OutputServiceSet_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 201)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereIPv6OutputServiceSet_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 201, a)
}

func UnisphereIPv6OutputServiceSet_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 201, a)
}

func UnisphereIPv6OutputServiceSet_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 201)
}

func UnisphereIPv6InputServiceFilter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 202, a)
}

func UnisphereIPv6InputServiceFilter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 202, a)
}

func UnisphereIPv6InputServiceFilter_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereIPv6InputServiceFilter_Lookup(p)
	return
}

func UnisphereIPv6InputServiceFilter_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereIPv6InputServiceFilter_LookupString(p)
	return
}

func UnisphereIPv6InputServiceFilter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 202) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIPv6InputServiceFilter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 202) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIPv6InputServiceFilter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 202)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereIPv6InputServiceFilter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 202)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereIPv6InputServiceFilter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 202, a)
}

func UnisphereIPv6InputServiceFilter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 202, a)
}

func UnisphereIPv6InputServiceFilter_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 202)
}

func UnisphereIPv6OutputServiceFilter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 203, a)
}

func UnisphereIPv6OutputServiceFilter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 203, a)
}

func UnisphereIPv6OutputServiceFilter_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereIPv6OutputServiceFilter_Lookup(p)
	return
}

func UnisphereIPv6OutputServiceFilter_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereIPv6OutputServiceFilter_LookupString(p)
	return
}

func UnisphereIPv6OutputServiceFilter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 203) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIPv6OutputServiceFilter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 203) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereIPv6OutputServiceFilter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 203)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereIPv6OutputServiceFilter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 203)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereIPv6OutputServiceFilter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 203, a)
}

func UnisphereIPv6OutputServiceFilter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 203, a)
}

func UnisphereIPv6OutputServiceFilter_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 203)
}

func UnisphereAdvPcefProfileName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 204, a)
}

func UnisphereAdvPcefProfileName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 204, a)
}

func UnisphereAdvPcefProfileName_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereAdvPcefProfileName_Lookup(p)
	return
}

func UnisphereAdvPcefProfileName_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereAdvPcefProfileName_LookupString(p)
	return
}

func UnisphereAdvPcefProfileName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 204) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereAdvPcefProfileName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 204) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereAdvPcefProfileName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 204)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereAdvPcefProfileName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 204)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereAdvPcefProfileName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 204, a)
}

func UnisphereAdvPcefProfileName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 204, a)
}

func UnisphereAdvPcefProfileName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 204)
}

func UnisphereAdvPcefRuleName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 205, a)
}

func UnisphereAdvPcefRuleName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_AddVendor(p, 205, a)
}

func UnisphereAdvPcefRuleName_Get(p *radius.Packet) (value []byte) {
	value, _ = UnisphereAdvPcefRuleName_Lookup(p)
	return
}

func UnisphereAdvPcefRuleName_GetString(p *radius.Packet) (value string) {
	value, _ = UnisphereAdvPcefRuleName_LookupString(p)
	return
}

func UnisphereAdvPcefRuleName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Unisphere_GetsVendor(p, 205) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereAdvPcefRuleName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Unisphere_GetsVendor(p, 205) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func UnisphereAdvPcefRuleName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Unisphere_LookupVendor(p, 205)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func UnisphereAdvPcefRuleName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Unisphere_LookupVendor(p, 205)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func UnisphereAdvPcefRuleName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 205, a)
}

func UnisphereAdvPcefRuleName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Unisphere_SetVendor(p, 205, a)
}

func UnisphereAdvPcefRuleName_Del(p *radius.Packet) {
	_Unisphere_DelVendor(p, 205)
}
