// Code generated by radius-dict-gen. DO NOT EDIT.

package shiva

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Shiva_VendorID = 166
)

func _Shiva_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Shiva_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Shiva_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Shiva_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Shiva_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Shiva_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Shiva_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Shiva_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Shiva_AddVendor(p, typ, attr)
}

func _Shiva_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Shiva_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

func ShivaUserAttributes_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 1, a)
}

func ShivaUserAttributes_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 1, a)
}

func ShivaUserAttributes_Get(p *radius.Packet) (value []byte) {
	value, _ = ShivaUserAttributes_Lookup(p)
	return
}

func ShivaUserAttributes_GetString(p *radius.Packet) (value string) {
	value, _ = ShivaUserAttributes_LookupString(p)
	return
}

func ShivaUserAttributes_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Shiva_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaUserAttributes_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Shiva_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaUserAttributes_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Shiva_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ShivaUserAttributes_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Shiva_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ShivaUserAttributes_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 1, a)
}

func ShivaUserAttributes_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 1, a)
}

func ShivaUserAttributes_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 1)
}

type ShivaCompression uint32

const (
	ShivaCompression_Value_None      ShivaCompression = 0
	ShivaCompression_Value_Negotiate ShivaCompression = 1
	ShivaCompression_Value_Spider    ShivaCompression = 2
	ShivaCompression_Value_Predictor ShivaCompression = 3
	ShivaCompression_Value_STAC      ShivaCompression = 4
)

var ShivaCompression_Strings = map[ShivaCompression]string{
	ShivaCompression_Value_None:      "None",
	ShivaCompression_Value_Negotiate: "Negotiate",
	ShivaCompression_Value_Spider:    "Spider",
	ShivaCompression_Value_Predictor: "Predictor",
	ShivaCompression_Value_STAC:      "STAC",
}

func (a ShivaCompression) String() string {
	if str, ok := ShivaCompression_Strings[a]; ok {
		return str
	}
	return "ShivaCompression(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ShivaCompression_Add(p *radius.Packet, value ShivaCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_AddVendor(p, 30, a)
}

func ShivaCompression_Get(p *radius.Packet) (value ShivaCompression) {
	value, _ = ShivaCompression_Lookup(p)
	return
}

func ShivaCompression_Gets(p *radius.Packet) (values []ShivaCompression, err error) {
	var i uint32
	for _, attr := range _Shiva_GetsVendor(p, 30) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ShivaCompression(i))
	}
	return
}

func ShivaCompression_Lookup(p *radius.Packet) (value ShivaCompression, err error) {
	a, ok := _Shiva_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ShivaCompression(i)
	return
}

func ShivaCompression_Set(p *radius.Packet, value ShivaCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_SetVendor(p, 30, a)
}

func ShivaCompression_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 30)
}

type ShivaDialbackDelay uint32

var ShivaDialbackDelay_Strings = map[ShivaDialbackDelay]string{}

func (a ShivaDialbackDelay) String() string {
	if str, ok := ShivaDialbackDelay_Strings[a]; ok {
		return str
	}
	return "ShivaDialbackDelay(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ShivaDialbackDelay_Add(p *radius.Packet, value ShivaDialbackDelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_AddVendor(p, 31, a)
}

func ShivaDialbackDelay_Get(p *radius.Packet) (value ShivaDialbackDelay) {
	value, _ = ShivaDialbackDelay_Lookup(p)
	return
}

func ShivaDialbackDelay_Gets(p *radius.Packet) (values []ShivaDialbackDelay, err error) {
	var i uint32
	for _, attr := range _Shiva_GetsVendor(p, 31) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ShivaDialbackDelay(i))
	}
	return
}

func ShivaDialbackDelay_Lookup(p *radius.Packet) (value ShivaDialbackDelay, err error) {
	a, ok := _Shiva_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ShivaDialbackDelay(i)
	return
}

func ShivaDialbackDelay_Set(p *radius.Packet, value ShivaDialbackDelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_SetVendor(p, 31, a)
}

func ShivaDialbackDelay_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 31)
}

type ShivaCallDurnTrap uint32

var ShivaCallDurnTrap_Strings = map[ShivaCallDurnTrap]string{}

func (a ShivaCallDurnTrap) String() string {
	if str, ok := ShivaCallDurnTrap_Strings[a]; ok {
		return str
	}
	return "ShivaCallDurnTrap(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ShivaCallDurnTrap_Add(p *radius.Packet, value ShivaCallDurnTrap) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_AddVendor(p, 32, a)
}

func ShivaCallDurnTrap_Get(p *radius.Packet) (value ShivaCallDurnTrap) {
	value, _ = ShivaCallDurnTrap_Lookup(p)
	return
}

func ShivaCallDurnTrap_Gets(p *radius.Packet) (values []ShivaCallDurnTrap, err error) {
	var i uint32
	for _, attr := range _Shiva_GetsVendor(p, 32) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ShivaCallDurnTrap(i))
	}
	return
}

func ShivaCallDurnTrap_Lookup(p *radius.Packet) (value ShivaCallDurnTrap, err error) {
	a, ok := _Shiva_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ShivaCallDurnTrap(i)
	return
}

func ShivaCallDurnTrap_Set(p *radius.Packet, value ShivaCallDurnTrap) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_SetVendor(p, 32, a)
}

func ShivaCallDurnTrap_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 32)
}

type ShivaBandwidthTrap uint32

var ShivaBandwidthTrap_Strings = map[ShivaBandwidthTrap]string{}

func (a ShivaBandwidthTrap) String() string {
	if str, ok := ShivaBandwidthTrap_Strings[a]; ok {
		return str
	}
	return "ShivaBandwidthTrap(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ShivaBandwidthTrap_Add(p *radius.Packet, value ShivaBandwidthTrap) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_AddVendor(p, 33, a)
}

func ShivaBandwidthTrap_Get(p *radius.Packet) (value ShivaBandwidthTrap) {
	value, _ = ShivaBandwidthTrap_Lookup(p)
	return
}

func ShivaBandwidthTrap_Gets(p *radius.Packet) (values []ShivaBandwidthTrap, err error) {
	var i uint32
	for _, attr := range _Shiva_GetsVendor(p, 33) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ShivaBandwidthTrap(i))
	}
	return
}

func ShivaBandwidthTrap_Lookup(p *radius.Packet) (value ShivaBandwidthTrap, err error) {
	a, ok := _Shiva_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ShivaBandwidthTrap(i)
	return
}

func ShivaBandwidthTrap_Set(p *radius.Packet, value ShivaBandwidthTrap) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_SetVendor(p, 33, a)
}

func ShivaBandwidthTrap_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 33)
}

type ShivaMinimumCall uint32

var ShivaMinimumCall_Strings = map[ShivaMinimumCall]string{}

func (a ShivaMinimumCall) String() string {
	if str, ok := ShivaMinimumCall_Strings[a]; ok {
		return str
	}
	return "ShivaMinimumCall(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ShivaMinimumCall_Add(p *radius.Packet, value ShivaMinimumCall) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_AddVendor(p, 34, a)
}

func ShivaMinimumCall_Get(p *radius.Packet) (value ShivaMinimumCall) {
	value, _ = ShivaMinimumCall_Lookup(p)
	return
}

func ShivaMinimumCall_Gets(p *radius.Packet) (values []ShivaMinimumCall, err error) {
	var i uint32
	for _, attr := range _Shiva_GetsVendor(p, 34) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ShivaMinimumCall(i))
	}
	return
}

func ShivaMinimumCall_Lookup(p *radius.Packet) (value ShivaMinimumCall, err error) {
	a, ok := _Shiva_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ShivaMinimumCall(i)
	return
}

func ShivaMinimumCall_Set(p *radius.Packet, value ShivaMinimumCall) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_SetVendor(p, 34, a)
}

func ShivaMinimumCall_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 34)
}

func ShivaDefaultHost_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 35, a)
}

func ShivaDefaultHost_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 35, a)
}

func ShivaDefaultHost_Get(p *radius.Packet) (value []byte) {
	value, _ = ShivaDefaultHost_Lookup(p)
	return
}

func ShivaDefaultHost_GetString(p *radius.Packet) (value string) {
	value, _ = ShivaDefaultHost_LookupString(p)
	return
}

func ShivaDefaultHost_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Shiva_GetsVendor(p, 35) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaDefaultHost_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Shiva_GetsVendor(p, 35) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaDefaultHost_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Shiva_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ShivaDefaultHost_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Shiva_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ShivaDefaultHost_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 35, a)
}

func ShivaDefaultHost_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 35, a)
}

func ShivaDefaultHost_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 35)
}

func ShivaMenuName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 36, a)
}

func ShivaMenuName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 36, a)
}

func ShivaMenuName_Get(p *radius.Packet) (value []byte) {
	value, _ = ShivaMenuName_Lookup(p)
	return
}

func ShivaMenuName_GetString(p *radius.Packet) (value string) {
	value, _ = ShivaMenuName_LookupString(p)
	return
}

func ShivaMenuName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Shiva_GetsVendor(p, 36) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaMenuName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Shiva_GetsVendor(p, 36) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaMenuName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Shiva_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ShivaMenuName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Shiva_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ShivaMenuName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 36, a)
}

func ShivaMenuName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 36, a)
}

func ShivaMenuName_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 36)
}

func ShivaUserFlags_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 37, a)
}

func ShivaUserFlags_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 37, a)
}

func ShivaUserFlags_Get(p *radius.Packet) (value []byte) {
	value, _ = ShivaUserFlags_Lookup(p)
	return
}

func ShivaUserFlags_GetString(p *radius.Packet) (value string) {
	value, _ = ShivaUserFlags_LookupString(p)
	return
}

func ShivaUserFlags_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Shiva_GetsVendor(p, 37) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaUserFlags_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Shiva_GetsVendor(p, 37) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaUserFlags_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Shiva_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ShivaUserFlags_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Shiva_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ShivaUserFlags_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 37, a)
}

func ShivaUserFlags_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 37, a)
}

func ShivaUserFlags_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 37)
}

func ShivaTermtype_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 38, a)
}

func ShivaTermtype_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 38, a)
}

func ShivaTermtype_Get(p *radius.Packet) (value []byte) {
	value, _ = ShivaTermtype_Lookup(p)
	return
}

func ShivaTermtype_GetString(p *radius.Packet) (value string) {
	value, _ = ShivaTermtype_LookupString(p)
	return
}

func ShivaTermtype_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Shiva_GetsVendor(p, 38) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaTermtype_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Shiva_GetsVendor(p, 38) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaTermtype_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Shiva_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ShivaTermtype_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Shiva_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ShivaTermtype_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 38, a)
}

func ShivaTermtype_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 38, a)
}

func ShivaTermtype_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 38)
}

func ShivaBreakKey_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 39, a)
}

func ShivaBreakKey_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 39, a)
}

func ShivaBreakKey_Get(p *radius.Packet) (value []byte) {
	value, _ = ShivaBreakKey_Lookup(p)
	return
}

func ShivaBreakKey_GetString(p *radius.Packet) (value string) {
	value, _ = ShivaBreakKey_LookupString(p)
	return
}

func ShivaBreakKey_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Shiva_GetsVendor(p, 39) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaBreakKey_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Shiva_GetsVendor(p, 39) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaBreakKey_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Shiva_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ShivaBreakKey_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Shiva_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ShivaBreakKey_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 39, a)
}

func ShivaBreakKey_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 39, a)
}

func ShivaBreakKey_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 39)
}

func ShivaFwdKey_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 40, a)
}

func ShivaFwdKey_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 40, a)
}

func ShivaFwdKey_Get(p *radius.Packet) (value []byte) {
	value, _ = ShivaFwdKey_Lookup(p)
	return
}

func ShivaFwdKey_GetString(p *radius.Packet) (value string) {
	value, _ = ShivaFwdKey_LookupString(p)
	return
}

func ShivaFwdKey_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Shiva_GetsVendor(p, 40) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaFwdKey_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Shiva_GetsVendor(p, 40) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaFwdKey_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Shiva_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ShivaFwdKey_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Shiva_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ShivaFwdKey_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 40, a)
}

func ShivaFwdKey_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 40, a)
}

func ShivaFwdKey_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 40)
}

func ShivaBakKey_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 41, a)
}

func ShivaBakKey_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 41, a)
}

func ShivaBakKey_Get(p *radius.Packet) (value []byte) {
	value, _ = ShivaBakKey_Lookup(p)
	return
}

func ShivaBakKey_GetString(p *radius.Packet) (value string) {
	value, _ = ShivaBakKey_LookupString(p)
	return
}

func ShivaBakKey_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Shiva_GetsVendor(p, 41) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaBakKey_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Shiva_GetsVendor(p, 41) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaBakKey_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Shiva_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ShivaBakKey_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Shiva_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ShivaBakKey_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 41, a)
}

func ShivaBakKey_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 41, a)
}

func ShivaBakKey_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 41)
}

type ShivaDialTimeout uint32

var ShivaDialTimeout_Strings = map[ShivaDialTimeout]string{}

func (a ShivaDialTimeout) String() string {
	if str, ok := ShivaDialTimeout_Strings[a]; ok {
		return str
	}
	return "ShivaDialTimeout(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ShivaDialTimeout_Add(p *radius.Packet, value ShivaDialTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_AddVendor(p, 42, a)
}

func ShivaDialTimeout_Get(p *radius.Packet) (value ShivaDialTimeout) {
	value, _ = ShivaDialTimeout_Lookup(p)
	return
}

func ShivaDialTimeout_Gets(p *radius.Packet) (values []ShivaDialTimeout, err error) {
	var i uint32
	for _, attr := range _Shiva_GetsVendor(p, 42) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ShivaDialTimeout(i))
	}
	return
}

func ShivaDialTimeout_Lookup(p *radius.Packet) (value ShivaDialTimeout, err error) {
	a, ok := _Shiva_LookupVendor(p, 42)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ShivaDialTimeout(i)
	return
}

func ShivaDialTimeout_Set(p *radius.Packet, value ShivaDialTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_SetVendor(p, 42, a)
}

func ShivaDialTimeout_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 42)
}

func ShivaLATPort_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 43, a)
}

func ShivaLATPort_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 43, a)
}

func ShivaLATPort_Get(p *radius.Packet) (value []byte) {
	value, _ = ShivaLATPort_Lookup(p)
	return
}

func ShivaLATPort_GetString(p *radius.Packet) (value string) {
	value, _ = ShivaLATPort_LookupString(p)
	return
}

func ShivaLATPort_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Shiva_GetsVendor(p, 43) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaLATPort_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Shiva_GetsVendor(p, 43) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaLATPort_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Shiva_LookupVendor(p, 43)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ShivaLATPort_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Shiva_LookupVendor(p, 43)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ShivaLATPort_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 43, a)
}

func ShivaLATPort_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 43, a)
}

func ShivaLATPort_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 43)
}

type ShivaMaxVCs uint32

var ShivaMaxVCs_Strings = map[ShivaMaxVCs]string{}

func (a ShivaMaxVCs) String() string {
	if str, ok := ShivaMaxVCs_Strings[a]; ok {
		return str
	}
	return "ShivaMaxVCs(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ShivaMaxVCs_Add(p *radius.Packet, value ShivaMaxVCs) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_AddVendor(p, 44, a)
}

func ShivaMaxVCs_Get(p *radius.Packet) (value ShivaMaxVCs) {
	value, _ = ShivaMaxVCs_Lookup(p)
	return
}

func ShivaMaxVCs_Gets(p *radius.Packet) (values []ShivaMaxVCs, err error) {
	var i uint32
	for _, attr := range _Shiva_GetsVendor(p, 44) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ShivaMaxVCs(i))
	}
	return
}

func ShivaMaxVCs_Lookup(p *radius.Packet) (value ShivaMaxVCs, err error) {
	a, ok := _Shiva_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ShivaMaxVCs(i)
	return
}

func ShivaMaxVCs_Set(p *radius.Packet, value ShivaMaxVCs) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_SetVendor(p, 44, a)
}

func ShivaMaxVCs_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 44)
}

type ShivaDHCPLeasetime uint32

var ShivaDHCPLeasetime_Strings = map[ShivaDHCPLeasetime]string{}

func (a ShivaDHCPLeasetime) String() string {
	if str, ok := ShivaDHCPLeasetime_Strings[a]; ok {
		return str
	}
	return "ShivaDHCPLeasetime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ShivaDHCPLeasetime_Add(p *radius.Packet, value ShivaDHCPLeasetime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_AddVendor(p, 45, a)
}

func ShivaDHCPLeasetime_Get(p *radius.Packet) (value ShivaDHCPLeasetime) {
	value, _ = ShivaDHCPLeasetime_Lookup(p)
	return
}

func ShivaDHCPLeasetime_Gets(p *radius.Packet) (values []ShivaDHCPLeasetime, err error) {
	var i uint32
	for _, attr := range _Shiva_GetsVendor(p, 45) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ShivaDHCPLeasetime(i))
	}
	return
}

func ShivaDHCPLeasetime_Lookup(p *radius.Packet) (value ShivaDHCPLeasetime, err error) {
	a, ok := _Shiva_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ShivaDHCPLeasetime(i)
	return
}

func ShivaDHCPLeasetime_Set(p *radius.Packet, value ShivaDHCPLeasetime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_SetVendor(p, 45, a)
}

func ShivaDHCPLeasetime_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 45)
}

func ShivaLATGroups_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 46, a)
}

func ShivaLATGroups_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 46, a)
}

func ShivaLATGroups_Get(p *radius.Packet) (value []byte) {
	value, _ = ShivaLATGroups_Lookup(p)
	return
}

func ShivaLATGroups_GetString(p *radius.Packet) (value string) {
	value, _ = ShivaLATGroups_LookupString(p)
	return
}

func ShivaLATGroups_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Shiva_GetsVendor(p, 46) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaLATGroups_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Shiva_GetsVendor(p, 46) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaLATGroups_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Shiva_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ShivaLATGroups_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Shiva_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ShivaLATGroups_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 46, a)
}

func ShivaLATGroups_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 46, a)
}

func ShivaLATGroups_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 46)
}

type ShivaRTCTimestamp uint32

var ShivaRTCTimestamp_Strings = map[ShivaRTCTimestamp]string{}

func (a ShivaRTCTimestamp) String() string {
	if str, ok := ShivaRTCTimestamp_Strings[a]; ok {
		return str
	}
	return "ShivaRTCTimestamp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ShivaRTCTimestamp_Add(p *radius.Packet, value ShivaRTCTimestamp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_AddVendor(p, 60, a)
}

func ShivaRTCTimestamp_Get(p *radius.Packet) (value ShivaRTCTimestamp) {
	value, _ = ShivaRTCTimestamp_Lookup(p)
	return
}

func ShivaRTCTimestamp_Gets(p *radius.Packet) (values []ShivaRTCTimestamp, err error) {
	var i uint32
	for _, attr := range _Shiva_GetsVendor(p, 60) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ShivaRTCTimestamp(i))
	}
	return
}

func ShivaRTCTimestamp_Lookup(p *radius.Packet) (value ShivaRTCTimestamp, err error) {
	a, ok := _Shiva_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ShivaRTCTimestamp(i)
	return
}

func ShivaRTCTimestamp_Set(p *radius.Packet, value ShivaRTCTimestamp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_SetVendor(p, 60, a)
}

func ShivaRTCTimestamp_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 60)
}

type ShivaCircuitType uint32

const (
	ShivaCircuitType_Value_Primary          ShivaCircuitType = 1
	ShivaCircuitType_Value_SecondaryBackup  ShivaCircuitType = 2
	ShivaCircuitType_Value_SecondaryAugment ShivaCircuitType = 3
	ShivaCircuitType_Value_SecondarySwitch  ShivaCircuitType = 4
	ShivaCircuitType_Value_Listener         ShivaCircuitType = 5
	ShivaCircuitType_Value_RADIUS           ShivaCircuitType = 6
)

var ShivaCircuitType_Strings = map[ShivaCircuitType]string{
	ShivaCircuitType_Value_Primary:          "Primary",
	ShivaCircuitType_Value_SecondaryBackup:  "Secondary-Backup",
	ShivaCircuitType_Value_SecondaryAugment: "Secondary-Augment",
	ShivaCircuitType_Value_SecondarySwitch:  "Secondary-Switch",
	ShivaCircuitType_Value_Listener:         "Listener",
	ShivaCircuitType_Value_RADIUS:           "RADIUS",
}

func (a ShivaCircuitType) String() string {
	if str, ok := ShivaCircuitType_Strings[a]; ok {
		return str
	}
	return "ShivaCircuitType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ShivaCircuitType_Add(p *radius.Packet, value ShivaCircuitType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_AddVendor(p, 61, a)
}

func ShivaCircuitType_Get(p *radius.Packet) (value ShivaCircuitType) {
	value, _ = ShivaCircuitType_Lookup(p)
	return
}

func ShivaCircuitType_Gets(p *radius.Packet) (values []ShivaCircuitType, err error) {
	var i uint32
	for _, attr := range _Shiva_GetsVendor(p, 61) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ShivaCircuitType(i))
	}
	return
}

func ShivaCircuitType_Lookup(p *radius.Packet) (value ShivaCircuitType, err error) {
	a, ok := _Shiva_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ShivaCircuitType(i)
	return
}

func ShivaCircuitType_Set(p *radius.Packet, value ShivaCircuitType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_SetVendor(p, 61, a)
}

func ShivaCircuitType_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 61)
}

func ShivaCalledNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 90, a)
}

func ShivaCalledNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 90, a)
}

func ShivaCalledNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = ShivaCalledNumber_Lookup(p)
	return
}

func ShivaCalledNumber_GetString(p *radius.Packet) (value string) {
	value, _ = ShivaCalledNumber_LookupString(p)
	return
}

func ShivaCalledNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Shiva_GetsVendor(p, 90) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaCalledNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Shiva_GetsVendor(p, 90) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaCalledNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Shiva_LookupVendor(p, 90)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ShivaCalledNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Shiva_LookupVendor(p, 90)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ShivaCalledNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 90, a)
}

func ShivaCalledNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 90, a)
}

func ShivaCalledNumber_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 90)
}

func ShivaCallingNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 91, a)
}

func ShivaCallingNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 91, a)
}

func ShivaCallingNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = ShivaCallingNumber_Lookup(p)
	return
}

func ShivaCallingNumber_GetString(p *radius.Packet) (value string) {
	value, _ = ShivaCallingNumber_LookupString(p)
	return
}

func ShivaCallingNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Shiva_GetsVendor(p, 91) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaCallingNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Shiva_GetsVendor(p, 91) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaCallingNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Shiva_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ShivaCallingNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Shiva_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ShivaCallingNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 91, a)
}

func ShivaCallingNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 91, a)
}

func ShivaCallingNumber_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 91)
}

func ShivaCustomerID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 92, a)
}

func ShivaCustomerID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 92, a)
}

func ShivaCustomerID_Get(p *radius.Packet) (value []byte) {
	value, _ = ShivaCustomerID_Lookup(p)
	return
}

func ShivaCustomerID_GetString(p *radius.Packet) (value string) {
	value, _ = ShivaCustomerID_LookupString(p)
	return
}

func ShivaCustomerID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Shiva_GetsVendor(p, 92) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaCustomerID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Shiva_GetsVendor(p, 92) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaCustomerID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Shiva_LookupVendor(p, 92)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ShivaCustomerID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Shiva_LookupVendor(p, 92)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ShivaCustomerID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 92, a)
}

func ShivaCustomerID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 92, a)
}

func ShivaCustomerID_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 92)
}

type ShivaTypeOfService uint32

const (
	ShivaTypeOfService_Value_Analog            ShivaTypeOfService = 1
	ShivaTypeOfService_Value_DigitizedAnalog   ShivaTypeOfService = 2
	ShivaTypeOfService_Value_Digital           ShivaTypeOfService = 3
	ShivaTypeOfService_Value_DigitalV110       ShivaTypeOfService = 4
	ShivaTypeOfService_Value_DigitalV120       ShivaTypeOfService = 5
	ShivaTypeOfService_Value_DigitalLeasedLine ShivaTypeOfService = 6
)

var ShivaTypeOfService_Strings = map[ShivaTypeOfService]string{
	ShivaTypeOfService_Value_Analog:            "Analog",
	ShivaTypeOfService_Value_DigitizedAnalog:   "Digitized-Analog",
	ShivaTypeOfService_Value_Digital:           "Digital",
	ShivaTypeOfService_Value_DigitalV110:       "Digital-V110",
	ShivaTypeOfService_Value_DigitalV120:       "Digital-V120",
	ShivaTypeOfService_Value_DigitalLeasedLine: "Digital-Leased-Line",
}

func (a ShivaTypeOfService) String() string {
	if str, ok := ShivaTypeOfService_Strings[a]; ok {
		return str
	}
	return "ShivaTypeOfService(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ShivaTypeOfService_Add(p *radius.Packet, value ShivaTypeOfService) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_AddVendor(p, 93, a)
}

func ShivaTypeOfService_Get(p *radius.Packet) (value ShivaTypeOfService) {
	value, _ = ShivaTypeOfService_Lookup(p)
	return
}

func ShivaTypeOfService_Gets(p *radius.Packet) (values []ShivaTypeOfService, err error) {
	var i uint32
	for _, attr := range _Shiva_GetsVendor(p, 93) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ShivaTypeOfService(i))
	}
	return
}

func ShivaTypeOfService_Lookup(p *radius.Packet) (value ShivaTypeOfService, err error) {
	a, ok := _Shiva_LookupVendor(p, 93)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ShivaTypeOfService(i)
	return
}

func ShivaTypeOfService_Set(p *radius.Packet, value ShivaTypeOfService) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_SetVendor(p, 93, a)
}

func ShivaTypeOfService_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 93)
}

type ShivaLinkSpeed uint32

var ShivaLinkSpeed_Strings = map[ShivaLinkSpeed]string{}

func (a ShivaLinkSpeed) String() string {
	if str, ok := ShivaLinkSpeed_Strings[a]; ok {
		return str
	}
	return "ShivaLinkSpeed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ShivaLinkSpeed_Add(p *radius.Packet, value ShivaLinkSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_AddVendor(p, 94, a)
}

func ShivaLinkSpeed_Get(p *radius.Packet) (value ShivaLinkSpeed) {
	value, _ = ShivaLinkSpeed_Lookup(p)
	return
}

func ShivaLinkSpeed_Gets(p *radius.Packet) (values []ShivaLinkSpeed, err error) {
	var i uint32
	for _, attr := range _Shiva_GetsVendor(p, 94) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ShivaLinkSpeed(i))
	}
	return
}

func ShivaLinkSpeed_Lookup(p *radius.Packet) (value ShivaLinkSpeed, err error) {
	a, ok := _Shiva_LookupVendor(p, 94)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ShivaLinkSpeed(i)
	return
}

func ShivaLinkSpeed_Set(p *radius.Packet, value ShivaLinkSpeed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_SetVendor(p, 94, a)
}

func ShivaLinkSpeed_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 94)
}

type ShivaLinksInBundle uint32

var ShivaLinksInBundle_Strings = map[ShivaLinksInBundle]string{}

func (a ShivaLinksInBundle) String() string {
	if str, ok := ShivaLinksInBundle_Strings[a]; ok {
		return str
	}
	return "ShivaLinksInBundle(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ShivaLinksInBundle_Add(p *radius.Packet, value ShivaLinksInBundle) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_AddVendor(p, 95, a)
}

func ShivaLinksInBundle_Get(p *radius.Packet) (value ShivaLinksInBundle) {
	value, _ = ShivaLinksInBundle_Lookup(p)
	return
}

func ShivaLinksInBundle_Gets(p *radius.Packet) (values []ShivaLinksInBundle, err error) {
	var i uint32
	for _, attr := range _Shiva_GetsVendor(p, 95) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ShivaLinksInBundle(i))
	}
	return
}

func ShivaLinksInBundle_Lookup(p *radius.Packet) (value ShivaLinksInBundle, err error) {
	a, ok := _Shiva_LookupVendor(p, 95)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ShivaLinksInBundle(i)
	return
}

func ShivaLinksInBundle_Set(p *radius.Packet, value ShivaLinksInBundle) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_SetVendor(p, 95, a)
}

func ShivaLinksInBundle_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 95)
}

type ShivaCompressionType uint32

var ShivaCompressionType_Strings = map[ShivaCompressionType]string{}

func (a ShivaCompressionType) String() string {
	if str, ok := ShivaCompressionType_Strings[a]; ok {
		return str
	}
	return "ShivaCompressionType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ShivaCompressionType_Add(p *radius.Packet, value ShivaCompressionType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_AddVendor(p, 96, a)
}

func ShivaCompressionType_Get(p *radius.Packet) (value ShivaCompressionType) {
	value, _ = ShivaCompressionType_Lookup(p)
	return
}

func ShivaCompressionType_Gets(p *radius.Packet) (values []ShivaCompressionType, err error) {
	var i uint32
	for _, attr := range _Shiva_GetsVendor(p, 96) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ShivaCompressionType(i))
	}
	return
}

func ShivaCompressionType_Lookup(p *radius.Packet) (value ShivaCompressionType, err error) {
	a, ok := _Shiva_LookupVendor(p, 96)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ShivaCompressionType(i)
	return
}

func ShivaCompressionType_Set(p *radius.Packet, value ShivaCompressionType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_SetVendor(p, 96, a)
}

func ShivaCompressionType_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 96)
}

type ShivaLinkProtocol uint32

const (
	ShivaLinkProtocol_Value_HDLC  ShivaLinkProtocol = 1
	ShivaLinkProtocol_Value_ARAV1 ShivaLinkProtocol = 2
	ShivaLinkProtocol_Value_ARAV2 ShivaLinkProtocol = 3
	ShivaLinkProtocol_Value_SHELL ShivaLinkProtocol = 4
	ShivaLinkProtocol_Value_AALAP ShivaLinkProtocol = 5
	ShivaLinkProtocol_Value_SLIP  ShivaLinkProtocol = 6
)

var ShivaLinkProtocol_Strings = map[ShivaLinkProtocol]string{
	ShivaLinkProtocol_Value_HDLC:  "HDLC",
	ShivaLinkProtocol_Value_ARAV1: "ARAV1",
	ShivaLinkProtocol_Value_ARAV2: "ARAV2",
	ShivaLinkProtocol_Value_SHELL: "SHELL",
	ShivaLinkProtocol_Value_AALAP: "AALAP",
	ShivaLinkProtocol_Value_SLIP:  "SLIP",
}

func (a ShivaLinkProtocol) String() string {
	if str, ok := ShivaLinkProtocol_Strings[a]; ok {
		return str
	}
	return "ShivaLinkProtocol(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ShivaLinkProtocol_Add(p *radius.Packet, value ShivaLinkProtocol) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_AddVendor(p, 97, a)
}

func ShivaLinkProtocol_Get(p *radius.Packet) (value ShivaLinkProtocol) {
	value, _ = ShivaLinkProtocol_Lookup(p)
	return
}

func ShivaLinkProtocol_Gets(p *radius.Packet) (values []ShivaLinkProtocol, err error) {
	var i uint32
	for _, attr := range _Shiva_GetsVendor(p, 97) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ShivaLinkProtocol(i))
	}
	return
}

func ShivaLinkProtocol_Lookup(p *radius.Packet) (value ShivaLinkProtocol, err error) {
	a, ok := _Shiva_LookupVendor(p, 97)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ShivaLinkProtocol(i)
	return
}

func ShivaLinkProtocol_Set(p *radius.Packet, value ShivaLinkProtocol) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_SetVendor(p, 97, a)
}

func ShivaLinkProtocol_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 97)
}

type ShivaNetworkProtocols uint32

var ShivaNetworkProtocols_Strings = map[ShivaNetworkProtocols]string{}

func (a ShivaNetworkProtocols) String() string {
	if str, ok := ShivaNetworkProtocols_Strings[a]; ok {
		return str
	}
	return "ShivaNetworkProtocols(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ShivaNetworkProtocols_Add(p *radius.Packet, value ShivaNetworkProtocols) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_AddVendor(p, 98, a)
}

func ShivaNetworkProtocols_Get(p *radius.Packet) (value ShivaNetworkProtocols) {
	value, _ = ShivaNetworkProtocols_Lookup(p)
	return
}

func ShivaNetworkProtocols_Gets(p *radius.Packet) (values []ShivaNetworkProtocols, err error) {
	var i uint32
	for _, attr := range _Shiva_GetsVendor(p, 98) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ShivaNetworkProtocols(i))
	}
	return
}

func ShivaNetworkProtocols_Lookup(p *radius.Packet) (value ShivaNetworkProtocols, err error) {
	a, ok := _Shiva_LookupVendor(p, 98)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ShivaNetworkProtocols(i)
	return
}

func ShivaNetworkProtocols_Set(p *radius.Packet, value ShivaNetworkProtocols) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_SetVendor(p, 98, a)
}

func ShivaNetworkProtocols_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 98)
}

type ShivaSessionID uint32

var ShivaSessionID_Strings = map[ShivaSessionID]string{}

func (a ShivaSessionID) String() string {
	if str, ok := ShivaSessionID_Strings[a]; ok {
		return str
	}
	return "ShivaSessionID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ShivaSessionID_Add(p *radius.Packet, value ShivaSessionID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_AddVendor(p, 99, a)
}

func ShivaSessionID_Get(p *radius.Packet) (value ShivaSessionID) {
	value, _ = ShivaSessionID_Lookup(p)
	return
}

func ShivaSessionID_Gets(p *radius.Packet) (values []ShivaSessionID, err error) {
	var i uint32
	for _, attr := range _Shiva_GetsVendor(p, 99) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ShivaSessionID(i))
	}
	return
}

func ShivaSessionID_Lookup(p *radius.Packet) (value ShivaSessionID, err error) {
	a, ok := _Shiva_LookupVendor(p, 99)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ShivaSessionID(i)
	return
}

func ShivaSessionID_Set(p *radius.Packet, value ShivaSessionID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_SetVendor(p, 99, a)
}

func ShivaSessionID_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 99)
}

type ShivaDisconnectReason uint32

const (
	ShivaDisconnectReason_Value_Remote               ShivaDisconnectReason = 1
	ShivaDisconnectReason_Value_Error                ShivaDisconnectReason = 2
	ShivaDisconnectReason_Value_IdleTimeout          ShivaDisconnectReason = 3
	ShivaDisconnectReason_Value_SessionTimeout       ShivaDisconnectReason = 4
	ShivaDisconnectReason_Value_AdminDisconnect      ShivaDisconnectReason = 5
	ShivaDisconnectReason_Value_Dialback             ShivaDisconnectReason = 6
	ShivaDisconnectReason_Value_VirtualConnection    ShivaDisconnectReason = 7
	ShivaDisconnectReason_Value_BandwidthOnDemand    ShivaDisconnectReason = 8
	ShivaDisconnectReason_Value_FailedAuthentication ShivaDisconnectReason = 9
	ShivaDisconnectReason_Value_Preempted            ShivaDisconnectReason = 10
	ShivaDisconnectReason_Value_Blocked              ShivaDisconnectReason = 11
	ShivaDisconnectReason_Value_TariffManagement     ShivaDisconnectReason = 12
	ShivaDisconnectReason_Value_Backup               ShivaDisconnectReason = 13
)

var ShivaDisconnectReason_Strings = map[ShivaDisconnectReason]string{
	ShivaDisconnectReason_Value_Remote:               "Remote",
	ShivaDisconnectReason_Value_Error:                "Error",
	ShivaDisconnectReason_Value_IdleTimeout:          "Idle-Timeout",
	ShivaDisconnectReason_Value_SessionTimeout:       "Session-Timeout",
	ShivaDisconnectReason_Value_AdminDisconnect:      "Admin-Disconnect",
	ShivaDisconnectReason_Value_Dialback:             "Dialback",
	ShivaDisconnectReason_Value_VirtualConnection:    "Virtual-Connection",
	ShivaDisconnectReason_Value_BandwidthOnDemand:    "Bandwidth-On-Demand",
	ShivaDisconnectReason_Value_FailedAuthentication: "Failed-Authentication",
	ShivaDisconnectReason_Value_Preempted:            "Preempted",
	ShivaDisconnectReason_Value_Blocked:              "Blocked",
	ShivaDisconnectReason_Value_TariffManagement:     "Tariff-Management",
	ShivaDisconnectReason_Value_Backup:               "Backup",
}

func (a ShivaDisconnectReason) String() string {
	if str, ok := ShivaDisconnectReason_Strings[a]; ok {
		return str
	}
	return "ShivaDisconnectReason(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ShivaDisconnectReason_Add(p *radius.Packet, value ShivaDisconnectReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_AddVendor(p, 100, a)
}

func ShivaDisconnectReason_Get(p *radius.Packet) (value ShivaDisconnectReason) {
	value, _ = ShivaDisconnectReason_Lookup(p)
	return
}

func ShivaDisconnectReason_Gets(p *radius.Packet) (values []ShivaDisconnectReason, err error) {
	var i uint32
	for _, attr := range _Shiva_GetsVendor(p, 100) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ShivaDisconnectReason(i))
	}
	return
}

func ShivaDisconnectReason_Lookup(p *radius.Packet) (value ShivaDisconnectReason, err error) {
	a, ok := _Shiva_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ShivaDisconnectReason(i)
	return
}

func ShivaDisconnectReason_Set(p *radius.Packet, value ShivaDisconnectReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_SetVendor(p, 100, a)
}

func ShivaDisconnectReason_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 100)
}

func ShivaAcctServSwitch_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Shiva_AddVendor(p, 101, a)
}

func ShivaAcctServSwitch_Get(p *radius.Packet) (value net.IP) {
	value, _ = ShivaAcctServSwitch_Lookup(p)
	return
}

func ShivaAcctServSwitch_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Shiva_GetsVendor(p, 101) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ShivaAcctServSwitch_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Shiva_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func ShivaAcctServSwitch_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Shiva_SetVendor(p, 101, a)
}

func ShivaAcctServSwitch_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 101)
}

type ShivaEventFlags uint32

var ShivaEventFlags_Strings = map[ShivaEventFlags]string{}

func (a ShivaEventFlags) String() string {
	if str, ok := ShivaEventFlags_Strings[a]; ok {
		return str
	}
	return "ShivaEventFlags(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ShivaEventFlags_Add(p *radius.Packet, value ShivaEventFlags) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_AddVendor(p, 102, a)
}

func ShivaEventFlags_Get(p *radius.Packet) (value ShivaEventFlags) {
	value, _ = ShivaEventFlags_Lookup(p)
	return
}

func ShivaEventFlags_Gets(p *radius.Packet) (values []ShivaEventFlags, err error) {
	var i uint32
	for _, attr := range _Shiva_GetsVendor(p, 102) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ShivaEventFlags(i))
	}
	return
}

func ShivaEventFlags_Lookup(p *radius.Packet) (value ShivaEventFlags, err error) {
	a, ok := _Shiva_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ShivaEventFlags(i)
	return
}

func ShivaEventFlags_Set(p *radius.Packet, value ShivaEventFlags) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_SetVendor(p, 102, a)
}

func ShivaEventFlags_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 102)
}

type ShivaFunction uint32

const (
	ShivaFunction_Value_Unknown  ShivaFunction = 0
	ShivaFunction_Value_Dialin   ShivaFunction = 1
	ShivaFunction_Value_Dialout  ShivaFunction = 2
	ShivaFunction_Value_LanToLan ShivaFunction = 3
)

var ShivaFunction_Strings = map[ShivaFunction]string{
	ShivaFunction_Value_Unknown:  "Unknown",
	ShivaFunction_Value_Dialin:   "Dialin",
	ShivaFunction_Value_Dialout:  "Dialout",
	ShivaFunction_Value_LanToLan: "Lan-To-Lan",
}

func (a ShivaFunction) String() string {
	if str, ok := ShivaFunction_Strings[a]; ok {
		return str
	}
	return "ShivaFunction(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ShivaFunction_Add(p *radius.Packet, value ShivaFunction) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_AddVendor(p, 103, a)
}

func ShivaFunction_Get(p *radius.Packet) (value ShivaFunction) {
	value, _ = ShivaFunction_Lookup(p)
	return
}

func ShivaFunction_Gets(p *radius.Packet) (values []ShivaFunction, err error) {
	var i uint32
	for _, attr := range _Shiva_GetsVendor(p, 103) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ShivaFunction(i))
	}
	return
}

func ShivaFunction_Lookup(p *radius.Packet) (value ShivaFunction, err error) {
	a, ok := _Shiva_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ShivaFunction(i)
	return
}

func ShivaFunction_Set(p *radius.Packet, value ShivaFunction) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_SetVendor(p, 103, a)
}

func ShivaFunction_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 103)
}

type ShivaConnectReason uint32

const (
	ShivaConnectReason_Value_Remote            ShivaConnectReason = 1
	ShivaConnectReason_Value_Dialback          ShivaConnectReason = 2
	ShivaConnectReason_Value_VirtualConnection ShivaConnectReason = 3
	ShivaConnectReason_Value_BandwidthOnDemand ShivaConnectReason = 4
)

var ShivaConnectReason_Strings = map[ShivaConnectReason]string{
	ShivaConnectReason_Value_Remote:            "Remote",
	ShivaConnectReason_Value_Dialback:          "Dialback",
	ShivaConnectReason_Value_VirtualConnection: "Virtual-Connection",
	ShivaConnectReason_Value_BandwidthOnDemand: "Bandwidth-On-Demand",
}

func (a ShivaConnectReason) String() string {
	if str, ok := ShivaConnectReason_Strings[a]; ok {
		return str
	}
	return "ShivaConnectReason(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ShivaConnectReason_Add(p *radius.Packet, value ShivaConnectReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_AddVendor(p, 104, a)
}

func ShivaConnectReason_Get(p *radius.Packet) (value ShivaConnectReason) {
	value, _ = ShivaConnectReason_Lookup(p)
	return
}

func ShivaConnectReason_Gets(p *radius.Packet) (values []ShivaConnectReason, err error) {
	var i uint32
	for _, attr := range _Shiva_GetsVendor(p, 104) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ShivaConnectReason(i))
	}
	return
}

func ShivaConnectReason_Lookup(p *radius.Packet) (value ShivaConnectReason, err error) {
	a, ok := _Shiva_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ShivaConnectReason(i)
	return
}

func ShivaConnectReason_Set(p *radius.Packet, value ShivaConnectReason) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Shiva_SetVendor(p, 104, a)
}

func ShivaConnectReason_Del(p *radius.Packet) {
	_Shiva_DelVendor(p, 104)
}
