// Code generated by radius-dict-gen. DO NOT EDIT.

package livingston

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Livingston_VendorID = 307
)

func _Livingston_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Livingston_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Livingston_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Livingston_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Livingston_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Livingston_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Livingston_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Livingston_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Livingston_AddVendor(p, typ, attr)
}

func _Livingston_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Livingston_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

func LETerminateDetail_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 2, a)
}

func LETerminateDetail_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 2, a)
}

func LETerminateDetail_Get(p *radius.Packet) (value []byte) {
	value, _ = LETerminateDetail_Lookup(p)
	return
}

func LETerminateDetail_GetString(p *radius.Packet) (value string) {
	value, _ = LETerminateDetail_LookupString(p)
	return
}

func LETerminateDetail_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Livingston_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LETerminateDetail_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Livingston_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LETerminateDetail_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Livingston_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LETerminateDetail_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Livingston_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LETerminateDetail_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 2, a)
}

func LETerminateDetail_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 2, a)
}

func LETerminateDetail_Del(p *radius.Packet) {
	_Livingston_DelVendor(p, 2)
}

func LEAdviceOfCharge_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 3, a)
}

func LEAdviceOfCharge_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 3, a)
}

func LEAdviceOfCharge_Get(p *radius.Packet) (value []byte) {
	value, _ = LEAdviceOfCharge_Lookup(p)
	return
}

func LEAdviceOfCharge_GetString(p *radius.Packet) (value string) {
	value, _ = LEAdviceOfCharge_LookupString(p)
	return
}

func LEAdviceOfCharge_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Livingston_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LEAdviceOfCharge_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Livingston_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LEAdviceOfCharge_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Livingston_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LEAdviceOfCharge_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Livingston_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LEAdviceOfCharge_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 3, a)
}

func LEAdviceOfCharge_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 3, a)
}

func LEAdviceOfCharge_Del(p *radius.Packet) {
	_Livingston_DelVendor(p, 3)
}

func LEConnectDetail_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 4, a)
}

func LEConnectDetail_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 4, a)
}

func LEConnectDetail_Get(p *radius.Packet) (value []byte) {
	value, _ = LEConnectDetail_Lookup(p)
	return
}

func LEConnectDetail_GetString(p *radius.Packet) (value string) {
	value, _ = LEConnectDetail_LookupString(p)
	return
}

func LEConnectDetail_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Livingston_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LEConnectDetail_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Livingston_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LEConnectDetail_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Livingston_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LEConnectDetail_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Livingston_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LEConnectDetail_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 4, a)
}

func LEConnectDetail_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 4, a)
}

func LEConnectDetail_Del(p *radius.Packet) {
	_Livingston_DelVendor(p, 4)
}

func LEIPPool_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 6, a)
}

func LEIPPool_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 6, a)
}

func LEIPPool_Get(p *radius.Packet) (value []byte) {
	value, _ = LEIPPool_Lookup(p)
	return
}

func LEIPPool_GetString(p *radius.Packet) (value string) {
	value, _ = LEIPPool_LookupString(p)
	return
}

func LEIPPool_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Livingston_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LEIPPool_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Livingston_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LEIPPool_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Livingston_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LEIPPool_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Livingston_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LEIPPool_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 6, a)
}

func LEIPPool_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 6, a)
}

func LEIPPool_Del(p *radius.Packet) {
	_Livingston_DelVendor(p, 6)
}

func LEIPGateway_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 7, a)
}

func LEIPGateway_Get(p *radius.Packet) (value net.IP) {
	value, _ = LEIPGateway_Lookup(p)
	return
}

func LEIPGateway_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Livingston_GetsVendor(p, 7) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LEIPGateway_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Livingston_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func LEIPGateway_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 7, a)
}

func LEIPGateway_Del(p *radius.Packet) {
	_Livingston_DelVendor(p, 7)
}

func LEModemInfo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 8, a)
}

func LEModemInfo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 8, a)
}

func LEModemInfo_Get(p *radius.Packet) (value []byte) {
	value, _ = LEModemInfo_Lookup(p)
	return
}

func LEModemInfo_GetString(p *radius.Packet) (value string) {
	value, _ = LEModemInfo_LookupString(p)
	return
}

func LEModemInfo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Livingston_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LEModemInfo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Livingston_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LEModemInfo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Livingston_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LEModemInfo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Livingston_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LEModemInfo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 8, a)
}

func LEModemInfo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 8, a)
}

func LEModemInfo_Del(p *radius.Packet) {
	_Livingston_DelVendor(p, 8)
}

type LEIPSecLogOptions uint32

const (
	LEIPSecLogOptions_Value_SASuccessOn  LEIPSecLogOptions = 1
	LEIPSecLogOptions_Value_SAFailureOn  LEIPSecLogOptions = 2
	LEIPSecLogOptions_Value_ConsoleOn    LEIPSecLogOptions = 3
	LEIPSecLogOptions_Value_SyslogOn     LEIPSecLogOptions = 4
	LEIPSecLogOptions_Value_SASuccessOff LEIPSecLogOptions = 5
	LEIPSecLogOptions_Value_SAFailureOff LEIPSecLogOptions = 6
	LEIPSecLogOptions_Value_ConsoleOff   LEIPSecLogOptions = 7
	LEIPSecLogOptions_Value_SyslogOff    LEIPSecLogOptions = 8
)

var LEIPSecLogOptions_Strings = map[LEIPSecLogOptions]string{
	LEIPSecLogOptions_Value_SASuccessOn:  "SA-Success-On",
	LEIPSecLogOptions_Value_SAFailureOn:  "SA-Failure-On",
	LEIPSecLogOptions_Value_ConsoleOn:    "Console-On",
	LEIPSecLogOptions_Value_SyslogOn:     "Syslog-On",
	LEIPSecLogOptions_Value_SASuccessOff: "SA-Success-Off",
	LEIPSecLogOptions_Value_SAFailureOff: "SA-Failure-Off",
	LEIPSecLogOptions_Value_ConsoleOff:   "Console-Off",
	LEIPSecLogOptions_Value_SyslogOff:    "Syslog-Off",
}

func (a LEIPSecLogOptions) String() string {
	if str, ok := LEIPSecLogOptions_Strings[a]; ok {
		return str
	}
	return "LEIPSecLogOptions(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LEIPSecLogOptions_Add(p *radius.Packet, value LEIPSecLogOptions) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Livingston_AddVendor(p, 9, a)
}

func LEIPSecLogOptions_Get(p *radius.Packet) (value LEIPSecLogOptions) {
	value, _ = LEIPSecLogOptions_Lookup(p)
	return
}

func LEIPSecLogOptions_Gets(p *radius.Packet) (values []LEIPSecLogOptions, err error) {
	var i uint32
	for _, attr := range _Livingston_GetsVendor(p, 9) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LEIPSecLogOptions(i))
	}
	return
}

func LEIPSecLogOptions_Lookup(p *radius.Packet) (value LEIPSecLogOptions, err error) {
	a, ok := _Livingston_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LEIPSecLogOptions(i)
	return
}

func LEIPSecLogOptions_Set(p *radius.Packet, value LEIPSecLogOptions) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Livingston_SetVendor(p, 9, a)
}

func LEIPSecLogOptions_Del(p *radius.Packet) {
	_Livingston_DelVendor(p, 9)
}

type LEIPSecDenyAction uint32

const (
	LEIPSecDenyAction_Value_Drop        LEIPSecDenyAction = 1
	LEIPSecDenyAction_Value_ICMPReject  LEIPSecDenyAction = 2
	LEIPSecDenyAction_Value_PassThrough LEIPSecDenyAction = 3
)

var LEIPSecDenyAction_Strings = map[LEIPSecDenyAction]string{
	LEIPSecDenyAction_Value_Drop:        "Drop",
	LEIPSecDenyAction_Value_ICMPReject:  "ICMP-Reject",
	LEIPSecDenyAction_Value_PassThrough: "Pass-Through",
}

func (a LEIPSecDenyAction) String() string {
	if str, ok := LEIPSecDenyAction_Strings[a]; ok {
		return str
	}
	return "LEIPSecDenyAction(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LEIPSecDenyAction_Add(p *radius.Packet, value LEIPSecDenyAction) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Livingston_AddVendor(p, 10, a)
}

func LEIPSecDenyAction_Get(p *radius.Packet) (value LEIPSecDenyAction) {
	value, _ = LEIPSecDenyAction_Lookup(p)
	return
}

func LEIPSecDenyAction_Gets(p *radius.Packet) (values []LEIPSecDenyAction, err error) {
	var i uint32
	for _, attr := range _Livingston_GetsVendor(p, 10) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LEIPSecDenyAction(i))
	}
	return
}

func LEIPSecDenyAction_Lookup(p *radius.Packet) (value LEIPSecDenyAction, err error) {
	a, ok := _Livingston_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LEIPSecDenyAction(i)
	return
}

func LEIPSecDenyAction_Set(p *radius.Packet, value LEIPSecDenyAction) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Livingston_SetVendor(p, 10, a)
}

func LEIPSecDenyAction_Del(p *radius.Packet) {
	_Livingston_DelVendor(p, 10)
}

func LEIPSecActiveProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 11, a)
}

func LEIPSecActiveProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 11, a)
}

func LEIPSecActiveProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = LEIPSecActiveProfile_Lookup(p)
	return
}

func LEIPSecActiveProfile_GetString(p *radius.Packet) (value string) {
	value, _ = LEIPSecActiveProfile_LookupString(p)
	return
}

func LEIPSecActiveProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Livingston_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LEIPSecActiveProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Livingston_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LEIPSecActiveProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Livingston_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LEIPSecActiveProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Livingston_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LEIPSecActiveProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 11, a)
}

func LEIPSecActiveProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 11, a)
}

func LEIPSecActiveProfile_Del(p *radius.Packet) {
	_Livingston_DelVendor(p, 11)
}

func LEIPSecOutsourceProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 12, a)
}

func LEIPSecOutsourceProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 12, a)
}

func LEIPSecOutsourceProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = LEIPSecOutsourceProfile_Lookup(p)
	return
}

func LEIPSecOutsourceProfile_GetString(p *radius.Packet) (value string) {
	value, _ = LEIPSecOutsourceProfile_LookupString(p)
	return
}

func LEIPSecOutsourceProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Livingston_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LEIPSecOutsourceProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Livingston_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LEIPSecOutsourceProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Livingston_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LEIPSecOutsourceProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Livingston_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LEIPSecOutsourceProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 12, a)
}

func LEIPSecOutsourceProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 12, a)
}

func LEIPSecOutsourceProfile_Del(p *radius.Packet) {
	_Livingston_DelVendor(p, 12)
}

func LEIPSecPassiveProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 13, a)
}

func LEIPSecPassiveProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 13, a)
}

func LEIPSecPassiveProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = LEIPSecPassiveProfile_Lookup(p)
	return
}

func LEIPSecPassiveProfile_GetString(p *radius.Packet) (value string) {
	value, _ = LEIPSecPassiveProfile_LookupString(p)
	return
}

func LEIPSecPassiveProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Livingston_GetsVendor(p, 13) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LEIPSecPassiveProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Livingston_GetsVendor(p, 13) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LEIPSecPassiveProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Livingston_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LEIPSecPassiveProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Livingston_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LEIPSecPassiveProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 13, a)
}

func LEIPSecPassiveProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 13, a)
}

func LEIPSecPassiveProfile_Del(p *radius.Packet) {
	_Livingston_DelVendor(p, 13)
}

type LENATTCPSessionTimeout uint32

var LENATTCPSessionTimeout_Strings = map[LENATTCPSessionTimeout]string{}

func (a LENATTCPSessionTimeout) String() string {
	if str, ok := LENATTCPSessionTimeout_Strings[a]; ok {
		return str
	}
	return "LENATTCPSessionTimeout(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LENATTCPSessionTimeout_Add(p *radius.Packet, value LENATTCPSessionTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Livingston_AddVendor(p, 14, a)
}

func LENATTCPSessionTimeout_Get(p *radius.Packet) (value LENATTCPSessionTimeout) {
	value, _ = LENATTCPSessionTimeout_Lookup(p)
	return
}

func LENATTCPSessionTimeout_Gets(p *radius.Packet) (values []LENATTCPSessionTimeout, err error) {
	var i uint32
	for _, attr := range _Livingston_GetsVendor(p, 14) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LENATTCPSessionTimeout(i))
	}
	return
}

func LENATTCPSessionTimeout_Lookup(p *radius.Packet) (value LENATTCPSessionTimeout, err error) {
	a, ok := _Livingston_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LENATTCPSessionTimeout(i)
	return
}

func LENATTCPSessionTimeout_Set(p *radius.Packet, value LENATTCPSessionTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Livingston_SetVendor(p, 14, a)
}

func LENATTCPSessionTimeout_Del(p *radius.Packet) {
	_Livingston_DelVendor(p, 14)
}

type LENATOtherSessionTimeout uint32

var LENATOtherSessionTimeout_Strings = map[LENATOtherSessionTimeout]string{}

func (a LENATOtherSessionTimeout) String() string {
	if str, ok := LENATOtherSessionTimeout_Strings[a]; ok {
		return str
	}
	return "LENATOtherSessionTimeout(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LENATOtherSessionTimeout_Add(p *radius.Packet, value LENATOtherSessionTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Livingston_AddVendor(p, 15, a)
}

func LENATOtherSessionTimeout_Get(p *radius.Packet) (value LENATOtherSessionTimeout) {
	value, _ = LENATOtherSessionTimeout_Lookup(p)
	return
}

func LENATOtherSessionTimeout_Gets(p *radius.Packet) (values []LENATOtherSessionTimeout, err error) {
	var i uint32
	for _, attr := range _Livingston_GetsVendor(p, 15) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LENATOtherSessionTimeout(i))
	}
	return
}

func LENATOtherSessionTimeout_Lookup(p *radius.Packet) (value LENATOtherSessionTimeout, err error) {
	a, ok := _Livingston_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LENATOtherSessionTimeout(i)
	return
}

func LENATOtherSessionTimeout_Set(p *radius.Packet, value LENATOtherSessionTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Livingston_SetVendor(p, 15, a)
}

func LENATOtherSessionTimeout_Del(p *radius.Packet) {
	_Livingston_DelVendor(p, 15)
}

type LENATLogOptions uint32

const (
	LENATLogOptions_Value_SessionSuccessOn LENATLogOptions = 1
	LENATLogOptions_Value_SessionFailureOn LENATLogOptions = 2
	LENATLogOptions_Value_ConsoleOn        LENATLogOptions = 3
	LENATLogOptions_Value_SyslogOn         LENATLogOptions = 4
	LENATLogOptions_Value_SuccessOff       LENATLogOptions = 5
	LENATLogOptions_Value_FailureOff       LENATLogOptions = 6
	LENATLogOptions_Value_ConsoleOff       LENATLogOptions = 7
	LENATLogOptions_Value_SyslogOff        LENATLogOptions = 8
)

var LENATLogOptions_Strings = map[LENATLogOptions]string{
	LENATLogOptions_Value_SessionSuccessOn: "Session-Success-On",
	LENATLogOptions_Value_SessionFailureOn: "Session-Failure-On",
	LENATLogOptions_Value_ConsoleOn:        "Console-On",
	LENATLogOptions_Value_SyslogOn:         "Syslog-On",
	LENATLogOptions_Value_SuccessOff:       "Success-Off",
	LENATLogOptions_Value_FailureOff:       "Failure-Off",
	LENATLogOptions_Value_ConsoleOff:       "Console-Off",
	LENATLogOptions_Value_SyslogOff:        "Syslog-Off",
}

func (a LENATLogOptions) String() string {
	if str, ok := LENATLogOptions_Strings[a]; ok {
		return str
	}
	return "LENATLogOptions(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LENATLogOptions_Add(p *radius.Packet, value LENATLogOptions) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Livingston_AddVendor(p, 16, a)
}

func LENATLogOptions_Get(p *radius.Packet) (value LENATLogOptions) {
	value, _ = LENATLogOptions_Lookup(p)
	return
}

func LENATLogOptions_Gets(p *radius.Packet) (values []LENATLogOptions, err error) {
	var i uint32
	for _, attr := range _Livingston_GetsVendor(p, 16) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LENATLogOptions(i))
	}
	return
}

func LENATLogOptions_Lookup(p *radius.Packet) (value LENATLogOptions, err error) {
	a, ok := _Livingston_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LENATLogOptions(i)
	return
}

func LENATLogOptions_Set(p *radius.Packet, value LENATLogOptions) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Livingston_SetVendor(p, 16, a)
}

func LENATLogOptions_Del(p *radius.Packet) {
	_Livingston_DelVendor(p, 16)
}

type LENATSessDirFailAction uint32

const (
	LENATSessDirFailAction_Value_Drop        LENATSessDirFailAction = 1
	LENATSessDirFailAction_Value_ICMPReject  LENATSessDirFailAction = 2
	LENATSessDirFailAction_Value_PassThrough LENATSessDirFailAction = 3
)

var LENATSessDirFailAction_Strings = map[LENATSessDirFailAction]string{
	LENATSessDirFailAction_Value_Drop:        "Drop",
	LENATSessDirFailAction_Value_ICMPReject:  "ICMP-Reject",
	LENATSessDirFailAction_Value_PassThrough: "Pass-Through",
}

func (a LENATSessDirFailAction) String() string {
	if str, ok := LENATSessDirFailAction_Strings[a]; ok {
		return str
	}
	return "LENATSessDirFailAction(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LENATSessDirFailAction_Add(p *radius.Packet, value LENATSessDirFailAction) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Livingston_AddVendor(p, 17, a)
}

func LENATSessDirFailAction_Get(p *radius.Packet) (value LENATSessDirFailAction) {
	value, _ = LENATSessDirFailAction_Lookup(p)
	return
}

func LENATSessDirFailAction_Gets(p *radius.Packet) (values []LENATSessDirFailAction, err error) {
	var i uint32
	for _, attr := range _Livingston_GetsVendor(p, 17) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LENATSessDirFailAction(i))
	}
	return
}

func LENATSessDirFailAction_Lookup(p *radius.Packet) (value LENATSessDirFailAction, err error) {
	a, ok := _Livingston_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LENATSessDirFailAction(i)
	return
}

func LENATSessDirFailAction_Set(p *radius.Packet, value LENATSessDirFailAction) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Livingston_SetVendor(p, 17, a)
}

func LENATSessDirFailAction_Del(p *radius.Packet) {
	_Livingston_DelVendor(p, 17)
}

func LENATInmap_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 18, a)
}

func LENATInmap_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 18, a)
}

func LENATInmap_Get(p *radius.Packet) (value []byte) {
	value, _ = LENATInmap_Lookup(p)
	return
}

func LENATInmap_GetString(p *radius.Packet) (value string) {
	value, _ = LENATInmap_LookupString(p)
	return
}

func LENATInmap_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Livingston_GetsVendor(p, 18) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LENATInmap_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Livingston_GetsVendor(p, 18) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LENATInmap_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Livingston_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LENATInmap_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Livingston_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LENATInmap_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 18, a)
}

func LENATInmap_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 18, a)
}

func LENATInmap_Del(p *radius.Packet) {
	_Livingston_DelVendor(p, 18)
}

func LENATOutmap_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 19, a)
}

func LENATOutmap_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 19, a)
}

func LENATOutmap_Get(p *radius.Packet) (value []byte) {
	value, _ = LENATOutmap_Lookup(p)
	return
}

func LENATOutmap_GetString(p *radius.Packet) (value string) {
	value, _ = LENATOutmap_LookupString(p)
	return
}

func LENATOutmap_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Livingston_GetsVendor(p, 19) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LENATOutmap_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Livingston_GetsVendor(p, 19) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LENATOutmap_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Livingston_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LENATOutmap_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Livingston_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LENATOutmap_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 19, a)
}

func LENATOutmap_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 19, a)
}

func LENATOutmap_Del(p *radius.Packet) {
	_Livingston_DelVendor(p, 19)
}

func LENATOutsourceInmap_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 20, a)
}

func LENATOutsourceInmap_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 20, a)
}

func LENATOutsourceInmap_Get(p *radius.Packet) (value []byte) {
	value, _ = LENATOutsourceInmap_Lookup(p)
	return
}

func LENATOutsourceInmap_GetString(p *radius.Packet) (value string) {
	value, _ = LENATOutsourceInmap_LookupString(p)
	return
}

func LENATOutsourceInmap_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Livingston_GetsVendor(p, 20) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LENATOutsourceInmap_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Livingston_GetsVendor(p, 20) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LENATOutsourceInmap_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Livingston_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LENATOutsourceInmap_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Livingston_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LENATOutsourceInmap_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 20, a)
}

func LENATOutsourceInmap_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 20, a)
}

func LENATOutsourceInmap_Del(p *radius.Packet) {
	_Livingston_DelVendor(p, 20)
}

func LENATOutsourceOutmap_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 21, a)
}

func LENATOutsourceOutmap_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 21, a)
}

func LENATOutsourceOutmap_Get(p *radius.Packet) (value []byte) {
	value, _ = LENATOutsourceOutmap_Lookup(p)
	return
}

func LENATOutsourceOutmap_GetString(p *radius.Packet) (value string) {
	value, _ = LENATOutsourceOutmap_LookupString(p)
	return
}

func LENATOutsourceOutmap_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Livingston_GetsVendor(p, 21) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LENATOutsourceOutmap_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Livingston_GetsVendor(p, 21) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LENATOutsourceOutmap_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Livingston_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LENATOutsourceOutmap_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Livingston_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LENATOutsourceOutmap_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 21, a)
}

func LENATOutsourceOutmap_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 21, a)
}

func LENATOutsourceOutmap_Del(p *radius.Packet) {
	_Livingston_DelVendor(p, 21)
}

func LEAdminGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 22, a)
}

func LEAdminGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_AddVendor(p, 22, a)
}

func LEAdminGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = LEAdminGroup_Lookup(p)
	return
}

func LEAdminGroup_GetString(p *radius.Packet) (value string) {
	value, _ = LEAdminGroup_LookupString(p)
	return
}

func LEAdminGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Livingston_GetsVendor(p, 22) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LEAdminGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Livingston_GetsVendor(p, 22) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func LEAdminGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Livingston_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func LEAdminGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Livingston_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func LEAdminGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 22, a)
}

func LEAdminGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Livingston_SetVendor(p, 22, a)
}

func LEAdminGroup_Del(p *radius.Packet) {
	_Livingston_DelVendor(p, 22)
}

type LEMulticastClient uint32

const (
	LEMulticastClient_Value_On LEMulticastClient = 1
)

var LEMulticastClient_Strings = map[LEMulticastClient]string{
	LEMulticastClient_Value_On: "On",
}

func (a LEMulticastClient) String() string {
	if str, ok := LEMulticastClient_Strings[a]; ok {
		return str
	}
	return "LEMulticastClient(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func LEMulticastClient_Add(p *radius.Packet, value LEMulticastClient) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Livingston_AddVendor(p, 23, a)
}

func LEMulticastClient_Get(p *radius.Packet) (value LEMulticastClient) {
	value, _ = LEMulticastClient_Lookup(p)
	return
}

func LEMulticastClient_Gets(p *radius.Packet) (values []LEMulticastClient, err error) {
	var i uint32
	for _, attr := range _Livingston_GetsVendor(p, 23) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, LEMulticastClient(i))
	}
	return
}

func LEMulticastClient_Lookup(p *radius.Packet) (value LEMulticastClient, err error) {
	a, ok := _Livingston_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = LEMulticastClient(i)
	return
}

func LEMulticastClient_Set(p *radius.Packet, value LEMulticastClient) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Livingston_SetVendor(p, 23, a)
}

func LEMulticastClient_Del(p *radius.Packet) {
	_Livingston_DelVendor(p, 23)
}
