// Code generated by radius-dict-gen. DO NOT EDIT.

package hp

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_HP_VendorID = 11
)

func _HP_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_HP_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _HP_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _HP_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _HP_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _HP_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _HP_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _HP_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _HP_AddVendor(p, typ, attr)
}

func _HP_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _HP_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

type HPPrivilegeLevel uint32

var HPPrivilegeLevel_Strings = map[HPPrivilegeLevel]string{}

func (a HPPrivilegeLevel) String() string {
	if str, ok := HPPrivilegeLevel_Strings[a]; ok {
		return str
	}
	return "HPPrivilegeLevel(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HPPrivilegeLevel_Add(p *radius.Packet, value HPPrivilegeLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_AddVendor(p, 1, a)
}

func HPPrivilegeLevel_Get(p *radius.Packet) (value HPPrivilegeLevel) {
	value, _ = HPPrivilegeLevel_Lookup(p)
	return
}

func HPPrivilegeLevel_Gets(p *radius.Packet) (values []HPPrivilegeLevel, err error) {
	var i uint32
	for _, attr := range _HP_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HPPrivilegeLevel(i))
	}
	return
}

func HPPrivilegeLevel_Lookup(p *radius.Packet) (value HPPrivilegeLevel, err error) {
	a, ok := _HP_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HPPrivilegeLevel(i)
	return
}

func HPPrivilegeLevel_Set(p *radius.Packet, value HPPrivilegeLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_SetVendor(p, 1, a)
}

func HPPrivilegeLevel_Del(p *radius.Packet) {
	_HP_DelVendor(p, 1)
}

func HPCommandString_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _HP_AddVendor(p, 2, a)
}

func HPCommandString_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _HP_AddVendor(p, 2, a)
}

func HPCommandString_Get(p *radius.Packet) (value []byte) {
	value, _ = HPCommandString_Lookup(p)
	return
}

func HPCommandString_GetString(p *radius.Packet) (value string) {
	value, _ = HPCommandString_LookupString(p)
	return
}

func HPCommandString_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _HP_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HPCommandString_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _HP_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HPCommandString_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _HP_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HPCommandString_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _HP_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HPCommandString_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _HP_SetVendor(p, 2, a)
}

func HPCommandString_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _HP_SetVendor(p, 2, a)
}

func HPCommandString_Del(p *radius.Packet) {
	_HP_DelVendor(p, 2)
}

type HPCommandException uint32

const (
	HPCommandException_Value_PermitList HPCommandException = 0
	HPCommandException_Value_DenyList   HPCommandException = 1
)

var HPCommandException_Strings = map[HPCommandException]string{
	HPCommandException_Value_PermitList: "Permit-List",
	HPCommandException_Value_DenyList:   "Deny-List",
}

func (a HPCommandException) String() string {
	if str, ok := HPCommandException_Strings[a]; ok {
		return str
	}
	return "HPCommandException(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HPCommandException_Add(p *radius.Packet, value HPCommandException) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_AddVendor(p, 3, a)
}

func HPCommandException_Get(p *radius.Packet) (value HPCommandException) {
	value, _ = HPCommandException_Lookup(p)
	return
}

func HPCommandException_Gets(p *radius.Packet) (values []HPCommandException, err error) {
	var i uint32
	for _, attr := range _HP_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HPCommandException(i))
	}
	return
}

func HPCommandException_Lookup(p *radius.Packet) (value HPCommandException, err error) {
	a, ok := _HP_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HPCommandException(i)
	return
}

func HPCommandException_Set(p *radius.Packet, value HPCommandException) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_SetVendor(p, 3, a)
}

func HPCommandException_Del(p *radius.Packet) {
	_HP_DelVendor(p, 3)
}

type HPManagementProtocol uint32

const (
	HPManagementProtocol_Value_HTTP  HPManagementProtocol = 5
	HPManagementProtocol_Value_HTTPS HPManagementProtocol = 6
)

var HPManagementProtocol_Strings = map[HPManagementProtocol]string{
	HPManagementProtocol_Value_HTTP:  "HTTP",
	HPManagementProtocol_Value_HTTPS: "HTTPS",
}

func (a HPManagementProtocol) String() string {
	if str, ok := HPManagementProtocol_Strings[a]; ok {
		return str
	}
	return "HPManagementProtocol(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HPManagementProtocol_Add(p *radius.Packet, value HPManagementProtocol) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_AddVendor(p, 26, a)
}

func HPManagementProtocol_Get(p *radius.Packet) (value HPManagementProtocol) {
	value, _ = HPManagementProtocol_Lookup(p)
	return
}

func HPManagementProtocol_Gets(p *radius.Packet) (values []HPManagementProtocol, err error) {
	var i uint32
	for _, attr := range _HP_GetsVendor(p, 26) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HPManagementProtocol(i))
	}
	return
}

func HPManagementProtocol_Lookup(p *radius.Packet) (value HPManagementProtocol, err error) {
	a, ok := _HP_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HPManagementProtocol(i)
	return
}

func HPManagementProtocol_Set(p *radius.Packet, value HPManagementProtocol) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_SetVendor(p, 26, a)
}

func HPManagementProtocol_Del(p *radius.Packet) {
	_HP_DelVendor(p, 26)
}

type HPPortClientLimitDot1x uint32

var HPPortClientLimitDot1x_Strings = map[HPPortClientLimitDot1x]string{}

func (a HPPortClientLimitDot1x) String() string {
	if str, ok := HPPortClientLimitDot1x_Strings[a]; ok {
		return str
	}
	return "HPPortClientLimitDot1x(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HPPortClientLimitDot1x_Add(p *radius.Packet, value HPPortClientLimitDot1x) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_AddVendor(p, 10, a)
}

func HPPortClientLimitDot1x_Get(p *radius.Packet) (value HPPortClientLimitDot1x) {
	value, _ = HPPortClientLimitDot1x_Lookup(p)
	return
}

func HPPortClientLimitDot1x_Gets(p *radius.Packet) (values []HPPortClientLimitDot1x, err error) {
	var i uint32
	for _, attr := range _HP_GetsVendor(p, 10) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HPPortClientLimitDot1x(i))
	}
	return
}

func HPPortClientLimitDot1x_Lookup(p *radius.Packet) (value HPPortClientLimitDot1x, err error) {
	a, ok := _HP_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HPPortClientLimitDot1x(i)
	return
}

func HPPortClientLimitDot1x_Set(p *radius.Packet, value HPPortClientLimitDot1x) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_SetVendor(p, 10, a)
}

func HPPortClientLimitDot1x_Del(p *radius.Packet) {
	_HP_DelVendor(p, 10)
}

type HPPortClientLimitMA uint32

var HPPortClientLimitMA_Strings = map[HPPortClientLimitMA]string{}

func (a HPPortClientLimitMA) String() string {
	if str, ok := HPPortClientLimitMA_Strings[a]; ok {
		return str
	}
	return "HPPortClientLimitMA(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HPPortClientLimitMA_Add(p *radius.Packet, value HPPortClientLimitMA) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_AddVendor(p, 11, a)
}

func HPPortClientLimitMA_Get(p *radius.Packet) (value HPPortClientLimitMA) {
	value, _ = HPPortClientLimitMA_Lookup(p)
	return
}

func HPPortClientLimitMA_Gets(p *radius.Packet) (values []HPPortClientLimitMA, err error) {
	var i uint32
	for _, attr := range _HP_GetsVendor(p, 11) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HPPortClientLimitMA(i))
	}
	return
}

func HPPortClientLimitMA_Lookup(p *radius.Packet) (value HPPortClientLimitMA, err error) {
	a, ok := _HP_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HPPortClientLimitMA(i)
	return
}

func HPPortClientLimitMA_Set(p *radius.Packet, value HPPortClientLimitMA) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_SetVendor(p, 11, a)
}

func HPPortClientLimitMA_Del(p *radius.Packet) {
	_HP_DelVendor(p, 11)
}

type HPPortClientLimitWA uint32

var HPPortClientLimitWA_Strings = map[HPPortClientLimitWA]string{}

func (a HPPortClientLimitWA) String() string {
	if str, ok := HPPortClientLimitWA_Strings[a]; ok {
		return str
	}
	return "HPPortClientLimitWA(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HPPortClientLimitWA_Add(p *radius.Packet, value HPPortClientLimitWA) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_AddVendor(p, 12, a)
}

func HPPortClientLimitWA_Get(p *radius.Packet) (value HPPortClientLimitWA) {
	value, _ = HPPortClientLimitWA_Lookup(p)
	return
}

func HPPortClientLimitWA_Gets(p *radius.Packet) (values []HPPortClientLimitWA, err error) {
	var i uint32
	for _, attr := range _HP_GetsVendor(p, 12) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HPPortClientLimitWA(i))
	}
	return
}

func HPPortClientLimitWA_Lookup(p *radius.Packet) (value HPPortClientLimitWA, err error) {
	a, ok := _HP_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HPPortClientLimitWA(i)
	return
}

func HPPortClientLimitWA_Set(p *radius.Packet, value HPPortClientLimitWA) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_SetVendor(p, 12, a)
}

func HPPortClientLimitWA_Del(p *radius.Packet) {
	_HP_DelVendor(p, 12)
}

type HPPortAuthModeDot1x uint32

const (
	HPPortAuthModeDot1x_Value_PortBased HPPortAuthModeDot1x = 1
	HPPortAuthModeDot1x_Value_UserBased HPPortAuthModeDot1x = 2
)

var HPPortAuthModeDot1x_Strings = map[HPPortAuthModeDot1x]string{
	HPPortAuthModeDot1x_Value_PortBased: "Port-Based",
	HPPortAuthModeDot1x_Value_UserBased: "User-Based",
}

func (a HPPortAuthModeDot1x) String() string {
	if str, ok := HPPortAuthModeDot1x_Strings[a]; ok {
		return str
	}
	return "HPPortAuthModeDot1x(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HPPortAuthModeDot1x_Add(p *radius.Packet, value HPPortAuthModeDot1x) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_AddVendor(p, 13, a)
}

func HPPortAuthModeDot1x_Get(p *radius.Packet) (value HPPortAuthModeDot1x) {
	value, _ = HPPortAuthModeDot1x_Lookup(p)
	return
}

func HPPortAuthModeDot1x_Gets(p *radius.Packet) (values []HPPortAuthModeDot1x, err error) {
	var i uint32
	for _, attr := range _HP_GetsVendor(p, 13) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HPPortAuthModeDot1x(i))
	}
	return
}

func HPPortAuthModeDot1x_Lookup(p *radius.Packet) (value HPPortAuthModeDot1x, err error) {
	a, ok := _HP_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HPPortAuthModeDot1x(i)
	return
}

func HPPortAuthModeDot1x_Set(p *radius.Packet, value HPPortAuthModeDot1x) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_SetVendor(p, 13, a)
}

func HPPortAuthModeDot1x_Del(p *radius.Packet) {
	_HP_DelVendor(p, 13)
}

type HPPortBounceHost uint32

var HPPortBounceHost_Strings = map[HPPortBounceHost]string{}

func (a HPPortBounceHost) String() string {
	if str, ok := HPPortBounceHost_Strings[a]; ok {
		return str
	}
	return "HPPortBounceHost(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HPPortBounceHost_Add(p *radius.Packet, value HPPortBounceHost) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_AddVendor(p, 23, a)
}

func HPPortBounceHost_Get(p *radius.Packet) (value HPPortBounceHost) {
	value, _ = HPPortBounceHost_Lookup(p)
	return
}

func HPPortBounceHost_Gets(p *radius.Packet) (values []HPPortBounceHost, err error) {
	var i uint32
	for _, attr := range _HP_GetsVendor(p, 23) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HPPortBounceHost(i))
	}
	return
}

func HPPortBounceHost_Lookup(p *radius.Packet) (value HPPortBounceHost, err error) {
	a, ok := _HP_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HPPortBounceHost(i)
	return
}

func HPPortBounceHost_Set(p *radius.Packet, value HPPortBounceHost) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_SetVendor(p, 23, a)
}

func HPPortBounceHost_Del(p *radius.Packet) {
	_HP_DelVendor(p, 23)
}

func HPCaptivePortalURL_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _HP_AddVendor(p, 24, a)
}

func HPCaptivePortalURL_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _HP_AddVendor(p, 24, a)
}

func HPCaptivePortalURL_Get(p *radius.Packet) (value []byte) {
	value, _ = HPCaptivePortalURL_Lookup(p)
	return
}

func HPCaptivePortalURL_GetString(p *radius.Packet) (value string) {
	value, _ = HPCaptivePortalURL_LookupString(p)
	return
}

func HPCaptivePortalURL_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _HP_GetsVendor(p, 24) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HPCaptivePortalURL_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _HP_GetsVendor(p, 24) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HPCaptivePortalURL_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _HP_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HPCaptivePortalURL_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _HP_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HPCaptivePortalURL_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _HP_SetVendor(p, 24, a)
}

func HPCaptivePortalURL_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _HP_SetVendor(p, 24, a)
}

func HPCaptivePortalURL_Del(p *radius.Packet) {
	_HP_DelVendor(p, 24)
}

func HPPortPriorityRegenerationTable_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _HP_AddVendor(p, 40, a)
}

func HPPortPriorityRegenerationTable_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _HP_AddVendor(p, 40, a)
}

func HPPortPriorityRegenerationTable_Get(p *radius.Packet) (value []byte) {
	value, _ = HPPortPriorityRegenerationTable_Lookup(p)
	return
}

func HPPortPriorityRegenerationTable_GetString(p *radius.Packet) (value string) {
	value, _ = HPPortPriorityRegenerationTable_LookupString(p)
	return
}

func HPPortPriorityRegenerationTable_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _HP_GetsVendor(p, 40) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HPPortPriorityRegenerationTable_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _HP_GetsVendor(p, 40) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HPPortPriorityRegenerationTable_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _HP_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HPPortPriorityRegenerationTable_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _HP_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HPPortPriorityRegenerationTable_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _HP_SetVendor(p, 40, a)
}

func HPPortPriorityRegenerationTable_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _HP_SetVendor(p, 40, a)
}

func HPPortPriorityRegenerationTable_Del(p *radius.Packet) {
	_HP_DelVendor(p, 40)
}

func HPCos_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _HP_AddVendor(p, 40, a)
}

func HPCos_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _HP_AddVendor(p, 40, a)
}

func HPCos_Get(p *radius.Packet) (value []byte) {
	value, _ = HPCos_Lookup(p)
	return
}

func HPCos_GetString(p *radius.Packet) (value string) {
	value, _ = HPCos_LookupString(p)
	return
}

func HPCos_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _HP_GetsVendor(p, 40) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HPCos_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _HP_GetsVendor(p, 40) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HPCos_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _HP_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HPCos_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _HP_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HPCos_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _HP_SetVendor(p, 40, a)
}

func HPCos_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _HP_SetVendor(p, 40, a)
}

func HPCos_Del(p *radius.Packet) {
	_HP_DelVendor(p, 40)
}

type HPBandwidthMaxIngress uint32

var HPBandwidthMaxIngress_Strings = map[HPBandwidthMaxIngress]string{}

func (a HPBandwidthMaxIngress) String() string {
	if str, ok := HPBandwidthMaxIngress_Strings[a]; ok {
		return str
	}
	return "HPBandwidthMaxIngress(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HPBandwidthMaxIngress_Add(p *radius.Packet, value HPBandwidthMaxIngress) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_AddVendor(p, 46, a)
}

func HPBandwidthMaxIngress_Get(p *radius.Packet) (value HPBandwidthMaxIngress) {
	value, _ = HPBandwidthMaxIngress_Lookup(p)
	return
}

func HPBandwidthMaxIngress_Gets(p *radius.Packet) (values []HPBandwidthMaxIngress, err error) {
	var i uint32
	for _, attr := range _HP_GetsVendor(p, 46) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HPBandwidthMaxIngress(i))
	}
	return
}

func HPBandwidthMaxIngress_Lookup(p *radius.Packet) (value HPBandwidthMaxIngress, err error) {
	a, ok := _HP_LookupVendor(p, 46)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HPBandwidthMaxIngress(i)
	return
}

func HPBandwidthMaxIngress_Set(p *radius.Packet, value HPBandwidthMaxIngress) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_SetVendor(p, 46, a)
}

func HPBandwidthMaxIngress_Del(p *radius.Packet) {
	_HP_DelVendor(p, 46)
}

type HPBandwidthMaxEgress uint32

var HPBandwidthMaxEgress_Strings = map[HPBandwidthMaxEgress]string{}

func (a HPBandwidthMaxEgress) String() string {
	if str, ok := HPBandwidthMaxEgress_Strings[a]; ok {
		return str
	}
	return "HPBandwidthMaxEgress(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HPBandwidthMaxEgress_Add(p *radius.Packet, value HPBandwidthMaxEgress) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_AddVendor(p, 48, a)
}

func HPBandwidthMaxEgress_Get(p *radius.Packet) (value HPBandwidthMaxEgress) {
	value, _ = HPBandwidthMaxEgress_Lookup(p)
	return
}

func HPBandwidthMaxEgress_Gets(p *radius.Packet) (values []HPBandwidthMaxEgress, err error) {
	var i uint32
	for _, attr := range _HP_GetsVendor(p, 48) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HPBandwidthMaxEgress(i))
	}
	return
}

func HPBandwidthMaxEgress_Lookup(p *radius.Packet) (value HPBandwidthMaxEgress, err error) {
	a, ok := _HP_LookupVendor(p, 48)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HPBandwidthMaxEgress(i)
	return
}

func HPBandwidthMaxEgress_Set(p *radius.Packet, value HPBandwidthMaxEgress) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_SetVendor(p, 48, a)
}

func HPBandwidthMaxEgress_Del(p *radius.Packet) {
	_HP_DelVendor(p, 48)
}

func HPIPFilterRaw_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _HP_AddVendor(p, 61, a)
}

func HPIPFilterRaw_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _HP_AddVendor(p, 61, a)
}

func HPIPFilterRaw_Get(p *radius.Packet) (value []byte) {
	value, _ = HPIPFilterRaw_Lookup(p)
	return
}

func HPIPFilterRaw_GetString(p *radius.Packet) (value string) {
	value, _ = HPIPFilterRaw_LookupString(p)
	return
}

func HPIPFilterRaw_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _HP_GetsVendor(p, 61) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HPIPFilterRaw_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _HP_GetsVendor(p, 61) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HPIPFilterRaw_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _HP_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HPIPFilterRaw_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _HP_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HPIPFilterRaw_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _HP_SetVendor(p, 61, a)
}

func HPIPFilterRaw_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _HP_SetVendor(p, 61, a)
}

func HPIPFilterRaw_Del(p *radius.Packet) {
	_HP_DelVendor(p, 61)
}

func HPNasFilterRule_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _HP_AddVendor(p, 61, a)
}

func HPNasFilterRule_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _HP_AddVendor(p, 61, a)
}

func HPNasFilterRule_Get(p *radius.Packet) (value []byte) {
	value, _ = HPNasFilterRule_Lookup(p)
	return
}

func HPNasFilterRule_GetString(p *radius.Packet) (value string) {
	value, _ = HPNasFilterRule_LookupString(p)
	return
}

func HPNasFilterRule_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _HP_GetsVendor(p, 61) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HPNasFilterRule_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _HP_GetsVendor(p, 61) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HPNasFilterRule_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _HP_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HPNasFilterRule_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _HP_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HPNasFilterRule_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _HP_SetVendor(p, 61, a)
}

func HPNasFilterRule_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _HP_SetVendor(p, 61, a)
}

func HPNasFilterRule_Del(p *radius.Packet) {
	_HP_DelVendor(p, 61)
}

type HPNasRulesIPv6 uint32

var HPNasRulesIPv6_Strings = map[HPNasRulesIPv6]string{}

func (a HPNasRulesIPv6) String() string {
	if str, ok := HPNasRulesIPv6_Strings[a]; ok {
		return str
	}
	return "HPNasRulesIPv6(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HPNasRulesIPv6_Add(p *radius.Packet, value HPNasRulesIPv6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_AddVendor(p, 63, a)
}

func HPNasRulesIPv6_Get(p *radius.Packet) (value HPNasRulesIPv6) {
	value, _ = HPNasRulesIPv6_Lookup(p)
	return
}

func HPNasRulesIPv6_Gets(p *radius.Packet) (values []HPNasRulesIPv6, err error) {
	var i uint32
	for _, attr := range _HP_GetsVendor(p, 63) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HPNasRulesIPv6(i))
	}
	return
}

func HPNasRulesIPv6_Lookup(p *radius.Packet) (value HPNasRulesIPv6, err error) {
	a, ok := _HP_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HPNasRulesIPv6(i)
	return
}

func HPNasRulesIPv6_Set(p *radius.Packet, value HPNasRulesIPv6) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_SetVendor(p, 63, a)
}

func HPNasRulesIPv6_Del(p *radius.Packet) {
	_HP_DelVendor(p, 63)
}

type HPEgressVLANID uint32

var HPEgressVLANID_Strings = map[HPEgressVLANID]string{}

func (a HPEgressVLANID) String() string {
	if str, ok := HPEgressVLANID_Strings[a]; ok {
		return str
	}
	return "HPEgressVLANID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func HPEgressVLANID_Add(p *radius.Packet, value HPEgressVLANID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_AddVendor(p, 64, a)
}

func HPEgressVLANID_Get(p *radius.Packet) (value HPEgressVLANID) {
	value, _ = HPEgressVLANID_Lookup(p)
	return
}

func HPEgressVLANID_Gets(p *radius.Packet) (values []HPEgressVLANID, err error) {
	var i uint32
	for _, attr := range _HP_GetsVendor(p, 64) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, HPEgressVLANID(i))
	}
	return
}

func HPEgressVLANID_Lookup(p *radius.Packet) (value HPEgressVLANID, err error) {
	a, ok := _HP_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = HPEgressVLANID(i)
	return
}

func HPEgressVLANID_Set(p *radius.Packet, value HPEgressVLANID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _HP_SetVendor(p, 64, a)
}

func HPEgressVLANID_Del(p *radius.Packet) {
	_HP_DelVendor(p, 64)
}

func HPEgressVLANName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _HP_AddVendor(p, 65, a)
}

func HPEgressVLANName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _HP_AddVendor(p, 65, a)
}

func HPEgressVLANName_Get(p *radius.Packet) (value []byte) {
	value, _ = HPEgressVLANName_Lookup(p)
	return
}

func HPEgressVLANName_GetString(p *radius.Packet) (value string) {
	value, _ = HPEgressVLANName_LookupString(p)
	return
}

func HPEgressVLANName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _HP_GetsVendor(p, 65) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HPEgressVLANName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _HP_GetsVendor(p, 65) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HPEgressVLANName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _HP_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HPEgressVLANName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _HP_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HPEgressVLANName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _HP_SetVendor(p, 65, a)
}

func HPEgressVLANName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _HP_SetVendor(p, 65, a)
}

func HPEgressVLANName_Del(p *radius.Packet) {
	_HP_DelVendor(p, 65)
}

func HPCapabilityAdvert_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _HP_AddVendor(p, 255, a)
}

func HPCapabilityAdvert_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _HP_AddVendor(p, 255, a)
}

func HPCapabilityAdvert_Get(p *radius.Packet) (value []byte) {
	value, _ = HPCapabilityAdvert_Lookup(p)
	return
}

func HPCapabilityAdvert_GetString(p *radius.Packet) (value string) {
	value, _ = HPCapabilityAdvert_LookupString(p)
	return
}

func HPCapabilityAdvert_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _HP_GetsVendor(p, 255) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HPCapabilityAdvert_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _HP_GetsVendor(p, 255) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func HPCapabilityAdvert_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _HP_LookupVendor(p, 255)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func HPCapabilityAdvert_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _HP_LookupVendor(p, 255)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func HPCapabilityAdvert_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _HP_SetVendor(p, 255, a)
}

func HPCapabilityAdvert_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _HP_SetVendor(p, 255, a)
}

func HPCapabilityAdvert_Del(p *radius.Packet) {
	_HP_DelVendor(p, 255)
}
