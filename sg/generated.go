// Code generated by radius-dict-gen. DO NOT EDIT.

package sg

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_SG_VendorID = 2454
)

func _SG_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_SG_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _SG_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _SG_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _SG_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _SG_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _SG_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _SG_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _SG_AddVendor(p, typ, attr)
}

func _SG_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _SG_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func SGFilterRedirectGw_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 1, a)
}

func SGFilterRedirectGw_Get(p *radius.Packet) (value net.IP) {
	value, _ = SGFilterRedirectGw_Lookup(p)
	return
}

func SGFilterRedirectGw_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _SG_GetsVendor(p, 1) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGFilterRedirectGw_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _SG_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func SGFilterRedirectGw_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 1, a)
}

func SGFilterRedirectGw_Del(p *radius.Packet) {
	_SG_DelVendor(p, 1)
}

type SGAccounting uint32

const (
	SGAccounting_Value_Disable            SGAccounting = 1
	SGAccounting_Value_Enable             SGAccounting = 2
	SGAccounting_Value_Lastpacket         SGAccounting = 3
	SGAccounting_Value_EnableOnIPUpdate   SGAccounting = 4
	SGAccounting_Value_ResetAcctSessionID SGAccounting = 5
)

var SGAccounting_Strings = map[SGAccounting]string{
	SGAccounting_Value_Disable:            "Disable",
	SGAccounting_Value_Enable:             "Enable",
	SGAccounting_Value_Lastpacket:         "Lastpacket",
	SGAccounting_Value_EnableOnIPUpdate:   "Enable-On-IP-Update",
	SGAccounting_Value_ResetAcctSessionID: "Reset-Acct-Session-ID",
}

func (a SGAccounting) String() string {
	if str, ok := SGAccounting_Strings[a]; ok {
		return str
	}
	return "SGAccounting(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGAccounting_Add(p *radius.Packet, value SGAccounting) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 10, a)
}

func SGAccounting_Get(p *radius.Packet) (value SGAccounting) {
	value, _ = SGAccounting_Lookup(p)
	return
}

func SGAccounting_Gets(p *radius.Packet) (values []SGAccounting, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 10) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGAccounting(i))
	}
	return
}

func SGAccounting_Lookup(p *radius.Packet) (value SGAccounting, err error) {
	a, ok := _SG_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGAccounting(i)
	return
}

func SGAccounting_Set(p *radius.Packet, value SGAccounting) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 10, a)
}

func SGAccounting_Del(p *radius.Packet) {
	_SG_DelVendor(p, 10)
}

func SGOrigName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 12, a)
}

func SGOrigName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 12, a)
}

func SGOrigName_Get(p *radius.Packet) (value []byte) {
	value, _ = SGOrigName_Lookup(p)
	return
}

func SGOrigName_GetString(p *radius.Packet) (value string) {
	value, _ = SGOrigName_LookupString(p)
	return
}

func SGOrigName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGOrigName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGOrigName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGOrigName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGOrigName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 12, a)
}

func SGOrigName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 12, a)
}

func SGOrigName_Del(p *radius.Packet) {
	_SG_DelVendor(p, 12)
}

type SGAuthType uint32

const (
	SGAuthType_Value_PreAuth          SGAuthType = 1
	SGAuthType_Value_ServiceSelection SGAuthType = 2
	SGAuthType_Value_WebAuth          SGAuthType = 3
)

var SGAuthType_Strings = map[SGAuthType]string{
	SGAuthType_Value_PreAuth:          "Pre-Auth",
	SGAuthType_Value_ServiceSelection: "Service-Selection",
	SGAuthType_Value_WebAuth:          "Web-Auth",
}

func (a SGAuthType) String() string {
	if str, ok := SGAuthType_Strings[a]; ok {
		return str
	}
	return "SGAuthType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGAuthType_Add(p *radius.Packet, value SGAuthType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 13, a)
}

func SGAuthType_Get(p *radius.Packet) (value SGAuthType) {
	value, _ = SGAuthType_Lookup(p)
	return
}

func SGAuthType_Gets(p *radius.Packet) (values []SGAuthType, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 13) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGAuthType(i))
	}
	return
}

func SGAuthType_Lookup(p *radius.Packet) (value SGAuthType, err error) {
	a, ok := _SG_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGAuthType(i)
	return
}

func SGAuthType_Set(p *radius.Packet, value SGAuthType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 13, a)
}

func SGAuthType_Del(p *radius.Packet) {
	_SG_DelVendor(p, 13)
}

type SGAction uint32

const (
	SGAction_Value_Reject                          SGAction = 1
	SGAction_Value_Echo                            SGAction = 2
	SGAction_Value_Macantispoof                    SGAction = 3
	SGAction_Value_UserSpaceOverwrite              SGAction = 4
	SGAction_Value_UserSpaceOverwriteOnNextService SGAction = 5
	SGAction_Value_L2Echo                          SGAction = 6
)

var SGAction_Strings = map[SGAction]string{
	SGAction_Value_Reject:                          "Reject",
	SGAction_Value_Echo:                            "Echo",
	SGAction_Value_Macantispoof:                    "Macantispoof",
	SGAction_Value_UserSpaceOverwrite:              "User-Space-Overwrite",
	SGAction_Value_UserSpaceOverwriteOnNextService: "User-Space-Overwrite-On-Next-Service",
	SGAction_Value_L2Echo:                          "L2Echo",
}

func (a SGAction) String() string {
	if str, ok := SGAction_Strings[a]; ok {
		return str
	}
	return "SGAction(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGAction_Add(p *radius.Packet, value SGAction) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 14, a)
}

func SGAction_Get(p *radius.Packet) (value SGAction) {
	value, _ = SGAction_Lookup(p)
	return
}

func SGAction_Gets(p *radius.Packet) (values []SGAction, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 14) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGAction(i))
	}
	return
}

func SGAction_Lookup(p *radius.Packet) (value SGAction, err error) {
	a, ok := _SG_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGAction(i)
	return
}

func SGAction_Set(p *radius.Packet, value SGAction) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 14, a)
}

func SGAction_Del(p *radius.Packet) {
	_SG_DelVendor(p, 14)
}

func SGSSCHost_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 15, a)
}

func SGSSCHost_Get(p *radius.Packet) (value net.IP) {
	value, _ = SGSSCHost_Lookup(p)
	return
}

func SGSSCHost_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _SG_GetsVendor(p, 15) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGSSCHost_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _SG_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func SGSSCHost_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 15, a)
}

func SGSSCHost_Del(p *radius.Packet) {
	_SG_DelVendor(p, 15)
}

func SGServiceName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 16, a)
}

func SGServiceName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 16, a)
}

func SGServiceName_Get(p *radius.Packet) (value []byte) {
	value, _ = SGServiceName_Lookup(p)
	return
}

func SGServiceName_GetString(p *radius.Packet) (value string) {
	value, _ = SGServiceName_LookupString(p)
	return
}

func SGServiceName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 16) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGServiceName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 16) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGServiceName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGServiceName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGServiceName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 16, a)
}

func SGServiceName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 16, a)
}

func SGServiceName_Del(p *radius.Packet) {
	_SG_DelVendor(p, 16)
}

func SGPersonalSite_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 17, a)
}

func SGPersonalSite_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 17, a)
}

func SGPersonalSite_Get(p *radius.Packet) (value []byte) {
	value, _ = SGPersonalSite_Lookup(p)
	return
}

func SGPersonalSite_GetString(p *radius.Packet) (value string) {
	value, _ = SGPersonalSite_LookupString(p)
	return
}

func SGPersonalSite_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 17) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGPersonalSite_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 17) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGPersonalSite_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGPersonalSite_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGPersonalSite_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 17, a)
}

func SGPersonalSite_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 17, a)
}

func SGPersonalSite_Del(p *radius.Packet) {
	_SG_DelVendor(p, 17)
}

func SGMacAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 18, a)
}

func SGMacAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 18, a)
}

func SGMacAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = SGMacAddress_Lookup(p)
	return
}

func SGMacAddress_GetString(p *radius.Packet) (value string) {
	value, _ = SGMacAddress_LookupString(p)
	return
}

func SGMacAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 18) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGMacAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 18) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGMacAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGMacAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGMacAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 18, a)
}

func SGMacAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 18, a)
}

func SGMacAddress_Del(p *radius.Packet) {
	_SG_DelVendor(p, 18)
}

type SGUserGroup uint32

var SGUserGroup_Strings = map[SGUserGroup]string{}

func (a SGUserGroup) String() string {
	if str, ok := SGUserGroup_Strings[a]; ok {
		return str
	}
	return "SGUserGroup(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGUserGroup_Add(p *radius.Packet, value SGUserGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 19, a)
}

func SGUserGroup_Get(p *radius.Packet) (value SGUserGroup) {
	value, _ = SGUserGroup_Lookup(p)
	return
}

func SGUserGroup_Gets(p *radius.Packet) (values []SGUserGroup, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 19) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGUserGroup(i))
	}
	return
}

func SGUserGroup_Lookup(p *radius.Packet) (value SGUserGroup, err error) {
	a, ok := _SG_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGUserGroup(i)
	return
}

func SGUserGroup_Set(p *radius.Packet, value SGUserGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 19, a)
}

func SGUserGroup_Del(p *radius.Packet) {
	_SG_DelVendor(p, 19)
}

type SGMaxAllowedSessions uint32

var SGMaxAllowedSessions_Strings = map[SGMaxAllowedSessions]string{}

func (a SGMaxAllowedSessions) String() string {
	if str, ok := SGMaxAllowedSessions_Strings[a]; ok {
		return str
	}
	return "SGMaxAllowedSessions(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGMaxAllowedSessions_Add(p *radius.Packet, value SGMaxAllowedSessions) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 20, a)
}

func SGMaxAllowedSessions_Get(p *radius.Packet) (value SGMaxAllowedSessions) {
	value, _ = SGMaxAllowedSessions_Lookup(p)
	return
}

func SGMaxAllowedSessions_Gets(p *radius.Packet) (values []SGMaxAllowedSessions, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 20) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGMaxAllowedSessions(i))
	}
	return
}

func SGMaxAllowedSessions_Lookup(p *radius.Packet) (value SGMaxAllowedSessions, err error) {
	a, ok := _SG_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGMaxAllowedSessions(i)
	return
}

func SGMaxAllowedSessions_Set(p *radius.Packet, value SGMaxAllowedSessions) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 20, a)
}

func SGMaxAllowedSessions_Del(p *radius.Packet) {
	_SG_DelVendor(p, 20)
}

func SGClass_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 21, a)
}

func SGClass_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 21, a)
}

func SGClass_Get(p *radius.Packet) (value []byte) {
	value, _ = SGClass_Lookup(p)
	return
}

func SGClass_GetString(p *radius.Packet) (value string) {
	value, _ = SGClass_LookupString(p)
	return
}

func SGClass_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 21) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGClass_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 21) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGClass_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGClass_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGClass_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 21, a)
}

func SGClass_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 21, a)
}

func SGClass_Del(p *radius.Packet) {
	_SG_DelVendor(p, 21)
}

func SGEdsEncKey_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 22, a)
}

func SGEdsEncKey_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 22, a)
}

func SGEdsEncKey_Get(p *radius.Packet) (value []byte) {
	value, _ = SGEdsEncKey_Lookup(p)
	return
}

func SGEdsEncKey_GetString(p *radius.Packet) (value string) {
	value, _ = SGEdsEncKey_LookupString(p)
	return
}

func SGEdsEncKey_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 22) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGEdsEncKey_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 22) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGEdsEncKey_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGEdsEncKey_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGEdsEncKey_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 22, a)
}

func SGEdsEncKey_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 22, a)
}

func SGEdsEncKey_Del(p *radius.Packet) {
	_SG_DelVendor(p, 22)
}

func SGEdsCookie_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 23, a)
}

func SGEdsCookie_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 23, a)
}

func SGEdsCookie_Get(p *radius.Packet) (value []byte) {
	value, _ = SGEdsCookie_Lookup(p)
	return
}

func SGEdsCookie_GetString(p *radius.Packet) (value string) {
	value, _ = SGEdsCookie_LookupString(p)
	return
}

func SGEdsCookie_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 23) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGEdsCookie_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 23) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGEdsCookie_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGEdsCookie_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGEdsCookie_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 23, a)
}

func SGEdsCookie_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 23, a)
}

func SGEdsCookie_Del(p *radius.Packet) {
	_SG_DelVendor(p, 23)
}

func SGOriginalURLPrefix_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 24, a)
}

func SGOriginalURLPrefix_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 24, a)
}

func SGOriginalURLPrefix_Get(p *radius.Packet) (value []byte) {
	value, _ = SGOriginalURLPrefix_Lookup(p)
	return
}

func SGOriginalURLPrefix_GetString(p *radius.Packet) (value string) {
	value, _ = SGOriginalURLPrefix_LookupString(p)
	return
}

func SGOriginalURLPrefix_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 24) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGOriginalURLPrefix_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 24) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGOriginalURLPrefix_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGOriginalURLPrefix_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGOriginalURLPrefix_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 24, a)
}

func SGOriginalURLPrefix_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 24, a)
}

func SGOriginalURLPrefix_Del(p *radius.Packet) {
	_SG_DelVendor(p, 24)
}

type SGMaxAllowedNodes uint32

var SGMaxAllowedNodes_Strings = map[SGMaxAllowedNodes]string{}

func (a SGMaxAllowedNodes) String() string {
	if str, ok := SGMaxAllowedNodes_Strings[a]; ok {
		return str
	}
	return "SGMaxAllowedNodes(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGMaxAllowedNodes_Add(p *radius.Packet, value SGMaxAllowedNodes) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 25, a)
}

func SGMaxAllowedNodes_Get(p *radius.Packet) (value SGMaxAllowedNodes) {
	value, _ = SGMaxAllowedNodes_Lookup(p)
	return
}

func SGMaxAllowedNodes_Gets(p *radius.Packet) (values []SGMaxAllowedNodes, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 25) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGMaxAllowedNodes(i))
	}
	return
}

func SGMaxAllowedNodes_Lookup(p *radius.Packet) (value SGMaxAllowedNodes, err error) {
	a, ok := _SG_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGMaxAllowedNodes(i)
	return
}

func SGMaxAllowedNodes_Set(p *radius.Packet, value SGMaxAllowedNodes) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 25, a)
}

func SGMaxAllowedNodes_Del(p *radius.Packet) {
	_SG_DelVendor(p, 25)
}

func SGParentUserName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 26, a)
}

func SGParentUserName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 26, a)
}

func SGParentUserName_Get(p *radius.Packet) (value []byte) {
	value, _ = SGParentUserName_Lookup(p)
	return
}

func SGParentUserName_GetString(p *radius.Packet) (value string) {
	value, _ = SGParentUserName_LookupString(p)
	return
}

func SGParentUserName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 26) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGParentUserName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 26) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGParentUserName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGParentUserName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGParentUserName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 26, a)
}

func SGParentUserName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 26, a)
}

func SGParentUserName_Del(p *radius.Packet) {
	_SG_DelVendor(p, 26)
}

type SGNodeGroup uint32

var SGNodeGroup_Strings = map[SGNodeGroup]string{}

func (a SGNodeGroup) String() string {
	if str, ok := SGNodeGroup_Strings[a]; ok {
		return str
	}
	return "SGNodeGroup(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGNodeGroup_Add(p *radius.Packet, value SGNodeGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 27, a)
}

func SGNodeGroup_Get(p *radius.Packet) (value SGNodeGroup) {
	value, _ = SGNodeGroup_Lookup(p)
	return
}

func SGNodeGroup_Gets(p *radius.Packet) (values []SGNodeGroup, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 27) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGNodeGroup(i))
	}
	return
}

func SGNodeGroup_Lookup(p *radius.Packet) (value SGNodeGroup, err error) {
	a, ok := _SG_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGNodeGroup(i)
	return
}

func SGNodeGroup_Set(p *radius.Packet, value SGNodeGroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 27, a)
}

func SGNodeGroup_Del(p *radius.Packet) {
	_SG_DelVendor(p, 27)
}

func SGNodeDefaultService_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 28, a)
}

func SGNodeDefaultService_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 28, a)
}

func SGNodeDefaultService_Get(p *radius.Packet) (value []byte) {
	value, _ = SGNodeDefaultService_Lookup(p)
	return
}

func SGNodeDefaultService_GetString(p *radius.Packet) (value string) {
	value, _ = SGNodeDefaultService_LookupString(p)
	return
}

func SGNodeDefaultService_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 28) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGNodeDefaultService_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 28) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGNodeDefaultService_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGNodeDefaultService_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGNodeDefaultService_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 28, a)
}

func SGNodeDefaultService_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 28, a)
}

func SGNodeDefaultService_Del(p *radius.Packet) {
	_SG_DelVendor(p, 28)
}

func SGNodeDynamicService_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 29, a)
}

func SGNodeDynamicService_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 29, a)
}

func SGNodeDynamicService_Get(p *radius.Packet) (value []byte) {
	value, _ = SGNodeDynamicService_Lookup(p)
	return
}

func SGNodeDynamicService_GetString(p *radius.Packet) (value string) {
	value, _ = SGNodeDynamicService_LookupString(p)
	return
}

func SGNodeDynamicService_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 29) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGNodeDynamicService_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 29) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGNodeDynamicService_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGNodeDynamicService_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGNodeDynamicService_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 29, a)
}

func SGNodeDynamicService_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 29, a)
}

func SGNodeDynamicService_Del(p *radius.Packet) {
	_SG_DelVendor(p, 29)
}

func SGDhcpServer_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 30, a)
}

func SGDhcpServer_Get(p *radius.Packet) (value net.IP) {
	value, _ = SGDhcpServer_Lookup(p)
	return
}

func SGDhcpServer_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _SG_GetsVendor(p, 30) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGDhcpServer_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _SG_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func SGDhcpServer_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 30, a)
}

func SGDhcpServer_Del(p *radius.Packet) {
	_SG_DelVendor(p, 30)
}

func SGOpt82RelayRemoteID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 31, a)
}

func SGOpt82RelayRemoteID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 31, a)
}

func SGOpt82RelayRemoteID_Get(p *radius.Packet) (value []byte) {
	value, _ = SGOpt82RelayRemoteID_Lookup(p)
	return
}

func SGOpt82RelayRemoteID_GetString(p *radius.Packet) (value string) {
	value, _ = SGOpt82RelayRemoteID_LookupString(p)
	return
}

func SGOpt82RelayRemoteID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 31) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGOpt82RelayRemoteID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 31) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGOpt82RelayRemoteID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGOpt82RelayRemoteID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGOpt82RelayRemoteID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 31, a)
}

func SGOpt82RelayRemoteID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 31, a)
}

func SGOpt82RelayRemoteID_Del(p *radius.Packet) {
	_SG_DelVendor(p, 31)
}

type SGDiscoverAction uint32

const (
	SGDiscoverAction_Value_Normal      SGDiscoverAction = 1
	SGDiscoverAction_Value_Update      SGDiscoverAction = 2
	SGDiscoverAction_Value_PassThrough SGDiscoverAction = 3
)

var SGDiscoverAction_Strings = map[SGDiscoverAction]string{
	SGDiscoverAction_Value_Normal:      "Normal",
	SGDiscoverAction_Value_Update:      "Update",
	SGDiscoverAction_Value_PassThrough: "Pass-Through",
}

func (a SGDiscoverAction) String() string {
	if str, ok := SGDiscoverAction_Strings[a]; ok {
		return str
	}
	return "SGDiscoverAction(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGDiscoverAction_Add(p *radius.Packet, value SGDiscoverAction) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 32, a)
}

func SGDiscoverAction_Get(p *radius.Packet) (value SGDiscoverAction) {
	value, _ = SGDiscoverAction_Lookup(p)
	return
}

func SGDiscoverAction_Gets(p *radius.Packet) (values []SGDiscoverAction, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 32) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGDiscoverAction(i))
	}
	return
}

func SGDiscoverAction_Lookup(p *radius.Packet) (value SGDiscoverAction, err error) {
	a, ok := _SG_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGDiscoverAction(i)
	return
}

func SGDiscoverAction_Set(p *radius.Packet, value SGDiscoverAction) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 32, a)
}

func SGDiscoverAction_Del(p *radius.Packet) {
	_SG_DelVendor(p, 32)
}

type SGReleaseAction uint32

const (
	SGReleaseAction_Value_Disconnect SGReleaseAction = 1
	SGReleaseAction_Value_Update     SGReleaseAction = 2
)

var SGReleaseAction_Strings = map[SGReleaseAction]string{
	SGReleaseAction_Value_Disconnect: "Disconnect",
	SGReleaseAction_Value_Update:     "Update",
}

func (a SGReleaseAction) String() string {
	if str, ok := SGReleaseAction_Strings[a]; ok {
		return str
	}
	return "SGReleaseAction(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGReleaseAction_Add(p *radius.Packet, value SGReleaseAction) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 33, a)
}

func SGReleaseAction_Get(p *radius.Packet) (value SGReleaseAction) {
	value, _ = SGReleaseAction_Lookup(p)
	return
}

func SGReleaseAction_Gets(p *radius.Packet) (values []SGReleaseAction, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 33) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGReleaseAction(i))
	}
	return
}

func SGReleaseAction_Lookup(p *radius.Packet) (value SGReleaseAction, err error) {
	a, ok := _SG_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGReleaseAction(i)
	return
}

func SGReleaseAction_Set(p *radius.Packet, value SGReleaseAction) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 33, a)
}

func SGReleaseAction_Del(p *radius.Packet) {
	_SG_DelVendor(p, 33)
}

func SGFixedIPAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 34, a)
}

func SGFixedIPAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 34, a)
}

func SGFixedIPAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = SGFixedIPAddress_Lookup(p)
	return
}

func SGFixedIPAddress_GetString(p *radius.Packet) (value string) {
	value, _ = SGFixedIPAddress_LookupString(p)
	return
}

func SGFixedIPAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 34) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGFixedIPAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 34) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGFixedIPAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGFixedIPAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGFixedIPAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 34, a)
}

func SGFixedIPAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 34, a)
}

func SGFixedIPAddress_Del(p *radius.Packet) {
	_SG_DelVendor(p, 34)
}

func SGNodeFixedIPAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 35, a)
}

func SGNodeFixedIPAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 35, a)
}

func SGNodeFixedIPAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = SGNodeFixedIPAddress_Lookup(p)
	return
}

func SGNodeFixedIPAddress_GetString(p *radius.Packet) (value string) {
	value, _ = SGNodeFixedIPAddress_LookupString(p)
	return
}

func SGNodeFixedIPAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 35) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGNodeFixedIPAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 35) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGNodeFixedIPAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGNodeFixedIPAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGNodeFixedIPAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 35, a)
}

func SGNodeFixedIPAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 35, a)
}

func SGNodeFixedIPAddress_Del(p *radius.Packet) {
	_SG_DelVendor(p, 35)
}

type SGLeaseTime uint32

var SGLeaseTime_Strings = map[SGLeaseTime]string{}

func (a SGLeaseTime) String() string {
	if str, ok := SGLeaseTime_Strings[a]; ok {
		return str
	}
	return "SGLeaseTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGLeaseTime_Add(p *radius.Packet, value SGLeaseTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 36, a)
}

func SGLeaseTime_Get(p *radius.Packet) (value SGLeaseTime) {
	value, _ = SGLeaseTime_Lookup(p)
	return
}

func SGLeaseTime_Gets(p *radius.Packet) (values []SGLeaseTime, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 36) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGLeaseTime(i))
	}
	return
}

func SGLeaseTime_Lookup(p *radius.Packet) (value SGLeaseTime, err error) {
	a, ok := _SG_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGLeaseTime(i)
	return
}

func SGLeaseTime_Set(p *radius.Packet, value SGLeaseTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 36, a)
}

func SGLeaseTime_Del(p *radius.Packet) {
	_SG_DelVendor(p, 36)
}

type SGProtocolType uint32

const (
	SGProtocolType_Value_MLP  SGProtocolType = 1
	SGProtocolType_Value_ROAM SGProtocolType = 2
)

var SGProtocolType_Strings = map[SGProtocolType]string{
	SGProtocolType_Value_MLP:  "MLP",
	SGProtocolType_Value_ROAM: "ROAM",
}

func (a SGProtocolType) String() string {
	if str, ok := SGProtocolType_Strings[a]; ok {
		return str
	}
	return "SGProtocolType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGProtocolType_Add(p *radius.Packet, value SGProtocolType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 40, a)
}

func SGProtocolType_Get(p *radius.Packet) (value SGProtocolType) {
	value, _ = SGProtocolType_Lookup(p)
	return
}

func SGProtocolType_Gets(p *radius.Packet) (values []SGProtocolType, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 40) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGProtocolType(i))
	}
	return
}

func SGProtocolType_Lookup(p *radius.Packet) (value SGProtocolType, err error) {
	a, ok := _SG_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGProtocolType(i)
	return
}

func SGProtocolType_Set(p *radius.Packet, value SGProtocolType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 40, a)
}

func SGProtocolType_Del(p *radius.Packet) {
	_SG_DelVendor(p, 40)
}

type SGServiceTimeout uint32

var SGServiceTimeout_Strings = map[SGServiceTimeout]string{}

func (a SGServiceTimeout) String() string {
	if str, ok := SGServiceTimeout_Strings[a]; ok {
		return str
	}
	return "SGServiceTimeout(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGServiceTimeout_Add(p *radius.Packet, value SGServiceTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 50, a)
}

func SGServiceTimeout_Get(p *radius.Packet) (value SGServiceTimeout) {
	value, _ = SGServiceTimeout_Lookup(p)
	return
}

func SGServiceTimeout_Gets(p *radius.Packet) (values []SGServiceTimeout, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 50) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGServiceTimeout(i))
	}
	return
}

func SGServiceTimeout_Lookup(p *radius.Packet) (value SGServiceTimeout, err error) {
	a, ok := _SG_LookupVendor(p, 50)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGServiceTimeout(i)
	return
}

func SGServiceTimeout_Set(p *radius.Packet, value SGServiceTimeout) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 50, a)
}

func SGServiceTimeout_Del(p *radius.Packet) {
	_SG_DelVendor(p, 50)
}

func SGNextServiceName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 51, a)
}

func SGNextServiceName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 51, a)
}

func SGNextServiceName_Get(p *radius.Packet) (value []byte) {
	value, _ = SGNextServiceName_Lookup(p)
	return
}

func SGNextServiceName_GetString(p *radius.Packet) (value string) {
	value, _ = SGNextServiceName_LookupString(p)
	return
}

func SGNextServiceName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 51) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGNextServiceName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 51) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGNextServiceName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 51)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGNextServiceName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 51)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGNextServiceName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 51, a)
}

func SGNextServiceName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 51, a)
}

func SGNextServiceName_Del(p *radius.Packet) {
	_SG_DelVendor(p, 51)
}

func SGAutoServiceName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 52, a)
}

func SGAutoServiceName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 52, a)
}

func SGAutoServiceName_Get(p *radius.Packet) (value []byte) {
	value, _ = SGAutoServiceName_Lookup(p)
	return
}

func SGAutoServiceName_GetString(p *radius.Packet) (value string) {
	value, _ = SGAutoServiceName_LookupString(p)
	return
}

func SGAutoServiceName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 52) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGAutoServiceName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 52) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGAutoServiceName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 52)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGAutoServiceName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 52)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGAutoServiceName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 52, a)
}

func SGAutoServiceName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 52, a)
}

func SGAutoServiceName_Del(p *radius.Packet) {
	_SG_DelVendor(p, 52)
}

type SGAuthSource uint32

const (
	SGAuthSource_Value_Service SGAuthSource = 1
	SGAuthSource_Value_User    SGAuthSource = 2
	SGAuthSource_Value_CLI     SGAuthSource = 3
)

var SGAuthSource_Strings = map[SGAuthSource]string{
	SGAuthSource_Value_Service: "Service",
	SGAuthSource_Value_User:    "User",
	SGAuthSource_Value_CLI:     "CLI",
}

func (a SGAuthSource) String() string {
	if str, ok := SGAuthSource_Strings[a]; ok {
		return str
	}
	return "SGAuthSource(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGAuthSource_Add(p *radius.Packet, value SGAuthSource) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 53, a)
}

func SGAuthSource_Get(p *radius.Packet) (value SGAuthSource) {
	value, _ = SGAuthSource_Lookup(p)
	return
}

func SGAuthSource_Gets(p *radius.Packet) (values []SGAuthSource, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 53) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGAuthSource(i))
	}
	return
}

func SGAuthSource_Lookup(p *radius.Packet) (value SGAuthSource, err error) {
	a, ok := _SG_LookupVendor(p, 53)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGAuthSource(i)
	return
}

func SGAuthSource_Set(p *radius.Packet, value SGAuthSource) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 53, a)
}

func SGAuthSource_Del(p *radius.Packet) {
	_SG_DelVendor(p, 53)
}

func SGDataQuota_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 54, a)
}

func SGDataQuota_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 54, a)
}

func SGDataQuota_Get(p *radius.Packet) (value []byte) {
	value, _ = SGDataQuota_Lookup(p)
	return
}

func SGDataQuota_GetString(p *radius.Packet) (value string) {
	value, _ = SGDataQuota_LookupString(p)
	return
}

func SGDataQuota_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 54) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGDataQuota_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 54) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGDataQuota_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 54)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGDataQuota_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 54)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGDataQuota_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 54, a)
}

func SGDataQuota_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 54, a)
}

func SGDataQuota_Del(p *radius.Packet) {
	_SG_DelVendor(p, 54)
}

func SGACLDataQuota_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 55, a)
}

func SGACLDataQuota_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 55, a)
}

func SGACLDataQuota_Get(p *radius.Packet) (value []byte) {
	value, _ = SGACLDataQuota_Lookup(p)
	return
}

func SGACLDataQuota_GetString(p *radius.Packet) (value string) {
	value, _ = SGACLDataQuota_LookupString(p)
	return
}

func SGACLDataQuota_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 55) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLDataQuota_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 55) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLDataQuota_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 55)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGACLDataQuota_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 55)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGACLDataQuota_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 55, a)
}

func SGACLDataQuota_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 55, a)
}

func SGACLDataQuota_Del(p *radius.Packet) {
	_SG_DelVendor(p, 55)
}

type SGServiceCache uint32

const (
	SGServiceCache_Value_Off SGServiceCache = 1
)

var SGServiceCache_Strings = map[SGServiceCache]string{
	SGServiceCache_Value_Off: "Off",
}

func (a SGServiceCache) String() string {
	if str, ok := SGServiceCache_Strings[a]; ok {
		return str
	}
	return "SGServiceCache(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGServiceCache_Add(p *radius.Packet, value SGServiceCache) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 56, a)
}

func SGServiceCache_Get(p *radius.Packet) (value SGServiceCache) {
	value, _ = SGServiceCache_Lookup(p)
	return
}

func SGServiceCache_Gets(p *radius.Packet) (values []SGServiceCache, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 56) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGServiceCache(i))
	}
	return
}

func SGServiceCache_Lookup(p *radius.Packet) (value SGServiceCache, err error) {
	a, ok := _SG_LookupVendor(p, 56)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGServiceCache(i)
	return
}

func SGServiceCache_Set(p *radius.Packet, value SGServiceCache) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 56, a)
}

func SGServiceCache_Del(p *radius.Packet) {
	_SG_DelVendor(p, 56)
}

func SGDataQuotaUsed_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 57, a)
}

func SGDataQuotaUsed_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 57, a)
}

func SGDataQuotaUsed_Get(p *radius.Packet) (value []byte) {
	value, _ = SGDataQuotaUsed_Lookup(p)
	return
}

func SGDataQuotaUsed_GetString(p *radius.Packet) (value string) {
	value, _ = SGDataQuotaUsed_LookupString(p)
	return
}

func SGDataQuotaUsed_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 57) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGDataQuotaUsed_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 57) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGDataQuotaUsed_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 57)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGDataQuotaUsed_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 57)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGDataQuotaUsed_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 57, a)
}

func SGDataQuotaUsed_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 57, a)
}

func SGDataQuotaUsed_Del(p *radius.Packet) {
	_SG_DelVendor(p, 57)
}

func SGACLDataQuotaUsed_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 58, a)
}

func SGACLDataQuotaUsed_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 58, a)
}

func SGACLDataQuotaUsed_Get(p *radius.Packet) (value []byte) {
	value, _ = SGACLDataQuotaUsed_Lookup(p)
	return
}

func SGACLDataQuotaUsed_GetString(p *radius.Packet) (value string) {
	value, _ = SGACLDataQuotaUsed_LookupString(p)
	return
}

func SGACLDataQuotaUsed_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 58) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLDataQuotaUsed_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 58) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLDataQuotaUsed_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 58)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGACLDataQuotaUsed_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 58)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGACLDataQuotaUsed_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 58, a)
}

func SGACLDataQuotaUsed_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 58, a)
}

func SGACLDataQuotaUsed_Del(p *radius.Packet) {
	_SG_DelVendor(p, 58)
}

func SGACLPacketQuota_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 59, a)
}

func SGACLPacketQuota_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 59, a)
}

func SGACLPacketQuota_Get(p *radius.Packet) (value []byte) {
	value, _ = SGACLPacketQuota_Lookup(p)
	return
}

func SGACLPacketQuota_GetString(p *radius.Packet) (value string) {
	value, _ = SGACLPacketQuota_LookupString(p)
	return
}

func SGACLPacketQuota_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 59) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLPacketQuota_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 59) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLPacketQuota_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 59)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGACLPacketQuota_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 59)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGACLPacketQuota_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 59, a)
}

func SGACLPacketQuota_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 59, a)
}

func SGACLPacketQuota_Del(p *radius.Packet) {
	_SG_DelVendor(p, 59)
}

func SGACLPacketQuotaUsed_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 60, a)
}

func SGACLPacketQuotaUsed_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 60, a)
}

func SGACLPacketQuotaUsed_Get(p *radius.Packet) (value []byte) {
	value, _ = SGACLPacketQuotaUsed_Lookup(p)
	return
}

func SGACLPacketQuotaUsed_GetString(p *radius.Packet) (value string) {
	value, _ = SGACLPacketQuotaUsed_LookupString(p)
	return
}

func SGACLPacketQuotaUsed_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 60) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLPacketQuotaUsed_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 60) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLPacketQuotaUsed_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGACLPacketQuotaUsed_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGACLPacketQuotaUsed_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 60, a)
}

func SGACLPacketQuotaUsed_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 60, a)
}

func SGACLPacketQuotaUsed_Del(p *radius.Packet) {
	_SG_DelVendor(p, 60)
}

type SGRoaming uint32

const (
	SGRoaming_Value_Disable SGRoaming = 1
)

var SGRoaming_Strings = map[SGRoaming]string{
	SGRoaming_Value_Disable: "Disable",
}

func (a SGRoaming) String() string {
	if str, ok := SGRoaming_Strings[a]; ok {
		return str
	}
	return "SGRoaming(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGRoaming_Add(p *radius.Packet, value SGRoaming) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 61, a)
}

func SGRoaming_Get(p *radius.Packet) (value SGRoaming) {
	value, _ = SGRoaming_Lookup(p)
	return
}

func SGRoaming_Gets(p *radius.Packet) (values []SGRoaming, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 61) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGRoaming(i))
	}
	return
}

func SGRoaming_Lookup(p *radius.Packet) (value SGRoaming, err error) {
	a, ok := _SG_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGRoaming(i)
	return
}

func SGRoaming_Set(p *radius.Packet, value SGRoaming) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 61, a)
}

func SGRoaming_Del(p *radius.Packet) {
	_SG_DelVendor(p, 61)
}

func SGACLEdsAction_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 62, a)
}

func SGACLEdsAction_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 62, a)
}

func SGACLEdsAction_Get(p *radius.Packet) (value []byte) {
	value, _ = SGACLEdsAction_Lookup(p)
	return
}

func SGACLEdsAction_GetString(p *radius.Packet) (value string) {
	value, _ = SGACLEdsAction_LookupString(p)
	return
}

func SGACLEdsAction_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 62) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLEdsAction_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 62) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLEdsAction_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 62)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGACLEdsAction_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 62)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGACLEdsAction_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 62, a)
}

func SGACLEdsAction_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 62, a)
}

func SGACLEdsAction_Del(p *radius.Packet) {
	_SG_DelVendor(p, 62)
}

func SGACLIdleIgnore_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 63, a)
}

func SGACLIdleIgnore_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 63, a)
}

func SGACLIdleIgnore_Get(p *radius.Packet) (value []byte) {
	value, _ = SGACLIdleIgnore_Lookup(p)
	return
}

func SGACLIdleIgnore_GetString(p *radius.Packet) (value string) {
	value, _ = SGACLIdleIgnore_LookupString(p)
	return
}

func SGACLIdleIgnore_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 63) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLIdleIgnore_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 63) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLIdleIgnore_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGACLIdleIgnore_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGACLIdleIgnore_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 63, a)
}

func SGACLIdleIgnore_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 63, a)
}

func SGACLIdleIgnore_Del(p *radius.Packet) {
	_SG_DelVendor(p, 63)
}

func SGServiceQuotaIgnore_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 65, a)
}

func SGServiceQuotaIgnore_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 65, a)
}

func SGServiceQuotaIgnore_Get(p *radius.Packet) (value []byte) {
	value, _ = SGServiceQuotaIgnore_Lookup(p)
	return
}

func SGServiceQuotaIgnore_GetString(p *radius.Packet) (value string) {
	value, _ = SGServiceQuotaIgnore_LookupString(p)
	return
}

func SGServiceQuotaIgnore_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 65) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGServiceQuotaIgnore_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 65) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGServiceQuotaIgnore_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGServiceQuotaIgnore_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGServiceQuotaIgnore_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 65, a)
}

func SGServiceQuotaIgnore_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 65, a)
}

func SGServiceQuotaIgnore_Del(p *radius.Packet) {
	_SG_DelVendor(p, 65)
}

func SGServiceACLQuotaIgnore_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 66, a)
}

func SGServiceACLQuotaIgnore_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 66, a)
}

func SGServiceACLQuotaIgnore_Get(p *radius.Packet) (value []byte) {
	value, _ = SGServiceACLQuotaIgnore_Lookup(p)
	return
}

func SGServiceACLQuotaIgnore_GetString(p *radius.Packet) (value string) {
	value, _ = SGServiceACLQuotaIgnore_LookupString(p)
	return
}

func SGServiceACLQuotaIgnore_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 66) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGServiceACLQuotaIgnore_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 66) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGServiceACLQuotaIgnore_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 66)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGServiceACLQuotaIgnore_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 66)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGServiceACLQuotaIgnore_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 66, a)
}

func SGServiceACLQuotaIgnore_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 66, a)
}

func SGServiceACLQuotaIgnore_Del(p *radius.Packet) {
	_SG_DelVendor(p, 66)
}

func SGServiceACLQuotaIndication_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 67, a)
}

func SGServiceACLQuotaIndication_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 67, a)
}

func SGServiceACLQuotaIndication_Get(p *radius.Packet) (value []byte) {
	value, _ = SGServiceACLQuotaIndication_Lookup(p)
	return
}

func SGServiceACLQuotaIndication_GetString(p *radius.Packet) (value string) {
	value, _ = SGServiceACLQuotaIndication_LookupString(p)
	return
}

func SGServiceACLQuotaIndication_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 67) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGServiceACLQuotaIndication_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 67) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGServiceACLQuotaIndication_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 67)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGServiceACLQuotaIndication_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 67)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGServiceACLQuotaIndication_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 67, a)
}

func SGServiceACLQuotaIndication_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 67, a)
}

func SGServiceACLQuotaIndication_Del(p *radius.Packet) {
	_SG_DelVendor(p, 67)
}

func SGRemoteFilterRedirectGw_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 70, a)
}

func SGRemoteFilterRedirectGw_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 70, a)
}

func SGRemoteFilterRedirectGw_Get(p *radius.Packet) (value []byte) {
	value, _ = SGRemoteFilterRedirectGw_Lookup(p)
	return
}

func SGRemoteFilterRedirectGw_GetString(p *radius.Packet) (value string) {
	value, _ = SGRemoteFilterRedirectGw_LookupString(p)
	return
}

func SGRemoteFilterRedirectGw_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 70) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGRemoteFilterRedirectGw_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 70) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGRemoteFilterRedirectGw_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 70)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGRemoteFilterRedirectGw_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 70)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGRemoteFilterRedirectGw_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 70, a)
}

func SGRemoteFilterRedirectGw_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 70, a)
}

func SGRemoteFilterRedirectGw_Del(p *radius.Packet) {
	_SG_DelVendor(p, 70)
}

func SGNextHop_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 71, a)
}

func SGNextHop_Get(p *radius.Packet) (value net.IP) {
	value, _ = SGNextHop_Lookup(p)
	return
}

func SGNextHop_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _SG_GetsVendor(p, 71) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGNextHop_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _SG_LookupVendor(p, 71)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func SGNextHop_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 71, a)
}

func SGNextHop_Del(p *radius.Packet) {
	_SG_DelVendor(p, 71)
}

func SGNipPipeNextHop_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 72, a)
}

func SGNipPipeNextHop_Get(p *radius.Packet) (value net.IP) {
	value, _ = SGNipPipeNextHop_Lookup(p)
	return
}

func SGNipPipeNextHop_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _SG_GetsVendor(p, 72) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGNipPipeNextHop_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _SG_LookupVendor(p, 72)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func SGNipPipeNextHop_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 72, a)
}

func SGNipPipeNextHop_Del(p *radius.Packet) {
	_SG_DelVendor(p, 72)
}

type SGAdvertiseProtocol uint32

const (
	SGAdvertiseProtocol_Value_RIPv2 SGAdvertiseProtocol = 1
	SGAdvertiseProtocol_Value_OSPF  SGAdvertiseProtocol = 2
)

var SGAdvertiseProtocol_Strings = map[SGAdvertiseProtocol]string{
	SGAdvertiseProtocol_Value_RIPv2: "RIPv2",
	SGAdvertiseProtocol_Value_OSPF:  "OSPF",
}

func (a SGAdvertiseProtocol) String() string {
	if str, ok := SGAdvertiseProtocol_Strings[a]; ok {
		return str
	}
	return "SGAdvertiseProtocol(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGAdvertiseProtocol_Add(p *radius.Packet, value SGAdvertiseProtocol) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 73, a)
}

func SGAdvertiseProtocol_Get(p *radius.Packet) (value SGAdvertiseProtocol) {
	value, _ = SGAdvertiseProtocol_Lookup(p)
	return
}

func SGAdvertiseProtocol_Gets(p *radius.Packet) (values []SGAdvertiseProtocol, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 73) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGAdvertiseProtocol(i))
	}
	return
}

func SGAdvertiseProtocol_Lookup(p *radius.Packet) (value SGAdvertiseProtocol, err error) {
	a, ok := _SG_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGAdvertiseProtocol(i)
	return
}

func SGAdvertiseProtocol_Set(p *radius.Packet, value SGAdvertiseProtocol) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 73, a)
}

func SGAdvertiseProtocol_Del(p *radius.Packet) {
	_SG_DelVendor(p, 73)
}

func SGForwardAddr_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 74, a)
}

func SGForwardAddr_Get(p *radius.Packet) (value net.IP) {
	value, _ = SGForwardAddr_Lookup(p)
	return
}

func SGForwardAddr_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _SG_GetsVendor(p, 74) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGForwardAddr_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _SG_LookupVendor(p, 74)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func SGForwardAddr_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 74, a)
}

func SGForwardAddr_Del(p *radius.Packet) {
	_SG_DelVendor(p, 74)
}

func SGACLTCPNatRedirect_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 75, a)
}

func SGACLTCPNatRedirect_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 75, a)
}

func SGACLTCPNatRedirect_Get(p *radius.Packet) (value []byte) {
	value, _ = SGACLTCPNatRedirect_Lookup(p)
	return
}

func SGACLTCPNatRedirect_GetString(p *radius.Packet) (value string) {
	value, _ = SGACLTCPNatRedirect_LookupString(p)
	return
}

func SGACLTCPNatRedirect_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 75) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLTCPNatRedirect_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 75) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLTCPNatRedirect_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 75)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGACLTCPNatRedirect_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 75)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGACLTCPNatRedirect_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 75, a)
}

func SGACLTCPNatRedirect_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 75, a)
}

func SGACLTCPNatRedirect_Del(p *radius.Packet) {
	_SG_DelVendor(p, 75)
}

func SGACLNextHop_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 76, a)
}

func SGACLNextHop_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 76, a)
}

func SGACLNextHop_Get(p *radius.Packet) (value []byte) {
	value, _ = SGACLNextHop_Lookup(p)
	return
}

func SGACLNextHop_GetString(p *radius.Packet) (value string) {
	value, _ = SGACLNextHop_LookupString(p)
	return
}

func SGACLNextHop_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 76) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLNextHop_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 76) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLNextHop_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 76)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGACLNextHop_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 76)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGACLNextHop_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 76, a)
}

func SGACLNextHop_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 76, a)
}

func SGACLNextHop_Del(p *radius.Packet) {
	_SG_DelVendor(p, 76)
}

func SGTunnelID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 80, a)
}

func SGTunnelID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 80, a)
}

func SGTunnelID_Get(p *radius.Packet) (value []byte) {
	value, _ = SGTunnelID_Lookup(p)
	return
}

func SGTunnelID_GetString(p *radius.Packet) (value string) {
	value, _ = SGTunnelID_LookupString(p)
	return
}

func SGTunnelID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 80) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGTunnelID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 80) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGTunnelID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 80)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGTunnelID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 80)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGTunnelID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 80, a)
}

func SGTunnelID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 80, a)
}

func SGTunnelID_Del(p *radius.Packet) {
	_SG_DelVendor(p, 80)
}

func SGL2tpTunnelPassword_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 81, a)
}

func SGL2tpTunnelPassword_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 81, a)
}

func SGL2tpTunnelPassword_Get(p *radius.Packet) (value []byte) {
	value, _ = SGL2tpTunnelPassword_Lookup(p)
	return
}

func SGL2tpTunnelPassword_GetString(p *radius.Packet) (value string) {
	value, _ = SGL2tpTunnelPassword_LookupString(p)
	return
}

func SGL2tpTunnelPassword_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 81) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGL2tpTunnelPassword_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 81) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGL2tpTunnelPassword_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 81)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGL2tpTunnelPassword_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 81)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGL2tpTunnelPassword_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 81, a)
}

func SGL2tpTunnelPassword_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 81, a)
}

func SGL2tpTunnelPassword_Del(p *radius.Packet) {
	_SG_DelVendor(p, 81)
}

func SGIPAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 82, a)
}

func SGIPAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 82, a)
}

func SGIPAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = SGIPAddress_Lookup(p)
	return
}

func SGIPAddress_GetString(p *radius.Packet) (value string) {
	value, _ = SGIPAddress_LookupString(p)
	return
}

func SGIPAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 82) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGIPAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 82) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGIPAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGIPAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 82)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGIPAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 82, a)
}

func SGIPAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 82, a)
}

func SGIPAddress_Del(p *radius.Packet) {
	_SG_DelVendor(p, 82)
}

type SGTunnelAssignmentID uint32

var SGTunnelAssignmentID_Strings = map[SGTunnelAssignmentID]string{}

func (a SGTunnelAssignmentID) String() string {
	if str, ok := SGTunnelAssignmentID_Strings[a]; ok {
		return str
	}
	return "SGTunnelAssignmentID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGTunnelAssignmentID_Add(p *radius.Packet, value SGTunnelAssignmentID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 83, a)
}

func SGTunnelAssignmentID_Get(p *radius.Packet) (value SGTunnelAssignmentID) {
	value, _ = SGTunnelAssignmentID_Lookup(p)
	return
}

func SGTunnelAssignmentID_Gets(p *radius.Packet) (values []SGTunnelAssignmentID, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 83) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGTunnelAssignmentID(i))
	}
	return
}

func SGTunnelAssignmentID_Lookup(p *radius.Packet) (value SGTunnelAssignmentID, err error) {
	a, ok := _SG_LookupVendor(p, 83)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGTunnelAssignmentID(i)
	return
}

func SGTunnelAssignmentID_Set(p *radius.Packet, value SGTunnelAssignmentID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 83, a)
}

func SGTunnelAssignmentID_Del(p *radius.Packet) {
	_SG_DelVendor(p, 83)
}

func SGTunnelClientIPAddress_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 84, a)
}

func SGTunnelClientIPAddress_Get(p *radius.Packet) (value net.IP) {
	value, _ = SGTunnelClientIPAddress_Lookup(p)
	return
}

func SGTunnelClientIPAddress_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _SG_GetsVendor(p, 84) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGTunnelClientIPAddress_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _SG_LookupVendor(p, 84)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func SGTunnelClientIPAddress_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 84, a)
}

func SGTunnelClientIPAddress_Del(p *radius.Packet) {
	_SG_DelVendor(p, 84)
}

type SGNativeip uint32

const (
	SGNativeip_Value_PPP SGNativeip = 1
)

var SGNativeip_Strings = map[SGNativeip]string{
	SGNativeip_Value_PPP: "PPP",
}

func (a SGNativeip) String() string {
	if str, ok := SGNativeip_Strings[a]; ok {
		return str
	}
	return "SGNativeip(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGNativeip_Add(p *radius.Packet, value SGNativeip) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 85, a)
}

func SGNativeip_Get(p *radius.Packet) (value SGNativeip) {
	value, _ = SGNativeip_Lookup(p)
	return
}

func SGNativeip_Gets(p *radius.Packet) (values []SGNativeip, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 85) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGNativeip(i))
	}
	return
}

func SGNativeip_Lookup(p *radius.Packet) (value SGNativeip, err error) {
	a, ok := _SG_LookupVendor(p, 85)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGNativeip(i)
	return
}

func SGNativeip_Set(p *radius.Packet, value SGNativeip) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 85, a)
}

func SGNativeip_Del(p *radius.Packet) {
	_SG_DelVendor(p, 85)
}

func SGIPTunnel_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 86, a)
}

func SGIPTunnel_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 86, a)
}

func SGIPTunnel_Get(p *radius.Packet) (value []byte) {
	value, _ = SGIPTunnel_Lookup(p)
	return
}

func SGIPTunnel_GetString(p *radius.Packet) (value string) {
	value, _ = SGIPTunnel_LookupString(p)
	return
}

func SGIPTunnel_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 86) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGIPTunnel_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 86) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGIPTunnel_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 86)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGIPTunnel_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 86)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGIPTunnel_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 86, a)
}

func SGIPTunnel_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 86, a)
}

func SGIPTunnel_Del(p *radius.Packet) {
	_SG_DelVendor(p, 86)
}

func SGUpMeanRate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 90, a)
}

func SGUpMeanRate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 90, a)
}

func SGUpMeanRate_Get(p *radius.Packet) (value []byte) {
	value, _ = SGUpMeanRate_Lookup(p)
	return
}

func SGUpMeanRate_GetString(p *radius.Packet) (value string) {
	value, _ = SGUpMeanRate_LookupString(p)
	return
}

func SGUpMeanRate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 90) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGUpMeanRate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 90) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGUpMeanRate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 90)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGUpMeanRate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 90)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGUpMeanRate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 90, a)
}

func SGUpMeanRate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 90, a)
}

func SGUpMeanRate_Del(p *radius.Packet) {
	_SG_DelVendor(p, 90)
}

func SGDownMeanRate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 91, a)
}

func SGDownMeanRate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 91, a)
}

func SGDownMeanRate_Get(p *radius.Packet) (value []byte) {
	value, _ = SGDownMeanRate_Lookup(p)
	return
}

func SGDownMeanRate_GetString(p *radius.Packet) (value string) {
	value, _ = SGDownMeanRate_LookupString(p)
	return
}

func SGDownMeanRate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 91) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGDownMeanRate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 91) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGDownMeanRate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGDownMeanRate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 91)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGDownMeanRate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 91, a)
}

func SGDownMeanRate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 91, a)
}

func SGDownMeanRate_Del(p *radius.Packet) {
	_SG_DelVendor(p, 91)
}

func SGACLUpMeanRate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 92, a)
}

func SGACLUpMeanRate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 92, a)
}

func SGACLUpMeanRate_Get(p *radius.Packet) (value []byte) {
	value, _ = SGACLUpMeanRate_Lookup(p)
	return
}

func SGACLUpMeanRate_GetString(p *radius.Packet) (value string) {
	value, _ = SGACLUpMeanRate_LookupString(p)
	return
}

func SGACLUpMeanRate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 92) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLUpMeanRate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 92) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLUpMeanRate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 92)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGACLUpMeanRate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 92)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGACLUpMeanRate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 92, a)
}

func SGACLUpMeanRate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 92, a)
}

func SGACLUpMeanRate_Del(p *radius.Packet) {
	_SG_DelVendor(p, 92)
}

func SGACLDownMeanRate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 93, a)
}

func SGACLDownMeanRate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 93, a)
}

func SGACLDownMeanRate_Get(p *radius.Packet) (value []byte) {
	value, _ = SGACLDownMeanRate_Lookup(p)
	return
}

func SGACLDownMeanRate_GetString(p *radius.Packet) (value string) {
	value, _ = SGACLDownMeanRate_LookupString(p)
	return
}

func SGACLDownMeanRate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 93) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLDownMeanRate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 93) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLDownMeanRate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 93)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGACLDownMeanRate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 93)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGACLDownMeanRate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 93, a)
}

func SGACLDownMeanRate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 93, a)
}

func SGACLDownMeanRate_Del(p *radius.Packet) {
	_SG_DelVendor(p, 93)
}

func SGCos_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 94, a)
}

func SGCos_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 94, a)
}

func SGCos_Get(p *radius.Packet) (value []byte) {
	value, _ = SGCos_Lookup(p)
	return
}

func SGCos_GetString(p *radius.Packet) (value string) {
	value, _ = SGCos_LookupString(p)
	return
}

func SGCos_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 94) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGCos_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 94) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGCos_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 94)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGCos_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 94)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGCos_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 94, a)
}

func SGCos_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 94, a)
}

func SGCos_Del(p *radius.Packet) {
	_SG_DelVendor(p, 94)
}

func SGACLPriority_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 95, a)
}

func SGACLPriority_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 95, a)
}

func SGACLPriority_Get(p *radius.Packet) (value []byte) {
	value, _ = SGACLPriority_Lookup(p)
	return
}

func SGACLPriority_GetString(p *radius.Packet) (value string) {
	value, _ = SGACLPriority_LookupString(p)
	return
}

func SGACLPriority_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 95) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLPriority_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 95) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGACLPriority_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 95)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGACLPriority_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 95)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGACLPriority_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 95, a)
}

func SGACLPriority_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 95, a)
}

func SGACLPriority_Del(p *radius.Packet) {
	_SG_DelVendor(p, 95)
}

type SGBurstSize uint32

var SGBurstSize_Strings = map[SGBurstSize]string{}

func (a SGBurstSize) String() string {
	if str, ok := SGBurstSize_Strings[a]; ok {
		return str
	}
	return "SGBurstSize(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGBurstSize_Add(p *radius.Packet, value SGBurstSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 96, a)
}

func SGBurstSize_Get(p *radius.Packet) (value SGBurstSize) {
	value, _ = SGBurstSize_Lookup(p)
	return
}

func SGBurstSize_Gets(p *radius.Packet) (values []SGBurstSize, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 96) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGBurstSize(i))
	}
	return
}

func SGBurstSize_Lookup(p *radius.Packet) (value SGBurstSize, err error) {
	a, ok := _SG_LookupVendor(p, 96)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGBurstSize(i)
	return
}

func SGBurstSize_Set(p *radius.Packet, value SGBurstSize) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 96, a)
}

func SGBurstSize_Del(p *radius.Packet) {
	_SG_DelVendor(p, 96)
}

func SGIPPrimary_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 100, a)
}

func SGIPPrimary_Get(p *radius.Packet) (value net.IP) {
	value, _ = SGIPPrimary_Lookup(p)
	return
}

func SGIPPrimary_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _SG_GetsVendor(p, 100) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGIPPrimary_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _SG_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func SGIPPrimary_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 100, a)
}

func SGIPPrimary_Del(p *radius.Packet) {
	_SG_DelVendor(p, 100)
}

func SGIPSecondary_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 101, a)
}

func SGIPSecondary_Get(p *radius.Packet) (value net.IP) {
	value, _ = SGIPSecondary_Lookup(p)
	return
}

func SGIPSecondary_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _SG_GetsVendor(p, 101) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGIPSecondary_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _SG_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func SGIPSecondary_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 101, a)
}

func SGIPSecondary_Del(p *radius.Packet) {
	_SG_DelVendor(p, 101)
}

type SGWimaxReducedResources uint32

const (
	SGWimaxReducedResources_Value_Enable  SGWimaxReducedResources = 1
	SGWimaxReducedResources_Value_Disable SGWimaxReducedResources = 2
)

var SGWimaxReducedResources_Strings = map[SGWimaxReducedResources]string{
	SGWimaxReducedResources_Value_Enable:  "Enable",
	SGWimaxReducedResources_Value_Disable: "Disable",
}

func (a SGWimaxReducedResources) String() string {
	if str, ok := SGWimaxReducedResources_Strings[a]; ok {
		return str
	}
	return "SGWimaxReducedResources(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGWimaxReducedResources_Add(p *radius.Packet, value SGWimaxReducedResources) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 110, a)
}

func SGWimaxReducedResources_Get(p *radius.Packet) (value SGWimaxReducedResources) {
	value, _ = SGWimaxReducedResources_Lookup(p)
	return
}

func SGWimaxReducedResources_Gets(p *radius.Packet) (values []SGWimaxReducedResources, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 110) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGWimaxReducedResources(i))
	}
	return
}

func SGWimaxReducedResources_Lookup(p *radius.Packet) (value SGWimaxReducedResources, err error) {
	a, ok := _SG_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGWimaxReducedResources(i)
	return
}

func SGWimaxReducedResources_Set(p *radius.Packet, value SGWimaxReducedResources) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 110, a)
}

func SGWimaxReducedResources_Del(p *radius.Packet) {
	_SG_DelVendor(p, 110)
}

func SGWimaxACLScheduleType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 111, a)
}

func SGWimaxACLScheduleType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 111, a)
}

func SGWimaxACLScheduleType_Get(p *radius.Packet) (value []byte) {
	value, _ = SGWimaxACLScheduleType_Lookup(p)
	return
}

func SGWimaxACLScheduleType_GetString(p *radius.Packet) (value string) {
	value, _ = SGWimaxACLScheduleType_LookupString(p)
	return
}

func SGWimaxACLScheduleType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 111) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGWimaxACLScheduleType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 111) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGWimaxACLScheduleType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGWimaxACLScheduleType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGWimaxACLScheduleType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 111, a)
}

func SGWimaxACLScheduleType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 111, a)
}

func SGWimaxACLScheduleType_Del(p *radius.Packet) {
	_SG_DelVendor(p, 111)
}

func SGWimaxACLMinReservedTrafficRate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 112, a)
}

func SGWimaxACLMinReservedTrafficRate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 112, a)
}

func SGWimaxACLMinReservedTrafficRate_Get(p *radius.Packet) (value []byte) {
	value, _ = SGWimaxACLMinReservedTrafficRate_Lookup(p)
	return
}

func SGWimaxACLMinReservedTrafficRate_GetString(p *radius.Packet) (value string) {
	value, _ = SGWimaxACLMinReservedTrafficRate_LookupString(p)
	return
}

func SGWimaxACLMinReservedTrafficRate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 112) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGWimaxACLMinReservedTrafficRate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 112) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGWimaxACLMinReservedTrafficRate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGWimaxACLMinReservedTrafficRate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGWimaxACLMinReservedTrafficRate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 112, a)
}

func SGWimaxACLMinReservedTrafficRate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 112, a)
}

func SGWimaxACLMinReservedTrafficRate_Del(p *radius.Packet) {
	_SG_DelVendor(p, 112)
}

func SGWimaxACLMaximumTrafficBurst_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 113, a)
}

func SGWimaxACLMaximumTrafficBurst_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 113, a)
}

func SGWimaxACLMaximumTrafficBurst_Get(p *radius.Packet) (value []byte) {
	value, _ = SGWimaxACLMaximumTrafficBurst_Lookup(p)
	return
}

func SGWimaxACLMaximumTrafficBurst_GetString(p *radius.Packet) (value string) {
	value, _ = SGWimaxACLMaximumTrafficBurst_LookupString(p)
	return
}

func SGWimaxACLMaximumTrafficBurst_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 113) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGWimaxACLMaximumTrafficBurst_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 113) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGWimaxACLMaximumTrafficBurst_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGWimaxACLMaximumTrafficBurst_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGWimaxACLMaximumTrafficBurst_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 113, a)
}

func SGWimaxACLMaximumTrafficBurst_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 113, a)
}

func SGWimaxACLMaximumTrafficBurst_Del(p *radius.Packet) {
	_SG_DelVendor(p, 113)
}

func SGWimaxACLToleratedJitter_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 114, a)
}

func SGWimaxACLToleratedJitter_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 114, a)
}

func SGWimaxACLToleratedJitter_Get(p *radius.Packet) (value []byte) {
	value, _ = SGWimaxACLToleratedJitter_Lookup(p)
	return
}

func SGWimaxACLToleratedJitter_GetString(p *radius.Packet) (value string) {
	value, _ = SGWimaxACLToleratedJitter_LookupString(p)
	return
}

func SGWimaxACLToleratedJitter_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 114) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGWimaxACLToleratedJitter_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 114) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGWimaxACLToleratedJitter_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGWimaxACLToleratedJitter_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGWimaxACLToleratedJitter_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 114, a)
}

func SGWimaxACLToleratedJitter_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 114, a)
}

func SGWimaxACLToleratedJitter_Del(p *radius.Packet) {
	_SG_DelVendor(p, 114)
}

func SGWimaxACLMaximumLatency_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 115, a)
}

func SGWimaxACLMaximumLatency_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 115, a)
}

func SGWimaxACLMaximumLatency_Get(p *radius.Packet) (value []byte) {
	value, _ = SGWimaxACLMaximumLatency_Lookup(p)
	return
}

func SGWimaxACLMaximumLatency_GetString(p *radius.Packet) (value string) {
	value, _ = SGWimaxACLMaximumLatency_LookupString(p)
	return
}

func SGWimaxACLMaximumLatency_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 115) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGWimaxACLMaximumLatency_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 115) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGWimaxACLMaximumLatency_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 115)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGWimaxACLMaximumLatency_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 115)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGWimaxACLMaximumLatency_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 115, a)
}

func SGWimaxACLMaximumLatency_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 115, a)
}

func SGWimaxACLMaximumLatency_Del(p *radius.Packet) {
	_SG_DelVendor(p, 115)
}

func SGWimaxACLUnsolicitedGrantInt_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 116, a)
}

func SGWimaxACLUnsolicitedGrantInt_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 116, a)
}

func SGWimaxACLUnsolicitedGrantInt_Get(p *radius.Packet) (value []byte) {
	value, _ = SGWimaxACLUnsolicitedGrantInt_Lookup(p)
	return
}

func SGWimaxACLUnsolicitedGrantInt_GetString(p *radius.Packet) (value string) {
	value, _ = SGWimaxACLUnsolicitedGrantInt_LookupString(p)
	return
}

func SGWimaxACLUnsolicitedGrantInt_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 116) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGWimaxACLUnsolicitedGrantInt_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 116) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGWimaxACLUnsolicitedGrantInt_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 116)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGWimaxACLUnsolicitedGrantInt_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 116)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGWimaxACLUnsolicitedGrantInt_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 116, a)
}

func SGWimaxACLUnsolicitedGrantInt_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 116, a)
}

func SGWimaxACLUnsolicitedGrantInt_Del(p *radius.Packet) {
	_SG_DelVendor(p, 116)
}

func SGWimaxACLSduSize_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 117, a)
}

func SGWimaxACLSduSize_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 117, a)
}

func SGWimaxACLSduSize_Get(p *radius.Packet) (value []byte) {
	value, _ = SGWimaxACLSduSize_Lookup(p)
	return
}

func SGWimaxACLSduSize_GetString(p *radius.Packet) (value string) {
	value, _ = SGWimaxACLSduSize_LookupString(p)
	return
}

func SGWimaxACLSduSize_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 117) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGWimaxACLSduSize_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 117) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGWimaxACLSduSize_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 117)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGWimaxACLSduSize_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 117)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGWimaxACLSduSize_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 117, a)
}

func SGWimaxACLSduSize_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 117, a)
}

func SGWimaxACLSduSize_Del(p *radius.Packet) {
	_SG_DelVendor(p, 117)
}

func SGWimaxACLUnsolicitedPollingInt_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 118, a)
}

func SGWimaxACLUnsolicitedPollingInt_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 118, a)
}

func SGWimaxACLUnsolicitedPollingInt_Get(p *radius.Packet) (value []byte) {
	value, _ = SGWimaxACLUnsolicitedPollingInt_Lookup(p)
	return
}

func SGWimaxACLUnsolicitedPollingInt_GetString(p *radius.Packet) (value string) {
	value, _ = SGWimaxACLUnsolicitedPollingInt_LookupString(p)
	return
}

func SGWimaxACLUnsolicitedPollingInt_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 118) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGWimaxACLUnsolicitedPollingInt_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 118) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGWimaxACLUnsolicitedPollingInt_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 118)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGWimaxACLUnsolicitedPollingInt_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 118)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGWimaxACLUnsolicitedPollingInt_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 118, a)
}

func SGWimaxACLUnsolicitedPollingInt_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 118, a)
}

func SGWimaxACLUnsolicitedPollingInt_Del(p *radius.Packet) {
	_SG_DelVendor(p, 118)
}

type SGWimaxMSKLifetime uint32

var SGWimaxMSKLifetime_Strings = map[SGWimaxMSKLifetime]string{}

func (a SGWimaxMSKLifetime) String() string {
	if str, ok := SGWimaxMSKLifetime_Strings[a]; ok {
		return str
	}
	return "SGWimaxMSKLifetime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGWimaxMSKLifetime_Add(p *radius.Packet, value SGWimaxMSKLifetime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 119, a)
}

func SGWimaxMSKLifetime_Get(p *radius.Packet) (value SGWimaxMSKLifetime) {
	value, _ = SGWimaxMSKLifetime_Lookup(p)
	return
}

func SGWimaxMSKLifetime_Gets(p *radius.Packet) (values []SGWimaxMSKLifetime, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 119) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGWimaxMSKLifetime(i))
	}
	return
}

func SGWimaxMSKLifetime_Lookup(p *radius.Packet) (value SGWimaxMSKLifetime, err error) {
	a, ok := _SG_LookupVendor(p, 119)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGWimaxMSKLifetime(i)
	return
}

func SGWimaxMSKLifetime_Set(p *radius.Packet, value SGWimaxMSKLifetime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 119, a)
}

func SGWimaxMSKLifetime_Del(p *radius.Packet) {
	_SG_DelVendor(p, 119)
}

type SGWimaxDMActionCode uint32

const (
	SGWimaxDMActionCode_Value_Idle                   SGWimaxDMActionCode = 5
	SGWimaxDMActionCode_Value_ReconnectDisable       SGWimaxDMActionCode = 4320
	SGWimaxDMActionCode_Value_IdleOnSessionIdle      SGWimaxDMActionCode = 262149
	SGWimaxDMActionCode_Value_ReconnectDisableOnIdle SGWimaxDMActionCode = 266464
)

var SGWimaxDMActionCode_Strings = map[SGWimaxDMActionCode]string{
	SGWimaxDMActionCode_Value_Idle:                   "Idle",
	SGWimaxDMActionCode_Value_ReconnectDisable:       "Reconnect-Disable",
	SGWimaxDMActionCode_Value_IdleOnSessionIdle:      "Idle-On-Session-Idle",
	SGWimaxDMActionCode_Value_ReconnectDisableOnIdle: "Reconnect-Disable-On-Idle",
}

func (a SGWimaxDMActionCode) String() string {
	if str, ok := SGWimaxDMActionCode_Strings[a]; ok {
		return str
	}
	return "SGWimaxDMActionCode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGWimaxDMActionCode_Add(p *radius.Packet, value SGWimaxDMActionCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 120, a)
}

func SGWimaxDMActionCode_Get(p *radius.Packet) (value SGWimaxDMActionCode) {
	value, _ = SGWimaxDMActionCode_Lookup(p)
	return
}

func SGWimaxDMActionCode_Gets(p *radius.Packet) (values []SGWimaxDMActionCode, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 120) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGWimaxDMActionCode(i))
	}
	return
}

func SGWimaxDMActionCode_Lookup(p *radius.Packet) (value SGWimaxDMActionCode, err error) {
	a, ok := _SG_LookupVendor(p, 120)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGWimaxDMActionCode(i)
	return
}

func SGWimaxDMActionCode_Set(p *radius.Packet, value SGWimaxDMActionCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 120, a)
}

func SGWimaxDMActionCode_Del(p *radius.Packet) {
	_SG_DelVendor(p, 120)
}

func SGWimaxACLARQEnable_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 121, a)
}

func SGWimaxACLARQEnable_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 121, a)
}

func SGWimaxACLARQEnable_Get(p *radius.Packet) (value []byte) {
	value, _ = SGWimaxACLARQEnable_Lookup(p)
	return
}

func SGWimaxACLARQEnable_GetString(p *radius.Packet) (value string) {
	value, _ = SGWimaxACLARQEnable_LookupString(p)
	return
}

func SGWimaxACLARQEnable_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 121) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGWimaxACLARQEnable_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 121) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGWimaxACLARQEnable_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 121)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGWimaxACLARQEnable_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 121)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGWimaxACLARQEnable_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 121, a)
}

func SGWimaxACLARQEnable_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 121, a)
}

func SGWimaxACLARQEnable_Del(p *radius.Packet) {
	_SG_DelVendor(p, 121)
}

func SGWimaxBsidNextHop_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 122, a)
}

func SGWimaxBsidNextHop_Get(p *radius.Packet) (value net.IP) {
	value, _ = SGWimaxBsidNextHop_Lookup(p)
	return
}

func SGWimaxBsidNextHop_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _SG_GetsVendor(p, 122) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGWimaxBsidNextHop_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _SG_LookupVendor(p, 122)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func SGWimaxBsidNextHop_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 122, a)
}

func SGWimaxBsidNextHop_Del(p *radius.Packet) {
	_SG_DelVendor(p, 122)
}

type SGWimaxMobilityFeaturesSupported uint32

const (
	SGWimaxMobilityFeaturesSupported_Value_Mobility   SGWimaxMobilityFeaturesSupported = 1
	SGWimaxMobilityFeaturesSupported_Value_Sleep      SGWimaxMobilityFeaturesSupported = 2
	SGWimaxMobilityFeaturesSupported_Value_Idle       SGWimaxMobilityFeaturesSupported = 4
	SGWimaxMobilityFeaturesSupported_Value_NoIdle     SGWimaxMobilityFeaturesSupported = 4294967291
	SGWimaxMobilityFeaturesSupported_Value_NoSleep    SGWimaxMobilityFeaturesSupported = 4294967293
	SGWimaxMobilityFeaturesSupported_Value_NoMobility SGWimaxMobilityFeaturesSupported = 4294967294
)

var SGWimaxMobilityFeaturesSupported_Strings = map[SGWimaxMobilityFeaturesSupported]string{
	SGWimaxMobilityFeaturesSupported_Value_Mobility:   "Mobility",
	SGWimaxMobilityFeaturesSupported_Value_Sleep:      "Sleep",
	SGWimaxMobilityFeaturesSupported_Value_Idle:       "Idle",
	SGWimaxMobilityFeaturesSupported_Value_NoIdle:     "NoIdle",
	SGWimaxMobilityFeaturesSupported_Value_NoSleep:    "NoSleep",
	SGWimaxMobilityFeaturesSupported_Value_NoMobility: "NoMobility",
}

func (a SGWimaxMobilityFeaturesSupported) String() string {
	if str, ok := SGWimaxMobilityFeaturesSupported_Strings[a]; ok {
		return str
	}
	return "SGWimaxMobilityFeaturesSupported(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGWimaxMobilityFeaturesSupported_Add(p *radius.Packet, value SGWimaxMobilityFeaturesSupported) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 123, a)
}

func SGWimaxMobilityFeaturesSupported_Get(p *radius.Packet) (value SGWimaxMobilityFeaturesSupported) {
	value, _ = SGWimaxMobilityFeaturesSupported_Lookup(p)
	return
}

func SGWimaxMobilityFeaturesSupported_Gets(p *radius.Packet) (values []SGWimaxMobilityFeaturesSupported, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 123) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGWimaxMobilityFeaturesSupported(i))
	}
	return
}

func SGWimaxMobilityFeaturesSupported_Lookup(p *radius.Packet) (value SGWimaxMobilityFeaturesSupported, err error) {
	a, ok := _SG_LookupVendor(p, 123)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGWimaxMobilityFeaturesSupported(i)
	return
}

func SGWimaxMobilityFeaturesSupported_Set(p *radius.Packet, value SGWimaxMobilityFeaturesSupported) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 123, a)
}

func SGWimaxMobilityFeaturesSupported_Del(p *radius.Packet) {
	_SG_DelVendor(p, 123)
}

type SGWimaxNodeDisconnect uint32

const (
	SGWimaxNodeDisconnect_Value_Enable  SGWimaxNodeDisconnect = 0
	SGWimaxNodeDisconnect_Value_Disable SGWimaxNodeDisconnect = 1
)

var SGWimaxNodeDisconnect_Strings = map[SGWimaxNodeDisconnect]string{
	SGWimaxNodeDisconnect_Value_Enable:  "Enable",
	SGWimaxNodeDisconnect_Value_Disable: "Disable",
}

func (a SGWimaxNodeDisconnect) String() string {
	if str, ok := SGWimaxNodeDisconnect_Strings[a]; ok {
		return str
	}
	return "SGWimaxNodeDisconnect(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGWimaxNodeDisconnect_Add(p *radius.Packet, value SGWimaxNodeDisconnect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 124, a)
}

func SGWimaxNodeDisconnect_Get(p *radius.Packet) (value SGWimaxNodeDisconnect) {
	value, _ = SGWimaxNodeDisconnect_Lookup(p)
	return
}

func SGWimaxNodeDisconnect_Gets(p *radius.Packet) (values []SGWimaxNodeDisconnect, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 124) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGWimaxNodeDisconnect(i))
	}
	return
}

func SGWimaxNodeDisconnect_Lookup(p *radius.Packet) (value SGWimaxNodeDisconnect, err error) {
	a, ok := _SG_LookupVendor(p, 124)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGWimaxNodeDisconnect(i)
	return
}

func SGWimaxNodeDisconnect_Set(p *radius.Packet, value SGWimaxNodeDisconnect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 124, a)
}

func SGWimaxNodeDisconnect_Del(p *radius.Packet) {
	_SG_DelVendor(p, 124)
}

type SGWimaxServiceFlowModification uint32

const (
	SGWimaxServiceFlowModification_Value_Off SGWimaxServiceFlowModification = 1
	SGWimaxServiceFlowModification_Value_On  SGWimaxServiceFlowModification = 2
)

var SGWimaxServiceFlowModification_Strings = map[SGWimaxServiceFlowModification]string{
	SGWimaxServiceFlowModification_Value_Off: "Off",
	SGWimaxServiceFlowModification_Value_On:  "On",
}

func (a SGWimaxServiceFlowModification) String() string {
	if str, ok := SGWimaxServiceFlowModification_Strings[a]; ok {
		return str
	}
	return "SGWimaxServiceFlowModification(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func SGWimaxServiceFlowModification_Add(p *radius.Packet, value SGWimaxServiceFlowModification) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_AddVendor(p, 125, a)
}

func SGWimaxServiceFlowModification_Get(p *radius.Packet) (value SGWimaxServiceFlowModification) {
	value, _ = SGWimaxServiceFlowModification_Lookup(p)
	return
}

func SGWimaxServiceFlowModification_Gets(p *radius.Packet) (values []SGWimaxServiceFlowModification, err error) {
	var i uint32
	for _, attr := range _SG_GetsVendor(p, 125) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, SGWimaxServiceFlowModification(i))
	}
	return
}

func SGWimaxServiceFlowModification_Lookup(p *radius.Packet) (value SGWimaxServiceFlowModification, err error) {
	a, ok := _SG_LookupVendor(p, 125)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = SGWimaxServiceFlowModification(i)
	return
}

func SGWimaxServiceFlowModification_Set(p *radius.Packet, value SGWimaxServiceFlowModification) (err error) {
	a := radius.NewInteger(uint32(value))
	return _SG_SetVendor(p, 125, a)
}

func SGWimaxServiceFlowModification_Del(p *radius.Packet) {
	_SG_DelVendor(p, 125)
}

func SGWimaxServiceFlowDown_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 126, a)
}

func SGWimaxServiceFlowDown_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 126, a)
}

func SGWimaxServiceFlowDown_Get(p *radius.Packet) (value []byte) {
	value, _ = SGWimaxServiceFlowDown_Lookup(p)
	return
}

func SGWimaxServiceFlowDown_GetString(p *radius.Packet) (value string) {
	value, _ = SGWimaxServiceFlowDown_LookupString(p)
	return
}

func SGWimaxServiceFlowDown_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 126) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGWimaxServiceFlowDown_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 126) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGWimaxServiceFlowDown_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 126)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGWimaxServiceFlowDown_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 126)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGWimaxServiceFlowDown_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 126, a)
}

func SGWimaxServiceFlowDown_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 126, a)
}

func SGWimaxServiceFlowDown_Del(p *radius.Packet) {
	_SG_DelVendor(p, 126)
}

func SGNodeAcctUsername_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 130, a)
}

func SGNodeAcctUsername_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_AddVendor(p, 130, a)
}

func SGNodeAcctUsername_Get(p *radius.Packet) (value []byte) {
	value, _ = SGNodeAcctUsername_Lookup(p)
	return
}

func SGNodeAcctUsername_GetString(p *radius.Packet) (value string) {
	value, _ = SGNodeAcctUsername_LookupString(p)
	return
}

func SGNodeAcctUsername_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _SG_GetsVendor(p, 130) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGNodeAcctUsername_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _SG_GetsVendor(p, 130) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SGNodeAcctUsername_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _SG_LookupVendor(p, 130)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SGNodeAcctUsername_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _SG_LookupVendor(p, 130)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SGNodeAcctUsername_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 130, a)
}

func SGNodeAcctUsername_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _SG_SetVendor(p, 130, a)
}

func SGNodeAcctUsername_Del(p *radius.Packet) {
	_SG_DelVendor(p, 130)
}
