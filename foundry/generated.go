// Code generated by radius-dict-gen. DO NOT EDIT.

package foundry

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Foundry_VendorID = 1991
)

func _Foundry_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Foundry_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Foundry_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Foundry_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Foundry_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Foundry_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Foundry_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Foundry_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Foundry_AddVendor(p, typ, attr)
}

func _Foundry_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Foundry_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

type FoundryPrivilegeLevel uint32

var FoundryPrivilegeLevel_Strings = map[FoundryPrivilegeLevel]string{}

func (a FoundryPrivilegeLevel) String() string {
	if str, ok := FoundryPrivilegeLevel_Strings[a]; ok {
		return str
	}
	return "FoundryPrivilegeLevel(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func FoundryPrivilegeLevel_Add(p *radius.Packet, value FoundryPrivilegeLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Foundry_AddVendor(p, 1, a)
}

func FoundryPrivilegeLevel_Get(p *radius.Packet) (value FoundryPrivilegeLevel) {
	value, _ = FoundryPrivilegeLevel_Lookup(p)
	return
}

func FoundryPrivilegeLevel_Gets(p *radius.Packet) (values []FoundryPrivilegeLevel, err error) {
	var i uint32
	for _, attr := range _Foundry_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, FoundryPrivilegeLevel(i))
	}
	return
}

func FoundryPrivilegeLevel_Lookup(p *radius.Packet) (value FoundryPrivilegeLevel, err error) {
	a, ok := _Foundry_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = FoundryPrivilegeLevel(i)
	return
}

func FoundryPrivilegeLevel_Set(p *radius.Packet, value FoundryPrivilegeLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Foundry_SetVendor(p, 1, a)
}

func FoundryPrivilegeLevel_Del(p *radius.Packet) {
	_Foundry_DelVendor(p, 1)
}

func FoundryCommandString_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Foundry_AddVendor(p, 2, a)
}

func FoundryCommandString_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Foundry_AddVendor(p, 2, a)
}

func FoundryCommandString_Get(p *radius.Packet) (value []byte) {
	value, _ = FoundryCommandString_Lookup(p)
	return
}

func FoundryCommandString_GetString(p *radius.Packet) (value string) {
	value, _ = FoundryCommandString_LookupString(p)
	return
}

func FoundryCommandString_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Foundry_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FoundryCommandString_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Foundry_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FoundryCommandString_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Foundry_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FoundryCommandString_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Foundry_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FoundryCommandString_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Foundry_SetVendor(p, 2, a)
}

func FoundryCommandString_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Foundry_SetVendor(p, 2, a)
}

func FoundryCommandString_Del(p *radius.Packet) {
	_Foundry_DelVendor(p, 2)
}

type FoundryCommandExceptionFlag uint32

var FoundryCommandExceptionFlag_Strings = map[FoundryCommandExceptionFlag]string{}

func (a FoundryCommandExceptionFlag) String() string {
	if str, ok := FoundryCommandExceptionFlag_Strings[a]; ok {
		return str
	}
	return "FoundryCommandExceptionFlag(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func FoundryCommandExceptionFlag_Add(p *radius.Packet, value FoundryCommandExceptionFlag) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Foundry_AddVendor(p, 3, a)
}

func FoundryCommandExceptionFlag_Get(p *radius.Packet) (value FoundryCommandExceptionFlag) {
	value, _ = FoundryCommandExceptionFlag_Lookup(p)
	return
}

func FoundryCommandExceptionFlag_Gets(p *radius.Packet) (values []FoundryCommandExceptionFlag, err error) {
	var i uint32
	for _, attr := range _Foundry_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, FoundryCommandExceptionFlag(i))
	}
	return
}

func FoundryCommandExceptionFlag_Lookup(p *radius.Packet) (value FoundryCommandExceptionFlag, err error) {
	a, ok := _Foundry_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = FoundryCommandExceptionFlag(i)
	return
}

func FoundryCommandExceptionFlag_Set(p *radius.Packet, value FoundryCommandExceptionFlag) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Foundry_SetVendor(p, 3, a)
}

func FoundryCommandExceptionFlag_Del(p *radius.Packet) {
	_Foundry_DelVendor(p, 3)
}

type FoundryINMPrivilege uint32

const (
	FoundryINMPrivilege_Value_AAAPri0  FoundryINMPrivilege = 0
	FoundryINMPrivilege_Value_AAAPri1  FoundryINMPrivilege = 1
	FoundryINMPrivilege_Value_AAAPri2  FoundryINMPrivilege = 2
	FoundryINMPrivilege_Value_AAAPri3  FoundryINMPrivilege = 3
	FoundryINMPrivilege_Value_AAAPri4  FoundryINMPrivilege = 4
	FoundryINMPrivilege_Value_AAAPri5  FoundryINMPrivilege = 5
	FoundryINMPrivilege_Value_AAAPri6  FoundryINMPrivilege = 6
	FoundryINMPrivilege_Value_AAAPri7  FoundryINMPrivilege = 7
	FoundryINMPrivilege_Value_AAAPri8  FoundryINMPrivilege = 8
	FoundryINMPrivilege_Value_AAAPri9  FoundryINMPrivilege = 9
	FoundryINMPrivilege_Value_AAAPri10 FoundryINMPrivilege = 10
	FoundryINMPrivilege_Value_AAAPri11 FoundryINMPrivilege = 11
	FoundryINMPrivilege_Value_AAAPri12 FoundryINMPrivilege = 12
	FoundryINMPrivilege_Value_AAAPri13 FoundryINMPrivilege = 13
	FoundryINMPrivilege_Value_AAAPri14 FoundryINMPrivilege = 14
	FoundryINMPrivilege_Value_AAAPri15 FoundryINMPrivilege = 15
)

var FoundryINMPrivilege_Strings = map[FoundryINMPrivilege]string{
	FoundryINMPrivilege_Value_AAAPri0:  "AAA_pri_0",
	FoundryINMPrivilege_Value_AAAPri1:  "AAA_pri_1",
	FoundryINMPrivilege_Value_AAAPri2:  "AAA_pri_2",
	FoundryINMPrivilege_Value_AAAPri3:  "AAA_pri_3",
	FoundryINMPrivilege_Value_AAAPri4:  "AAA_pri_4",
	FoundryINMPrivilege_Value_AAAPri5:  "AAA_pri_5",
	FoundryINMPrivilege_Value_AAAPri6:  "AAA_pri_6",
	FoundryINMPrivilege_Value_AAAPri7:  "AAA_pri_7",
	FoundryINMPrivilege_Value_AAAPri8:  "AAA_pri_8",
	FoundryINMPrivilege_Value_AAAPri9:  "AAA_pri_9",
	FoundryINMPrivilege_Value_AAAPri10: "AAA_pri_10",
	FoundryINMPrivilege_Value_AAAPri11: "AAA_pri_11",
	FoundryINMPrivilege_Value_AAAPri12: "AAA_pri_12",
	FoundryINMPrivilege_Value_AAAPri13: "AAA_pri_13",
	FoundryINMPrivilege_Value_AAAPri14: "AAA_pri_14",
	FoundryINMPrivilege_Value_AAAPri15: "AAA_pri_15",
}

func (a FoundryINMPrivilege) String() string {
	if str, ok := FoundryINMPrivilege_Strings[a]; ok {
		return str
	}
	return "FoundryINMPrivilege(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func FoundryINMPrivilege_Add(p *radius.Packet, value FoundryINMPrivilege) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Foundry_AddVendor(p, 4, a)
}

func FoundryINMPrivilege_Get(p *radius.Packet) (value FoundryINMPrivilege) {
	value, _ = FoundryINMPrivilege_Lookup(p)
	return
}

func FoundryINMPrivilege_Gets(p *radius.Packet) (values []FoundryINMPrivilege, err error) {
	var i uint32
	for _, attr := range _Foundry_GetsVendor(p, 4) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, FoundryINMPrivilege(i))
	}
	return
}

func FoundryINMPrivilege_Lookup(p *radius.Packet) (value FoundryINMPrivilege, err error) {
	a, ok := _Foundry_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = FoundryINMPrivilege(i)
	return
}

func FoundryINMPrivilege_Set(p *radius.Packet, value FoundryINMPrivilege) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Foundry_SetVendor(p, 4, a)
}

func FoundryINMPrivilege_Del(p *radius.Packet) {
	_Foundry_DelVendor(p, 4)
}

func FoundryAccessList_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Foundry_AddVendor(p, 5, a)
}

func FoundryAccessList_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Foundry_AddVendor(p, 5, a)
}

func FoundryAccessList_Get(p *radius.Packet) (value []byte) {
	value, _ = FoundryAccessList_Lookup(p)
	return
}

func FoundryAccessList_GetString(p *radius.Packet) (value string) {
	value, _ = FoundryAccessList_LookupString(p)
	return
}

func FoundryAccessList_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Foundry_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FoundryAccessList_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Foundry_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FoundryAccessList_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Foundry_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FoundryAccessList_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Foundry_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FoundryAccessList_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Foundry_SetVendor(p, 5, a)
}

func FoundryAccessList_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Foundry_SetVendor(p, 5, a)
}

func FoundryAccessList_Del(p *radius.Packet) {
	_Foundry_DelVendor(p, 5)
}

type FoundryMACAuthentNeeds8021x uint32

var FoundryMACAuthentNeeds8021x_Strings = map[FoundryMACAuthentNeeds8021x]string{}

func (a FoundryMACAuthentNeeds8021x) String() string {
	if str, ok := FoundryMACAuthentNeeds8021x_Strings[a]; ok {
		return str
	}
	return "FoundryMACAuthentNeeds8021x(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func FoundryMACAuthentNeeds8021x_Add(p *radius.Packet, value FoundryMACAuthentNeeds8021x) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Foundry_AddVendor(p, 6, a)
}

func FoundryMACAuthentNeeds8021x_Get(p *radius.Packet) (value FoundryMACAuthentNeeds8021x) {
	value, _ = FoundryMACAuthentNeeds8021x_Lookup(p)
	return
}

func FoundryMACAuthentNeeds8021x_Gets(p *radius.Packet) (values []FoundryMACAuthentNeeds8021x, err error) {
	var i uint32
	for _, attr := range _Foundry_GetsVendor(p, 6) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, FoundryMACAuthentNeeds8021x(i))
	}
	return
}

func FoundryMACAuthentNeeds8021x_Lookup(p *radius.Packet) (value FoundryMACAuthentNeeds8021x, err error) {
	a, ok := _Foundry_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = FoundryMACAuthentNeeds8021x(i)
	return
}

func FoundryMACAuthentNeeds8021x_Set(p *radius.Packet, value FoundryMACAuthentNeeds8021x) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Foundry_SetVendor(p, 6, a)
}

func FoundryMACAuthentNeeds8021x_Del(p *radius.Packet) {
	_Foundry_DelVendor(p, 6)
}

type Foundry8021xValidLookup uint32

var Foundry8021xValidLookup_Strings = map[Foundry8021xValidLookup]string{}

func (a Foundry8021xValidLookup) String() string {
	if str, ok := Foundry8021xValidLookup_Strings[a]; ok {
		return str
	}
	return "Foundry8021xValidLookup(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func Foundry8021xValidLookup_Add(p *radius.Packet, value Foundry8021xValidLookup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Foundry_AddVendor(p, 7, a)
}

func Foundry8021xValidLookup_Get(p *radius.Packet) (value Foundry8021xValidLookup) {
	value, _ = Foundry8021xValidLookup_Lookup(p)
	return
}

func Foundry8021xValidLookup_Gets(p *radius.Packet) (values []Foundry8021xValidLookup, err error) {
	var i uint32
	for _, attr := range _Foundry_GetsVendor(p, 7) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, Foundry8021xValidLookup(i))
	}
	return
}

func Foundry8021xValidLookup_Lookup(p *radius.Packet) (value Foundry8021xValidLookup, err error) {
	a, ok := _Foundry_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = Foundry8021xValidLookup(i)
	return
}

func Foundry8021xValidLookup_Set(p *radius.Packet, value Foundry8021xValidLookup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Foundry_SetVendor(p, 7, a)
}

func Foundry8021xValidLookup_Del(p *radius.Packet) {
	_Foundry_DelVendor(p, 7)
}

type FoundryMACBasedVlanQoS uint32

const (
	FoundryMACBasedVlanQoS_Value_QoSPriority0 FoundryMACBasedVlanQoS = 0
	FoundryMACBasedVlanQoS_Value_QoSPriority1 FoundryMACBasedVlanQoS = 1
	FoundryMACBasedVlanQoS_Value_QoSPriority2 FoundryMACBasedVlanQoS = 2
	FoundryMACBasedVlanQoS_Value_QoSPriority3 FoundryMACBasedVlanQoS = 3
	FoundryMACBasedVlanQoS_Value_QoSPriority4 FoundryMACBasedVlanQoS = 4
	FoundryMACBasedVlanQoS_Value_QoSPriority5 FoundryMACBasedVlanQoS = 5
	FoundryMACBasedVlanQoS_Value_QoSPriority6 FoundryMACBasedVlanQoS = 6
	FoundryMACBasedVlanQoS_Value_QoSPriority7 FoundryMACBasedVlanQoS = 7
)

var FoundryMACBasedVlanQoS_Strings = map[FoundryMACBasedVlanQoS]string{
	FoundryMACBasedVlanQoS_Value_QoSPriority0: "QoS_priority_0",
	FoundryMACBasedVlanQoS_Value_QoSPriority1: "QoS_priority_1",
	FoundryMACBasedVlanQoS_Value_QoSPriority2: "QoS_priority_2",
	FoundryMACBasedVlanQoS_Value_QoSPriority3: "QoS_priority_3",
	FoundryMACBasedVlanQoS_Value_QoSPriority4: "QoS_priority_4",
	FoundryMACBasedVlanQoS_Value_QoSPriority5: "QoS_priority_5",
	FoundryMACBasedVlanQoS_Value_QoSPriority6: "QoS_priority_6",
	FoundryMACBasedVlanQoS_Value_QoSPriority7: "QoS_priority_7",
}

func (a FoundryMACBasedVlanQoS) String() string {
	if str, ok := FoundryMACBasedVlanQoS_Strings[a]; ok {
		return str
	}
	return "FoundryMACBasedVlanQoS(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func FoundryMACBasedVlanQoS_Add(p *radius.Packet, value FoundryMACBasedVlanQoS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Foundry_AddVendor(p, 8, a)
}

func FoundryMACBasedVlanQoS_Get(p *radius.Packet) (value FoundryMACBasedVlanQoS) {
	value, _ = FoundryMACBasedVlanQoS_Lookup(p)
	return
}

func FoundryMACBasedVlanQoS_Gets(p *radius.Packet) (values []FoundryMACBasedVlanQoS, err error) {
	var i uint32
	for _, attr := range _Foundry_GetsVendor(p, 8) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, FoundryMACBasedVlanQoS(i))
	}
	return
}

func FoundryMACBasedVlanQoS_Lookup(p *radius.Packet) (value FoundryMACBasedVlanQoS, err error) {
	a, ok := _Foundry_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = FoundryMACBasedVlanQoS(i)
	return
}

func FoundryMACBasedVlanQoS_Set(p *radius.Packet, value FoundryMACBasedVlanQoS) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Foundry_SetVendor(p, 8, a)
}

func FoundryMACBasedVlanQoS_Del(p *radius.Packet) {
	_Foundry_DelVendor(p, 8)
}

func FoundryINMRoleAorList_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Foundry_AddVendor(p, 9, a)
}

func FoundryINMRoleAorList_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Foundry_AddVendor(p, 9, a)
}

func FoundryINMRoleAorList_Get(p *radius.Packet) (value []byte) {
	value, _ = FoundryINMRoleAorList_Lookup(p)
	return
}

func FoundryINMRoleAorList_GetString(p *radius.Packet) (value string) {
	value, _ = FoundryINMRoleAorList_LookupString(p)
	return
}

func FoundryINMRoleAorList_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Foundry_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FoundryINMRoleAorList_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Foundry_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FoundryINMRoleAorList_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Foundry_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FoundryINMRoleAorList_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Foundry_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FoundryINMRoleAorList_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Foundry_SetVendor(p, 9, a)
}

func FoundryINMRoleAorList_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Foundry_SetVendor(p, 9, a)
}

func FoundryINMRoleAorList_Del(p *radius.Packet) {
	_Foundry_DelVendor(p, 9)
}

func FoundrySIContextRole_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Foundry_AddVendor(p, 10, a)
}

func FoundrySIContextRole_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Foundry_AddVendor(p, 10, a)
}

func FoundrySIContextRole_Get(p *radius.Packet) (value []byte) {
	value, _ = FoundrySIContextRole_Lookup(p)
	return
}

func FoundrySIContextRole_GetString(p *radius.Packet) (value string) {
	value, _ = FoundrySIContextRole_LookupString(p)
	return
}

func FoundrySIContextRole_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Foundry_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FoundrySIContextRole_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Foundry_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FoundrySIContextRole_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Foundry_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FoundrySIContextRole_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Foundry_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FoundrySIContextRole_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Foundry_SetVendor(p, 10, a)
}

func FoundrySIContextRole_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Foundry_SetVendor(p, 10, a)
}

func FoundrySIContextRole_Del(p *radius.Packet) {
	_Foundry_DelVendor(p, 10)
}

func FoundrySIRoleTemplate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Foundry_AddVendor(p, 11, a)
}

func FoundrySIRoleTemplate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Foundry_AddVendor(p, 11, a)
}

func FoundrySIRoleTemplate_Get(p *radius.Packet) (value []byte) {
	value, _ = FoundrySIRoleTemplate_Lookup(p)
	return
}

func FoundrySIRoleTemplate_GetString(p *radius.Packet) (value string) {
	value, _ = FoundrySIRoleTemplate_LookupString(p)
	return
}

func FoundrySIRoleTemplate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Foundry_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FoundrySIRoleTemplate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Foundry_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func FoundrySIRoleTemplate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Foundry_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func FoundrySIRoleTemplate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Foundry_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func FoundrySIRoleTemplate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Foundry_SetVendor(p, 11, a)
}

func FoundrySIRoleTemplate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Foundry_SetVendor(p, 11, a)
}

func FoundrySIRoleTemplate_Del(p *radius.Packet) {
	_Foundry_DelVendor(p, 11)
}
