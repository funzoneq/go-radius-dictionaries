// Code generated by radius-dict-gen. DO NOT EDIT.

package itk

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_ITK_VendorID = 1195
)

func _ITK_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_ITK_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _ITK_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _ITK_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _ITK_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _ITK_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _ITK_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _ITK_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _ITK_AddVendor(p, typ, attr)
}

func _ITK_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _ITK_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func ITKAuthServIP_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 100, a)
}

func ITKAuthServIP_Get(p *radius.Packet) (value net.IP) {
	value, _ = ITKAuthServIP_Lookup(p)
	return
}

func ITKAuthServIP_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _ITK_GetsVendor(p, 100) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKAuthServIP_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _ITK_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func ITKAuthServIP_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 100, a)
}

func ITKAuthServIP_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 100)
}

type ITKAuthServProt uint32

var ITKAuthServProt_Strings = map[ITKAuthServProt]string{}

func (a ITKAuthServProt) String() string {
	if str, ok := ITKAuthServProt_Strings[a]; ok {
		return str
	}
	return "ITKAuthServProt(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ITKAuthServProt_Add(p *radius.Packet, value ITKAuthServProt) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_AddVendor(p, 101, a)
}

func ITKAuthServProt_Get(p *radius.Packet) (value ITKAuthServProt) {
	value, _ = ITKAuthServProt_Lookup(p)
	return
}

func ITKAuthServProt_Gets(p *radius.Packet) (values []ITKAuthServProt, err error) {
	var i uint32
	for _, attr := range _ITK_GetsVendor(p, 101) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ITKAuthServProt(i))
	}
	return
}

func ITKAuthServProt_Lookup(p *radius.Packet) (value ITKAuthServProt, err error) {
	a, ok := _ITK_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ITKAuthServProt(i)
	return
}

func ITKAuthServProt_Set(p *radius.Packet, value ITKAuthServProt) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_SetVendor(p, 101, a)
}

func ITKAuthServProt_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 101)
}

type ITKProviderID uint32

var ITKProviderID_Strings = map[ITKProviderID]string{}

func (a ITKProviderID) String() string {
	if str, ok := ITKProviderID_Strings[a]; ok {
		return str
	}
	return "ITKProviderID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ITKProviderID_Add(p *radius.Packet, value ITKProviderID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_AddVendor(p, 102, a)
}

func ITKProviderID_Get(p *radius.Packet) (value ITKProviderID) {
	value, _ = ITKProviderID_Lookup(p)
	return
}

func ITKProviderID_Gets(p *radius.Packet) (values []ITKProviderID, err error) {
	var i uint32
	for _, attr := range _ITK_GetsVendor(p, 102) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ITKProviderID(i))
	}
	return
}

func ITKProviderID_Lookup(p *radius.Packet) (value ITKProviderID, err error) {
	a, ok := _ITK_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ITKProviderID(i)
	return
}

func ITKProviderID_Set(p *radius.Packet, value ITKProviderID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_SetVendor(p, 102, a)
}

func ITKProviderID_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 102)
}

type ITKUsergroup uint32

var ITKUsergroup_Strings = map[ITKUsergroup]string{}

func (a ITKUsergroup) String() string {
	if str, ok := ITKUsergroup_Strings[a]; ok {
		return str
	}
	return "ITKUsergroup(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ITKUsergroup_Add(p *radius.Packet, value ITKUsergroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_AddVendor(p, 103, a)
}

func ITKUsergroup_Get(p *radius.Packet) (value ITKUsergroup) {
	value, _ = ITKUsergroup_Lookup(p)
	return
}

func ITKUsergroup_Gets(p *radius.Packet) (values []ITKUsergroup, err error) {
	var i uint32
	for _, attr := range _ITK_GetsVendor(p, 103) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ITKUsergroup(i))
	}
	return
}

func ITKUsergroup_Lookup(p *radius.Packet) (value ITKUsergroup, err error) {
	a, ok := _ITK_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ITKUsergroup(i)
	return
}

func ITKUsergroup_Set(p *radius.Packet, value ITKUsergroup) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_SetVendor(p, 103, a)
}

func ITKUsergroup_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 103)
}

func ITKBanner_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 104, a)
}

func ITKBanner_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 104, a)
}

func ITKBanner_Get(p *radius.Packet) (value []byte) {
	value, _ = ITKBanner_Lookup(p)
	return
}

func ITKBanner_GetString(p *radius.Packet) (value string) {
	value, _ = ITKBanner_LookupString(p)
	return
}

func ITKBanner_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ITK_GetsVendor(p, 104) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKBanner_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ITK_GetsVendor(p, 104) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKBanner_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ITK_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ITKBanner_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ITK_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ITKBanner_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 104, a)
}

func ITKBanner_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 104, a)
}

func ITKBanner_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 104)
}

func ITKUsernamePrompt_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 105, a)
}

func ITKUsernamePrompt_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 105, a)
}

func ITKUsernamePrompt_Get(p *radius.Packet) (value []byte) {
	value, _ = ITKUsernamePrompt_Lookup(p)
	return
}

func ITKUsernamePrompt_GetString(p *radius.Packet) (value string) {
	value, _ = ITKUsernamePrompt_LookupString(p)
	return
}

func ITKUsernamePrompt_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ITK_GetsVendor(p, 105) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKUsernamePrompt_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ITK_GetsVendor(p, 105) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKUsernamePrompt_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ITK_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ITKUsernamePrompt_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ITK_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ITKUsernamePrompt_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 105, a)
}

func ITKUsernamePrompt_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 105, a)
}

func ITKUsernamePrompt_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 105)
}

func ITKPasswordPrompt_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 106, a)
}

func ITKPasswordPrompt_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 106, a)
}

func ITKPasswordPrompt_Get(p *radius.Packet) (value []byte) {
	value, _ = ITKPasswordPrompt_Lookup(p)
	return
}

func ITKPasswordPrompt_GetString(p *radius.Packet) (value string) {
	value, _ = ITKPasswordPrompt_LookupString(p)
	return
}

func ITKPasswordPrompt_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ITK_GetsVendor(p, 106) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKPasswordPrompt_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ITK_GetsVendor(p, 106) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKPasswordPrompt_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ITK_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ITKPasswordPrompt_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ITK_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ITKPasswordPrompt_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 106, a)
}

func ITKPasswordPrompt_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 106, a)
}

func ITKPasswordPrompt_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 106)
}

func ITKWelcomeMessage_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 107, a)
}

func ITKWelcomeMessage_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 107, a)
}

func ITKWelcomeMessage_Get(p *radius.Packet) (value []byte) {
	value, _ = ITKWelcomeMessage_Lookup(p)
	return
}

func ITKWelcomeMessage_GetString(p *radius.Packet) (value string) {
	value, _ = ITKWelcomeMessage_LookupString(p)
	return
}

func ITKWelcomeMessage_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ITK_GetsVendor(p, 107) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKWelcomeMessage_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ITK_GetsVendor(p, 107) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKWelcomeMessage_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ITK_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ITKWelcomeMessage_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ITK_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ITKWelcomeMessage_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 107, a)
}

func ITKWelcomeMessage_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 107, a)
}

func ITKWelcomeMessage_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 107)
}

func ITKPrompt_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 108, a)
}

func ITKPrompt_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 108, a)
}

func ITKPrompt_Get(p *radius.Packet) (value []byte) {
	value, _ = ITKPrompt_Lookup(p)
	return
}

func ITKPrompt_GetString(p *radius.Packet) (value string) {
	value, _ = ITKPrompt_LookupString(p)
	return
}

func ITKPrompt_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ITK_GetsVendor(p, 108) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKPrompt_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ITK_GetsVendor(p, 108) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKPrompt_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ITK_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ITKPrompt_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ITK_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ITKPrompt_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 108, a)
}

func ITKPrompt_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 108, a)
}

func ITKPrompt_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 108)
}

type ITKIPPool uint32

var ITKIPPool_Strings = map[ITKIPPool]string{}

func (a ITKIPPool) String() string {
	if str, ok := ITKIPPool_Strings[a]; ok {
		return str
	}
	return "ITKIPPool(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ITKIPPool_Add(p *radius.Packet, value ITKIPPool) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_AddVendor(p, 109, a)
}

func ITKIPPool_Get(p *radius.Packet) (value ITKIPPool) {
	value, _ = ITKIPPool_Lookup(p)
	return
}

func ITKIPPool_Gets(p *radius.Packet) (values []ITKIPPool, err error) {
	var i uint32
	for _, attr := range _ITK_GetsVendor(p, 109) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ITKIPPool(i))
	}
	return
}

func ITKIPPool_Lookup(p *radius.Packet) (value ITKIPPool, err error) {
	a, ok := _ITK_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ITKIPPool(i)
	return
}

func ITKIPPool_Set(p *radius.Packet, value ITKIPPool) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_SetVendor(p, 109, a)
}

func ITKIPPool_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 109)
}

func ITKTunnelIP_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 110, a)
}

func ITKTunnelIP_Get(p *radius.Packet) (value net.IP) {
	value, _ = ITKTunnelIP_Lookup(p)
	return
}

func ITKTunnelIP_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _ITK_GetsVendor(p, 110) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKTunnelIP_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _ITK_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func ITKTunnelIP_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 110, a)
}

func ITKTunnelIP_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 110)
}

type ITKTunnelProt uint32

var ITKTunnelProt_Strings = map[ITKTunnelProt]string{}

func (a ITKTunnelProt) String() string {
	if str, ok := ITKTunnelProt_Strings[a]; ok {
		return str
	}
	return "ITKTunnelProt(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ITKTunnelProt_Add(p *radius.Packet, value ITKTunnelProt) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_AddVendor(p, 111, a)
}

func ITKTunnelProt_Get(p *radius.Packet) (value ITKTunnelProt) {
	value, _ = ITKTunnelProt_Lookup(p)
	return
}

func ITKTunnelProt_Gets(p *radius.Packet) (values []ITKTunnelProt, err error) {
	var i uint32
	for _, attr := range _ITK_GetsVendor(p, 111) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ITKTunnelProt(i))
	}
	return
}

func ITKTunnelProt_Lookup(p *radius.Packet) (value ITKTunnelProt, err error) {
	a, ok := _ITK_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ITKTunnelProt(i)
	return
}

func ITKTunnelProt_Set(p *radius.Packet, value ITKTunnelProt) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_SetVendor(p, 111, a)
}

func ITKTunnelProt_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 111)
}

func ITKAcctServIP_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 112, a)
}

func ITKAcctServIP_Get(p *radius.Packet) (value net.IP) {
	value, _ = ITKAcctServIP_Lookup(p)
	return
}

func ITKAcctServIP_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _ITK_GetsVendor(p, 112) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKAcctServIP_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _ITK_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func ITKAcctServIP_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 112, a)
}

func ITKAcctServIP_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 112)
}

type ITKAcctServProt uint32

var ITKAcctServProt_Strings = map[ITKAcctServProt]string{}

func (a ITKAcctServProt) String() string {
	if str, ok := ITKAcctServProt_Strings[a]; ok {
		return str
	}
	return "ITKAcctServProt(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ITKAcctServProt_Add(p *radius.Packet, value ITKAcctServProt) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_AddVendor(p, 113, a)
}

func ITKAcctServProt_Get(p *radius.Packet) (value ITKAcctServProt) {
	value, _ = ITKAcctServProt_Lookup(p)
	return
}

func ITKAcctServProt_Gets(p *radius.Packet) (values []ITKAcctServProt, err error) {
	var i uint32
	for _, attr := range _ITK_GetsVendor(p, 113) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ITKAcctServProt(i))
	}
	return
}

func ITKAcctServProt_Lookup(p *radius.Packet) (value ITKAcctServProt, err error) {
	a, ok := _ITK_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ITKAcctServProt(i)
	return
}

func ITKAcctServProt_Set(p *radius.Packet, value ITKAcctServProt) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_SetVendor(p, 113, a)
}

func ITKAcctServProt_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 113)
}

func ITKFilterRule_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 114, a)
}

func ITKFilterRule_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 114, a)
}

func ITKFilterRule_Get(p *radius.Packet) (value []byte) {
	value, _ = ITKFilterRule_Lookup(p)
	return
}

func ITKFilterRule_GetString(p *radius.Packet) (value string) {
	value, _ = ITKFilterRule_LookupString(p)
	return
}

func ITKFilterRule_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ITK_GetsVendor(p, 114) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKFilterRule_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ITK_GetsVendor(p, 114) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKFilterRule_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ITK_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ITKFilterRule_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ITK_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ITKFilterRule_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 114, a)
}

func ITKFilterRule_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 114, a)
}

func ITKFilterRule_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 114)
}

type ITKChannelBinding uint32

var ITKChannelBinding_Strings = map[ITKChannelBinding]string{}

func (a ITKChannelBinding) String() string {
	if str, ok := ITKChannelBinding_Strings[a]; ok {
		return str
	}
	return "ITKChannelBinding(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ITKChannelBinding_Add(p *radius.Packet, value ITKChannelBinding) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_AddVendor(p, 115, a)
}

func ITKChannelBinding_Get(p *radius.Packet) (value ITKChannelBinding) {
	value, _ = ITKChannelBinding_Lookup(p)
	return
}

func ITKChannelBinding_Gets(p *radius.Packet) (values []ITKChannelBinding, err error) {
	var i uint32
	for _, attr := range _ITK_GetsVendor(p, 115) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ITKChannelBinding(i))
	}
	return
}

func ITKChannelBinding_Lookup(p *radius.Packet) (value ITKChannelBinding, err error) {
	a, ok := _ITK_LookupVendor(p, 115)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ITKChannelBinding(i)
	return
}

func ITKChannelBinding_Set(p *radius.Packet, value ITKChannelBinding) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_SetVendor(p, 115, a)
}

func ITKChannelBinding_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 115)
}

type ITKStartDelay uint32

var ITKStartDelay_Strings = map[ITKStartDelay]string{}

func (a ITKStartDelay) String() string {
	if str, ok := ITKStartDelay_Strings[a]; ok {
		return str
	}
	return "ITKStartDelay(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ITKStartDelay_Add(p *radius.Packet, value ITKStartDelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_AddVendor(p, 116, a)
}

func ITKStartDelay_Get(p *radius.Packet) (value ITKStartDelay) {
	value, _ = ITKStartDelay_Lookup(p)
	return
}

func ITKStartDelay_Gets(p *radius.Packet) (values []ITKStartDelay, err error) {
	var i uint32
	for _, attr := range _ITK_GetsVendor(p, 116) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ITKStartDelay(i))
	}
	return
}

func ITKStartDelay_Lookup(p *radius.Packet) (value ITKStartDelay, err error) {
	a, ok := _ITK_LookupVendor(p, 116)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ITKStartDelay(i)
	return
}

func ITKStartDelay_Set(p *radius.Packet, value ITKStartDelay) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_SetVendor(p, 116, a)
}

func ITKStartDelay_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 116)
}

func ITKNASName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 117, a)
}

func ITKNASName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 117, a)
}

func ITKNASName_Get(p *radius.Packet) (value []byte) {
	value, _ = ITKNASName_Lookup(p)
	return
}

func ITKNASName_GetString(p *radius.Packet) (value string) {
	value, _ = ITKNASName_LookupString(p)
	return
}

func ITKNASName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ITK_GetsVendor(p, 117) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKNASName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ITK_GetsVendor(p, 117) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKNASName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ITK_LookupVendor(p, 117)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ITKNASName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ITK_LookupVendor(p, 117)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ITKNASName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 117, a)
}

func ITKNASName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 117, a)
}

func ITKNASName_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 117)
}

type ITKISDNProt uint32

var ITKISDNProt_Strings = map[ITKISDNProt]string{}

func (a ITKISDNProt) String() string {
	if str, ok := ITKISDNProt_Strings[a]; ok {
		return str
	}
	return "ITKISDNProt(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ITKISDNProt_Add(p *radius.Packet, value ITKISDNProt) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_AddVendor(p, 118, a)
}

func ITKISDNProt_Get(p *radius.Packet) (value ITKISDNProt) {
	value, _ = ITKISDNProt_Lookup(p)
	return
}

func ITKISDNProt_Gets(p *radius.Packet) (values []ITKISDNProt, err error) {
	var i uint32
	for _, attr := range _ITK_GetsVendor(p, 118) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ITKISDNProt(i))
	}
	return
}

func ITKISDNProt_Lookup(p *radius.Packet) (value ITKISDNProt, err error) {
	a, ok := _ITK_LookupVendor(p, 118)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ITKISDNProt(i)
	return
}

func ITKISDNProt_Set(p *radius.Packet, value ITKISDNProt) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_SetVendor(p, 118, a)
}

func ITKISDNProt_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 118)
}

type ITKPPPAuthType uint32

var ITKPPPAuthType_Strings = map[ITKPPPAuthType]string{}

func (a ITKPPPAuthType) String() string {
	if str, ok := ITKPPPAuthType_Strings[a]; ok {
		return str
	}
	return "ITKPPPAuthType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ITKPPPAuthType_Add(p *radius.Packet, value ITKPPPAuthType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_AddVendor(p, 119, a)
}

func ITKPPPAuthType_Get(p *radius.Packet) (value ITKPPPAuthType) {
	value, _ = ITKPPPAuthType_Lookup(p)
	return
}

func ITKPPPAuthType_Gets(p *radius.Packet) (values []ITKPPPAuthType, err error) {
	var i uint32
	for _, attr := range _ITK_GetsVendor(p, 119) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ITKPPPAuthType(i))
	}
	return
}

func ITKPPPAuthType_Lookup(p *radius.Packet) (value ITKPPPAuthType, err error) {
	a, ok := _ITK_LookupVendor(p, 119)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ITKPPPAuthType(i)
	return
}

func ITKPPPAuthType_Set(p *radius.Packet, value ITKPPPAuthType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_SetVendor(p, 119, a)
}

func ITKPPPAuthType_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 119)
}

type ITKDialoutType uint32

var ITKDialoutType_Strings = map[ITKDialoutType]string{}

func (a ITKDialoutType) String() string {
	if str, ok := ITKDialoutType_Strings[a]; ok {
		return str
	}
	return "ITKDialoutType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ITKDialoutType_Add(p *radius.Packet, value ITKDialoutType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_AddVendor(p, 120, a)
}

func ITKDialoutType_Get(p *radius.Packet) (value ITKDialoutType) {
	value, _ = ITKDialoutType_Lookup(p)
	return
}

func ITKDialoutType_Gets(p *radius.Packet) (values []ITKDialoutType, err error) {
	var i uint32
	for _, attr := range _ITK_GetsVendor(p, 120) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ITKDialoutType(i))
	}
	return
}

func ITKDialoutType_Lookup(p *radius.Packet) (value ITKDialoutType, err error) {
	a, ok := _ITK_LookupVendor(p, 120)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ITKDialoutType(i)
	return
}

func ITKDialoutType_Set(p *radius.Packet, value ITKDialoutType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_SetVendor(p, 120, a)
}

func ITKDialoutType_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 120)
}

func ITKFtpAuthIP_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 121, a)
}

func ITKFtpAuthIP_Get(p *radius.Packet) (value net.IP) {
	value, _ = ITKFtpAuthIP_Lookup(p)
	return
}

func ITKFtpAuthIP_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _ITK_GetsVendor(p, 121) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKFtpAuthIP_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _ITK_LookupVendor(p, 121)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func ITKFtpAuthIP_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 121, a)
}

func ITKFtpAuthIP_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 121)
}

func ITKUsersDefaultEntry_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 122, a)
}

func ITKUsersDefaultEntry_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 122, a)
}

func ITKUsersDefaultEntry_Get(p *radius.Packet) (value []byte) {
	value, _ = ITKUsersDefaultEntry_Lookup(p)
	return
}

func ITKUsersDefaultEntry_GetString(p *radius.Packet) (value string) {
	value, _ = ITKUsersDefaultEntry_LookupString(p)
	return
}

func ITKUsersDefaultEntry_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ITK_GetsVendor(p, 122) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKUsersDefaultEntry_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ITK_GetsVendor(p, 122) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKUsersDefaultEntry_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ITK_LookupVendor(p, 122)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ITKUsersDefaultEntry_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ITK_LookupVendor(p, 122)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ITKUsersDefaultEntry_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 122, a)
}

func ITKUsersDefaultEntry_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 122, a)
}

func ITKUsersDefaultEntry_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 122)
}

func ITKUsersDefaultPw_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 123, a)
}

func ITKUsersDefaultPw_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 123, a)
}

func ITKUsersDefaultPw_Get(p *radius.Packet) (value []byte) {
	value, _ = ITKUsersDefaultPw_Lookup(p)
	return
}

func ITKUsersDefaultPw_GetString(p *radius.Packet) (value string) {
	value, _ = ITKUsersDefaultPw_LookupString(p)
	return
}

func ITKUsersDefaultPw_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ITK_GetsVendor(p, 123) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKUsersDefaultPw_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ITK_GetsVendor(p, 123) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKUsersDefaultPw_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ITK_LookupVendor(p, 123)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ITKUsersDefaultPw_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ITK_LookupVendor(p, 123)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ITKUsersDefaultPw_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 123, a)
}

func ITKUsersDefaultPw_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 123, a)
}

func ITKUsersDefaultPw_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 123)
}

func ITKAuthReqType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 124, a)
}

func ITKAuthReqType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 124, a)
}

func ITKAuthReqType_Get(p *radius.Packet) (value []byte) {
	value, _ = ITKAuthReqType_Lookup(p)
	return
}

func ITKAuthReqType_GetString(p *radius.Packet) (value string) {
	value, _ = ITKAuthReqType_LookupString(p)
	return
}

func ITKAuthReqType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ITK_GetsVendor(p, 124) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKAuthReqType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ITK_GetsVendor(p, 124) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKAuthReqType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ITK_LookupVendor(p, 124)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ITKAuthReqType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ITK_LookupVendor(p, 124)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ITKAuthReqType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 124, a)
}

func ITKAuthReqType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 124, a)
}

func ITKAuthReqType_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 124)
}

type ITKModemPoolID uint32

var ITKModemPoolID_Strings = map[ITKModemPoolID]string{}

func (a ITKModemPoolID) String() string {
	if str, ok := ITKModemPoolID_Strings[a]; ok {
		return str
	}
	return "ITKModemPoolID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ITKModemPoolID_Add(p *radius.Packet, value ITKModemPoolID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_AddVendor(p, 125, a)
}

func ITKModemPoolID_Get(p *radius.Packet) (value ITKModemPoolID) {
	value, _ = ITKModemPoolID_Lookup(p)
	return
}

func ITKModemPoolID_Gets(p *radius.Packet) (values []ITKModemPoolID, err error) {
	var i uint32
	for _, attr := range _ITK_GetsVendor(p, 125) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ITKModemPoolID(i))
	}
	return
}

func ITKModemPoolID_Lookup(p *radius.Packet) (value ITKModemPoolID, err error) {
	a, ok := _ITK_LookupVendor(p, 125)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ITKModemPoolID(i)
	return
}

func ITKModemPoolID_Set(p *radius.Packet, value ITKModemPoolID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_SetVendor(p, 125, a)
}

func ITKModemPoolID_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 125)
}

func ITKModemInitString_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 126, a)
}

func ITKModemInitString_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 126, a)
}

func ITKModemInitString_Get(p *radius.Packet) (value []byte) {
	value, _ = ITKModemInitString_Lookup(p)
	return
}

func ITKModemInitString_GetString(p *radius.Packet) (value string) {
	value, _ = ITKModemInitString_LookupString(p)
	return
}

func ITKModemInitString_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ITK_GetsVendor(p, 126) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKModemInitString_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ITK_GetsVendor(p, 126) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKModemInitString_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ITK_LookupVendor(p, 126)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ITKModemInitString_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ITK_LookupVendor(p, 126)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ITKModemInitString_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 126, a)
}

func ITKModemInitString_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 126, a)
}

func ITKModemInitString_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 126)
}

type ITKPPPClientServerMode uint32

var ITKPPPClientServerMode_Strings = map[ITKPPPClientServerMode]string{}

func (a ITKPPPClientServerMode) String() string {
	if str, ok := ITKPPPClientServerMode_Strings[a]; ok {
		return str
	}
	return "ITKPPPClientServerMode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ITKPPPClientServerMode_Add(p *radius.Packet, value ITKPPPClientServerMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_AddVendor(p, 127, a)
}

func ITKPPPClientServerMode_Get(p *radius.Packet) (value ITKPPPClientServerMode) {
	value, _ = ITKPPPClientServerMode_Lookup(p)
	return
}

func ITKPPPClientServerMode_Gets(p *radius.Packet) (values []ITKPPPClientServerMode, err error) {
	var i uint32
	for _, attr := range _ITK_GetsVendor(p, 127) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ITKPPPClientServerMode(i))
	}
	return
}

func ITKPPPClientServerMode_Lookup(p *radius.Packet) (value ITKPPPClientServerMode, err error) {
	a, ok := _ITK_LookupVendor(p, 127)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ITKPPPClientServerMode(i)
	return
}

func ITKPPPClientServerMode_Set(p *radius.Packet, value ITKPPPClientServerMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _ITK_SetVendor(p, 127, a)
}

func ITKPPPClientServerMode_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 127)
}

func ITKPPPCompressionProt_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 128, a)
}

func ITKPPPCompressionProt_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 128, a)
}

func ITKPPPCompressionProt_Get(p *radius.Packet) (value []byte) {
	value, _ = ITKPPPCompressionProt_Lookup(p)
	return
}

func ITKPPPCompressionProt_GetString(p *radius.Packet) (value string) {
	value, _ = ITKPPPCompressionProt_LookupString(p)
	return
}

func ITKPPPCompressionProt_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ITK_GetsVendor(p, 128) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKPPPCompressionProt_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ITK_GetsVendor(p, 128) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKPPPCompressionProt_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ITK_LookupVendor(p, 128)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ITKPPPCompressionProt_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ITK_LookupVendor(p, 128)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ITKPPPCompressionProt_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 128, a)
}

func ITKPPPCompressionProt_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 128, a)
}

func ITKPPPCompressionProt_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 128)
}

func ITKUsername_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 129, a)
}

func ITKUsername_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 129, a)
}

func ITKUsername_Get(p *radius.Packet) (value []byte) {
	value, _ = ITKUsername_Lookup(p)
	return
}

func ITKUsername_GetString(p *radius.Packet) (value string) {
	value, _ = ITKUsername_LookupString(p)
	return
}

func ITKUsername_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ITK_GetsVendor(p, 129) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKUsername_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ITK_GetsVendor(p, 129) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKUsername_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ITK_LookupVendor(p, 129)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ITKUsername_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ITK_LookupVendor(p, 129)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ITKUsername_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 129, a)
}

func ITKUsername_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 129, a)
}

func ITKUsername_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 129)
}

func ITKDestNo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 130, a)
}

func ITKDestNo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 130, a)
}

func ITKDestNo_Get(p *radius.Packet) (value []byte) {
	value, _ = ITKDestNo_Lookup(p)
	return
}

func ITKDestNo_GetString(p *radius.Packet) (value string) {
	value, _ = ITKDestNo_LookupString(p)
	return
}

func ITKDestNo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ITK_GetsVendor(p, 130) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKDestNo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ITK_GetsVendor(p, 130) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKDestNo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ITK_LookupVendor(p, 130)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ITKDestNo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ITK_LookupVendor(p, 130)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ITKDestNo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 130, a)
}

func ITKDestNo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 130, a)
}

func ITKDestNo_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 130)
}

func ITKDDI_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 131, a)
}

func ITKDDI_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_AddVendor(p, 131, a)
}

func ITKDDI_Get(p *radius.Packet) (value []byte) {
	value, _ = ITKDDI_Lookup(p)
	return
}

func ITKDDI_GetString(p *radius.Packet) (value string) {
	value, _ = ITKDDI_LookupString(p)
	return
}

func ITKDDI_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _ITK_GetsVendor(p, 131) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKDDI_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _ITK_GetsVendor(p, 131) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ITKDDI_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _ITK_LookupVendor(p, 131)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ITKDDI_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _ITK_LookupVendor(p, 131)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ITKDDI_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 131, a)
}

func ITKDDI_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _ITK_SetVendor(p, 131, a)
}

func ITKDDI_Del(p *radius.Packet) {
	_ITK_DelVendor(p, 131)
}
