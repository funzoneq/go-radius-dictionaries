// Code generated by radius-dict-gen. DO NOT EDIT.

package cisco

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Cisco_VendorID = 9
)

func _Cisco_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Cisco_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Cisco_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Cisco_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Cisco_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Cisco_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Cisco_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Cisco_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Cisco_AddVendor(p, typ, attr)
}

func _Cisco_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Cisco_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

func CiscoAVPair_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 1, a)
}

func CiscoAVPair_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 1, a)
}

func CiscoAVPair_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoAVPair_Lookup(p)
	return
}

func CiscoAVPair_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoAVPair_LookupString(p)
	return
}

func CiscoAVPair_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoAVPair_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoAVPair_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoAVPair_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoAVPair_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 1, a)
}

func CiscoAVPair_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 1, a)
}

func CiscoAVPair_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 1)
}

func CiscoNASPort_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 2, a)
}

func CiscoNASPort_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 2, a)
}

func CiscoNASPort_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoNASPort_Lookup(p)
	return
}

func CiscoNASPort_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoNASPort_LookupString(p)
	return
}

func CiscoNASPort_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoNASPort_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoNASPort_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoNASPort_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoNASPort_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 2, a)
}

func CiscoNASPort_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 2, a)
}

func CiscoNASPort_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 2)
}

func CiscoFaxAccountIDOrigin_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 3, a)
}

func CiscoFaxAccountIDOrigin_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 3, a)
}

func CiscoFaxAccountIDOrigin_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoFaxAccountIDOrigin_Lookup(p)
	return
}

func CiscoFaxAccountIDOrigin_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoFaxAccountIDOrigin_LookupString(p)
	return
}

func CiscoFaxAccountIDOrigin_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxAccountIDOrigin_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxAccountIDOrigin_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoFaxAccountIDOrigin_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoFaxAccountIDOrigin_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 3, a)
}

func CiscoFaxAccountIDOrigin_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 3, a)
}

func CiscoFaxAccountIDOrigin_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 3)
}

func CiscoFaxMsgID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 4, a)
}

func CiscoFaxMsgID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 4, a)
}

func CiscoFaxMsgID_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoFaxMsgID_Lookup(p)
	return
}

func CiscoFaxMsgID_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoFaxMsgID_LookupString(p)
	return
}

func CiscoFaxMsgID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxMsgID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxMsgID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoFaxMsgID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoFaxMsgID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 4, a)
}

func CiscoFaxMsgID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 4, a)
}

func CiscoFaxMsgID_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 4)
}

func CiscoFaxPages_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 5, a)
}

func CiscoFaxPages_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 5, a)
}

func CiscoFaxPages_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoFaxPages_Lookup(p)
	return
}

func CiscoFaxPages_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoFaxPages_LookupString(p)
	return
}

func CiscoFaxPages_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxPages_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxPages_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoFaxPages_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoFaxPages_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 5, a)
}

func CiscoFaxPages_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 5, a)
}

func CiscoFaxPages_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 5)
}

func CiscoFaxCoverpageFlag_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 6, a)
}

func CiscoFaxCoverpageFlag_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 6, a)
}

func CiscoFaxCoverpageFlag_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoFaxCoverpageFlag_Lookup(p)
	return
}

func CiscoFaxCoverpageFlag_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoFaxCoverpageFlag_LookupString(p)
	return
}

func CiscoFaxCoverpageFlag_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxCoverpageFlag_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxCoverpageFlag_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoFaxCoverpageFlag_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoFaxCoverpageFlag_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 6, a)
}

func CiscoFaxCoverpageFlag_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 6, a)
}

func CiscoFaxCoverpageFlag_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 6)
}

func CiscoFaxModemTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 7, a)
}

func CiscoFaxModemTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 7, a)
}

func CiscoFaxModemTime_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoFaxModemTime_Lookup(p)
	return
}

func CiscoFaxModemTime_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoFaxModemTime_LookupString(p)
	return
}

func CiscoFaxModemTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 7) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxModemTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 7) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxModemTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoFaxModemTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoFaxModemTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 7, a)
}

func CiscoFaxModemTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 7, a)
}

func CiscoFaxModemTime_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 7)
}

func CiscoFaxConnectSpeed_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 8, a)
}

func CiscoFaxConnectSpeed_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 8, a)
}

func CiscoFaxConnectSpeed_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoFaxConnectSpeed_Lookup(p)
	return
}

func CiscoFaxConnectSpeed_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoFaxConnectSpeed_LookupString(p)
	return
}

func CiscoFaxConnectSpeed_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxConnectSpeed_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxConnectSpeed_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoFaxConnectSpeed_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoFaxConnectSpeed_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 8, a)
}

func CiscoFaxConnectSpeed_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 8, a)
}

func CiscoFaxConnectSpeed_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 8)
}

func CiscoFaxRecipientCount_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 9, a)
}

func CiscoFaxRecipientCount_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 9, a)
}

func CiscoFaxRecipientCount_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoFaxRecipientCount_Lookup(p)
	return
}

func CiscoFaxRecipientCount_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoFaxRecipientCount_LookupString(p)
	return
}

func CiscoFaxRecipientCount_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxRecipientCount_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxRecipientCount_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoFaxRecipientCount_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoFaxRecipientCount_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 9, a)
}

func CiscoFaxRecipientCount_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 9, a)
}

func CiscoFaxRecipientCount_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 9)
}

func CiscoFaxProcessAbortFlag_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 10, a)
}

func CiscoFaxProcessAbortFlag_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 10, a)
}

func CiscoFaxProcessAbortFlag_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoFaxProcessAbortFlag_Lookup(p)
	return
}

func CiscoFaxProcessAbortFlag_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoFaxProcessAbortFlag_LookupString(p)
	return
}

func CiscoFaxProcessAbortFlag_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxProcessAbortFlag_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxProcessAbortFlag_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoFaxProcessAbortFlag_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoFaxProcessAbortFlag_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 10, a)
}

func CiscoFaxProcessAbortFlag_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 10, a)
}

func CiscoFaxProcessAbortFlag_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 10)
}

func CiscoFaxDsnAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 11, a)
}

func CiscoFaxDsnAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 11, a)
}

func CiscoFaxDsnAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoFaxDsnAddress_Lookup(p)
	return
}

func CiscoFaxDsnAddress_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoFaxDsnAddress_LookupString(p)
	return
}

func CiscoFaxDsnAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxDsnAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxDsnAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoFaxDsnAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoFaxDsnAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 11, a)
}

func CiscoFaxDsnAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 11, a)
}

func CiscoFaxDsnAddress_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 11)
}

func CiscoFaxDsnFlag_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 12, a)
}

func CiscoFaxDsnFlag_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 12, a)
}

func CiscoFaxDsnFlag_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoFaxDsnFlag_Lookup(p)
	return
}

func CiscoFaxDsnFlag_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoFaxDsnFlag_LookupString(p)
	return
}

func CiscoFaxDsnFlag_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxDsnFlag_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxDsnFlag_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoFaxDsnFlag_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoFaxDsnFlag_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 12, a)
}

func CiscoFaxDsnFlag_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 12, a)
}

func CiscoFaxDsnFlag_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 12)
}

func CiscoFaxMdnAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 13, a)
}

func CiscoFaxMdnAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 13, a)
}

func CiscoFaxMdnAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoFaxMdnAddress_Lookup(p)
	return
}

func CiscoFaxMdnAddress_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoFaxMdnAddress_LookupString(p)
	return
}

func CiscoFaxMdnAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 13) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxMdnAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 13) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxMdnAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoFaxMdnAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoFaxMdnAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 13, a)
}

func CiscoFaxMdnAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 13, a)
}

func CiscoFaxMdnAddress_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 13)
}

func CiscoFaxMdnFlag_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 14, a)
}

func CiscoFaxMdnFlag_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 14, a)
}

func CiscoFaxMdnFlag_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoFaxMdnFlag_Lookup(p)
	return
}

func CiscoFaxMdnFlag_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoFaxMdnFlag_LookupString(p)
	return
}

func CiscoFaxMdnFlag_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 14) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxMdnFlag_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 14) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxMdnFlag_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoFaxMdnFlag_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoFaxMdnFlag_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 14, a)
}

func CiscoFaxMdnFlag_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 14, a)
}

func CiscoFaxMdnFlag_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 14)
}

func CiscoFaxAuthStatus_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 15, a)
}

func CiscoFaxAuthStatus_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 15, a)
}

func CiscoFaxAuthStatus_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoFaxAuthStatus_Lookup(p)
	return
}

func CiscoFaxAuthStatus_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoFaxAuthStatus_LookupString(p)
	return
}

func CiscoFaxAuthStatus_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 15) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxAuthStatus_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 15) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoFaxAuthStatus_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoFaxAuthStatus_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoFaxAuthStatus_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 15, a)
}

func CiscoFaxAuthStatus_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 15, a)
}

func CiscoFaxAuthStatus_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 15)
}

func CiscoEmailServerAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 16, a)
}

func CiscoEmailServerAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 16, a)
}

func CiscoEmailServerAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoEmailServerAddress_Lookup(p)
	return
}

func CiscoEmailServerAddress_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoEmailServerAddress_LookupString(p)
	return
}

func CiscoEmailServerAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 16) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoEmailServerAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 16) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoEmailServerAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoEmailServerAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoEmailServerAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 16, a)
}

func CiscoEmailServerAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 16, a)
}

func CiscoEmailServerAddress_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 16)
}

func CiscoEmailServerAckFlag_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 17, a)
}

func CiscoEmailServerAckFlag_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 17, a)
}

func CiscoEmailServerAckFlag_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoEmailServerAckFlag_Lookup(p)
	return
}

func CiscoEmailServerAckFlag_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoEmailServerAckFlag_LookupString(p)
	return
}

func CiscoEmailServerAckFlag_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 17) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoEmailServerAckFlag_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 17) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoEmailServerAckFlag_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoEmailServerAckFlag_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoEmailServerAckFlag_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 17, a)
}

func CiscoEmailServerAckFlag_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 17, a)
}

func CiscoEmailServerAckFlag_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 17)
}

func CiscoGatewayID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 18, a)
}

func CiscoGatewayID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 18, a)
}

func CiscoGatewayID_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoGatewayID_Lookup(p)
	return
}

func CiscoGatewayID_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoGatewayID_LookupString(p)
	return
}

func CiscoGatewayID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 18) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoGatewayID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 18) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoGatewayID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoGatewayID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoGatewayID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 18, a)
}

func CiscoGatewayID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 18, a)
}

func CiscoGatewayID_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 18)
}

func CiscoCallType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 19, a)
}

func CiscoCallType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 19, a)
}

func CiscoCallType_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoCallType_Lookup(p)
	return
}

func CiscoCallType_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoCallType_LookupString(p)
	return
}

func CiscoCallType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 19) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoCallType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 19) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoCallType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoCallType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoCallType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 19, a)
}

func CiscoCallType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 19, a)
}

func CiscoCallType_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 19)
}

func CiscoPortUsed_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 20, a)
}

func CiscoPortUsed_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 20, a)
}

func CiscoPortUsed_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoPortUsed_Lookup(p)
	return
}

func CiscoPortUsed_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoPortUsed_LookupString(p)
	return
}

func CiscoPortUsed_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 20) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoPortUsed_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 20) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoPortUsed_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoPortUsed_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoPortUsed_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 20, a)
}

func CiscoPortUsed_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 20, a)
}

func CiscoPortUsed_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 20)
}

func CiscoAbortCause_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 21, a)
}

func CiscoAbortCause_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 21, a)
}

func CiscoAbortCause_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoAbortCause_Lookup(p)
	return
}

func CiscoAbortCause_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoAbortCause_LookupString(p)
	return
}

func CiscoAbortCause_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 21) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoAbortCause_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 21) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoAbortCause_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoAbortCause_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoAbortCause_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 21, a)
}

func CiscoAbortCause_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 21, a)
}

func CiscoAbortCause_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 21)
}

func H323RemoteAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 23, a)
}

func H323RemoteAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 23, a)
}

func H323RemoteAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = H323RemoteAddress_Lookup(p)
	return
}

func H323RemoteAddress_GetString(p *radius.Packet) (value string) {
	value, _ = H323RemoteAddress_LookupString(p)
	return
}

func H323RemoteAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 23) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323RemoteAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 23) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323RemoteAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H323RemoteAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H323RemoteAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 23, a)
}

func H323RemoteAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 23, a)
}

func H323RemoteAddress_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 23)
}

func H323ConfID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 24, a)
}

func H323ConfID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 24, a)
}

func H323ConfID_Get(p *radius.Packet) (value []byte) {
	value, _ = H323ConfID_Lookup(p)
	return
}

func H323ConfID_GetString(p *radius.Packet) (value string) {
	value, _ = H323ConfID_LookupString(p)
	return
}

func H323ConfID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 24) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323ConfID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 24) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323ConfID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H323ConfID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H323ConfID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 24, a)
}

func H323ConfID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 24, a)
}

func H323ConfID_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 24)
}

func H323SetupTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 25, a)
}

func H323SetupTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 25, a)
}

func H323SetupTime_Get(p *radius.Packet) (value []byte) {
	value, _ = H323SetupTime_Lookup(p)
	return
}

func H323SetupTime_GetString(p *radius.Packet) (value string) {
	value, _ = H323SetupTime_LookupString(p)
	return
}

func H323SetupTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 25) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323SetupTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 25) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323SetupTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H323SetupTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H323SetupTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 25, a)
}

func H323SetupTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 25, a)
}

func H323SetupTime_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 25)
}

func H323CallOrigin_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 26, a)
}

func H323CallOrigin_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 26, a)
}

func H323CallOrigin_Get(p *radius.Packet) (value []byte) {
	value, _ = H323CallOrigin_Lookup(p)
	return
}

func H323CallOrigin_GetString(p *radius.Packet) (value string) {
	value, _ = H323CallOrigin_LookupString(p)
	return
}

func H323CallOrigin_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 26) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323CallOrigin_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 26) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323CallOrigin_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H323CallOrigin_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H323CallOrigin_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 26, a)
}

func H323CallOrigin_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 26, a)
}

func H323CallOrigin_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 26)
}

func H323CallType_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 27, a)
}

func H323CallType_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 27, a)
}

func H323CallType_Get(p *radius.Packet) (value []byte) {
	value, _ = H323CallType_Lookup(p)
	return
}

func H323CallType_GetString(p *radius.Packet) (value string) {
	value, _ = H323CallType_LookupString(p)
	return
}

func H323CallType_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 27) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323CallType_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 27) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323CallType_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H323CallType_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H323CallType_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 27, a)
}

func H323CallType_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 27, a)
}

func H323CallType_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 27)
}

func H323ConnectTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 28, a)
}

func H323ConnectTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 28, a)
}

func H323ConnectTime_Get(p *radius.Packet) (value []byte) {
	value, _ = H323ConnectTime_Lookup(p)
	return
}

func H323ConnectTime_GetString(p *radius.Packet) (value string) {
	value, _ = H323ConnectTime_LookupString(p)
	return
}

func H323ConnectTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 28) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323ConnectTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 28) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323ConnectTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H323ConnectTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H323ConnectTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 28, a)
}

func H323ConnectTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 28, a)
}

func H323ConnectTime_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 28)
}

func H323DisconnectTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 29, a)
}

func H323DisconnectTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 29, a)
}

func H323DisconnectTime_Get(p *radius.Packet) (value []byte) {
	value, _ = H323DisconnectTime_Lookup(p)
	return
}

func H323DisconnectTime_GetString(p *radius.Packet) (value string) {
	value, _ = H323DisconnectTime_LookupString(p)
	return
}

func H323DisconnectTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 29) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323DisconnectTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 29) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323DisconnectTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H323DisconnectTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H323DisconnectTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 29, a)
}

func H323DisconnectTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 29, a)
}

func H323DisconnectTime_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 29)
}

func H323DisconnectCause_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 30, a)
}

func H323DisconnectCause_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 30, a)
}

func H323DisconnectCause_Get(p *radius.Packet) (value []byte) {
	value, _ = H323DisconnectCause_Lookup(p)
	return
}

func H323DisconnectCause_GetString(p *radius.Packet) (value string) {
	value, _ = H323DisconnectCause_LookupString(p)
	return
}

func H323DisconnectCause_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 30) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323DisconnectCause_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 30) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323DisconnectCause_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H323DisconnectCause_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H323DisconnectCause_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 30, a)
}

func H323DisconnectCause_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 30, a)
}

func H323DisconnectCause_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 30)
}

func H323VoiceQuality_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 31, a)
}

func H323VoiceQuality_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 31, a)
}

func H323VoiceQuality_Get(p *radius.Packet) (value []byte) {
	value, _ = H323VoiceQuality_Lookup(p)
	return
}

func H323VoiceQuality_GetString(p *radius.Packet) (value string) {
	value, _ = H323VoiceQuality_LookupString(p)
	return
}

func H323VoiceQuality_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 31) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323VoiceQuality_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 31) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323VoiceQuality_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H323VoiceQuality_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H323VoiceQuality_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 31, a)
}

func H323VoiceQuality_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 31, a)
}

func H323VoiceQuality_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 31)
}

func H323GwID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 33, a)
}

func H323GwID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 33, a)
}

func H323GwID_Get(p *radius.Packet) (value []byte) {
	value, _ = H323GwID_Lookup(p)
	return
}

func H323GwID_GetString(p *radius.Packet) (value string) {
	value, _ = H323GwID_LookupString(p)
	return
}

func H323GwID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 33) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323GwID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 33) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323GwID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H323GwID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H323GwID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 33, a)
}

func H323GwID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 33, a)
}

func H323GwID_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 33)
}

func H323IncomingConfID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 35, a)
}

func H323IncomingConfID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 35, a)
}

func H323IncomingConfID_Get(p *radius.Packet) (value []byte) {
	value, _ = H323IncomingConfID_Lookup(p)
	return
}

func H323IncomingConfID_GetString(p *radius.Packet) (value string) {
	value, _ = H323IncomingConfID_LookupString(p)
	return
}

func H323IncomingConfID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 35) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323IncomingConfID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 35) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323IncomingConfID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H323IncomingConfID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H323IncomingConfID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 35, a)
}

func H323IncomingConfID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 35, a)
}

func H323IncomingConfID_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 35)
}

func CiscoPolicyUp_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 37, a)
}

func CiscoPolicyUp_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 37, a)
}

func CiscoPolicyUp_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoPolicyUp_Lookup(p)
	return
}

func CiscoPolicyUp_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoPolicyUp_LookupString(p)
	return
}

func CiscoPolicyUp_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 37) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoPolicyUp_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 37) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoPolicyUp_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoPolicyUp_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoPolicyUp_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 37, a)
}

func CiscoPolicyUp_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 37, a)
}

func CiscoPolicyUp_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 37)
}

func CiscoPolicyDown_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 38, a)
}

func CiscoPolicyDown_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 38, a)
}

func CiscoPolicyDown_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoPolicyDown_Lookup(p)
	return
}

func CiscoPolicyDown_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoPolicyDown_LookupString(p)
	return
}

func CiscoPolicyDown_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 38) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoPolicyDown_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 38) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoPolicyDown_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoPolicyDown_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoPolicyDown_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 38, a)
}

func CiscoPolicyDown_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 38, a)
}

func CiscoPolicyDown_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 38)
}

func SipConfID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 100, a)
}

func SipConfID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 100, a)
}

func SipConfID_Get(p *radius.Packet) (value []byte) {
	value, _ = SipConfID_Lookup(p)
	return
}

func SipConfID_GetString(p *radius.Packet) (value string) {
	value, _ = SipConfID_LookupString(p)
	return
}

func SipConfID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 100) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipConfID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 100) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipConfID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SipConfID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 100)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SipConfID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 100, a)
}

func SipConfID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 100, a)
}

func SipConfID_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 100)
}

func H323CreditAmount_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 101, a)
}

func H323CreditAmount_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 101, a)
}

func H323CreditAmount_Get(p *radius.Packet) (value []byte) {
	value, _ = H323CreditAmount_Lookup(p)
	return
}

func H323CreditAmount_GetString(p *radius.Packet) (value string) {
	value, _ = H323CreditAmount_LookupString(p)
	return
}

func H323CreditAmount_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 101) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323CreditAmount_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 101) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323CreditAmount_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H323CreditAmount_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 101)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H323CreditAmount_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 101, a)
}

func H323CreditAmount_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 101, a)
}

func H323CreditAmount_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 101)
}

func H323CreditTime_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 102, a)
}

func H323CreditTime_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 102, a)
}

func H323CreditTime_Get(p *radius.Packet) (value []byte) {
	value, _ = H323CreditTime_Lookup(p)
	return
}

func H323CreditTime_GetString(p *radius.Packet) (value string) {
	value, _ = H323CreditTime_LookupString(p)
	return
}

func H323CreditTime_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 102) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323CreditTime_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 102) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323CreditTime_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H323CreditTime_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 102)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H323CreditTime_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 102, a)
}

func H323CreditTime_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 102, a)
}

func H323CreditTime_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 102)
}

func H323ReturnCode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 103, a)
}

func H323ReturnCode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 103, a)
}

func H323ReturnCode_Get(p *radius.Packet) (value []byte) {
	value, _ = H323ReturnCode_Lookup(p)
	return
}

func H323ReturnCode_GetString(p *radius.Packet) (value string) {
	value, _ = H323ReturnCode_LookupString(p)
	return
}

func H323ReturnCode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 103) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323ReturnCode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 103) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323ReturnCode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H323ReturnCode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 103)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H323ReturnCode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 103, a)
}

func H323ReturnCode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 103, a)
}

func H323ReturnCode_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 103)
}

func H323PromptID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 104, a)
}

func H323PromptID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 104, a)
}

func H323PromptID_Get(p *radius.Packet) (value []byte) {
	value, _ = H323PromptID_Lookup(p)
	return
}

func H323PromptID_GetString(p *radius.Packet) (value string) {
	value, _ = H323PromptID_LookupString(p)
	return
}

func H323PromptID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 104) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323PromptID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 104) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323PromptID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H323PromptID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 104)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H323PromptID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 104, a)
}

func H323PromptID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 104, a)
}

func H323PromptID_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 104)
}

func H323TimeAndDay_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 105, a)
}

func H323TimeAndDay_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 105, a)
}

func H323TimeAndDay_Get(p *radius.Packet) (value []byte) {
	value, _ = H323TimeAndDay_Lookup(p)
	return
}

func H323TimeAndDay_GetString(p *radius.Packet) (value string) {
	value, _ = H323TimeAndDay_LookupString(p)
	return
}

func H323TimeAndDay_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 105) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323TimeAndDay_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 105) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323TimeAndDay_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H323TimeAndDay_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 105)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H323TimeAndDay_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 105, a)
}

func H323TimeAndDay_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 105, a)
}

func H323TimeAndDay_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 105)
}

func H323RedirectNumber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 106, a)
}

func H323RedirectNumber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 106, a)
}

func H323RedirectNumber_Get(p *radius.Packet) (value []byte) {
	value, _ = H323RedirectNumber_Lookup(p)
	return
}

func H323RedirectNumber_GetString(p *radius.Packet) (value string) {
	value, _ = H323RedirectNumber_LookupString(p)
	return
}

func H323RedirectNumber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 106) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323RedirectNumber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 106) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323RedirectNumber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H323RedirectNumber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 106)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H323RedirectNumber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 106, a)
}

func H323RedirectNumber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 106, a)
}

func H323RedirectNumber_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 106)
}

func H323PreferredLang_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 107, a)
}

func H323PreferredLang_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 107, a)
}

func H323PreferredLang_Get(p *radius.Packet) (value []byte) {
	value, _ = H323PreferredLang_Lookup(p)
	return
}

func H323PreferredLang_GetString(p *radius.Packet) (value string) {
	value, _ = H323PreferredLang_LookupString(p)
	return
}

func H323PreferredLang_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 107) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323PreferredLang_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 107) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323PreferredLang_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H323PreferredLang_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 107)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H323PreferredLang_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 107, a)
}

func H323PreferredLang_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 107, a)
}

func H323PreferredLang_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 107)
}

func H323RedirectIPAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 108, a)
}

func H323RedirectIPAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 108, a)
}

func H323RedirectIPAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = H323RedirectIPAddress_Lookup(p)
	return
}

func H323RedirectIPAddress_GetString(p *radius.Packet) (value string) {
	value, _ = H323RedirectIPAddress_LookupString(p)
	return
}

func H323RedirectIPAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 108) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323RedirectIPAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 108) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323RedirectIPAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H323RedirectIPAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 108)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H323RedirectIPAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 108, a)
}

func H323RedirectIPAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 108, a)
}

func H323RedirectIPAddress_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 108)
}

func H323BillingModel_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 109, a)
}

func H323BillingModel_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 109, a)
}

func H323BillingModel_Get(p *radius.Packet) (value []byte) {
	value, _ = H323BillingModel_Lookup(p)
	return
}

func H323BillingModel_GetString(p *radius.Packet) (value string) {
	value, _ = H323BillingModel_LookupString(p)
	return
}

func H323BillingModel_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 109) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323BillingModel_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 109) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323BillingModel_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H323BillingModel_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 109)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H323BillingModel_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 109, a)
}

func H323BillingModel_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 109, a)
}

func H323BillingModel_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 109)
}

func H323Currency_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 110, a)
}

func H323Currency_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 110, a)
}

func H323Currency_Get(p *radius.Packet) (value []byte) {
	value, _ = H323Currency_Lookup(p)
	return
}

func H323Currency_GetString(p *radius.Packet) (value string) {
	value, _ = H323Currency_LookupString(p)
	return
}

func H323Currency_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 110) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323Currency_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 110) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H323Currency_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H323Currency_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 110)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H323Currency_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 110, a)
}

func H323Currency_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 110, a)
}

func H323Currency_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 110)
}

func Subscriber_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 111, a)
}

func Subscriber_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 111, a)
}

func Subscriber_Get(p *radius.Packet) (value []byte) {
	value, _ = Subscriber_Lookup(p)
	return
}

func Subscriber_GetString(p *radius.Packet) (value string) {
	value, _ = Subscriber_LookupString(p)
	return
}

func Subscriber_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 111) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func Subscriber_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 111) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func Subscriber_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func Subscriber_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 111)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func Subscriber_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 111, a)
}

func Subscriber_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 111, a)
}

func Subscriber_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 111)
}

func GwRxdCdn_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 112, a)
}

func GwRxdCdn_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 112, a)
}

func GwRxdCdn_Get(p *radius.Packet) (value []byte) {
	value, _ = GwRxdCdn_Lookup(p)
	return
}

func GwRxdCdn_GetString(p *radius.Packet) (value string) {
	value, _ = GwRxdCdn_LookupString(p)
	return
}

func GwRxdCdn_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 112) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GwRxdCdn_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 112) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GwRxdCdn_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func GwRxdCdn_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 112)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func GwRxdCdn_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 112, a)
}

func GwRxdCdn_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 112, a)
}

func GwRxdCdn_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 112)
}

func GwFinalXlatedCdn_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 113, a)
}

func GwFinalXlatedCdn_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 113, a)
}

func GwFinalXlatedCdn_Get(p *radius.Packet) (value []byte) {
	value, _ = GwFinalXlatedCdn_Lookup(p)
	return
}

func GwFinalXlatedCdn_GetString(p *radius.Packet) (value string) {
	value, _ = GwFinalXlatedCdn_LookupString(p)
	return
}

func GwFinalXlatedCdn_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 113) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GwFinalXlatedCdn_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 113) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GwFinalXlatedCdn_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func GwFinalXlatedCdn_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 113)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func GwFinalXlatedCdn_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 113, a)
}

func GwFinalXlatedCdn_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 113, a)
}

func GwFinalXlatedCdn_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 113)
}

func RemoteMediaAddress_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 114, a)
}

func RemoteMediaAddress_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 114, a)
}

func RemoteMediaAddress_Get(p *radius.Packet) (value []byte) {
	value, _ = RemoteMediaAddress_Lookup(p)
	return
}

func RemoteMediaAddress_GetString(p *radius.Packet) (value string) {
	value, _ = RemoteMediaAddress_LookupString(p)
	return
}

func RemoteMediaAddress_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 114) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RemoteMediaAddress_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 114) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func RemoteMediaAddress_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func RemoteMediaAddress_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 114)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func RemoteMediaAddress_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 114, a)
}

func RemoteMediaAddress_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 114, a)
}

func RemoteMediaAddress_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 114)
}

func ReleaseSource_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 115, a)
}

func ReleaseSource_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 115, a)
}

func ReleaseSource_Get(p *radius.Packet) (value []byte) {
	value, _ = ReleaseSource_Lookup(p)
	return
}

func ReleaseSource_GetString(p *radius.Packet) (value string) {
	value, _ = ReleaseSource_LookupString(p)
	return
}

func ReleaseSource_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 115) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ReleaseSource_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 115) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ReleaseSource_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 115)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ReleaseSource_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 115)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ReleaseSource_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 115, a)
}

func ReleaseSource_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 115, a)
}

func ReleaseSource_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 115)
}

func GwRxdCgn_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 116, a)
}

func GwRxdCgn_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 116, a)
}

func GwRxdCgn_Get(p *radius.Packet) (value []byte) {
	value, _ = GwRxdCgn_Lookup(p)
	return
}

func GwRxdCgn_GetString(p *radius.Packet) (value string) {
	value, _ = GwRxdCgn_LookupString(p)
	return
}

func GwRxdCgn_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 116) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GwRxdCgn_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 116) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GwRxdCgn_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 116)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func GwRxdCgn_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 116)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func GwRxdCgn_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 116, a)
}

func GwRxdCgn_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 116, a)
}

func GwRxdCgn_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 116)
}

func GwFinalXlatedCgn_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 117, a)
}

func GwFinalXlatedCgn_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 117, a)
}

func GwFinalXlatedCgn_Get(p *radius.Packet) (value []byte) {
	value, _ = GwFinalXlatedCgn_Lookup(p)
	return
}

func GwFinalXlatedCgn_GetString(p *radius.Packet) (value string) {
	value, _ = GwFinalXlatedCgn_LookupString(p)
	return
}

func GwFinalXlatedCgn_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 117) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GwFinalXlatedCgn_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 117) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func GwFinalXlatedCgn_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 117)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func GwFinalXlatedCgn_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 117)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func GwFinalXlatedCgn_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 117, a)
}

func GwFinalXlatedCgn_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 117, a)
}

func GwFinalXlatedCgn_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 117)
}

func CallID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 141, a)
}

func CallID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 141, a)
}

func CallID_Get(p *radius.Packet) (value []byte) {
	value, _ = CallID_Lookup(p)
	return
}

func CallID_GetString(p *radius.Packet) (value string) {
	value, _ = CallID_LookupString(p)
	return
}

func CallID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 141) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CallID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 141) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CallID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CallID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CallID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 141, a)
}

func CallID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 141, a)
}

func CallID_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 141)
}

func SessionProtocol_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 142, a)
}

func SessionProtocol_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 142, a)
}

func SessionProtocol_Get(p *radius.Packet) (value []byte) {
	value, _ = SessionProtocol_Lookup(p)
	return
}

func SessionProtocol_GetString(p *radius.Packet) (value string) {
	value, _ = SessionProtocol_LookupString(p)
	return
}

func SessionProtocol_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 142) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SessionProtocol_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 142) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SessionProtocol_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 142)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SessionProtocol_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 142)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SessionProtocol_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 142, a)
}

func SessionProtocol_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 142, a)
}

func SessionProtocol_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 142)
}

func Method_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 143, a)
}

func Method_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 143, a)
}

func Method_Get(p *radius.Packet) (value []byte) {
	value, _ = Method_Lookup(p)
	return
}

func Method_GetString(p *radius.Packet) (value string) {
	value, _ = Method_LookupString(p)
	return
}

func Method_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 143) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func Method_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 143) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func Method_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 143)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func Method_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 143)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func Method_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 143, a)
}

func Method_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 143, a)
}

func Method_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 143)
}

func PrevHopVia_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 144, a)
}

func PrevHopVia_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 144, a)
}

func PrevHopVia_Get(p *radius.Packet) (value []byte) {
	value, _ = PrevHopVia_Lookup(p)
	return
}

func PrevHopVia_GetString(p *radius.Packet) (value string) {
	value, _ = PrevHopVia_LookupString(p)
	return
}

func PrevHopVia_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 144) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PrevHopVia_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 144) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PrevHopVia_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 144)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PrevHopVia_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 144)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PrevHopVia_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 144, a)
}

func PrevHopVia_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 144, a)
}

func PrevHopVia_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 144)
}

func PrevHopIP_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 145, a)
}

func PrevHopIP_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 145, a)
}

func PrevHopIP_Get(p *radius.Packet) (value []byte) {
	value, _ = PrevHopIP_Lookup(p)
	return
}

func PrevHopIP_GetString(p *radius.Packet) (value string) {
	value, _ = PrevHopIP_LookupString(p)
	return
}

func PrevHopIP_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 145) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PrevHopIP_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 145) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func PrevHopIP_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 145)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func PrevHopIP_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 145)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func PrevHopIP_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 145, a)
}

func PrevHopIP_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 145, a)
}

func PrevHopIP_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 145)
}

func IncomingReqURI_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 146, a)
}

func IncomingReqURI_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 146, a)
}

func IncomingReqURI_Get(p *radius.Packet) (value []byte) {
	value, _ = IncomingReqURI_Lookup(p)
	return
}

func IncomingReqURI_GetString(p *radius.Packet) (value string) {
	value, _ = IncomingReqURI_LookupString(p)
	return
}

func IncomingReqURI_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 146) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IncomingReqURI_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 146) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func IncomingReqURI_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 146)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func IncomingReqURI_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 146)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func IncomingReqURI_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 146, a)
}

func IncomingReqURI_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 146, a)
}

func IncomingReqURI_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 146)
}

func OutgoingReqURI_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 147, a)
}

func OutgoingReqURI_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 147, a)
}

func OutgoingReqURI_Get(p *radius.Packet) (value []byte) {
	value, _ = OutgoingReqURI_Lookup(p)
	return
}

func OutgoingReqURI_GetString(p *radius.Packet) (value string) {
	value, _ = OutgoingReqURI_LookupString(p)
	return
}

func OutgoingReqURI_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 147) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func OutgoingReqURI_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 147) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func OutgoingReqURI_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 147)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func OutgoingReqURI_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 147)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func OutgoingReqURI_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 147, a)
}

func OutgoingReqURI_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 147, a)
}

func OutgoingReqURI_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 147)
}

func NextHopIP_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 148, a)
}

func NextHopIP_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 148, a)
}

func NextHopIP_Get(p *radius.Packet) (value []byte) {
	value, _ = NextHopIP_Lookup(p)
	return
}

func NextHopIP_GetString(p *radius.Packet) (value string) {
	value, _ = NextHopIP_LookupString(p)
	return
}

func NextHopIP_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 148) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NextHopIP_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 148) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NextHopIP_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 148)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NextHopIP_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 148)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NextHopIP_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 148, a)
}

func NextHopIP_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 148, a)
}

func NextHopIP_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 148)
}

func NextHopDn_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 149, a)
}

func NextHopDn_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 149, a)
}

func NextHopDn_Get(p *radius.Packet) (value []byte) {
	value, _ = NextHopDn_Lookup(p)
	return
}

func NextHopDn_GetString(p *radius.Packet) (value string) {
	value, _ = NextHopDn_LookupString(p)
	return
}

func NextHopDn_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 149) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NextHopDn_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 149) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NextHopDn_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 149)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NextHopDn_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 149)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NextHopDn_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 149, a)
}

func NextHopDn_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 149, a)
}

func NextHopDn_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 149)
}

func SipHdr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 150, a)
}

func SipHdr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 150, a)
}

func SipHdr_Get(p *radius.Packet) (value []byte) {
	value, _ = SipHdr_Lookup(p)
	return
}

func SipHdr_GetString(p *radius.Packet) (value string) {
	value, _ = SipHdr_LookupString(p)
	return
}

func SipHdr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 150) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipHdr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 150) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func SipHdr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 150)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func SipHdr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 150)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func SipHdr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 150, a)
}

func SipHdr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 150, a)
}

func SipHdr_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 150)
}

func DspID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 151, a)
}

func DspID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 151, a)
}

func DspID_Get(p *radius.Packet) (value []byte) {
	value, _ = DspID_Lookup(p)
	return
}

func DspID_GetString(p *radius.Packet) (value string) {
	value, _ = DspID_LookupString(p)
	return
}

func DspID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 151) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DspID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 151) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func DspID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 151)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func DspID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 151)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func DspID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 151, a)
}

func DspID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 151, a)
}

func DspID_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 151)
}

type CiscoMultilinkID uint32

var CiscoMultilinkID_Strings = map[CiscoMultilinkID]string{}

func (a CiscoMultilinkID) String() string {
	if str, ok := CiscoMultilinkID_Strings[a]; ok {
		return str
	}
	return "CiscoMultilinkID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoMultilinkID_Add(p *radius.Packet, value CiscoMultilinkID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 187, a)
}

func CiscoMultilinkID_Get(p *radius.Packet) (value CiscoMultilinkID) {
	value, _ = CiscoMultilinkID_Lookup(p)
	return
}

func CiscoMultilinkID_Gets(p *radius.Packet) (values []CiscoMultilinkID, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 187) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoMultilinkID(i))
	}
	return
}

func CiscoMultilinkID_Lookup(p *radius.Packet) (value CiscoMultilinkID, err error) {
	a, ok := _Cisco_LookupVendor(p, 187)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoMultilinkID(i)
	return
}

func CiscoMultilinkID_Set(p *radius.Packet, value CiscoMultilinkID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 187, a)
}

func CiscoMultilinkID_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 187)
}

type CiscoNumInMultilink uint32

var CiscoNumInMultilink_Strings = map[CiscoNumInMultilink]string{}

func (a CiscoNumInMultilink) String() string {
	if str, ok := CiscoNumInMultilink_Strings[a]; ok {
		return str
	}
	return "CiscoNumInMultilink(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoNumInMultilink_Add(p *radius.Packet, value CiscoNumInMultilink) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 188, a)
}

func CiscoNumInMultilink_Get(p *radius.Packet) (value CiscoNumInMultilink) {
	value, _ = CiscoNumInMultilink_Lookup(p)
	return
}

func CiscoNumInMultilink_Gets(p *radius.Packet) (values []CiscoNumInMultilink, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 188) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoNumInMultilink(i))
	}
	return
}

func CiscoNumInMultilink_Lookup(p *radius.Packet) (value CiscoNumInMultilink, err error) {
	a, ok := _Cisco_LookupVendor(p, 188)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoNumInMultilink(i)
	return
}

func CiscoNumInMultilink_Set(p *radius.Packet, value CiscoNumInMultilink) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 188, a)
}

func CiscoNumInMultilink_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 188)
}

type CiscoPreInputOctets uint32

var CiscoPreInputOctets_Strings = map[CiscoPreInputOctets]string{}

func (a CiscoPreInputOctets) String() string {
	if str, ok := CiscoPreInputOctets_Strings[a]; ok {
		return str
	}
	return "CiscoPreInputOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoPreInputOctets_Add(p *radius.Packet, value CiscoPreInputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 190, a)
}

func CiscoPreInputOctets_Get(p *radius.Packet) (value CiscoPreInputOctets) {
	value, _ = CiscoPreInputOctets_Lookup(p)
	return
}

func CiscoPreInputOctets_Gets(p *radius.Packet) (values []CiscoPreInputOctets, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 190) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoPreInputOctets(i))
	}
	return
}

func CiscoPreInputOctets_Lookup(p *radius.Packet) (value CiscoPreInputOctets, err error) {
	a, ok := _Cisco_LookupVendor(p, 190)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoPreInputOctets(i)
	return
}

func CiscoPreInputOctets_Set(p *radius.Packet, value CiscoPreInputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 190, a)
}

func CiscoPreInputOctets_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 190)
}

type CiscoPreOutputOctets uint32

var CiscoPreOutputOctets_Strings = map[CiscoPreOutputOctets]string{}

func (a CiscoPreOutputOctets) String() string {
	if str, ok := CiscoPreOutputOctets_Strings[a]; ok {
		return str
	}
	return "CiscoPreOutputOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoPreOutputOctets_Add(p *radius.Packet, value CiscoPreOutputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 191, a)
}

func CiscoPreOutputOctets_Get(p *radius.Packet) (value CiscoPreOutputOctets) {
	value, _ = CiscoPreOutputOctets_Lookup(p)
	return
}

func CiscoPreOutputOctets_Gets(p *radius.Packet) (values []CiscoPreOutputOctets, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 191) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoPreOutputOctets(i))
	}
	return
}

func CiscoPreOutputOctets_Lookup(p *radius.Packet) (value CiscoPreOutputOctets, err error) {
	a, ok := _Cisco_LookupVendor(p, 191)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoPreOutputOctets(i)
	return
}

func CiscoPreOutputOctets_Set(p *radius.Packet, value CiscoPreOutputOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 191, a)
}

func CiscoPreOutputOctets_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 191)
}

type CiscoPreInputPackets uint32

var CiscoPreInputPackets_Strings = map[CiscoPreInputPackets]string{}

func (a CiscoPreInputPackets) String() string {
	if str, ok := CiscoPreInputPackets_Strings[a]; ok {
		return str
	}
	return "CiscoPreInputPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoPreInputPackets_Add(p *radius.Packet, value CiscoPreInputPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 192, a)
}

func CiscoPreInputPackets_Get(p *radius.Packet) (value CiscoPreInputPackets) {
	value, _ = CiscoPreInputPackets_Lookup(p)
	return
}

func CiscoPreInputPackets_Gets(p *radius.Packet) (values []CiscoPreInputPackets, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 192) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoPreInputPackets(i))
	}
	return
}

func CiscoPreInputPackets_Lookup(p *radius.Packet) (value CiscoPreInputPackets, err error) {
	a, ok := _Cisco_LookupVendor(p, 192)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoPreInputPackets(i)
	return
}

func CiscoPreInputPackets_Set(p *radius.Packet, value CiscoPreInputPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 192, a)
}

func CiscoPreInputPackets_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 192)
}

type CiscoPreOutputPackets uint32

var CiscoPreOutputPackets_Strings = map[CiscoPreOutputPackets]string{}

func (a CiscoPreOutputPackets) String() string {
	if str, ok := CiscoPreOutputPackets_Strings[a]; ok {
		return str
	}
	return "CiscoPreOutputPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoPreOutputPackets_Add(p *radius.Packet, value CiscoPreOutputPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 193, a)
}

func CiscoPreOutputPackets_Get(p *radius.Packet) (value CiscoPreOutputPackets) {
	value, _ = CiscoPreOutputPackets_Lookup(p)
	return
}

func CiscoPreOutputPackets_Gets(p *radius.Packet) (values []CiscoPreOutputPackets, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 193) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoPreOutputPackets(i))
	}
	return
}

func CiscoPreOutputPackets_Lookup(p *radius.Packet) (value CiscoPreOutputPackets, err error) {
	a, ok := _Cisco_LookupVendor(p, 193)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoPreOutputPackets(i)
	return
}

func CiscoPreOutputPackets_Set(p *radius.Packet, value CiscoPreOutputPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 193, a)
}

func CiscoPreOutputPackets_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 193)
}

type CiscoMaximumTime uint32

var CiscoMaximumTime_Strings = map[CiscoMaximumTime]string{}

func (a CiscoMaximumTime) String() string {
	if str, ok := CiscoMaximumTime_Strings[a]; ok {
		return str
	}
	return "CiscoMaximumTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoMaximumTime_Add(p *radius.Packet, value CiscoMaximumTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 194, a)
}

func CiscoMaximumTime_Get(p *radius.Packet) (value CiscoMaximumTime) {
	value, _ = CiscoMaximumTime_Lookup(p)
	return
}

func CiscoMaximumTime_Gets(p *radius.Packet) (values []CiscoMaximumTime, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 194) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoMaximumTime(i))
	}
	return
}

func CiscoMaximumTime_Lookup(p *radius.Packet) (value CiscoMaximumTime, err error) {
	a, ok := _Cisco_LookupVendor(p, 194)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoMaximumTime(i)
	return
}

func CiscoMaximumTime_Set(p *radius.Packet, value CiscoMaximumTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 194, a)
}

func CiscoMaximumTime_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 194)
}

type CiscoDisconnectCause uint32

const (
	CiscoDisconnectCause_Value_NoReason                   CiscoDisconnectCause = 0
	CiscoDisconnectCause_Value_NoDisconnect               CiscoDisconnectCause = 1
	CiscoDisconnectCause_Value_Unknown                    CiscoDisconnectCause = 2
	CiscoDisconnectCause_Value_CallDisconnect             CiscoDisconnectCause = 3
	CiscoDisconnectCause_Value_CLIDAuthenticationFailure  CiscoDisconnectCause = 4
	CiscoDisconnectCause_Value_NoModemAvailable           CiscoDisconnectCause = 9
	CiscoDisconnectCause_Value_NoCarrier                  CiscoDisconnectCause = 10
	CiscoDisconnectCause_Value_LostCarrier                CiscoDisconnectCause = 11
	CiscoDisconnectCause_Value_NoDetectedResultCodes      CiscoDisconnectCause = 12
	CiscoDisconnectCause_Value_UserEndsSession            CiscoDisconnectCause = 20
	CiscoDisconnectCause_Value_IdleTimeout                CiscoDisconnectCause = 21
	CiscoDisconnectCause_Value_ExitTelnetSession          CiscoDisconnectCause = 22
	CiscoDisconnectCause_Value_NoRemoteIPAddr             CiscoDisconnectCause = 23
	CiscoDisconnectCause_Value_ExitRawTCP                 CiscoDisconnectCause = 24
	CiscoDisconnectCause_Value_PasswordFail               CiscoDisconnectCause = 25
	CiscoDisconnectCause_Value_RawTCPDisabled             CiscoDisconnectCause = 26
	CiscoDisconnectCause_Value_ControlCDetected           CiscoDisconnectCause = 27
	CiscoDisconnectCause_Value_EXECProgramDestroyed       CiscoDisconnectCause = 28
	CiscoDisconnectCause_Value_CloseVirtualConnection     CiscoDisconnectCause = 29
	CiscoDisconnectCause_Value_EndVirtualConnection       CiscoDisconnectCause = 30
	CiscoDisconnectCause_Value_ExitRlogin                 CiscoDisconnectCause = 31
	CiscoDisconnectCause_Value_InvalidRloginOption        CiscoDisconnectCause = 32
	CiscoDisconnectCause_Value_InsufficientResources      CiscoDisconnectCause = 33
	CiscoDisconnectCause_Value_TimeoutPPPLCP              CiscoDisconnectCause = 40
	CiscoDisconnectCause_Value_FailedPPPLCPNegotiation    CiscoDisconnectCause = 41
	CiscoDisconnectCause_Value_FailedPPPPAPAuthFail       CiscoDisconnectCause = 42
	CiscoDisconnectCause_Value_FailedPPPCHAPAuth          CiscoDisconnectCause = 43
	CiscoDisconnectCause_Value_FailedPPPRemoteAuth        CiscoDisconnectCause = 44
	CiscoDisconnectCause_Value_PPPRemoteTerminate         CiscoDisconnectCause = 45
	CiscoDisconnectCause_Value_PPPClosedEvent             CiscoDisconnectCause = 46
	CiscoDisconnectCause_Value_NCPClosedPPP               CiscoDisconnectCause = 47
	CiscoDisconnectCause_Value_MPErrorPPP                 CiscoDisconnectCause = 48
	CiscoDisconnectCause_Value_PPPMaximumChannels         CiscoDisconnectCause = 49
	CiscoDisconnectCause_Value_TablesFull                 CiscoDisconnectCause = 50
	CiscoDisconnectCause_Value_ResourcesFull              CiscoDisconnectCause = 51
	CiscoDisconnectCause_Value_InvalidIPAddress           CiscoDisconnectCause = 52
	CiscoDisconnectCause_Value_BadHostname                CiscoDisconnectCause = 53
	CiscoDisconnectCause_Value_BadPort                    CiscoDisconnectCause = 54
	CiscoDisconnectCause_Value_ResetTCP                   CiscoDisconnectCause = 60
	CiscoDisconnectCause_Value_TCPConnectionRefused       CiscoDisconnectCause = 61
	CiscoDisconnectCause_Value_TimeoutTCP                 CiscoDisconnectCause = 62
	CiscoDisconnectCause_Value_ForeignHostCloseTCP        CiscoDisconnectCause = 63
	CiscoDisconnectCause_Value_TCPNetworkUnreachable      CiscoDisconnectCause = 64
	CiscoDisconnectCause_Value_TCPHostUnreachable         CiscoDisconnectCause = 65
	CiscoDisconnectCause_Value_TCPNetworkAdminUnreachable CiscoDisconnectCause = 66
	CiscoDisconnectCause_Value_TCPPortUnreachable         CiscoDisconnectCause = 67
	CiscoDisconnectCause_Value_SessionTimeout             CiscoDisconnectCause = 100
	CiscoDisconnectCause_Value_SessionFailedSecurity      CiscoDisconnectCause = 101
	CiscoDisconnectCause_Value_SessionEndCallback         CiscoDisconnectCause = 102
	CiscoDisconnectCause_Value_InvalidProtocol            CiscoDisconnectCause = 120
	CiscoDisconnectCause_Value_RADIUSDisconnect           CiscoDisconnectCause = 150
	CiscoDisconnectCause_Value_LocalAdminDisconnect       CiscoDisconnectCause = 151
	CiscoDisconnectCause_Value_SNMPDisconnect             CiscoDisconnectCause = 152
	CiscoDisconnectCause_Value_V110Retries                CiscoDisconnectCause = 160
	CiscoDisconnectCause_Value_PPPAuthenticationTimeout   CiscoDisconnectCause = 170
	CiscoDisconnectCause_Value_LocalHangup                CiscoDisconnectCause = 180
	CiscoDisconnectCause_Value_RemoteHangup               CiscoDisconnectCause = 185
	CiscoDisconnectCause_Value_T1Quiesced                 CiscoDisconnectCause = 190
	CiscoDisconnectCause_Value_CallDuration               CiscoDisconnectCause = 195
	CiscoDisconnectCause_Value_VPNUserDisconnect          CiscoDisconnectCause = 600
	CiscoDisconnectCause_Value_VPNCarrierLoss             CiscoDisconnectCause = 601
	CiscoDisconnectCause_Value_VPNNoResources             CiscoDisconnectCause = 602
	CiscoDisconnectCause_Value_VPNBadControlPacket        CiscoDisconnectCause = 603
	CiscoDisconnectCause_Value_VPNAdminDisconnect         CiscoDisconnectCause = 604
	CiscoDisconnectCause_Value_VPNTunnelShut              CiscoDisconnectCause = 605
	CiscoDisconnectCause_Value_VPNLocalDisconnect         CiscoDisconnectCause = 606
	CiscoDisconnectCause_Value_VPNSessionLimit            CiscoDisconnectCause = 607
	CiscoDisconnectCause_Value_VPNCallRedirect            CiscoDisconnectCause = 608
)

var CiscoDisconnectCause_Strings = map[CiscoDisconnectCause]string{
	CiscoDisconnectCause_Value_NoReason:                   "No-Reason",
	CiscoDisconnectCause_Value_NoDisconnect:               "No-Disconnect",
	CiscoDisconnectCause_Value_Unknown:                    "Unknown",
	CiscoDisconnectCause_Value_CallDisconnect:             "Call-Disconnect",
	CiscoDisconnectCause_Value_CLIDAuthenticationFailure:  "CLID-Authentication-Failure",
	CiscoDisconnectCause_Value_NoModemAvailable:           "No-Modem-Available",
	CiscoDisconnectCause_Value_NoCarrier:                  "No-Carrier",
	CiscoDisconnectCause_Value_LostCarrier:                "Lost-Carrier",
	CiscoDisconnectCause_Value_NoDetectedResultCodes:      "No-Detected-Result-Codes",
	CiscoDisconnectCause_Value_UserEndsSession:            "User-Ends-Session",
	CiscoDisconnectCause_Value_IdleTimeout:                "Idle-Timeout",
	CiscoDisconnectCause_Value_ExitTelnetSession:          "Exit-Telnet-Session",
	CiscoDisconnectCause_Value_NoRemoteIPAddr:             "No-Remote-IP-Addr",
	CiscoDisconnectCause_Value_ExitRawTCP:                 "Exit-Raw-TCP",
	CiscoDisconnectCause_Value_PasswordFail:               "Password-Fail",
	CiscoDisconnectCause_Value_RawTCPDisabled:             "Raw-TCP-Disabled",
	CiscoDisconnectCause_Value_ControlCDetected:           "Control-C-Detected",
	CiscoDisconnectCause_Value_EXECProgramDestroyed:       "EXEC-Program-Destroyed",
	CiscoDisconnectCause_Value_CloseVirtualConnection:     "Close-Virtual-Connection",
	CiscoDisconnectCause_Value_EndVirtualConnection:       "End-Virtual-Connection",
	CiscoDisconnectCause_Value_ExitRlogin:                 "Exit-Rlogin",
	CiscoDisconnectCause_Value_InvalidRloginOption:        "Invalid-Rlogin-Option",
	CiscoDisconnectCause_Value_InsufficientResources:      "Insufficient-Resources",
	CiscoDisconnectCause_Value_TimeoutPPPLCP:              "Timeout-PPP-LCP",
	CiscoDisconnectCause_Value_FailedPPPLCPNegotiation:    "Failed-PPP-LCP-Negotiation",
	CiscoDisconnectCause_Value_FailedPPPPAPAuthFail:       "Failed-PPP-PAP-Auth-Fail",
	CiscoDisconnectCause_Value_FailedPPPCHAPAuth:          "Failed-PPP-CHAP-Auth",
	CiscoDisconnectCause_Value_FailedPPPRemoteAuth:        "Failed-PPP-Remote-Auth",
	CiscoDisconnectCause_Value_PPPRemoteTerminate:         "PPP-Remote-Terminate",
	CiscoDisconnectCause_Value_PPPClosedEvent:             "PPP-Closed-Event",
	CiscoDisconnectCause_Value_NCPClosedPPP:               "NCP-Closed-PPP",
	CiscoDisconnectCause_Value_MPErrorPPP:                 "MP-Error-PPP",
	CiscoDisconnectCause_Value_PPPMaximumChannels:         "PPP-Maximum-Channels",
	CiscoDisconnectCause_Value_TablesFull:                 "Tables-Full",
	CiscoDisconnectCause_Value_ResourcesFull:              "Resources-Full",
	CiscoDisconnectCause_Value_InvalidIPAddress:           "Invalid-IP-Address",
	CiscoDisconnectCause_Value_BadHostname:                "Bad-Hostname",
	CiscoDisconnectCause_Value_BadPort:                    "Bad-Port",
	CiscoDisconnectCause_Value_ResetTCP:                   "Reset-TCP",
	CiscoDisconnectCause_Value_TCPConnectionRefused:       "TCP-Connection-Refused",
	CiscoDisconnectCause_Value_TimeoutTCP:                 "Timeout-TCP",
	CiscoDisconnectCause_Value_ForeignHostCloseTCP:        "Foreign-Host-Close-TCP",
	CiscoDisconnectCause_Value_TCPNetworkUnreachable:      "TCP-Network-Unreachable",
	CiscoDisconnectCause_Value_TCPHostUnreachable:         "TCP-Host-Unreachable",
	CiscoDisconnectCause_Value_TCPNetworkAdminUnreachable: "TCP-Network-Admin-Unreachable",
	CiscoDisconnectCause_Value_TCPPortUnreachable:         "TCP-Port-Unreachable",
	CiscoDisconnectCause_Value_SessionTimeout:             "Session-Timeout",
	CiscoDisconnectCause_Value_SessionFailedSecurity:      "Session-Failed-Security",
	CiscoDisconnectCause_Value_SessionEndCallback:         "Session-End-Callback",
	CiscoDisconnectCause_Value_InvalidProtocol:            "Invalid-Protocol",
	CiscoDisconnectCause_Value_RADIUSDisconnect:           "RADIUS-Disconnect",
	CiscoDisconnectCause_Value_LocalAdminDisconnect:       "Local-Admin-Disconnect",
	CiscoDisconnectCause_Value_SNMPDisconnect:             "SNMP-Disconnect",
	CiscoDisconnectCause_Value_V110Retries:                "V110-Retries",
	CiscoDisconnectCause_Value_PPPAuthenticationTimeout:   "PPP-Authentication-Timeout",
	CiscoDisconnectCause_Value_LocalHangup:                "Local-Hangup",
	CiscoDisconnectCause_Value_RemoteHangup:               "Remote-Hangup",
	CiscoDisconnectCause_Value_T1Quiesced:                 "T1-Quiesced",
	CiscoDisconnectCause_Value_CallDuration:               "Call-Duration",
	CiscoDisconnectCause_Value_VPNUserDisconnect:          "VPN-User-Disconnect",
	CiscoDisconnectCause_Value_VPNCarrierLoss:             "VPN-Carrier-Loss",
	CiscoDisconnectCause_Value_VPNNoResources:             "VPN-No-Resources",
	CiscoDisconnectCause_Value_VPNBadControlPacket:        "VPN-Bad-Control-Packet",
	CiscoDisconnectCause_Value_VPNAdminDisconnect:         "VPN-Admin-Disconnect",
	CiscoDisconnectCause_Value_VPNTunnelShut:              "VPN-Tunnel-Shut",
	CiscoDisconnectCause_Value_VPNLocalDisconnect:         "VPN-Local-Disconnect",
	CiscoDisconnectCause_Value_VPNSessionLimit:            "VPN-Session-Limit",
	CiscoDisconnectCause_Value_VPNCallRedirect:            "VPN-Call-Redirect",
}

func (a CiscoDisconnectCause) String() string {
	if str, ok := CiscoDisconnectCause_Strings[a]; ok {
		return str
	}
	return "CiscoDisconnectCause(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoDisconnectCause_Add(p *radius.Packet, value CiscoDisconnectCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 195, a)
}

func CiscoDisconnectCause_Get(p *radius.Packet) (value CiscoDisconnectCause) {
	value, _ = CiscoDisconnectCause_Lookup(p)
	return
}

func CiscoDisconnectCause_Gets(p *radius.Packet) (values []CiscoDisconnectCause, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 195) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoDisconnectCause(i))
	}
	return
}

func CiscoDisconnectCause_Lookup(p *radius.Packet) (value CiscoDisconnectCause, err error) {
	a, ok := _Cisco_LookupVendor(p, 195)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoDisconnectCause(i)
	return
}

func CiscoDisconnectCause_Set(p *radius.Packet, value CiscoDisconnectCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 195, a)
}

func CiscoDisconnectCause_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 195)
}

type CiscoDataRate uint32

var CiscoDataRate_Strings = map[CiscoDataRate]string{}

func (a CiscoDataRate) String() string {
	if str, ok := CiscoDataRate_Strings[a]; ok {
		return str
	}
	return "CiscoDataRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoDataRate_Add(p *radius.Packet, value CiscoDataRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 197, a)
}

func CiscoDataRate_Get(p *radius.Packet) (value CiscoDataRate) {
	value, _ = CiscoDataRate_Lookup(p)
	return
}

func CiscoDataRate_Gets(p *radius.Packet) (values []CiscoDataRate, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 197) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoDataRate(i))
	}
	return
}

func CiscoDataRate_Lookup(p *radius.Packet) (value CiscoDataRate, err error) {
	a, ok := _Cisco_LookupVendor(p, 197)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoDataRate(i)
	return
}

func CiscoDataRate_Set(p *radius.Packet, value CiscoDataRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 197, a)
}

func CiscoDataRate_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 197)
}

type CiscoPreSessionTime uint32

var CiscoPreSessionTime_Strings = map[CiscoPreSessionTime]string{}

func (a CiscoPreSessionTime) String() string {
	if str, ok := CiscoPreSessionTime_Strings[a]; ok {
		return str
	}
	return "CiscoPreSessionTime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoPreSessionTime_Add(p *radius.Packet, value CiscoPreSessionTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 198, a)
}

func CiscoPreSessionTime_Get(p *radius.Packet) (value CiscoPreSessionTime) {
	value, _ = CiscoPreSessionTime_Lookup(p)
	return
}

func CiscoPreSessionTime_Gets(p *radius.Packet) (values []CiscoPreSessionTime, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 198) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoPreSessionTime(i))
	}
	return
}

func CiscoPreSessionTime_Lookup(p *radius.Packet) (value CiscoPreSessionTime, err error) {
	a, ok := _Cisco_LookupVendor(p, 198)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoPreSessionTime(i)
	return
}

func CiscoPreSessionTime_Set(p *radius.Packet, value CiscoPreSessionTime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 198, a)
}

func CiscoPreSessionTime_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 198)
}

type CiscoPWLifetime uint32

var CiscoPWLifetime_Strings = map[CiscoPWLifetime]string{}

func (a CiscoPWLifetime) String() string {
	if str, ok := CiscoPWLifetime_Strings[a]; ok {
		return str
	}
	return "CiscoPWLifetime(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoPWLifetime_Add(p *radius.Packet, value CiscoPWLifetime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 208, a)
}

func CiscoPWLifetime_Get(p *radius.Packet) (value CiscoPWLifetime) {
	value, _ = CiscoPWLifetime_Lookup(p)
	return
}

func CiscoPWLifetime_Gets(p *radius.Packet) (values []CiscoPWLifetime, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 208) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoPWLifetime(i))
	}
	return
}

func CiscoPWLifetime_Lookup(p *radius.Packet) (value CiscoPWLifetime, err error) {
	a, ok := _Cisco_LookupVendor(p, 208)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoPWLifetime(i)
	return
}

func CiscoPWLifetime_Set(p *radius.Packet, value CiscoPWLifetime) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 208, a)
}

func CiscoPWLifetime_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 208)
}

type CiscoIPDirect uint32

var CiscoIPDirect_Strings = map[CiscoIPDirect]string{}

func (a CiscoIPDirect) String() string {
	if str, ok := CiscoIPDirect_Strings[a]; ok {
		return str
	}
	return "CiscoIPDirect(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoIPDirect_Add(p *radius.Packet, value CiscoIPDirect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 209, a)
}

func CiscoIPDirect_Get(p *radius.Packet) (value CiscoIPDirect) {
	value, _ = CiscoIPDirect_Lookup(p)
	return
}

func CiscoIPDirect_Gets(p *radius.Packet) (values []CiscoIPDirect, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 209) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoIPDirect(i))
	}
	return
}

func CiscoIPDirect_Lookup(p *radius.Packet) (value CiscoIPDirect, err error) {
	a, ok := _Cisco_LookupVendor(p, 209)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoIPDirect(i)
	return
}

func CiscoIPDirect_Set(p *radius.Packet, value CiscoIPDirect) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 209, a)
}

func CiscoIPDirect_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 209)
}

type CiscoPPPVJSlotComp uint32

var CiscoPPPVJSlotComp_Strings = map[CiscoPPPVJSlotComp]string{}

func (a CiscoPPPVJSlotComp) String() string {
	if str, ok := CiscoPPPVJSlotComp_Strings[a]; ok {
		return str
	}
	return "CiscoPPPVJSlotComp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoPPPVJSlotComp_Add(p *radius.Packet, value CiscoPPPVJSlotComp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 210, a)
}

func CiscoPPPVJSlotComp_Get(p *radius.Packet) (value CiscoPPPVJSlotComp) {
	value, _ = CiscoPPPVJSlotComp_Lookup(p)
	return
}

func CiscoPPPVJSlotComp_Gets(p *radius.Packet) (values []CiscoPPPVJSlotComp, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 210) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoPPPVJSlotComp(i))
	}
	return
}

func CiscoPPPVJSlotComp_Lookup(p *radius.Packet) (value CiscoPPPVJSlotComp, err error) {
	a, ok := _Cisco_LookupVendor(p, 210)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoPPPVJSlotComp(i)
	return
}

func CiscoPPPVJSlotComp_Set(p *radius.Packet, value CiscoPPPVJSlotComp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 210, a)
}

func CiscoPPPVJSlotComp_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 210)
}

type CiscoPPPAsyncMap uint32

var CiscoPPPAsyncMap_Strings = map[CiscoPPPAsyncMap]string{}

func (a CiscoPPPAsyncMap) String() string {
	if str, ok := CiscoPPPAsyncMap_Strings[a]; ok {
		return str
	}
	return "CiscoPPPAsyncMap(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoPPPAsyncMap_Add(p *radius.Packet, value CiscoPPPAsyncMap) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 212, a)
}

func CiscoPPPAsyncMap_Get(p *radius.Packet) (value CiscoPPPAsyncMap) {
	value, _ = CiscoPPPAsyncMap_Lookup(p)
	return
}

func CiscoPPPAsyncMap_Gets(p *radius.Packet) (values []CiscoPPPAsyncMap, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 212) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoPPPAsyncMap(i))
	}
	return
}

func CiscoPPPAsyncMap_Lookup(p *radius.Packet) (value CiscoPPPAsyncMap, err error) {
	a, ok := _Cisco_LookupVendor(p, 212)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoPPPAsyncMap(i)
	return
}

func CiscoPPPAsyncMap_Set(p *radius.Packet, value CiscoPPPAsyncMap) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 212, a)
}

func CiscoPPPAsyncMap_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 212)
}

func CiscoIPPoolDefinition_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 217, a)
}

func CiscoIPPoolDefinition_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 217, a)
}

func CiscoIPPoolDefinition_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoIPPoolDefinition_Lookup(p)
	return
}

func CiscoIPPoolDefinition_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoIPPoolDefinition_LookupString(p)
	return
}

func CiscoIPPoolDefinition_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 217) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoIPPoolDefinition_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 217) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoIPPoolDefinition_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 217)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoIPPoolDefinition_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 217)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoIPPoolDefinition_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 217, a)
}

func CiscoIPPoolDefinition_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 217, a)
}

func CiscoIPPoolDefinition_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 217)
}

type CiscoAssignIPPool uint32

var CiscoAssignIPPool_Strings = map[CiscoAssignIPPool]string{}

func (a CiscoAssignIPPool) String() string {
	if str, ok := CiscoAssignIPPool_Strings[a]; ok {
		return str
	}
	return "CiscoAssignIPPool(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoAssignIPPool_Add(p *radius.Packet, value CiscoAssignIPPool) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 218, a)
}

func CiscoAssignIPPool_Get(p *radius.Packet) (value CiscoAssignIPPool) {
	value, _ = CiscoAssignIPPool_Lookup(p)
	return
}

func CiscoAssignIPPool_Gets(p *radius.Packet) (values []CiscoAssignIPPool, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 218) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoAssignIPPool(i))
	}
	return
}

func CiscoAssignIPPool_Lookup(p *radius.Packet) (value CiscoAssignIPPool, err error) {
	a, ok := _Cisco_LookupVendor(p, 218)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoAssignIPPool(i)
	return
}

func CiscoAssignIPPool_Set(p *radius.Packet, value CiscoAssignIPPool) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 218, a)
}

func CiscoAssignIPPool_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 218)
}

type CiscoRouteIP uint32

var CiscoRouteIP_Strings = map[CiscoRouteIP]string{}

func (a CiscoRouteIP) String() string {
	if str, ok := CiscoRouteIP_Strings[a]; ok {
		return str
	}
	return "CiscoRouteIP(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoRouteIP_Add(p *radius.Packet, value CiscoRouteIP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 228, a)
}

func CiscoRouteIP_Get(p *radius.Packet) (value CiscoRouteIP) {
	value, _ = CiscoRouteIP_Lookup(p)
	return
}

func CiscoRouteIP_Gets(p *radius.Packet) (values []CiscoRouteIP, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 228) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoRouteIP(i))
	}
	return
}

func CiscoRouteIP_Lookup(p *radius.Packet) (value CiscoRouteIP, err error) {
	a, ok := _Cisco_LookupVendor(p, 228)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoRouteIP(i)
	return
}

func CiscoRouteIP_Set(p *radius.Packet, value CiscoRouteIP) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 228, a)
}

func CiscoRouteIP_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 228)
}

type CiscoLinkCompression uint32

var CiscoLinkCompression_Strings = map[CiscoLinkCompression]string{}

func (a CiscoLinkCompression) String() string {
	if str, ok := CiscoLinkCompression_Strings[a]; ok {
		return str
	}
	return "CiscoLinkCompression(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoLinkCompression_Add(p *radius.Packet, value CiscoLinkCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 233, a)
}

func CiscoLinkCompression_Get(p *radius.Packet) (value CiscoLinkCompression) {
	value, _ = CiscoLinkCompression_Lookup(p)
	return
}

func CiscoLinkCompression_Gets(p *radius.Packet) (values []CiscoLinkCompression, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 233) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoLinkCompression(i))
	}
	return
}

func CiscoLinkCompression_Lookup(p *radius.Packet) (value CiscoLinkCompression, err error) {
	a, ok := _Cisco_LookupVendor(p, 233)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoLinkCompression(i)
	return
}

func CiscoLinkCompression_Set(p *radius.Packet, value CiscoLinkCompression) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 233, a)
}

func CiscoLinkCompression_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 233)
}

type CiscoTargetUtil uint32

var CiscoTargetUtil_Strings = map[CiscoTargetUtil]string{}

func (a CiscoTargetUtil) String() string {
	if str, ok := CiscoTargetUtil_Strings[a]; ok {
		return str
	}
	return "CiscoTargetUtil(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoTargetUtil_Add(p *radius.Packet, value CiscoTargetUtil) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 234, a)
}

func CiscoTargetUtil_Get(p *radius.Packet) (value CiscoTargetUtil) {
	value, _ = CiscoTargetUtil_Lookup(p)
	return
}

func CiscoTargetUtil_Gets(p *radius.Packet) (values []CiscoTargetUtil, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 234) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoTargetUtil(i))
	}
	return
}

func CiscoTargetUtil_Lookup(p *radius.Packet) (value CiscoTargetUtil, err error) {
	a, ok := _Cisco_LookupVendor(p, 234)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoTargetUtil(i)
	return
}

func CiscoTargetUtil_Set(p *radius.Packet, value CiscoTargetUtil) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 234, a)
}

func CiscoTargetUtil_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 234)
}

type CiscoMaximumChannels uint32

var CiscoMaximumChannels_Strings = map[CiscoMaximumChannels]string{}

func (a CiscoMaximumChannels) String() string {
	if str, ok := CiscoMaximumChannels_Strings[a]; ok {
		return str
	}
	return "CiscoMaximumChannels(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoMaximumChannels_Add(p *radius.Packet, value CiscoMaximumChannels) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 235, a)
}

func CiscoMaximumChannels_Get(p *radius.Packet) (value CiscoMaximumChannels) {
	value, _ = CiscoMaximumChannels_Lookup(p)
	return
}

func CiscoMaximumChannels_Gets(p *radius.Packet) (values []CiscoMaximumChannels, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 235) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoMaximumChannels(i))
	}
	return
}

func CiscoMaximumChannels_Lookup(p *radius.Packet) (value CiscoMaximumChannels, err error) {
	a, ok := _Cisco_LookupVendor(p, 235)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoMaximumChannels(i)
	return
}

func CiscoMaximumChannels_Set(p *radius.Packet, value CiscoMaximumChannels) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 235, a)
}

func CiscoMaximumChannels_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 235)
}

type CiscoDataFilter uint32

var CiscoDataFilter_Strings = map[CiscoDataFilter]string{}

func (a CiscoDataFilter) String() string {
	if str, ok := CiscoDataFilter_Strings[a]; ok {
		return str
	}
	return "CiscoDataFilter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoDataFilter_Add(p *radius.Packet, value CiscoDataFilter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 242, a)
}

func CiscoDataFilter_Get(p *radius.Packet) (value CiscoDataFilter) {
	value, _ = CiscoDataFilter_Lookup(p)
	return
}

func CiscoDataFilter_Gets(p *radius.Packet) (values []CiscoDataFilter, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 242) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoDataFilter(i))
	}
	return
}

func CiscoDataFilter_Lookup(p *radius.Packet) (value CiscoDataFilter, err error) {
	a, ok := _Cisco_LookupVendor(p, 242)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoDataFilter(i)
	return
}

func CiscoDataFilter_Set(p *radius.Packet, value CiscoDataFilter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 242, a)
}

func CiscoDataFilter_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 242)
}

type CiscoCallFilter uint32

var CiscoCallFilter_Strings = map[CiscoCallFilter]string{}

func (a CiscoCallFilter) String() string {
	if str, ok := CiscoCallFilter_Strings[a]; ok {
		return str
	}
	return "CiscoCallFilter(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoCallFilter_Add(p *radius.Packet, value CiscoCallFilter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 243, a)
}

func CiscoCallFilter_Get(p *radius.Packet) (value CiscoCallFilter) {
	value, _ = CiscoCallFilter_Lookup(p)
	return
}

func CiscoCallFilter_Gets(p *radius.Packet) (values []CiscoCallFilter, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 243) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoCallFilter(i))
	}
	return
}

func CiscoCallFilter_Lookup(p *radius.Packet) (value CiscoCallFilter, err error) {
	a, ok := _Cisco_LookupVendor(p, 243)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoCallFilter(i)
	return
}

func CiscoCallFilter_Set(p *radius.Packet, value CiscoCallFilter) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 243, a)
}

func CiscoCallFilter_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 243)
}

type CiscoIdleLimit uint32

var CiscoIdleLimit_Strings = map[CiscoIdleLimit]string{}

func (a CiscoIdleLimit) String() string {
	if str, ok := CiscoIdleLimit_Strings[a]; ok {
		return str
	}
	return "CiscoIdleLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoIdleLimit_Add(p *radius.Packet, value CiscoIdleLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 244, a)
}

func CiscoIdleLimit_Get(p *radius.Packet) (value CiscoIdleLimit) {
	value, _ = CiscoIdleLimit_Lookup(p)
	return
}

func CiscoIdleLimit_Gets(p *radius.Packet) (values []CiscoIdleLimit, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 244) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoIdleLimit(i))
	}
	return
}

func CiscoIdleLimit_Lookup(p *radius.Packet) (value CiscoIdleLimit, err error) {
	a, ok := _Cisco_LookupVendor(p, 244)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoIdleLimit(i)
	return
}

func CiscoIdleLimit_Set(p *radius.Packet, value CiscoIdleLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 244, a)
}

func CiscoIdleLimit_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 244)
}

func CiscoSubscriberPassword_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 249, a)
}

func CiscoSubscriberPassword_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 249, a)
}

func CiscoSubscriberPassword_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoSubscriberPassword_Lookup(p)
	return
}

func CiscoSubscriberPassword_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoSubscriberPassword_LookupString(p)
	return
}

func CiscoSubscriberPassword_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 249) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoSubscriberPassword_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 249) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoSubscriberPassword_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 249)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoSubscriberPassword_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 249)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoSubscriberPassword_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 249, a)
}

func CiscoSubscriberPassword_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 249, a)
}

func CiscoSubscriberPassword_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 249)
}

func CiscoAccountInfo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 250, a)
}

func CiscoAccountInfo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 250, a)
}

func CiscoAccountInfo_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoAccountInfo_Lookup(p)
	return
}

func CiscoAccountInfo_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoAccountInfo_LookupString(p)
	return
}

func CiscoAccountInfo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 250) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoAccountInfo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 250) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoAccountInfo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 250)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoAccountInfo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 250)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoAccountInfo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 250, a)
}

func CiscoAccountInfo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 250, a)
}

func CiscoAccountInfo_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 250)
}

func CiscoServiceInfo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 251, a)
}

func CiscoServiceInfo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 251, a)
}

func CiscoServiceInfo_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoServiceInfo_Lookup(p)
	return
}

func CiscoServiceInfo_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoServiceInfo_LookupString(p)
	return
}

func CiscoServiceInfo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 251) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoServiceInfo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 251) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoServiceInfo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 251)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoServiceInfo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 251)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoServiceInfo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 251, a)
}

func CiscoServiceInfo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 251, a)
}

func CiscoServiceInfo_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 251)
}

func CiscoCommandCode_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 252, a)
}

func CiscoCommandCode_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 252, a)
}

func CiscoCommandCode_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoCommandCode_Lookup(p)
	return
}

func CiscoCommandCode_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoCommandCode_LookupString(p)
	return
}

func CiscoCommandCode_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 252) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoCommandCode_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 252) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoCommandCode_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 252)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoCommandCode_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 252)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoCommandCode_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 252, a)
}

func CiscoCommandCode_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 252, a)
}

func CiscoCommandCode_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 252)
}

func CiscoControlInfo_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 253, a)
}

func CiscoControlInfo_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_AddVendor(p, 253, a)
}

func CiscoControlInfo_Get(p *radius.Packet) (value []byte) {
	value, _ = CiscoControlInfo_Lookup(p)
	return
}

func CiscoControlInfo_GetString(p *radius.Packet) (value string) {
	value, _ = CiscoControlInfo_LookupString(p)
	return
}

func CiscoControlInfo_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Cisco_GetsVendor(p, 253) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoControlInfo_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Cisco_GetsVendor(p, 253) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func CiscoControlInfo_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Cisco_LookupVendor(p, 253)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func CiscoControlInfo_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Cisco_LookupVendor(p, 253)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func CiscoControlInfo_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 253, a)
}

func CiscoControlInfo_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Cisco_SetVendor(p, 253, a)
}

func CiscoControlInfo_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 253)
}

type CiscoXmitRate uint32

var CiscoXmitRate_Strings = map[CiscoXmitRate]string{}

func (a CiscoXmitRate) String() string {
	if str, ok := CiscoXmitRate_Strings[a]; ok {
		return str
	}
	return "CiscoXmitRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func CiscoXmitRate_Add(p *radius.Packet, value CiscoXmitRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_AddVendor(p, 255, a)
}

func CiscoXmitRate_Get(p *radius.Packet) (value CiscoXmitRate) {
	value, _ = CiscoXmitRate_Lookup(p)
	return
}

func CiscoXmitRate_Gets(p *radius.Packet) (values []CiscoXmitRate, err error) {
	var i uint32
	for _, attr := range _Cisco_GetsVendor(p, 255) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, CiscoXmitRate(i))
	}
	return
}

func CiscoXmitRate_Lookup(p *radius.Packet) (value CiscoXmitRate, err error) {
	a, ok := _Cisco_LookupVendor(p, 255)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = CiscoXmitRate(i)
	return
}

func CiscoXmitRate_Set(p *radius.Packet, value CiscoXmitRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Cisco_SetVendor(p, 255, a)
}

func CiscoXmitRate_Del(p *radius.Packet) {
	_Cisco_DelVendor(p, 255)
}
