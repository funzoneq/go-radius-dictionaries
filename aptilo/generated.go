// Code generated by radius-dict-gen. DO NOT EDIT.

package aptilo

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Aptilo_VendorID = 13209
)

func _Aptilo_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Aptilo_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Aptilo_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Aptilo_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Aptilo_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Aptilo_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Aptilo_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Aptilo_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _Aptilo_AddVendor(p, typ, attr)
}

func _Aptilo_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _Aptilo_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func AptiloSubnetName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 1, a)
}

func AptiloSubnetName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 1, a)
}

func AptiloSubnetName_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloSubnetName_Lookup(p)
	return
}

func AptiloSubnetName_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloSubnetName_LookupString(p)
	return
}

func AptiloSubnetName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloSubnetName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloSubnetName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloSubnetName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloSubnetName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 1, a)
}

func AptiloSubnetName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 1, a)
}

func AptiloSubnetName_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 1)
}

type AptiloOctetsLimit uint32

var AptiloOctetsLimit_Strings = map[AptiloOctetsLimit]string{}

func (a AptiloOctetsLimit) String() string {
	if str, ok := AptiloOctetsLimit_Strings[a]; ok {
		return str
	}
	return "AptiloOctetsLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloOctetsLimit_Add(p *radius.Packet, value AptiloOctetsLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 2, a)
}

func AptiloOctetsLimit_Get(p *radius.Packet) (value AptiloOctetsLimit) {
	value, _ = AptiloOctetsLimit_Lookup(p)
	return
}

func AptiloOctetsLimit_Gets(p *radius.Packet) (values []AptiloOctetsLimit, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloOctetsLimit(i))
	}
	return
}

func AptiloOctetsLimit_Lookup(p *radius.Packet) (value AptiloOctetsLimit, err error) {
	a, ok := _Aptilo_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloOctetsLimit(i)
	return
}

func AptiloOctetsLimit_Set(p *radius.Packet, value AptiloOctetsLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 2, a)
}

func AptiloOctetsLimit_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 2)
}

type AptiloGigawordsLimit uint32

var AptiloGigawordsLimit_Strings = map[AptiloGigawordsLimit]string{}

func (a AptiloGigawordsLimit) String() string {
	if str, ok := AptiloGigawordsLimit_Strings[a]; ok {
		return str
	}
	return "AptiloGigawordsLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloGigawordsLimit_Add(p *radius.Packet, value AptiloGigawordsLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 3, a)
}

func AptiloGigawordsLimit_Get(p *radius.Packet) (value AptiloGigawordsLimit) {
	value, _ = AptiloGigawordsLimit_Lookup(p)
	return
}

func AptiloGigawordsLimit_Gets(p *radius.Packet) (values []AptiloGigawordsLimit, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloGigawordsLimit(i))
	}
	return
}

func AptiloGigawordsLimit_Lookup(p *radius.Packet) (value AptiloGigawordsLimit, err error) {
	a, ok := _Aptilo_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloGigawordsLimit(i)
	return
}

func AptiloGigawordsLimit_Set(p *radius.Packet, value AptiloGigawordsLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 3, a)
}

func AptiloGigawordsLimit_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 3)
}

type AptiloInputOctetsLimit uint32

var AptiloInputOctetsLimit_Strings = map[AptiloInputOctetsLimit]string{}

func (a AptiloInputOctetsLimit) String() string {
	if str, ok := AptiloInputOctetsLimit_Strings[a]; ok {
		return str
	}
	return "AptiloInputOctetsLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloInputOctetsLimit_Add(p *radius.Packet, value AptiloInputOctetsLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 4, a)
}

func AptiloInputOctetsLimit_Get(p *radius.Packet) (value AptiloInputOctetsLimit) {
	value, _ = AptiloInputOctetsLimit_Lookup(p)
	return
}

func AptiloInputOctetsLimit_Gets(p *radius.Packet) (values []AptiloInputOctetsLimit, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 4) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloInputOctetsLimit(i))
	}
	return
}

func AptiloInputOctetsLimit_Lookup(p *radius.Packet) (value AptiloInputOctetsLimit, err error) {
	a, ok := _Aptilo_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloInputOctetsLimit(i)
	return
}

func AptiloInputOctetsLimit_Set(p *radius.Packet, value AptiloInputOctetsLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 4, a)
}

func AptiloInputOctetsLimit_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 4)
}

type AptiloInputGigawordsLimit uint32

var AptiloInputGigawordsLimit_Strings = map[AptiloInputGigawordsLimit]string{}

func (a AptiloInputGigawordsLimit) String() string {
	if str, ok := AptiloInputGigawordsLimit_Strings[a]; ok {
		return str
	}
	return "AptiloInputGigawordsLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloInputGigawordsLimit_Add(p *radius.Packet, value AptiloInputGigawordsLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 5, a)
}

func AptiloInputGigawordsLimit_Get(p *radius.Packet) (value AptiloInputGigawordsLimit) {
	value, _ = AptiloInputGigawordsLimit_Lookup(p)
	return
}

func AptiloInputGigawordsLimit_Gets(p *radius.Packet) (values []AptiloInputGigawordsLimit, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 5) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloInputGigawordsLimit(i))
	}
	return
}

func AptiloInputGigawordsLimit_Lookup(p *radius.Packet) (value AptiloInputGigawordsLimit, err error) {
	a, ok := _Aptilo_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloInputGigawordsLimit(i)
	return
}

func AptiloInputGigawordsLimit_Set(p *radius.Packet, value AptiloInputGigawordsLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 5, a)
}

func AptiloInputGigawordsLimit_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 5)
}

type AptiloOutputOctetsLimit uint32

var AptiloOutputOctetsLimit_Strings = map[AptiloOutputOctetsLimit]string{}

func (a AptiloOutputOctetsLimit) String() string {
	if str, ok := AptiloOutputOctetsLimit_Strings[a]; ok {
		return str
	}
	return "AptiloOutputOctetsLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloOutputOctetsLimit_Add(p *radius.Packet, value AptiloOutputOctetsLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 6, a)
}

func AptiloOutputOctetsLimit_Get(p *radius.Packet) (value AptiloOutputOctetsLimit) {
	value, _ = AptiloOutputOctetsLimit_Lookup(p)
	return
}

func AptiloOutputOctetsLimit_Gets(p *radius.Packet) (values []AptiloOutputOctetsLimit, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 6) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloOutputOctetsLimit(i))
	}
	return
}

func AptiloOutputOctetsLimit_Lookup(p *radius.Packet) (value AptiloOutputOctetsLimit, err error) {
	a, ok := _Aptilo_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloOutputOctetsLimit(i)
	return
}

func AptiloOutputOctetsLimit_Set(p *radius.Packet, value AptiloOutputOctetsLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 6, a)
}

func AptiloOutputOctetsLimit_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 6)
}

type AptiloOutputGigawordsLimit uint32

var AptiloOutputGigawordsLimit_Strings = map[AptiloOutputGigawordsLimit]string{}

func (a AptiloOutputGigawordsLimit) String() string {
	if str, ok := AptiloOutputGigawordsLimit_Strings[a]; ok {
		return str
	}
	return "AptiloOutputGigawordsLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloOutputGigawordsLimit_Add(p *radius.Packet, value AptiloOutputGigawordsLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 7, a)
}

func AptiloOutputGigawordsLimit_Get(p *radius.Packet) (value AptiloOutputGigawordsLimit) {
	value, _ = AptiloOutputGigawordsLimit_Lookup(p)
	return
}

func AptiloOutputGigawordsLimit_Gets(p *radius.Packet) (values []AptiloOutputGigawordsLimit, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 7) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloOutputGigawordsLimit(i))
	}
	return
}

func AptiloOutputGigawordsLimit_Lookup(p *radius.Packet) (value AptiloOutputGigawordsLimit, err error) {
	a, ok := _Aptilo_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloOutputGigawordsLimit(i)
	return
}

func AptiloOutputGigawordsLimit_Set(p *radius.Packet, value AptiloOutputGigawordsLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 7, a)
}

func AptiloOutputGigawordsLimit_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 7)
}

type AptiloLimitMode uint32

const (
	AptiloLimitMode_Value_Relative AptiloLimitMode = 0
	AptiloLimitMode_Value_Absolute AptiloLimitMode = 1
)

var AptiloLimitMode_Strings = map[AptiloLimitMode]string{
	AptiloLimitMode_Value_Relative: "Relative",
	AptiloLimitMode_Value_Absolute: "Absolute",
}

func (a AptiloLimitMode) String() string {
	if str, ok := AptiloLimitMode_Strings[a]; ok {
		return str
	}
	return "AptiloLimitMode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloLimitMode_Add(p *radius.Packet, value AptiloLimitMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 8, a)
}

func AptiloLimitMode_Get(p *radius.Packet) (value AptiloLimitMode) {
	value, _ = AptiloLimitMode_Lookup(p)
	return
}

func AptiloLimitMode_Gets(p *radius.Packet) (values []AptiloLimitMode, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 8) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloLimitMode(i))
	}
	return
}

func AptiloLimitMode_Lookup(p *radius.Packet) (value AptiloLimitMode, err error) {
	a, ok := _Aptilo_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloLimitMode(i)
	return
}

func AptiloLimitMode_Set(p *radius.Packet, value AptiloLimitMode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 8, a)
}

func AptiloLimitMode_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 8)
}

func AptiloApcID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 9, a)
}

func AptiloApcID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 9, a)
}

func AptiloApcID_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloApcID_Lookup(p)
	return
}

func AptiloApcID_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloApcID_LookupString(p)
	return
}

func AptiloApcID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloApcID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloApcID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloApcID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloApcID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 9, a)
}

func AptiloApcID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 9, a)
}

func AptiloApcID_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 9)
}

func AptiloOpaqueKey_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 10, a)
}

func AptiloOpaqueKey_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 10, a)
}

func AptiloOpaqueKey_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloOpaqueKey_Lookup(p)
	return
}

func AptiloOpaqueKey_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloOpaqueKey_LookupString(p)
	return
}

func AptiloOpaqueKey_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloOpaqueKey_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloOpaqueKey_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloOpaqueKey_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloOpaqueKey_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 10, a)
}

func AptiloOpaqueKey_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 10, a)
}

func AptiloOpaqueKey_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 10)
}

type AptiloDeniedCause uint32

const (
	AptiloDeniedCause_Value_UserNotFound           AptiloDeniedCause = 1
	AptiloDeniedCause_Value_WrongPassword          AptiloDeniedCause = 2
	AptiloDeniedCause_Value_NoZoneAccess           AptiloDeniedCause = 3
	AptiloDeniedCause_Value_InactiveAccessNode     AptiloDeniedCause = 4
	AptiloDeniedCause_Value_InconsistentAccessNode AptiloDeniedCause = 5
	AptiloDeniedCause_Value_DisabledAccount        AptiloDeniedCause = 6
	AptiloDeniedCause_Value_NoAccessprofile        AptiloDeniedCause = 7
	AptiloDeniedCause_Value_InternalError          AptiloDeniedCause = 8
	AptiloDeniedCause_Value_RealmError             AptiloDeniedCause = 9
	AptiloDeniedCause_Value_NoCredits              AptiloDeniedCause = 10
	AptiloDeniedCause_Value_MaxSession             AptiloDeniedCause = 11
	AptiloDeniedCause_Value_RemoteServerReject     AptiloDeniedCause = 12
	AptiloDeniedCause_Value_RealmInactive          AptiloDeniedCause = 14
	AptiloDeniedCause_Value_OpaqueFailed           AptiloDeniedCause = 15
	AptiloDeniedCause_Value_ServiceClosed          AptiloDeniedCause = 16
	AptiloDeniedCause_Value_LDAPFailed             AptiloDeniedCause = 17
	AptiloDeniedCause_Value_InactiveAccount        AptiloDeniedCause = 18
	AptiloDeniedCause_Value_ExpiredAccount         AptiloDeniedCause = 19
	AptiloDeniedCause_Value_IncompleteAccount      AptiloDeniedCause = 20
	AptiloDeniedCause_Value_LicenseLimitReached    AptiloDeniedCause = 21
	AptiloDeniedCause_Value_UnsupportedService     AptiloDeniedCause = 22
	AptiloDeniedCause_Value_RulesetReject          AptiloDeniedCause = 23
	AptiloDeniedCause_Value_RulesetFailed          AptiloDeniedCause = 24
)

var AptiloDeniedCause_Strings = map[AptiloDeniedCause]string{
	AptiloDeniedCause_Value_UserNotFound:           "User-Not-Found",
	AptiloDeniedCause_Value_WrongPassword:          "Wrong-Password",
	AptiloDeniedCause_Value_NoZoneAccess:           "No-Zone-Access",
	AptiloDeniedCause_Value_InactiveAccessNode:     "Inactive-Access-Node",
	AptiloDeniedCause_Value_InconsistentAccessNode: "Inconsistent-Access-Node",
	AptiloDeniedCause_Value_DisabledAccount:        "Disabled-Account",
	AptiloDeniedCause_Value_NoAccessprofile:        "No-Accessprofile",
	AptiloDeniedCause_Value_InternalError:          "Internal-Error",
	AptiloDeniedCause_Value_RealmError:             "Realm-Error",
	AptiloDeniedCause_Value_NoCredits:              "No-Credits",
	AptiloDeniedCause_Value_MaxSession:             "Max-Session",
	AptiloDeniedCause_Value_RemoteServerReject:     "Remote-Server-Reject",
	AptiloDeniedCause_Value_RealmInactive:          "Realm-Inactive",
	AptiloDeniedCause_Value_OpaqueFailed:           "Opaque-Failed",
	AptiloDeniedCause_Value_ServiceClosed:          "Service-Closed",
	AptiloDeniedCause_Value_LDAPFailed:             "LDAP-Failed",
	AptiloDeniedCause_Value_InactiveAccount:        "Inactive-Account",
	AptiloDeniedCause_Value_ExpiredAccount:         "Expired-Account",
	AptiloDeniedCause_Value_IncompleteAccount:      "Incomplete-Account",
	AptiloDeniedCause_Value_LicenseLimitReached:    "License-Limit-Reached",
	AptiloDeniedCause_Value_UnsupportedService:     "Unsupported-Service",
	AptiloDeniedCause_Value_RulesetReject:          "Ruleset-Reject",
	AptiloDeniedCause_Value_RulesetFailed:          "Ruleset-Failed",
}

func (a AptiloDeniedCause) String() string {
	if str, ok := AptiloDeniedCause_Strings[a]; ok {
		return str
	}
	return "AptiloDeniedCause(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloDeniedCause_Add(p *radius.Packet, value AptiloDeniedCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 11, a)
}

func AptiloDeniedCause_Get(p *radius.Packet) (value AptiloDeniedCause) {
	value, _ = AptiloDeniedCause_Lookup(p)
	return
}

func AptiloDeniedCause_Gets(p *radius.Packet) (values []AptiloDeniedCause, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 11) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloDeniedCause(i))
	}
	return
}

func AptiloDeniedCause_Lookup(p *radius.Packet) (value AptiloDeniedCause, err error) {
	a, ok := _Aptilo_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloDeniedCause(i)
	return
}

func AptiloDeniedCause_Set(p *radius.Packet, value AptiloDeniedCause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 11, a)
}

func AptiloDeniedCause_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 11)
}

type AptiloRealmID uint32

var AptiloRealmID_Strings = map[AptiloRealmID]string{}

func (a AptiloRealmID) String() string {
	if str, ok := AptiloRealmID_Strings[a]; ok {
		return str
	}
	return "AptiloRealmID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloRealmID_Add(p *radius.Packet, value AptiloRealmID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 12, a)
}

func AptiloRealmID_Get(p *radius.Packet) (value AptiloRealmID) {
	value, _ = AptiloRealmID_Lookup(p)
	return
}

func AptiloRealmID_Gets(p *radius.Packet) (values []AptiloRealmID, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 12) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloRealmID(i))
	}
	return
}

func AptiloRealmID_Lookup(p *radius.Packet) (value AptiloRealmID, err error) {
	a, ok := _Aptilo_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloRealmID(i)
	return
}

func AptiloRealmID_Set(p *radius.Packet, value AptiloRealmID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 12, a)
}

func AptiloRealmID_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 12)
}

type AptiloApID uint32

var AptiloApID_Strings = map[AptiloApID]string{}

func (a AptiloApID) String() string {
	if str, ok := AptiloApID_Strings[a]; ok {
		return str
	}
	return "AptiloApID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloApID_Add(p *radius.Packet, value AptiloApID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 13, a)
}

func AptiloApID_Get(p *radius.Packet) (value AptiloApID) {
	value, _ = AptiloApID_Lookup(p)
	return
}

func AptiloApID_Gets(p *radius.Packet) (values []AptiloApID, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 13) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloApID(i))
	}
	return
}

func AptiloApID_Lookup(p *radius.Packet) (value AptiloApID, err error) {
	a, ok := _Aptilo_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloApID(i)
	return
}

func AptiloApID_Set(p *radius.Packet, value AptiloApID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 13, a)
}

func AptiloApID_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 13)
}

type AptiloUserID uint32

var AptiloUserID_Strings = map[AptiloUserID]string{}

func (a AptiloUserID) String() string {
	if str, ok := AptiloUserID_Strings[a]; ok {
		return str
	}
	return "AptiloUserID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloUserID_Add(p *radius.Packet, value AptiloUserID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 14, a)
}

func AptiloUserID_Get(p *radius.Packet) (value AptiloUserID) {
	value, _ = AptiloUserID_Lookup(p)
	return
}

func AptiloUserID_Gets(p *radius.Packet) (values []AptiloUserID, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 14) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloUserID(i))
	}
	return
}

func AptiloUserID_Lookup(p *radius.Packet) (value AptiloUserID, err error) {
	a, ok := _Aptilo_LookupVendor(p, 14)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloUserID(i)
	return
}

func AptiloUserID_Set(p *radius.Packet, value AptiloUserID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 14, a)
}

func AptiloUserID_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 14)
}

func AptiloZone_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 15, a)
}

func AptiloZone_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 15, a)
}

func AptiloZone_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloZone_Lookup(p)
	return
}

func AptiloZone_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloZone_LookupString(p)
	return
}

func AptiloZone_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 15) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloZone_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 15) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloZone_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloZone_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloZone_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 15, a)
}

func AptiloZone_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 15, a)
}

func AptiloZone_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 15)
}

func AptiloFirstName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 16, a)
}

func AptiloFirstName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 16, a)
}

func AptiloFirstName_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloFirstName_Lookup(p)
	return
}

func AptiloFirstName_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloFirstName_LookupString(p)
	return
}

func AptiloFirstName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 16) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloFirstName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 16) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloFirstName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloFirstName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloFirstName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 16, a)
}

func AptiloFirstName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 16, a)
}

func AptiloFirstName_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 16)
}

func AptiloLastName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 17, a)
}

func AptiloLastName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 17, a)
}

func AptiloLastName_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloLastName_Lookup(p)
	return
}

func AptiloLastName_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloLastName_LookupString(p)
	return
}

func AptiloLastName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 17) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloLastName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 17) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloLastName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloLastName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloLastName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 17, a)
}

func AptiloLastName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 17, a)
}

func AptiloLastName_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 17)
}

func AptiloPhone_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 18, a)
}

func AptiloPhone_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 18, a)
}

func AptiloPhone_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloPhone_Lookup(p)
	return
}

func AptiloPhone_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloPhone_LookupString(p)
	return
}

func AptiloPhone_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 18) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloPhone_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 18) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloPhone_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloPhone_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloPhone_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 18, a)
}

func AptiloPhone_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 18, a)
}

func AptiloPhone_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 18)
}

func AptiloEmail_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 19, a)
}

func AptiloEmail_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 19, a)
}

func AptiloEmail_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloEmail_Lookup(p)
	return
}

func AptiloEmail_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloEmail_LookupString(p)
	return
}

func AptiloEmail_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 19) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloEmail_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 19) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloEmail_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloEmail_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloEmail_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 19, a)
}

func AptiloEmail_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 19, a)
}

func AptiloEmail_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 19)
}

func AptiloOrganization_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 20, a)
}

func AptiloOrganization_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 20, a)
}

func AptiloOrganization_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloOrganization_Lookup(p)
	return
}

func AptiloOrganization_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloOrganization_LookupString(p)
	return
}

func AptiloOrganization_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 20) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloOrganization_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 20) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloOrganization_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloOrganization_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloOrganization_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 20, a)
}

func AptiloOrganization_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 20, a)
}

func AptiloOrganization_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 20)
}

func AptiloAccessProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 21, a)
}

func AptiloAccessProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 21, a)
}

func AptiloAccessProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloAccessProfile_Lookup(p)
	return
}

func AptiloAccessProfile_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloAccessProfile_LookupString(p)
	return
}

func AptiloAccessProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 21) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloAccessProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 21) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloAccessProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloAccessProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloAccessProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 21, a)
}

func AptiloAccessProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 21, a)
}

func AptiloAccessProfile_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 21)
}

type AptiloRealmConcurrentLogin uint32

var AptiloRealmConcurrentLogin_Strings = map[AptiloRealmConcurrentLogin]string{}

func (a AptiloRealmConcurrentLogin) String() string {
	if str, ok := AptiloRealmConcurrentLogin_Strings[a]; ok {
		return str
	}
	return "AptiloRealmConcurrentLogin(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloRealmConcurrentLogin_Add(p *radius.Packet, value AptiloRealmConcurrentLogin) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 22, a)
}

func AptiloRealmConcurrentLogin_Get(p *radius.Packet) (value AptiloRealmConcurrentLogin) {
	value, _ = AptiloRealmConcurrentLogin_Lookup(p)
	return
}

func AptiloRealmConcurrentLogin_Gets(p *radius.Packet) (values []AptiloRealmConcurrentLogin, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 22) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloRealmConcurrentLogin(i))
	}
	return
}

func AptiloRealmConcurrentLogin_Lookup(p *radius.Packet) (value AptiloRealmConcurrentLogin, err error) {
	a, ok := _Aptilo_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloRealmConcurrentLogin(i)
	return
}

func AptiloRealmConcurrentLogin_Set(p *radius.Packet, value AptiloRealmConcurrentLogin) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 22, a)
}

func AptiloRealmConcurrentLogin_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 22)
}

type AptiloAuthResult uint32

var AptiloAuthResult_Strings = map[AptiloAuthResult]string{}

func (a AptiloAuthResult) String() string {
	if str, ok := AptiloAuthResult_Strings[a]; ok {
		return str
	}
	return "AptiloAuthResult(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloAuthResult_Add(p *radius.Packet, value AptiloAuthResult) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 23, a)
}

func AptiloAuthResult_Get(p *radius.Packet) (value AptiloAuthResult) {
	value, _ = AptiloAuthResult_Lookup(p)
	return
}

func AptiloAuthResult_Gets(p *radius.Packet) (values []AptiloAuthResult, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 23) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloAuthResult(i))
	}
	return
}

func AptiloAuthResult_Lookup(p *radius.Packet) (value AptiloAuthResult, err error) {
	a, ok := _Aptilo_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloAuthResult(i)
	return
}

func AptiloAuthResult_Set(p *radius.Packet, value AptiloAuthResult) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 23, a)
}

func AptiloAuthResult_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 23)
}

func AptiloHotlineIndicator_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 24, a)
}

func AptiloHotlineIndicator_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 24, a)
}

func AptiloHotlineIndicator_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloHotlineIndicator_Lookup(p)
	return
}

func AptiloHotlineIndicator_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloHotlineIndicator_LookupString(p)
	return
}

func AptiloHotlineIndicator_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 24) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloHotlineIndicator_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 24) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloHotlineIndicator_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloHotlineIndicator_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloHotlineIndicator_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 24, a)
}

func AptiloHotlineIndicator_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 24, a)
}

func AptiloHotlineIndicator_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 24)
}

type AptiloUserType uint32

var AptiloUserType_Strings = map[AptiloUserType]string{}

func (a AptiloUserType) String() string {
	if str, ok := AptiloUserType_Strings[a]; ok {
		return str
	}
	return "AptiloUserType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloUserType_Add(p *radius.Packet, value AptiloUserType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 25, a)
}

func AptiloUserType_Get(p *radius.Packet) (value AptiloUserType) {
	value, _ = AptiloUserType_Lookup(p)
	return
}

func AptiloUserType_Gets(p *radius.Packet) (values []AptiloUserType, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 25) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloUserType(i))
	}
	return
}

func AptiloUserType_Lookup(p *radius.Packet) (value AptiloUserType, err error) {
	a, ok := _Aptilo_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloUserType(i)
	return
}

func AptiloUserType_Set(p *radius.Packet, value AptiloUserType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 25, a)
}

func AptiloUserType_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 25)
}

type AptiloExclusiveCount uint32

var AptiloExclusiveCount_Strings = map[AptiloExclusiveCount]string{}

func (a AptiloExclusiveCount) String() string {
	if str, ok := AptiloExclusiveCount_Strings[a]; ok {
		return str
	}
	return "AptiloExclusiveCount(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloExclusiveCount_Add(p *radius.Packet, value AptiloExclusiveCount) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 26, a)
}

func AptiloExclusiveCount_Get(p *radius.Packet) (value AptiloExclusiveCount) {
	value, _ = AptiloExclusiveCount_Lookup(p)
	return
}

func AptiloExclusiveCount_Gets(p *radius.Packet) (values []AptiloExclusiveCount, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 26) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloExclusiveCount(i))
	}
	return
}

func AptiloExclusiveCount_Lookup(p *radius.Packet) (value AptiloExclusiveCount, err error) {
	a, ok := _Aptilo_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloExclusiveCount(i)
	return
}

func AptiloExclusiveCount_Set(p *radius.Packet, value AptiloExclusiveCount) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 26, a)
}

func AptiloExclusiveCount_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 26)
}

type AptiloDurationQuota uint32

var AptiloDurationQuota_Strings = map[AptiloDurationQuota]string{}

func (a AptiloDurationQuota) String() string {
	if str, ok := AptiloDurationQuota_Strings[a]; ok {
		return str
	}
	return "AptiloDurationQuota(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloDurationQuota_Add(p *radius.Packet, value AptiloDurationQuota) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 27, a)
}

func AptiloDurationQuota_Get(p *radius.Packet) (value AptiloDurationQuota) {
	value, _ = AptiloDurationQuota_Lookup(p)
	return
}

func AptiloDurationQuota_Gets(p *radius.Packet) (values []AptiloDurationQuota, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 27) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloDurationQuota(i))
	}
	return
}

func AptiloDurationQuota_Lookup(p *radius.Packet) (value AptiloDurationQuota, err error) {
	a, ok := _Aptilo_LookupVendor(p, 27)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloDurationQuota(i)
	return
}

func AptiloDurationQuota_Set(p *radius.Packet, value AptiloDurationQuota) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 27, a)
}

func AptiloDurationQuota_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 27)
}

func AptiloVolumeQuota_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 28, a)
}

func AptiloVolumeQuota_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 28, a)
}

func AptiloVolumeQuota_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloVolumeQuota_Lookup(p)
	return
}

func AptiloVolumeQuota_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloVolumeQuota_LookupString(p)
	return
}

func AptiloVolumeQuota_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 28) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloVolumeQuota_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 28) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloVolumeQuota_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloVolumeQuota_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloVolumeQuota_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 28, a)
}

func AptiloVolumeQuota_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 28, a)
}

func AptiloVolumeQuota_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 28)
}

func AptiloRXVolumeQuota_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 29, a)
}

func AptiloRXVolumeQuota_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 29, a)
}

func AptiloRXVolumeQuota_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloRXVolumeQuota_Lookup(p)
	return
}

func AptiloRXVolumeQuota_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloRXVolumeQuota_LookupString(p)
	return
}

func AptiloRXVolumeQuota_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 29) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloRXVolumeQuota_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 29) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloRXVolumeQuota_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloRXVolumeQuota_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloRXVolumeQuota_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 29, a)
}

func AptiloRXVolumeQuota_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 29, a)
}

func AptiloRXVolumeQuota_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 29)
}

func AptiloTXVolumeQuota_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 30, a)
}

func AptiloTXVolumeQuota_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 30, a)
}

func AptiloTXVolumeQuota_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloTXVolumeQuota_Lookup(p)
	return
}

func AptiloTXVolumeQuota_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloTXVolumeQuota_LookupString(p)
	return
}

func AptiloTXVolumeQuota_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 30) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloTXVolumeQuota_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 30) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloTXVolumeQuota_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloTXVolumeQuota_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 30)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloTXVolumeQuota_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 30, a)
}

func AptiloTXVolumeQuota_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 30, a)
}

func AptiloTXVolumeQuota_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 30)
}

type AptiloResourceQuota uint32

var AptiloResourceQuota_Strings = map[AptiloResourceQuota]string{}

func (a AptiloResourceQuota) String() string {
	if str, ok := AptiloResourceQuota_Strings[a]; ok {
		return str
	}
	return "AptiloResourceQuota(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloResourceQuota_Add(p *radius.Packet, value AptiloResourceQuota) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 31, a)
}

func AptiloResourceQuota_Get(p *radius.Packet) (value AptiloResourceQuota) {
	value, _ = AptiloResourceQuota_Lookup(p)
	return
}

func AptiloResourceQuota_Gets(p *radius.Packet) (values []AptiloResourceQuota, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 31) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloResourceQuota(i))
	}
	return
}

func AptiloResourceQuota_Lookup(p *radius.Packet) (value AptiloResourceQuota, err error) {
	a, ok := _Aptilo_LookupVendor(p, 31)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloResourceQuota(i)
	return
}

func AptiloResourceQuota_Set(p *radius.Packet, value AptiloResourceQuota) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 31, a)
}

func AptiloResourceQuota_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 31)
}

func AptiloQuotaID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 32, a)
}

func AptiloQuotaID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 32, a)
}

func AptiloQuotaID_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloQuotaID_Lookup(p)
	return
}

func AptiloQuotaID_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloQuotaID_LookupString(p)
	return
}

func AptiloQuotaID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 32) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloQuotaID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 32) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloQuotaID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloQuotaID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 32)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloQuotaID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 32, a)
}

func AptiloQuotaID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 32, a)
}

func AptiloQuotaID_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 32)
}

type AptiloRXLimit uint32

var AptiloRXLimit_Strings = map[AptiloRXLimit]string{}

func (a AptiloRXLimit) String() string {
	if str, ok := AptiloRXLimit_Strings[a]; ok {
		return str
	}
	return "AptiloRXLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloRXLimit_Add(p *radius.Packet, value AptiloRXLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 33, a)
}

func AptiloRXLimit_Get(p *radius.Packet) (value AptiloRXLimit) {
	value, _ = AptiloRXLimit_Lookup(p)
	return
}

func AptiloRXLimit_Gets(p *radius.Packet) (values []AptiloRXLimit, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 33) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloRXLimit(i))
	}
	return
}

func AptiloRXLimit_Lookup(p *radius.Packet) (value AptiloRXLimit, err error) {
	a, ok := _Aptilo_LookupVendor(p, 33)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloRXLimit(i)
	return
}

func AptiloRXLimit_Set(p *radius.Packet, value AptiloRXLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 33, a)
}

func AptiloRXLimit_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 33)
}

type AptiloTXLimit uint32

var AptiloTXLimit_Strings = map[AptiloTXLimit]string{}

func (a AptiloTXLimit) String() string {
	if str, ok := AptiloTXLimit_Strings[a]; ok {
		return str
	}
	return "AptiloTXLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloTXLimit_Add(p *radius.Packet, value AptiloTXLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 34, a)
}

func AptiloTXLimit_Get(p *radius.Packet) (value AptiloTXLimit) {
	value, _ = AptiloTXLimit_Lookup(p)
	return
}

func AptiloTXLimit_Gets(p *radius.Packet) (values []AptiloTXLimit, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 34) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloTXLimit(i))
	}
	return
}

func AptiloTXLimit_Lookup(p *radius.Packet) (value AptiloTXLimit, err error) {
	a, ok := _Aptilo_LookupVendor(p, 34)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloTXLimit(i)
	return
}

func AptiloTXLimit_Set(p *radius.Packet, value AptiloTXLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 34, a)
}

func AptiloTXLimit_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 34)
}

type AptiloTRXLimit uint32

var AptiloTRXLimit_Strings = map[AptiloTRXLimit]string{}

func (a AptiloTRXLimit) String() string {
	if str, ok := AptiloTRXLimit_Strings[a]; ok {
		return str
	}
	return "AptiloTRXLimit(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloTRXLimit_Add(p *radius.Packet, value AptiloTRXLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 35, a)
}

func AptiloTRXLimit_Get(p *radius.Packet) (value AptiloTRXLimit) {
	value, _ = AptiloTRXLimit_Lookup(p)
	return
}

func AptiloTRXLimit_Gets(p *radius.Packet) (values []AptiloTRXLimit, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 35) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloTRXLimit(i))
	}
	return
}

func AptiloTRXLimit_Lookup(p *radius.Packet) (value AptiloTRXLimit, err error) {
	a, ok := _Aptilo_LookupVendor(p, 35)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloTRXLimit(i)
	return
}

func AptiloTRXLimit_Set(p *radius.Packet, value AptiloTRXLimit) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 35, a)
}

func AptiloTRXLimit_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 35)
}

type AptiloBwMinUp uint32

var AptiloBwMinUp_Strings = map[AptiloBwMinUp]string{}

func (a AptiloBwMinUp) String() string {
	if str, ok := AptiloBwMinUp_Strings[a]; ok {
		return str
	}
	return "AptiloBwMinUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloBwMinUp_Add(p *radius.Packet, value AptiloBwMinUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 36, a)
}

func AptiloBwMinUp_Get(p *radius.Packet) (value AptiloBwMinUp) {
	value, _ = AptiloBwMinUp_Lookup(p)
	return
}

func AptiloBwMinUp_Gets(p *radius.Packet) (values []AptiloBwMinUp, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 36) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloBwMinUp(i))
	}
	return
}

func AptiloBwMinUp_Lookup(p *radius.Packet) (value AptiloBwMinUp, err error) {
	a, ok := _Aptilo_LookupVendor(p, 36)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloBwMinUp(i)
	return
}

func AptiloBwMinUp_Set(p *radius.Packet, value AptiloBwMinUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 36, a)
}

func AptiloBwMinUp_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 36)
}

type AptiloBwMaxUp uint32

var AptiloBwMaxUp_Strings = map[AptiloBwMaxUp]string{}

func (a AptiloBwMaxUp) String() string {
	if str, ok := AptiloBwMaxUp_Strings[a]; ok {
		return str
	}
	return "AptiloBwMaxUp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloBwMaxUp_Add(p *radius.Packet, value AptiloBwMaxUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 37, a)
}

func AptiloBwMaxUp_Get(p *radius.Packet) (value AptiloBwMaxUp) {
	value, _ = AptiloBwMaxUp_Lookup(p)
	return
}

func AptiloBwMaxUp_Gets(p *radius.Packet) (values []AptiloBwMaxUp, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 37) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloBwMaxUp(i))
	}
	return
}

func AptiloBwMaxUp_Lookup(p *radius.Packet) (value AptiloBwMaxUp, err error) {
	a, ok := _Aptilo_LookupVendor(p, 37)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloBwMaxUp(i)
	return
}

func AptiloBwMaxUp_Set(p *radius.Packet, value AptiloBwMaxUp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 37, a)
}

func AptiloBwMaxUp_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 37)
}

type AptiloBwMinDown uint32

var AptiloBwMinDown_Strings = map[AptiloBwMinDown]string{}

func (a AptiloBwMinDown) String() string {
	if str, ok := AptiloBwMinDown_Strings[a]; ok {
		return str
	}
	return "AptiloBwMinDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloBwMinDown_Add(p *radius.Packet, value AptiloBwMinDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 38, a)
}

func AptiloBwMinDown_Get(p *radius.Packet) (value AptiloBwMinDown) {
	value, _ = AptiloBwMinDown_Lookup(p)
	return
}

func AptiloBwMinDown_Gets(p *radius.Packet) (values []AptiloBwMinDown, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 38) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloBwMinDown(i))
	}
	return
}

func AptiloBwMinDown_Lookup(p *radius.Packet) (value AptiloBwMinDown, err error) {
	a, ok := _Aptilo_LookupVendor(p, 38)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloBwMinDown(i)
	return
}

func AptiloBwMinDown_Set(p *radius.Packet, value AptiloBwMinDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 38, a)
}

func AptiloBwMinDown_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 38)
}

type AptiloBwMaxDown uint32

var AptiloBwMaxDown_Strings = map[AptiloBwMaxDown]string{}

func (a AptiloBwMaxDown) String() string {
	if str, ok := AptiloBwMaxDown_Strings[a]; ok {
		return str
	}
	return "AptiloBwMaxDown(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloBwMaxDown_Add(p *radius.Packet, value AptiloBwMaxDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 39, a)
}

func AptiloBwMaxDown_Get(p *radius.Packet) (value AptiloBwMaxDown) {
	value, _ = AptiloBwMaxDown_Lookup(p)
	return
}

func AptiloBwMaxDown_Gets(p *radius.Packet) (values []AptiloBwMaxDown, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 39) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloBwMaxDown(i))
	}
	return
}

func AptiloBwMaxDown_Lookup(p *radius.Packet) (value AptiloBwMaxDown, err error) {
	a, ok := _Aptilo_LookupVendor(p, 39)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloBwMaxDown(i)
	return
}

func AptiloBwMaxDown_Set(p *radius.Packet, value AptiloBwMaxDown) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 39, a)
}

func AptiloBwMaxDown_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 39)
}

func AptiloServiceProfile_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 40, a)
}

func AptiloServiceProfile_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 40, a)
}

func AptiloServiceProfile_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloServiceProfile_Lookup(p)
	return
}

func AptiloServiceProfile_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloServiceProfile_LookupString(p)
	return
}

func AptiloServiceProfile_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 40) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloServiceProfile_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 40) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloServiceProfile_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloServiceProfile_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 40)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloServiceProfile_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 40, a)
}

func AptiloServiceProfile_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 40, a)
}

func AptiloServiceProfile_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 40)
}

func AptiloAutomaticService_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 41, a)
}

func AptiloAutomaticService_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 41, a)
}

func AptiloAutomaticService_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloAutomaticService_Lookup(p)
	return
}

func AptiloAutomaticService_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloAutomaticService_LookupString(p)
	return
}

func AptiloAutomaticService_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 41) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloAutomaticService_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 41) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloAutomaticService_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloAutomaticService_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 41)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloAutomaticService_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 41, a)
}

func AptiloAutomaticService_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 41, a)
}

func AptiloAutomaticService_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 41)
}

type AptiloAuthType uint32

const (
	AptiloAuthType_Value_User      AptiloAuthType = 0
	AptiloAuthType_Value_Auto      AptiloAuthType = 1
	AptiloAuthType_Value_IPRequest AptiloAuthType = 2
)

var AptiloAuthType_Strings = map[AptiloAuthType]string{
	AptiloAuthType_Value_User:      "User",
	AptiloAuthType_Value_Auto:      "Auto",
	AptiloAuthType_Value_IPRequest: "IP-Request",
}

func (a AptiloAuthType) String() string {
	if str, ok := AptiloAuthType_Strings[a]; ok {
		return str
	}
	return "AptiloAuthType(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloAuthType_Add(p *radius.Packet, value AptiloAuthType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 42, a)
}

func AptiloAuthType_Get(p *radius.Packet) (value AptiloAuthType) {
	value, _ = AptiloAuthType_Lookup(p)
	return
}

func AptiloAuthType_Gets(p *radius.Packet) (values []AptiloAuthType, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 42) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloAuthType(i))
	}
	return
}

func AptiloAuthType_Lookup(p *radius.Packet) (value AptiloAuthType, err error) {
	a, ok := _Aptilo_LookupVendor(p, 42)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloAuthType(i)
	return
}

func AptiloAuthType_Set(p *radius.Packet, value AptiloAuthType) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 42, a)
}

func AptiloAuthType_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 42)
}

type AptiloNASCapabilities uint32

const (
	AptiloNASCapabilities_Value_CoALogin AptiloNASCapabilities = 1
)

var AptiloNASCapabilities_Strings = map[AptiloNASCapabilities]string{
	AptiloNASCapabilities_Value_CoALogin: "CoA-Login",
}

func (a AptiloNASCapabilities) String() string {
	if str, ok := AptiloNASCapabilities_Strings[a]; ok {
		return str
	}
	return "AptiloNASCapabilities(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloNASCapabilities_Add(p *radius.Packet, value AptiloNASCapabilities) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 43, a)
}

func AptiloNASCapabilities_Get(p *radius.Packet) (value AptiloNASCapabilities) {
	value, _ = AptiloNASCapabilities_Lookup(p)
	return
}

func AptiloNASCapabilities_Gets(p *radius.Packet) (values []AptiloNASCapabilities, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 43) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloNASCapabilities(i))
	}
	return
}

func AptiloNASCapabilities_Lookup(p *radius.Packet) (value AptiloNASCapabilities, err error) {
	a, ok := _Aptilo_LookupVendor(p, 43)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloNASCapabilities(i)
	return
}

func AptiloNASCapabilities_Set(p *radius.Packet, value AptiloNASCapabilities) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 43, a)
}

func AptiloNASCapabilities_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 43)
}

func AptiloService_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 44, a)
}

func AptiloService_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 44, a)
}

func AptiloService_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloService_Lookup(p)
	return
}

func AptiloService_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloService_LookupString(p)
	return
}

func AptiloService_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 44) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloService_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 44) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloService_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloService_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 44)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloService_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 44, a)
}

func AptiloService_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 44, a)
}

func AptiloService_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 44)
}

type AptiloServiceProfileID uint32

var AptiloServiceProfileID_Strings = map[AptiloServiceProfileID]string{}

func (a AptiloServiceProfileID) String() string {
	if str, ok := AptiloServiceProfileID_Strings[a]; ok {
		return str
	}
	return "AptiloServiceProfileID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloServiceProfileID_Add(p *radius.Packet, value AptiloServiceProfileID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 45, a)
}

func AptiloServiceProfileID_Get(p *radius.Packet) (value AptiloServiceProfileID) {
	value, _ = AptiloServiceProfileID_Lookup(p)
	return
}

func AptiloServiceProfileID_Gets(p *radius.Packet) (values []AptiloServiceProfileID, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 45) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloServiceProfileID(i))
	}
	return
}

func AptiloServiceProfileID_Lookup(p *radius.Packet) (value AptiloServiceProfileID, err error) {
	a, ok := _Aptilo_LookupVendor(p, 45)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloServiceProfileID(i)
	return
}

func AptiloServiceProfileID_Set(p *radius.Packet, value AptiloServiceProfileID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 45, a)
}

func AptiloServiceProfileID_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 45)
}

type AptiloAuthParam uint32

var AptiloAuthParam_Strings = map[AptiloAuthParam]string{}

func (a AptiloAuthParam) String() string {
	if str, ok := AptiloAuthParam_Strings[a]; ok {
		return str
	}
	return "AptiloAuthParam(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloAuthParam_Add(p *radius.Packet, value AptiloAuthParam) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 50, a)
}

func AptiloAuthParam_Get(p *radius.Packet) (value AptiloAuthParam) {
	value, _ = AptiloAuthParam_Lookup(p)
	return
}

func AptiloAuthParam_Gets(p *radius.Packet) (values []AptiloAuthParam, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 50) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloAuthParam(i))
	}
	return
}

func AptiloAuthParam_Lookup(p *radius.Packet) (value AptiloAuthParam, err error) {
	a, ok := _Aptilo_LookupVendor(p, 50)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloAuthParam(i)
	return
}

func AptiloAuthParam_Set(p *radius.Packet, value AptiloAuthParam) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 50, a)
}

func AptiloAuthParam_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 50)
}

type AptiloAccessProfileID uint32

var AptiloAccessProfileID_Strings = map[AptiloAccessProfileID]string{}

func (a AptiloAccessProfileID) String() string {
	if str, ok := AptiloAccessProfileID_Strings[a]; ok {
		return str
	}
	return "AptiloAccessProfileID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloAccessProfileID_Add(p *radius.Packet, value AptiloAccessProfileID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 53, a)
}

func AptiloAccessProfileID_Get(p *radius.Packet) (value AptiloAccessProfileID) {
	value, _ = AptiloAccessProfileID_Lookup(p)
	return
}

func AptiloAccessProfileID_Gets(p *radius.Packet) (values []AptiloAccessProfileID, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 53) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloAccessProfileID(i))
	}
	return
}

func AptiloAccessProfileID_Lookup(p *radius.Packet) (value AptiloAccessProfileID, err error) {
	a, ok := _Aptilo_LookupVendor(p, 53)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloAccessProfileID(i)
	return
}

func AptiloAccessProfileID_Set(p *radius.Packet, value AptiloAccessProfileID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 53, a)
}

func AptiloAccessProfileID_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 53)
}

func AptiloNASModel_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 56, a)
}

func AptiloNASModel_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 56, a)
}

func AptiloNASModel_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloNASModel_Lookup(p)
	return
}

func AptiloNASModel_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloNASModel_LookupString(p)
	return
}

func AptiloNASModel_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 56) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloNASModel_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 56) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloNASModel_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 56)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloNASModel_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 56)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloNASModel_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 56, a)
}

func AptiloNASModel_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 56, a)
}

func AptiloNASModel_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 56)
}

type AptiloDebugOption uint32

const (
	AptiloDebugOption_Value_SimulateEAPTLS AptiloDebugOption = 1
)

var AptiloDebugOption_Strings = map[AptiloDebugOption]string{
	AptiloDebugOption_Value_SimulateEAPTLS: "Simulate-EAP-TLS",
}

func (a AptiloDebugOption) String() string {
	if str, ok := AptiloDebugOption_Strings[a]; ok {
		return str
	}
	return "AptiloDebugOption(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloDebugOption_Add(p *radius.Packet, value AptiloDebugOption) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 57, a)
}

func AptiloDebugOption_Get(p *radius.Packet) (value AptiloDebugOption) {
	value, _ = AptiloDebugOption_Lookup(p)
	return
}

func AptiloDebugOption_Gets(p *radius.Packet) (values []AptiloDebugOption, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 57) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloDebugOption(i))
	}
	return
}

func AptiloDebugOption_Lookup(p *radius.Packet) (value AptiloDebugOption, err error) {
	a, ok := _Aptilo_LookupVendor(p, 57)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloDebugOption(i)
	return
}

func AptiloDebugOption_Set(p *radius.Packet, value AptiloDebugOption) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 57, a)
}

func AptiloDebugOption_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 57)
}

func AptiloSessionID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 58, a)
}

func AptiloSessionID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 58, a)
}

func AptiloSessionID_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloSessionID_Lookup(p)
	return
}

func AptiloSessionID_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloSessionID_LookupString(p)
	return
}

func AptiloSessionID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 58) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloSessionID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 58) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloSessionID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 58)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloSessionID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 58)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloSessionID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 58, a)
}

func AptiloSessionID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 58, a)
}

func AptiloSessionID_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 58)
}

func AptiloPrepaidCapabilities_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 59, a)
}

func AptiloPrepaidCapabilities_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 59, a)
}

func AptiloPrepaidCapabilities_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloPrepaidCapabilities_Lookup(p)
	return
}

func AptiloPrepaidCapabilities_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloPrepaidCapabilities_LookupString(p)
	return
}

func AptiloPrepaidCapabilities_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 59) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloPrepaidCapabilities_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 59) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloPrepaidCapabilities_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 59)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloPrepaidCapabilities_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 59)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloPrepaidCapabilities_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 59, a)
}

func AptiloPrepaidCapabilities_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 59, a)
}

func AptiloPrepaidCapabilities_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 59)
}

func AptiloOctetsQuota_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 60, a)
}

func AptiloOctetsQuota_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 60, a)
}

func AptiloOctetsQuota_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloOctetsQuota_Lookup(p)
	return
}

func AptiloOctetsQuota_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloOctetsQuota_LookupString(p)
	return
}

func AptiloOctetsQuota_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 60) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloOctetsQuota_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 60) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloOctetsQuota_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloOctetsQuota_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloOctetsQuota_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 60, a)
}

func AptiloOctetsQuota_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 60, a)
}

func AptiloOctetsQuota_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 60)
}

func AptiloOctetsThreshold_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 61, a)
}

func AptiloOctetsThreshold_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 61, a)
}

func AptiloOctetsThreshold_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloOctetsThreshold_Lookup(p)
	return
}

func AptiloOctetsThreshold_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloOctetsThreshold_LookupString(p)
	return
}

func AptiloOctetsThreshold_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 61) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloOctetsThreshold_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 61) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloOctetsThreshold_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloOctetsThreshold_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloOctetsThreshold_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 61, a)
}

func AptiloOctetsThreshold_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 61, a)
}

func AptiloOctetsThreshold_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 61)
}

type AptiloResourceThreshold uint32

var AptiloResourceThreshold_Strings = map[AptiloResourceThreshold]string{}

func (a AptiloResourceThreshold) String() string {
	if str, ok := AptiloResourceThreshold_Strings[a]; ok {
		return str
	}
	return "AptiloResourceThreshold(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloResourceThreshold_Add(p *radius.Packet, value AptiloResourceThreshold) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 62, a)
}

func AptiloResourceThreshold_Get(p *radius.Packet) (value AptiloResourceThreshold) {
	value, _ = AptiloResourceThreshold_Lookup(p)
	return
}

func AptiloResourceThreshold_Gets(p *radius.Packet) (values []AptiloResourceThreshold, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 62) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloResourceThreshold(i))
	}
	return
}

func AptiloResourceThreshold_Lookup(p *radius.Packet) (value AptiloResourceThreshold, err error) {
	a, ok := _Aptilo_LookupVendor(p, 62)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloResourceThreshold(i)
	return
}

func AptiloResourceThreshold_Set(p *radius.Packet, value AptiloResourceThreshold) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 62, a)
}

func AptiloResourceThreshold_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 62)
}

type AptiloDurationThreshold uint32

var AptiloDurationThreshold_Strings = map[AptiloDurationThreshold]string{}

func (a AptiloDurationThreshold) String() string {
	if str, ok := AptiloDurationThreshold_Strings[a]; ok {
		return str
	}
	return "AptiloDurationThreshold(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloDurationThreshold_Add(p *radius.Packet, value AptiloDurationThreshold) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 63, a)
}

func AptiloDurationThreshold_Get(p *radius.Packet) (value AptiloDurationThreshold) {
	value, _ = AptiloDurationThreshold_Lookup(p)
	return
}

func AptiloDurationThreshold_Gets(p *radius.Packet) (values []AptiloDurationThreshold, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 63) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloDurationThreshold(i))
	}
	return
}

func AptiloDurationThreshold_Lookup(p *radius.Packet) (value AptiloDurationThreshold, err error) {
	a, ok := _Aptilo_LookupVendor(p, 63)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloDurationThreshold(i)
	return
}

func AptiloDurationThreshold_Set(p *radius.Packet, value AptiloDurationThreshold) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 63, a)
}

func AptiloDurationThreshold_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 63)
}

func AptiloOctetsBalance_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 64, a)
}

func AptiloOctetsBalance_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 64, a)
}

func AptiloOctetsBalance_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloOctetsBalance_Lookup(p)
	return
}

func AptiloOctetsBalance_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloOctetsBalance_LookupString(p)
	return
}

func AptiloOctetsBalance_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 64) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloOctetsBalance_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 64) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloOctetsBalance_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloOctetsBalance_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 64)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloOctetsBalance_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 64, a)
}

func AptiloOctetsBalance_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 64, a)
}

func AptiloOctetsBalance_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 64)
}

type AptiloResourceBalance uint32

var AptiloResourceBalance_Strings = map[AptiloResourceBalance]string{}

func (a AptiloResourceBalance) String() string {
	if str, ok := AptiloResourceBalance_Strings[a]; ok {
		return str
	}
	return "AptiloResourceBalance(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloResourceBalance_Add(p *radius.Packet, value AptiloResourceBalance) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 65, a)
}

func AptiloResourceBalance_Get(p *radius.Packet) (value AptiloResourceBalance) {
	value, _ = AptiloResourceBalance_Lookup(p)
	return
}

func AptiloResourceBalance_Gets(p *radius.Packet) (values []AptiloResourceBalance, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 65) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloResourceBalance(i))
	}
	return
}

func AptiloResourceBalance_Lookup(p *radius.Packet) (value AptiloResourceBalance, err error) {
	a, ok := _Aptilo_LookupVendor(p, 65)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloResourceBalance(i)
	return
}

func AptiloResourceBalance_Set(p *radius.Packet, value AptiloResourceBalance) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 65, a)
}

func AptiloResourceBalance_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 65)
}

type AptiloDurationBalance uint32

var AptiloDurationBalance_Strings = map[AptiloDurationBalance]string{}

func (a AptiloDurationBalance) String() string {
	if str, ok := AptiloDurationBalance_Strings[a]; ok {
		return str
	}
	return "AptiloDurationBalance(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloDurationBalance_Add(p *radius.Packet, value AptiloDurationBalance) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 66, a)
}

func AptiloDurationBalance_Get(p *radius.Packet) (value AptiloDurationBalance) {
	value, _ = AptiloDurationBalance_Lookup(p)
	return
}

func AptiloDurationBalance_Gets(p *radius.Packet) (values []AptiloDurationBalance, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 66) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloDurationBalance(i))
	}
	return
}

func AptiloDurationBalance_Lookup(p *radius.Packet) (value AptiloDurationBalance, err error) {
	a, ok := _Aptilo_LookupVendor(p, 66)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloDurationBalance(i)
	return
}

func AptiloDurationBalance_Set(p *radius.Packet, value AptiloDurationBalance) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 66, a)
}

func AptiloDurationBalance_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 66)
}

func AptiloOctetsUsed_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 67, a)
}

func AptiloOctetsUsed_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 67, a)
}

func AptiloOctetsUsed_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloOctetsUsed_Lookup(p)
	return
}

func AptiloOctetsUsed_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloOctetsUsed_LookupString(p)
	return
}

func AptiloOctetsUsed_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 67) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloOctetsUsed_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 67) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloOctetsUsed_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 67)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloOctetsUsed_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 67)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloOctetsUsed_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 67, a)
}

func AptiloOctetsUsed_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 67, a)
}

func AptiloOctetsUsed_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 67)
}

type AptiloResourceUsed uint32

var AptiloResourceUsed_Strings = map[AptiloResourceUsed]string{}

func (a AptiloResourceUsed) String() string {
	if str, ok := AptiloResourceUsed_Strings[a]; ok {
		return str
	}
	return "AptiloResourceUsed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloResourceUsed_Add(p *radius.Packet, value AptiloResourceUsed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 68, a)
}

func AptiloResourceUsed_Get(p *radius.Packet) (value AptiloResourceUsed) {
	value, _ = AptiloResourceUsed_Lookup(p)
	return
}

func AptiloResourceUsed_Gets(p *radius.Packet) (values []AptiloResourceUsed, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 68) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloResourceUsed(i))
	}
	return
}

func AptiloResourceUsed_Lookup(p *radius.Packet) (value AptiloResourceUsed, err error) {
	a, ok := _Aptilo_LookupVendor(p, 68)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloResourceUsed(i)
	return
}

func AptiloResourceUsed_Set(p *radius.Packet, value AptiloResourceUsed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 68, a)
}

func AptiloResourceUsed_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 68)
}

type AptiloDurationUsed uint32

var AptiloDurationUsed_Strings = map[AptiloDurationUsed]string{}

func (a AptiloDurationUsed) String() string {
	if str, ok := AptiloDurationUsed_Strings[a]; ok {
		return str
	}
	return "AptiloDurationUsed(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloDurationUsed_Add(p *radius.Packet, value AptiloDurationUsed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 69, a)
}

func AptiloDurationUsed_Get(p *radius.Packet) (value AptiloDurationUsed) {
	value, _ = AptiloDurationUsed_Lookup(p)
	return
}

func AptiloDurationUsed_Gets(p *radius.Packet) (values []AptiloDurationUsed, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 69) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloDurationUsed(i))
	}
	return
}

func AptiloDurationUsed_Lookup(p *radius.Packet) (value AptiloDurationUsed, err error) {
	a, ok := _Aptilo_LookupVendor(p, 69)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloDurationUsed(i)
	return
}

func AptiloDurationUsed_Set(p *radius.Packet, value AptiloDurationUsed) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 69, a)
}

func AptiloDurationUsed_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 69)
}

func AptiloOctetsRequest_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 70, a)
}

func AptiloOctetsRequest_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 70, a)
}

func AptiloOctetsRequest_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloOctetsRequest_Lookup(p)
	return
}

func AptiloOctetsRequest_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloOctetsRequest_LookupString(p)
	return
}

func AptiloOctetsRequest_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 70) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloOctetsRequest_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 70) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloOctetsRequest_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 70)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloOctetsRequest_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 70)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloOctetsRequest_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 70, a)
}

func AptiloOctetsRequest_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 70, a)
}

func AptiloOctetsRequest_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 70)
}

type AptiloResourceRequest uint32

var AptiloResourceRequest_Strings = map[AptiloResourceRequest]string{}

func (a AptiloResourceRequest) String() string {
	if str, ok := AptiloResourceRequest_Strings[a]; ok {
		return str
	}
	return "AptiloResourceRequest(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloResourceRequest_Add(p *radius.Packet, value AptiloResourceRequest) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 71, a)
}

func AptiloResourceRequest_Get(p *radius.Packet) (value AptiloResourceRequest) {
	value, _ = AptiloResourceRequest_Lookup(p)
	return
}

func AptiloResourceRequest_Gets(p *radius.Packet) (values []AptiloResourceRequest, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 71) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloResourceRequest(i))
	}
	return
}

func AptiloResourceRequest_Lookup(p *radius.Packet) (value AptiloResourceRequest, err error) {
	a, ok := _Aptilo_LookupVendor(p, 71)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloResourceRequest(i)
	return
}

func AptiloResourceRequest_Set(p *radius.Packet, value AptiloResourceRequest) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 71, a)
}

func AptiloResourceRequest_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 71)
}

type AptiloDurationRequest uint32

var AptiloDurationRequest_Strings = map[AptiloDurationRequest]string{}

func (a AptiloDurationRequest) String() string {
	if str, ok := AptiloDurationRequest_Strings[a]; ok {
		return str
	}
	return "AptiloDurationRequest(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloDurationRequest_Add(p *radius.Packet, value AptiloDurationRequest) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 72, a)
}

func AptiloDurationRequest_Get(p *radius.Packet) (value AptiloDurationRequest) {
	value, _ = AptiloDurationRequest_Lookup(p)
	return
}

func AptiloDurationRequest_Gets(p *radius.Packet) (values []AptiloDurationRequest, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 72) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloDurationRequest(i))
	}
	return
}

func AptiloDurationRequest_Lookup(p *radius.Packet) (value AptiloDurationRequest, err error) {
	a, ok := _Aptilo_LookupVendor(p, 72)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloDurationRequest(i)
	return
}

func AptiloDurationRequest_Set(p *radius.Packet, value AptiloDurationRequest) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 72, a)
}

func AptiloDurationRequest_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 72)
}

func AptiloQoSIndicator_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 73, a)
}

func AptiloQoSIndicator_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 73, a)
}

func AptiloQoSIndicator_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloQoSIndicator_Lookup(p)
	return
}

func AptiloQoSIndicator_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloQoSIndicator_LookupString(p)
	return
}

func AptiloQoSIndicator_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 73) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloQoSIndicator_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 73) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloQoSIndicator_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloQoSIndicator_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 73)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloQoSIndicator_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 73, a)
}

func AptiloQoSIndicator_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 73, a)
}

func AptiloQoSIndicator_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 73)
}

func AptiloCircuitID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 74, a)
}

func AptiloCircuitID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 74, a)
}

func AptiloCircuitID_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloCircuitID_Lookup(p)
	return
}

func AptiloCircuitID_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloCircuitID_LookupString(p)
	return
}

func AptiloCircuitID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 74) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloCircuitID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 74) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloCircuitID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 74)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloCircuitID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 74)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloCircuitID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 74, a)
}

func AptiloCircuitID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 74, a)
}

func AptiloCircuitID_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 74)
}

func AptiloRemoteID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 75, a)
}

func AptiloRemoteID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 75, a)
}

func AptiloRemoteID_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloRemoteID_Lookup(p)
	return
}

func AptiloRemoteID_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloRemoteID_LookupString(p)
	return
}

func AptiloRemoteID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 75) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloRemoteID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 75) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloRemoteID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 75)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloRemoteID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 75)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloRemoteID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 75, a)
}

func AptiloRemoteID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 75, a)
}

func AptiloRemoteID_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 75)
}

func AptiloLocationName_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 76, a)
}

func AptiloLocationName_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 76, a)
}

func AptiloLocationName_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloLocationName_Lookup(p)
	return
}

func AptiloLocationName_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloLocationName_LookupString(p)
	return
}

func AptiloLocationName_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 76) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloLocationName_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 76) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloLocationName_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 76)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloLocationName_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 76)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloLocationName_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 76, a)
}

func AptiloLocationName_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 76, a)
}

func AptiloLocationName_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 76)
}

func AptiloKeyIPv61_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 231, a)
}

func AptiloKeyIPv61_Get(p *radius.Packet) (value net.IP) {
	value, _ = AptiloKeyIPv61_Lookup(p)
	return
}

func AptiloKeyIPv61_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Aptilo_GetsVendor(p, 231) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyIPv61_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Aptilo_LookupVendor(p, 231)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func AptiloKeyIPv61_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 231, a)
}

func AptiloKeyIPv61_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 231)
}

func AptiloKeyIPv62_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 232, a)
}

func AptiloKeyIPv62_Get(p *radius.Packet) (value net.IP) {
	value, _ = AptiloKeyIPv62_Lookup(p)
	return
}

func AptiloKeyIPv62_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Aptilo_GetsVendor(p, 232) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyIPv62_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Aptilo_LookupVendor(p, 232)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func AptiloKeyIPv62_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 232, a)
}

func AptiloKeyIPv62_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 232)
}

func AptiloKeyIPv63_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 233, a)
}

func AptiloKeyIPv63_Get(p *radius.Packet) (value net.IP) {
	value, _ = AptiloKeyIPv63_Lookup(p)
	return
}

func AptiloKeyIPv63_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Aptilo_GetsVendor(p, 233) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyIPv63_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Aptilo_LookupVendor(p, 233)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func AptiloKeyIPv63_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 233, a)
}

func AptiloKeyIPv63_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 233)
}

func AptiloKeyIPv64_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 234, a)
}

func AptiloKeyIPv64_Get(p *radius.Packet) (value net.IP) {
	value, _ = AptiloKeyIPv64_Lookup(p)
	return
}

func AptiloKeyIPv64_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Aptilo_GetsVendor(p, 234) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyIPv64_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Aptilo_LookupVendor(p, 234)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func AptiloKeyIPv64_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 234, a)
}

func AptiloKeyIPv64_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 234)
}

func AptiloKeyIPv65_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 235, a)
}

func AptiloKeyIPv65_Get(p *radius.Packet) (value net.IP) {
	value, _ = AptiloKeyIPv65_Lookup(p)
	return
}

func AptiloKeyIPv65_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Aptilo_GetsVendor(p, 235) {
		i, err = radius.IPv6Addr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyIPv65_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Aptilo_LookupVendor(p, 235)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPv6Addr(a)
	return
}

func AptiloKeyIPv65_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPv6Addr(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 235, a)
}

func AptiloKeyIPv65_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 235)
}

func AptiloKeyOctets1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 236, a)
}

func AptiloKeyOctets1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 236, a)
}

func AptiloKeyOctets1_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloKeyOctets1_Lookup(p)
	return
}

func AptiloKeyOctets1_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloKeyOctets1_LookupString(p)
	return
}

func AptiloKeyOctets1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 236) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyOctets1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 236) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyOctets1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 236)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloKeyOctets1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 236)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloKeyOctets1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 236, a)
}

func AptiloKeyOctets1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 236, a)
}

func AptiloKeyOctets1_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 236)
}

func AptiloKeyOctets2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 237, a)
}

func AptiloKeyOctets2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 237, a)
}

func AptiloKeyOctets2_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloKeyOctets2_Lookup(p)
	return
}

func AptiloKeyOctets2_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloKeyOctets2_LookupString(p)
	return
}

func AptiloKeyOctets2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 237) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyOctets2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 237) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyOctets2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 237)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloKeyOctets2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 237)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloKeyOctets2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 237, a)
}

func AptiloKeyOctets2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 237, a)
}

func AptiloKeyOctets2_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 237)
}

func AptiloKeyOctets3_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 238, a)
}

func AptiloKeyOctets3_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 238, a)
}

func AptiloKeyOctets3_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloKeyOctets3_Lookup(p)
	return
}

func AptiloKeyOctets3_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloKeyOctets3_LookupString(p)
	return
}

func AptiloKeyOctets3_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 238) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyOctets3_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 238) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyOctets3_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 238)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloKeyOctets3_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 238)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloKeyOctets3_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 238, a)
}

func AptiloKeyOctets3_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 238, a)
}

func AptiloKeyOctets3_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 238)
}

func AptiloKeyOctets4_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 239, a)
}

func AptiloKeyOctets4_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 239, a)
}

func AptiloKeyOctets4_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloKeyOctets4_Lookup(p)
	return
}

func AptiloKeyOctets4_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloKeyOctets4_LookupString(p)
	return
}

func AptiloKeyOctets4_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 239) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyOctets4_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 239) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyOctets4_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 239)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloKeyOctets4_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 239)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloKeyOctets4_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 239, a)
}

func AptiloKeyOctets4_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 239, a)
}

func AptiloKeyOctets4_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 239)
}

func AptiloKeyOctets5_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 240, a)
}

func AptiloKeyOctets5_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 240, a)
}

func AptiloKeyOctets5_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloKeyOctets5_Lookup(p)
	return
}

func AptiloKeyOctets5_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloKeyOctets5_LookupString(p)
	return
}

func AptiloKeyOctets5_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 240) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyOctets5_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 240) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyOctets5_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 240)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloKeyOctets5_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 240)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloKeyOctets5_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 240, a)
}

func AptiloKeyOctets5_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 240, a)
}

func AptiloKeyOctets5_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 240)
}

func AptiloKeyString1_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 241, a)
}

func AptiloKeyString1_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 241, a)
}

func AptiloKeyString1_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloKeyString1_Lookup(p)
	return
}

func AptiloKeyString1_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloKeyString1_LookupString(p)
	return
}

func AptiloKeyString1_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 241) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyString1_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 241) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyString1_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 241)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloKeyString1_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 241)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloKeyString1_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 241, a)
}

func AptiloKeyString1_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 241, a)
}

func AptiloKeyString1_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 241)
}

func AptiloKeyString2_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 242, a)
}

func AptiloKeyString2_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 242, a)
}

func AptiloKeyString2_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloKeyString2_Lookup(p)
	return
}

func AptiloKeyString2_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloKeyString2_LookupString(p)
	return
}

func AptiloKeyString2_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 242) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyString2_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 242) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyString2_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 242)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloKeyString2_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 242)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloKeyString2_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 242, a)
}

func AptiloKeyString2_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 242, a)
}

func AptiloKeyString2_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 242)
}

func AptiloKeyString3_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 243, a)
}

func AptiloKeyString3_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 243, a)
}

func AptiloKeyString3_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloKeyString3_Lookup(p)
	return
}

func AptiloKeyString3_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloKeyString3_LookupString(p)
	return
}

func AptiloKeyString3_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 243) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyString3_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 243) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyString3_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 243)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloKeyString3_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 243)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloKeyString3_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 243, a)
}

func AptiloKeyString3_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 243, a)
}

func AptiloKeyString3_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 243)
}

func AptiloKeyString4_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 244, a)
}

func AptiloKeyString4_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 244, a)
}

func AptiloKeyString4_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloKeyString4_Lookup(p)
	return
}

func AptiloKeyString4_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloKeyString4_LookupString(p)
	return
}

func AptiloKeyString4_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 244) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyString4_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 244) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyString4_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 244)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloKeyString4_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 244)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloKeyString4_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 244, a)
}

func AptiloKeyString4_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 244, a)
}

func AptiloKeyString4_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 244)
}

func AptiloKeyString5_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 245, a)
}

func AptiloKeyString5_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 245, a)
}

func AptiloKeyString5_Get(p *radius.Packet) (value []byte) {
	value, _ = AptiloKeyString5_Lookup(p)
	return
}

func AptiloKeyString5_GetString(p *radius.Packet) (value string) {
	value, _ = AptiloKeyString5_LookupString(p)
	return
}

func AptiloKeyString5_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Aptilo_GetsVendor(p, 245) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyString5_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Aptilo_GetsVendor(p, 245) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyString5_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Aptilo_LookupVendor(p, 245)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func AptiloKeyString5_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Aptilo_LookupVendor(p, 245)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func AptiloKeyString5_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 245, a)
}

func AptiloKeyString5_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 245, a)
}

func AptiloKeyString5_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 245)
}

func AptiloKeyIP1_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 246, a)
}

func AptiloKeyIP1_Get(p *radius.Packet) (value net.IP) {
	value, _ = AptiloKeyIP1_Lookup(p)
	return
}

func AptiloKeyIP1_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Aptilo_GetsVendor(p, 246) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyIP1_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Aptilo_LookupVendor(p, 246)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AptiloKeyIP1_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 246, a)
}

func AptiloKeyIP1_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 246)
}

func AptiloKeyIP2_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 247, a)
}

func AptiloKeyIP2_Get(p *radius.Packet) (value net.IP) {
	value, _ = AptiloKeyIP2_Lookup(p)
	return
}

func AptiloKeyIP2_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Aptilo_GetsVendor(p, 247) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyIP2_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Aptilo_LookupVendor(p, 247)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AptiloKeyIP2_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 247, a)
}

func AptiloKeyIP2_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 247)
}

func AptiloKeyIP3_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 248, a)
}

func AptiloKeyIP3_Get(p *radius.Packet) (value net.IP) {
	value, _ = AptiloKeyIP3_Lookup(p)
	return
}

func AptiloKeyIP3_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Aptilo_GetsVendor(p, 248) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyIP3_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Aptilo_LookupVendor(p, 248)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AptiloKeyIP3_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 248, a)
}

func AptiloKeyIP3_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 248)
}

func AptiloKeyIP4_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 249, a)
}

func AptiloKeyIP4_Get(p *radius.Packet) (value net.IP) {
	value, _ = AptiloKeyIP4_Lookup(p)
	return
}

func AptiloKeyIP4_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Aptilo_GetsVendor(p, 249) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyIP4_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Aptilo_LookupVendor(p, 249)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AptiloKeyIP4_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 249, a)
}

func AptiloKeyIP4_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 249)
}

func AptiloKeyIP5_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Aptilo_AddVendor(p, 250, a)
}

func AptiloKeyIP5_Get(p *radius.Packet) (value net.IP) {
	value, _ = AptiloKeyIP5_Lookup(p)
	return
}

func AptiloKeyIP5_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _Aptilo_GetsVendor(p, 250) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func AptiloKeyIP5_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _Aptilo_LookupVendor(p, 250)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func AptiloKeyIP5_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _Aptilo_SetVendor(p, 250, a)
}

func AptiloKeyIP5_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 250)
}

type AptiloKeyInteger1 uint32

var AptiloKeyInteger1_Strings = map[AptiloKeyInteger1]string{}

func (a AptiloKeyInteger1) String() string {
	if str, ok := AptiloKeyInteger1_Strings[a]; ok {
		return str
	}
	return "AptiloKeyInteger1(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloKeyInteger1_Add(p *radius.Packet, value AptiloKeyInteger1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 251, a)
}

func AptiloKeyInteger1_Get(p *radius.Packet) (value AptiloKeyInteger1) {
	value, _ = AptiloKeyInteger1_Lookup(p)
	return
}

func AptiloKeyInteger1_Gets(p *radius.Packet) (values []AptiloKeyInteger1, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 251) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloKeyInteger1(i))
	}
	return
}

func AptiloKeyInteger1_Lookup(p *radius.Packet) (value AptiloKeyInteger1, err error) {
	a, ok := _Aptilo_LookupVendor(p, 251)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloKeyInteger1(i)
	return
}

func AptiloKeyInteger1_Set(p *radius.Packet, value AptiloKeyInteger1) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 251, a)
}

func AptiloKeyInteger1_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 251)
}

type AptiloKeyInteger2 uint32

var AptiloKeyInteger2_Strings = map[AptiloKeyInteger2]string{}

func (a AptiloKeyInteger2) String() string {
	if str, ok := AptiloKeyInteger2_Strings[a]; ok {
		return str
	}
	return "AptiloKeyInteger2(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloKeyInteger2_Add(p *radius.Packet, value AptiloKeyInteger2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 252, a)
}

func AptiloKeyInteger2_Get(p *radius.Packet) (value AptiloKeyInteger2) {
	value, _ = AptiloKeyInteger2_Lookup(p)
	return
}

func AptiloKeyInteger2_Gets(p *radius.Packet) (values []AptiloKeyInteger2, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 252) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloKeyInteger2(i))
	}
	return
}

func AptiloKeyInteger2_Lookup(p *radius.Packet) (value AptiloKeyInteger2, err error) {
	a, ok := _Aptilo_LookupVendor(p, 252)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloKeyInteger2(i)
	return
}

func AptiloKeyInteger2_Set(p *radius.Packet, value AptiloKeyInteger2) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 252, a)
}

func AptiloKeyInteger2_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 252)
}

type AptiloKeyInteger3 uint32

var AptiloKeyInteger3_Strings = map[AptiloKeyInteger3]string{}

func (a AptiloKeyInteger3) String() string {
	if str, ok := AptiloKeyInteger3_Strings[a]; ok {
		return str
	}
	return "AptiloKeyInteger3(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloKeyInteger3_Add(p *radius.Packet, value AptiloKeyInteger3) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 253, a)
}

func AptiloKeyInteger3_Get(p *radius.Packet) (value AptiloKeyInteger3) {
	value, _ = AptiloKeyInteger3_Lookup(p)
	return
}

func AptiloKeyInteger3_Gets(p *radius.Packet) (values []AptiloKeyInteger3, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 253) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloKeyInteger3(i))
	}
	return
}

func AptiloKeyInteger3_Lookup(p *radius.Packet) (value AptiloKeyInteger3, err error) {
	a, ok := _Aptilo_LookupVendor(p, 253)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloKeyInteger3(i)
	return
}

func AptiloKeyInteger3_Set(p *radius.Packet, value AptiloKeyInteger3) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 253, a)
}

func AptiloKeyInteger3_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 253)
}

type AptiloKeyInteger4 uint32

var AptiloKeyInteger4_Strings = map[AptiloKeyInteger4]string{}

func (a AptiloKeyInteger4) String() string {
	if str, ok := AptiloKeyInteger4_Strings[a]; ok {
		return str
	}
	return "AptiloKeyInteger4(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloKeyInteger4_Add(p *radius.Packet, value AptiloKeyInteger4) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 254, a)
}

func AptiloKeyInteger4_Get(p *radius.Packet) (value AptiloKeyInteger4) {
	value, _ = AptiloKeyInteger4_Lookup(p)
	return
}

func AptiloKeyInteger4_Gets(p *radius.Packet) (values []AptiloKeyInteger4, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 254) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloKeyInteger4(i))
	}
	return
}

func AptiloKeyInteger4_Lookup(p *radius.Packet) (value AptiloKeyInteger4, err error) {
	a, ok := _Aptilo_LookupVendor(p, 254)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloKeyInteger4(i)
	return
}

func AptiloKeyInteger4_Set(p *radius.Packet, value AptiloKeyInteger4) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 254, a)
}

func AptiloKeyInteger4_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 254)
}

type AptiloKeyInteger5 uint32

var AptiloKeyInteger5_Strings = map[AptiloKeyInteger5]string{}

func (a AptiloKeyInteger5) String() string {
	if str, ok := AptiloKeyInteger5_Strings[a]; ok {
		return str
	}
	return "AptiloKeyInteger5(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func AptiloKeyInteger5_Add(p *radius.Packet, value AptiloKeyInteger5) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_AddVendor(p, 255, a)
}

func AptiloKeyInteger5_Get(p *radius.Packet) (value AptiloKeyInteger5) {
	value, _ = AptiloKeyInteger5_Lookup(p)
	return
}

func AptiloKeyInteger5_Gets(p *radius.Packet) (values []AptiloKeyInteger5, err error) {
	var i uint32
	for _, attr := range _Aptilo_GetsVendor(p, 255) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, AptiloKeyInteger5(i))
	}
	return
}

func AptiloKeyInteger5_Lookup(p *radius.Packet) (value AptiloKeyInteger5, err error) {
	a, ok := _Aptilo_LookupVendor(p, 255)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = AptiloKeyInteger5(i)
	return
}

func AptiloKeyInteger5_Set(p *radius.Packet, value AptiloKeyInteger5) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Aptilo_SetVendor(p, 255, a)
}

func AptiloKeyInteger5_Del(p *radius.Packet) {
	_Aptilo_DelVendor(p, 255)
}
