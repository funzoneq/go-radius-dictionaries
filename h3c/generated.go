// Code generated by radius-dict-gen. DO NOT EDIT.

package h3c

import (
	"net"
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_H3C_VendorID = 25506
)

func _H3C_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_H3C_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _H3C_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _H3C_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _H3C_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _H3C_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _H3C_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _H3C_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _H3C_AddVendor(p, typ, attr)
}

func _H3C_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _H3C_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

type H3CInputPeakRate uint32

var H3CInputPeakRate_Strings = map[H3CInputPeakRate]string{}

func (a H3CInputPeakRate) String() string {
	if str, ok := H3CInputPeakRate_Strings[a]; ok {
		return str
	}
	return "H3CInputPeakRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func H3CInputPeakRate_Add(p *radius.Packet, value H3CInputPeakRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_AddVendor(p, 1, a)
}

func H3CInputPeakRate_Get(p *radius.Packet) (value H3CInputPeakRate) {
	value, _ = H3CInputPeakRate_Lookup(p)
	return
}

func H3CInputPeakRate_Gets(p *radius.Packet) (values []H3CInputPeakRate, err error) {
	var i uint32
	for _, attr := range _H3C_GetsVendor(p, 1) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, H3CInputPeakRate(i))
	}
	return
}

func H3CInputPeakRate_Lookup(p *radius.Packet) (value H3CInputPeakRate, err error) {
	a, ok := _H3C_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = H3CInputPeakRate(i)
	return
}

func H3CInputPeakRate_Set(p *radius.Packet, value H3CInputPeakRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_SetVendor(p, 1, a)
}

func H3CInputPeakRate_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 1)
}

type H3CInputAverageRate uint32

var H3CInputAverageRate_Strings = map[H3CInputAverageRate]string{}

func (a H3CInputAverageRate) String() string {
	if str, ok := H3CInputAverageRate_Strings[a]; ok {
		return str
	}
	return "H3CInputAverageRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func H3CInputAverageRate_Add(p *radius.Packet, value H3CInputAverageRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_AddVendor(p, 2, a)
}

func H3CInputAverageRate_Get(p *radius.Packet) (value H3CInputAverageRate) {
	value, _ = H3CInputAverageRate_Lookup(p)
	return
}

func H3CInputAverageRate_Gets(p *radius.Packet) (values []H3CInputAverageRate, err error) {
	var i uint32
	for _, attr := range _H3C_GetsVendor(p, 2) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, H3CInputAverageRate(i))
	}
	return
}

func H3CInputAverageRate_Lookup(p *radius.Packet) (value H3CInputAverageRate, err error) {
	a, ok := _H3C_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = H3CInputAverageRate(i)
	return
}

func H3CInputAverageRate_Set(p *radius.Packet, value H3CInputAverageRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_SetVendor(p, 2, a)
}

func H3CInputAverageRate_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 2)
}

type H3CInputBasicRate uint32

var H3CInputBasicRate_Strings = map[H3CInputBasicRate]string{}

func (a H3CInputBasicRate) String() string {
	if str, ok := H3CInputBasicRate_Strings[a]; ok {
		return str
	}
	return "H3CInputBasicRate(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func H3CInputBasicRate_Add(p *radius.Packet, value H3CInputBasicRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_AddVendor(p, 3, a)
}

func H3CInputBasicRate_Get(p *radius.Packet) (value H3CInputBasicRate) {
	value, _ = H3CInputBasicRate_Lookup(p)
	return
}

func H3CInputBasicRate_Gets(p *radius.Packet) (values []H3CInputBasicRate, err error) {
	var i uint32
	for _, attr := range _H3C_GetsVendor(p, 3) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, H3CInputBasicRate(i))
	}
	return
}

func H3CInputBasicRate_Lookup(p *radius.Packet) (value H3CInputBasicRate, err error) {
	a, ok := _H3C_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = H3CInputBasicRate(i)
	return
}

func H3CInputBasicRate_Set(p *radius.Packet, value H3CInputBasicRate) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_SetVendor(p, 3, a)
}

func H3CInputBasicRate_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 3)
}

type H3CRemanentVolume uint32

var H3CRemanentVolume_Strings = map[H3CRemanentVolume]string{}

func (a H3CRemanentVolume) String() string {
	if str, ok := H3CRemanentVolume_Strings[a]; ok {
		return str
	}
	return "H3CRemanentVolume(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func H3CRemanentVolume_Add(p *radius.Packet, value H3CRemanentVolume) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_AddVendor(p, 15, a)
}

func H3CRemanentVolume_Get(p *radius.Packet) (value H3CRemanentVolume) {
	value, _ = H3CRemanentVolume_Lookup(p)
	return
}

func H3CRemanentVolume_Gets(p *radius.Packet) (values []H3CRemanentVolume, err error) {
	var i uint32
	for _, attr := range _H3C_GetsVendor(p, 15) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, H3CRemanentVolume(i))
	}
	return
}

func H3CRemanentVolume_Lookup(p *radius.Packet) (value H3CRemanentVolume, err error) {
	a, ok := _H3C_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = H3CRemanentVolume(i)
	return
}

func H3CRemanentVolume_Set(p *radius.Packet, value H3CRemanentVolume) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_SetVendor(p, 15, a)
}

func H3CRemanentVolume_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 15)
}

type H3CCommand uint32

const (
	H3CCommand_Value_TriggerRequest   H3CCommand = 1
	H3CCommand_Value_TerminateRequest H3CCommand = 2
	H3CCommand_Value_SetPolicy        H3CCommand = 3
	H3CCommand_Value_Result           H3CCommand = 4
	H3CCommand_Value_PortalClear      H3CCommand = 5
)

var H3CCommand_Strings = map[H3CCommand]string{
	H3CCommand_Value_TriggerRequest:   "Trigger-Request",
	H3CCommand_Value_TerminateRequest: "Terminate-Request",
	H3CCommand_Value_SetPolicy:        "SetPolicy",
	H3CCommand_Value_Result:           "Result",
	H3CCommand_Value_PortalClear:      "PortalClear",
}

func (a H3CCommand) String() string {
	if str, ok := H3CCommand_Strings[a]; ok {
		return str
	}
	return "H3CCommand(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func H3CCommand_Add(p *radius.Packet, value H3CCommand) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_AddVendor(p, 20, a)
}

func H3CCommand_Get(p *radius.Packet) (value H3CCommand) {
	value, _ = H3CCommand_Lookup(p)
	return
}

func H3CCommand_Gets(p *radius.Packet) (values []H3CCommand, err error) {
	var i uint32
	for _, attr := range _H3C_GetsVendor(p, 20) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, H3CCommand(i))
	}
	return
}

func H3CCommand_Lookup(p *radius.Packet) (value H3CCommand, err error) {
	a, ok := _H3C_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = H3CCommand(i)
	return
}

func H3CCommand_Set(p *radius.Packet, value H3CCommand) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_SetVendor(p, 20, a)
}

func H3CCommand_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 20)
}

type H3CControlIdentifier uint32

var H3CControlIdentifier_Strings = map[H3CControlIdentifier]string{}

func (a H3CControlIdentifier) String() string {
	if str, ok := H3CControlIdentifier_Strings[a]; ok {
		return str
	}
	return "H3CControlIdentifier(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func H3CControlIdentifier_Add(p *radius.Packet, value H3CControlIdentifier) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_AddVendor(p, 24, a)
}

func H3CControlIdentifier_Get(p *radius.Packet) (value H3CControlIdentifier) {
	value, _ = H3CControlIdentifier_Lookup(p)
	return
}

func H3CControlIdentifier_Gets(p *radius.Packet) (values []H3CControlIdentifier, err error) {
	var i uint32
	for _, attr := range _H3C_GetsVendor(p, 24) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, H3CControlIdentifier(i))
	}
	return
}

func H3CControlIdentifier_Lookup(p *radius.Packet) (value H3CControlIdentifier, err error) {
	a, ok := _H3C_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = H3CControlIdentifier(i)
	return
}

func H3CControlIdentifier_Set(p *radius.Packet, value H3CControlIdentifier) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_SetVendor(p, 24, a)
}

func H3CControlIdentifier_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 24)
}

type H3CResultCode uint32

var H3CResultCode_Strings = map[H3CResultCode]string{}

func (a H3CResultCode) String() string {
	if str, ok := H3CResultCode_Strings[a]; ok {
		return str
	}
	return "H3CResultCode(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func H3CResultCode_Add(p *radius.Packet, value H3CResultCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_AddVendor(p, 25, a)
}

func H3CResultCode_Get(p *radius.Packet) (value H3CResultCode) {
	value, _ = H3CResultCode_Lookup(p)
	return
}

func H3CResultCode_Gets(p *radius.Packet) (values []H3CResultCode, err error) {
	var i uint32
	for _, attr := range _H3C_GetsVendor(p, 25) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, H3CResultCode(i))
	}
	return
}

func H3CResultCode_Lookup(p *radius.Packet) (value H3CResultCode, err error) {
	a, ok := _H3C_LookupVendor(p, 25)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = H3CResultCode(i)
	return
}

func H3CResultCode_Set(p *radius.Packet, value H3CResultCode) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_SetVendor(p, 25, a)
}

func H3CResultCode_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 25)
}

type H3CConnectID uint32

var H3CConnectID_Strings = map[H3CConnectID]string{}

func (a H3CConnectID) String() string {
	if str, ok := H3CConnectID_Strings[a]; ok {
		return str
	}
	return "H3CConnectID(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func H3CConnectID_Add(p *radius.Packet, value H3CConnectID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_AddVendor(p, 26, a)
}

func H3CConnectID_Get(p *radius.Packet) (value H3CConnectID) {
	value, _ = H3CConnectID_Lookup(p)
	return
}

func H3CConnectID_Gets(p *radius.Packet) (values []H3CConnectID, err error) {
	var i uint32
	for _, attr := range _H3C_GetsVendor(p, 26) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, H3CConnectID(i))
	}
	return
}

func H3CConnectID_Lookup(p *radius.Packet) (value H3CConnectID, err error) {
	a, ok := _H3C_LookupVendor(p, 26)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = H3CConnectID(i)
	return
}

func H3CConnectID_Set(p *radius.Packet, value H3CConnectID) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_SetVendor(p, 26, a)
}

func H3CConnectID_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 26)
}

func H3CFtpDirectory_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _H3C_AddVendor(p, 28, a)
}

func H3CFtpDirectory_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _H3C_AddVendor(p, 28, a)
}

func H3CFtpDirectory_Get(p *radius.Packet) (value []byte) {
	value, _ = H3CFtpDirectory_Lookup(p)
	return
}

func H3CFtpDirectory_GetString(p *radius.Packet) (value string) {
	value, _ = H3CFtpDirectory_LookupString(p)
	return
}

func H3CFtpDirectory_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _H3C_GetsVendor(p, 28) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H3CFtpDirectory_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _H3C_GetsVendor(p, 28) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H3CFtpDirectory_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _H3C_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H3CFtpDirectory_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _H3C_LookupVendor(p, 28)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H3CFtpDirectory_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _H3C_SetVendor(p, 28, a)
}

func H3CFtpDirectory_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _H3C_SetVendor(p, 28, a)
}

func H3CFtpDirectory_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 28)
}

type H3CExecPrivilege uint32

const (
	H3CExecPrivilege_Value_Visit   H3CExecPrivilege = 0
	H3CExecPrivilege_Value_Monitor H3CExecPrivilege = 1
	H3CExecPrivilege_Value_System  H3CExecPrivilege = 2
	H3CExecPrivilege_Value_Manage  H3CExecPrivilege = 33
)

var H3CExecPrivilege_Strings = map[H3CExecPrivilege]string{
	H3CExecPrivilege_Value_Visit:   "Visit",
	H3CExecPrivilege_Value_Monitor: "Monitor",
	H3CExecPrivilege_Value_System:  "System",
	H3CExecPrivilege_Value_Manage:  "Manage",
}

func (a H3CExecPrivilege) String() string {
	if str, ok := H3CExecPrivilege_Strings[a]; ok {
		return str
	}
	return "H3CExecPrivilege(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func H3CExecPrivilege_Add(p *radius.Packet, value H3CExecPrivilege) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_AddVendor(p, 29, a)
}

func H3CExecPrivilege_Get(p *radius.Packet) (value H3CExecPrivilege) {
	value, _ = H3CExecPrivilege_Lookup(p)
	return
}

func H3CExecPrivilege_Gets(p *radius.Packet) (values []H3CExecPrivilege, err error) {
	var i uint32
	for _, attr := range _H3C_GetsVendor(p, 29) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, H3CExecPrivilege(i))
	}
	return
}

func H3CExecPrivilege_Lookup(p *radius.Packet) (value H3CExecPrivilege, err error) {
	a, ok := _H3C_LookupVendor(p, 29)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = H3CExecPrivilege(i)
	return
}

func H3CExecPrivilege_Set(p *radius.Packet, value H3CExecPrivilege) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_SetVendor(p, 29, a)
}

func H3CExecPrivilege_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 29)
}

type H3CNASStartupTimestamp uint32

var H3CNASStartupTimestamp_Strings = map[H3CNASStartupTimestamp]string{}

func (a H3CNASStartupTimestamp) String() string {
	if str, ok := H3CNASStartupTimestamp_Strings[a]; ok {
		return str
	}
	return "H3CNASStartupTimestamp(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func H3CNASStartupTimestamp_Add(p *radius.Packet, value H3CNASStartupTimestamp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_AddVendor(p, 59, a)
}

func H3CNASStartupTimestamp_Get(p *radius.Packet) (value H3CNASStartupTimestamp) {
	value, _ = H3CNASStartupTimestamp_Lookup(p)
	return
}

func H3CNASStartupTimestamp_Gets(p *radius.Packet) (values []H3CNASStartupTimestamp, err error) {
	var i uint32
	for _, attr := range _H3C_GetsVendor(p, 59) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, H3CNASStartupTimestamp(i))
	}
	return
}

func H3CNASStartupTimestamp_Lookup(p *radius.Packet) (value H3CNASStartupTimestamp, err error) {
	a, ok := _H3C_LookupVendor(p, 59)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = H3CNASStartupTimestamp(i)
	return
}

func H3CNASStartupTimestamp_Set(p *radius.Packet, value H3CNASStartupTimestamp) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_SetVendor(p, 59, a)
}

func H3CNASStartupTimestamp_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 59)
}

func H3CIPHostAddr_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _H3C_AddVendor(p, 60, a)
}

func H3CIPHostAddr_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _H3C_AddVendor(p, 60, a)
}

func H3CIPHostAddr_Get(p *radius.Packet) (value []byte) {
	value, _ = H3CIPHostAddr_Lookup(p)
	return
}

func H3CIPHostAddr_GetString(p *radius.Packet) (value string) {
	value, _ = H3CIPHostAddr_LookupString(p)
	return
}

func H3CIPHostAddr_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _H3C_GetsVendor(p, 60) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H3CIPHostAddr_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _H3C_GetsVendor(p, 60) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H3CIPHostAddr_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _H3C_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H3CIPHostAddr_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _H3C_LookupVendor(p, 60)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H3CIPHostAddr_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _H3C_SetVendor(p, 60, a)
}

func H3CIPHostAddr_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _H3C_SetVendor(p, 60, a)
}

func H3CIPHostAddr_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 60)
}

func H3CUserNotify_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _H3C_AddVendor(p, 61, a)
}

func H3CUserNotify_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _H3C_AddVendor(p, 61, a)
}

func H3CUserNotify_Get(p *radius.Packet) (value []byte) {
	value, _ = H3CUserNotify_Lookup(p)
	return
}

func H3CUserNotify_GetString(p *radius.Packet) (value string) {
	value, _ = H3CUserNotify_LookupString(p)
	return
}

func H3CUserNotify_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _H3C_GetsVendor(p, 61) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H3CUserNotify_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _H3C_GetsVendor(p, 61) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H3CUserNotify_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _H3C_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H3CUserNotify_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _H3C_LookupVendor(p, 61)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H3CUserNotify_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _H3C_SetVendor(p, 61, a)
}

func H3CUserNotify_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _H3C_SetVendor(p, 61, a)
}

func H3CUserNotify_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 61)
}

func H3CUserHeartBeat_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _H3C_AddVendor(p, 62, a)
}

func H3CUserHeartBeat_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _H3C_AddVendor(p, 62, a)
}

func H3CUserHeartBeat_Get(p *radius.Packet) (value []byte) {
	value, _ = H3CUserHeartBeat_Lookup(p)
	return
}

func H3CUserHeartBeat_GetString(p *radius.Packet) (value string) {
	value, _ = H3CUserHeartBeat_LookupString(p)
	return
}

func H3CUserHeartBeat_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _H3C_GetsVendor(p, 62) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H3CUserHeartBeat_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _H3C_GetsVendor(p, 62) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H3CUserHeartBeat_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _H3C_LookupVendor(p, 62)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H3CUserHeartBeat_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _H3C_LookupVendor(p, 62)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H3CUserHeartBeat_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _H3C_SetVendor(p, 62, a)
}

func H3CUserHeartBeat_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _H3C_SetVendor(p, 62, a)
}

func H3CUserHeartBeat_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 62)
}

func H3CUserGroup_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _H3C_AddVendor(p, 140, a)
}

func H3CUserGroup_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _H3C_AddVendor(p, 140, a)
}

func H3CUserGroup_Get(p *radius.Packet) (value []byte) {
	value, _ = H3CUserGroup_Lookup(p)
	return
}

func H3CUserGroup_GetString(p *radius.Packet) (value string) {
	value, _ = H3CUserGroup_LookupString(p)
	return
}

func H3CUserGroup_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _H3C_GetsVendor(p, 140) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H3CUserGroup_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _H3C_GetsVendor(p, 140) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H3CUserGroup_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _H3C_LookupVendor(p, 140)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H3CUserGroup_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _H3C_LookupVendor(p, 140)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H3CUserGroup_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _H3C_SetVendor(p, 140, a)
}

func H3CUserGroup_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _H3C_SetVendor(p, 140, a)
}

func H3CUserGroup_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 140)
}

type H3CSecurityLevel uint32

var H3CSecurityLevel_Strings = map[H3CSecurityLevel]string{}

func (a H3CSecurityLevel) String() string {
	if str, ok := H3CSecurityLevel_Strings[a]; ok {
		return str
	}
	return "H3CSecurityLevel(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func H3CSecurityLevel_Add(p *radius.Packet, value H3CSecurityLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_AddVendor(p, 141, a)
}

func H3CSecurityLevel_Get(p *radius.Packet) (value H3CSecurityLevel) {
	value, _ = H3CSecurityLevel_Lookup(p)
	return
}

func H3CSecurityLevel_Gets(p *radius.Packet) (values []H3CSecurityLevel, err error) {
	var i uint32
	for _, attr := range _H3C_GetsVendor(p, 141) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, H3CSecurityLevel(i))
	}
	return
}

func H3CSecurityLevel_Lookup(p *radius.Packet) (value H3CSecurityLevel, err error) {
	a, ok := _H3C_LookupVendor(p, 141)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = H3CSecurityLevel(i)
	return
}

func H3CSecurityLevel_Set(p *radius.Packet, value H3CSecurityLevel) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_SetVendor(p, 141, a)
}

func H3CSecurityLevel_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 141)
}

type H3CInputIntervalOctets uint32

var H3CInputIntervalOctets_Strings = map[H3CInputIntervalOctets]string{}

func (a H3CInputIntervalOctets) String() string {
	if str, ok := H3CInputIntervalOctets_Strings[a]; ok {
		return str
	}
	return "H3CInputIntervalOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func H3CInputIntervalOctets_Add(p *radius.Packet, value H3CInputIntervalOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_AddVendor(p, 201, a)
}

func H3CInputIntervalOctets_Get(p *radius.Packet) (value H3CInputIntervalOctets) {
	value, _ = H3CInputIntervalOctets_Lookup(p)
	return
}

func H3CInputIntervalOctets_Gets(p *radius.Packet) (values []H3CInputIntervalOctets, err error) {
	var i uint32
	for _, attr := range _H3C_GetsVendor(p, 201) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, H3CInputIntervalOctets(i))
	}
	return
}

func H3CInputIntervalOctets_Lookup(p *radius.Packet) (value H3CInputIntervalOctets, err error) {
	a, ok := _H3C_LookupVendor(p, 201)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = H3CInputIntervalOctets(i)
	return
}

func H3CInputIntervalOctets_Set(p *radius.Packet, value H3CInputIntervalOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_SetVendor(p, 201, a)
}

func H3CInputIntervalOctets_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 201)
}

type H3COutputIntervalOctets uint32

var H3COutputIntervalOctets_Strings = map[H3COutputIntervalOctets]string{}

func (a H3COutputIntervalOctets) String() string {
	if str, ok := H3COutputIntervalOctets_Strings[a]; ok {
		return str
	}
	return "H3COutputIntervalOctets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func H3COutputIntervalOctets_Add(p *radius.Packet, value H3COutputIntervalOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_AddVendor(p, 202, a)
}

func H3COutputIntervalOctets_Get(p *radius.Packet) (value H3COutputIntervalOctets) {
	value, _ = H3COutputIntervalOctets_Lookup(p)
	return
}

func H3COutputIntervalOctets_Gets(p *radius.Packet) (values []H3COutputIntervalOctets, err error) {
	var i uint32
	for _, attr := range _H3C_GetsVendor(p, 202) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, H3COutputIntervalOctets(i))
	}
	return
}

func H3COutputIntervalOctets_Lookup(p *radius.Packet) (value H3COutputIntervalOctets, err error) {
	a, ok := _H3C_LookupVendor(p, 202)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = H3COutputIntervalOctets(i)
	return
}

func H3COutputIntervalOctets_Set(p *radius.Packet, value H3COutputIntervalOctets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_SetVendor(p, 202, a)
}

func H3COutputIntervalOctets_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 202)
}

type H3CInputIntervalPackets uint32

var H3CInputIntervalPackets_Strings = map[H3CInputIntervalPackets]string{}

func (a H3CInputIntervalPackets) String() string {
	if str, ok := H3CInputIntervalPackets_Strings[a]; ok {
		return str
	}
	return "H3CInputIntervalPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func H3CInputIntervalPackets_Add(p *radius.Packet, value H3CInputIntervalPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_AddVendor(p, 203, a)
}

func H3CInputIntervalPackets_Get(p *radius.Packet) (value H3CInputIntervalPackets) {
	value, _ = H3CInputIntervalPackets_Lookup(p)
	return
}

func H3CInputIntervalPackets_Gets(p *radius.Packet) (values []H3CInputIntervalPackets, err error) {
	var i uint32
	for _, attr := range _H3C_GetsVendor(p, 203) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, H3CInputIntervalPackets(i))
	}
	return
}

func H3CInputIntervalPackets_Lookup(p *radius.Packet) (value H3CInputIntervalPackets, err error) {
	a, ok := _H3C_LookupVendor(p, 203)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = H3CInputIntervalPackets(i)
	return
}

func H3CInputIntervalPackets_Set(p *radius.Packet, value H3CInputIntervalPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_SetVendor(p, 203, a)
}

func H3CInputIntervalPackets_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 203)
}

type H3COutputIntervalPackets uint32

var H3COutputIntervalPackets_Strings = map[H3COutputIntervalPackets]string{}

func (a H3COutputIntervalPackets) String() string {
	if str, ok := H3COutputIntervalPackets_Strings[a]; ok {
		return str
	}
	return "H3COutputIntervalPackets(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func H3COutputIntervalPackets_Add(p *radius.Packet, value H3COutputIntervalPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_AddVendor(p, 204, a)
}

func H3COutputIntervalPackets_Get(p *radius.Packet) (value H3COutputIntervalPackets) {
	value, _ = H3COutputIntervalPackets_Lookup(p)
	return
}

func H3COutputIntervalPackets_Gets(p *radius.Packet) (values []H3COutputIntervalPackets, err error) {
	var i uint32
	for _, attr := range _H3C_GetsVendor(p, 204) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, H3COutputIntervalPackets(i))
	}
	return
}

func H3COutputIntervalPackets_Lookup(p *radius.Packet) (value H3COutputIntervalPackets, err error) {
	a, ok := _H3C_LookupVendor(p, 204)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = H3COutputIntervalPackets(i)
	return
}

func H3COutputIntervalPackets_Set(p *radius.Packet, value H3COutputIntervalPackets) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_SetVendor(p, 204, a)
}

func H3COutputIntervalPackets_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 204)
}

type H3CInputIntervalGigawords uint32

var H3CInputIntervalGigawords_Strings = map[H3CInputIntervalGigawords]string{}

func (a H3CInputIntervalGigawords) String() string {
	if str, ok := H3CInputIntervalGigawords_Strings[a]; ok {
		return str
	}
	return "H3CInputIntervalGigawords(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func H3CInputIntervalGigawords_Add(p *radius.Packet, value H3CInputIntervalGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_AddVendor(p, 205, a)
}

func H3CInputIntervalGigawords_Get(p *radius.Packet) (value H3CInputIntervalGigawords) {
	value, _ = H3CInputIntervalGigawords_Lookup(p)
	return
}

func H3CInputIntervalGigawords_Gets(p *radius.Packet) (values []H3CInputIntervalGigawords, err error) {
	var i uint32
	for _, attr := range _H3C_GetsVendor(p, 205) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, H3CInputIntervalGigawords(i))
	}
	return
}

func H3CInputIntervalGigawords_Lookup(p *radius.Packet) (value H3CInputIntervalGigawords, err error) {
	a, ok := _H3C_LookupVendor(p, 205)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = H3CInputIntervalGigawords(i)
	return
}

func H3CInputIntervalGigawords_Set(p *radius.Packet, value H3CInputIntervalGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_SetVendor(p, 205, a)
}

func H3CInputIntervalGigawords_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 205)
}

type H3COutputIntervalGigawords uint32

var H3COutputIntervalGigawords_Strings = map[H3COutputIntervalGigawords]string{}

func (a H3COutputIntervalGigawords) String() string {
	if str, ok := H3COutputIntervalGigawords_Strings[a]; ok {
		return str
	}
	return "H3COutputIntervalGigawords(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func H3COutputIntervalGigawords_Add(p *radius.Packet, value H3COutputIntervalGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_AddVendor(p, 206, a)
}

func H3COutputIntervalGigawords_Get(p *radius.Packet) (value H3COutputIntervalGigawords) {
	value, _ = H3COutputIntervalGigawords_Lookup(p)
	return
}

func H3COutputIntervalGigawords_Gets(p *radius.Packet) (values []H3COutputIntervalGigawords, err error) {
	var i uint32
	for _, attr := range _H3C_GetsVendor(p, 206) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, H3COutputIntervalGigawords(i))
	}
	return
}

func H3COutputIntervalGigawords_Lookup(p *radius.Packet) (value H3COutputIntervalGigawords, err error) {
	a, ok := _H3C_LookupVendor(p, 206)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = H3COutputIntervalGigawords(i)
	return
}

func H3COutputIntervalGigawords_Set(p *radius.Packet, value H3COutputIntervalGigawords) (err error) {
	a := radius.NewInteger(uint32(value))
	return _H3C_SetVendor(p, 206, a)
}

func H3COutputIntervalGigawords_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 206)
}

func H3CBackupNASIP_Add(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _H3C_AddVendor(p, 207, a)
}

func H3CBackupNASIP_Get(p *radius.Packet) (value net.IP) {
	value, _ = H3CBackupNASIP_Lookup(p)
	return
}

func H3CBackupNASIP_Gets(p *radius.Packet) (values []net.IP, err error) {
	var i net.IP
	for _, attr := range _H3C_GetsVendor(p, 207) {
		i, err = radius.IPAddr(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H3CBackupNASIP_Lookup(p *radius.Packet) (value net.IP, err error) {
	a, ok := _H3C_LookupVendor(p, 207)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value, err = radius.IPAddr(a)
	return
}

func H3CBackupNASIP_Set(p *radius.Packet, value net.IP) (err error) {
	var a radius.Attribute
	a, err = radius.NewIPAddr(value)
	if err != nil {
		return
	}
	return _H3C_SetVendor(p, 207, a)
}

func H3CBackupNASIP_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 207)
}

func H3CProductID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _H3C_AddVendor(p, 255, a)
}

func H3CProductID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _H3C_AddVendor(p, 255, a)
}

func H3CProductID_Get(p *radius.Packet) (value []byte) {
	value, _ = H3CProductID_Lookup(p)
	return
}

func H3CProductID_GetString(p *radius.Packet) (value string) {
	value, _ = H3CProductID_LookupString(p)
	return
}

func H3CProductID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _H3C_GetsVendor(p, 255) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H3CProductID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _H3C_GetsVendor(p, 255) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func H3CProductID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _H3C_LookupVendor(p, 255)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func H3CProductID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _H3C_LookupVendor(p, 255)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func H3CProductID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _H3C_SetVendor(p, 255, a)
}

func H3CProductID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _H3C_SetVendor(p, 255, a)
}

func H3CProductID_Del(p *radius.Packet) {
	_H3C_DelVendor(p, 255)
}
