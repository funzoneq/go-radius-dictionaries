// Code generated by radius-dict-gen. DO NOT EDIT.

package sangoma

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_NetBorder_VendorID = 35987
)

func _NetBorder_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_NetBorder_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _NetBorder_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _NetBorder_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _NetBorder_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, avp := range p.Attributes {
		if avp.Type != rfc2865.VendorSpecific_Type {
			continue
		}
		attr := avp.Attribute
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _NetBorder_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _NetBorder_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _NetBorder_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(avp.Attribute[4:], vsa)
			i++
		} else {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+i:]...)
		}
	}
	return _NetBorder_AddVendor(p, typ, attr)
}

func _NetBorder_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes); {
		avp := p.Attributes[i]
		if avp.Type != rfc2865.VendorSpecific_Type {
			i++
			continue
		}
		vendorID, vsa, err := radius.VendorSpecific(avp.Attribute)
		if err != nil || vendorID != _NetBorder_VendorID {
			i++
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes = append(p.Attributes[:i], p.Attributes[i+1:]...)
		} else {
			i++
		}
	}
	return
}

func NetBorderAVPair_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 1, a)
}

func NetBorderAVPair_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 1, a)
}

func NetBorderAVPair_Get(p *radius.Packet) (value []byte) {
	value, _ = NetBorderAVPair_Lookup(p)
	return
}

func NetBorderAVPair_GetString(p *radius.Packet) (value string) {
	value, _ = NetBorderAVPair_LookupString(p)
	return
}

func NetBorderAVPair_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NetBorder_GetsVendor(p, 1) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderAVPair_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NetBorder_GetsVendor(p, 1) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderAVPair_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NetBorder_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NetBorderAVPair_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NetBorder_LookupVendor(p, 1)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NetBorderAVPair_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 1, a)
}

func NetBorderAVPair_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 1, a)
}

func NetBorderAVPair_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 1)
}

func NetBorderCLID_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 2, a)
}

func NetBorderCLID_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 2, a)
}

func NetBorderCLID_Get(p *radius.Packet) (value []byte) {
	value, _ = NetBorderCLID_Lookup(p)
	return
}

func NetBorderCLID_GetString(p *radius.Packet) (value string) {
	value, _ = NetBorderCLID_LookupString(p)
	return
}

func NetBorderCLID_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NetBorder_GetsVendor(p, 2) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderCLID_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NetBorder_GetsVendor(p, 2) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderCLID_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NetBorder_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NetBorderCLID_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NetBorder_LookupVendor(p, 2)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NetBorderCLID_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 2, a)
}

func NetBorderCLID_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 2, a)
}

func NetBorderCLID_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 2)
}

func NetBorderDialplan_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 3, a)
}

func NetBorderDialplan_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 3, a)
}

func NetBorderDialplan_Get(p *radius.Packet) (value []byte) {
	value, _ = NetBorderDialplan_Lookup(p)
	return
}

func NetBorderDialplan_GetString(p *radius.Packet) (value string) {
	value, _ = NetBorderDialplan_LookupString(p)
	return
}

func NetBorderDialplan_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NetBorder_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderDialplan_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NetBorder_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderDialplan_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NetBorder_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NetBorderDialplan_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NetBorder_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NetBorderDialplan_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 3, a)
}

func NetBorderDialplan_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 3, a)
}

func NetBorderDialplan_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 3)
}

func NetBorderSrc_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 4, a)
}

func NetBorderSrc_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 4, a)
}

func NetBorderSrc_Get(p *radius.Packet) (value []byte) {
	value, _ = NetBorderSrc_Lookup(p)
	return
}

func NetBorderSrc_GetString(p *radius.Packet) (value string) {
	value, _ = NetBorderSrc_LookupString(p)
	return
}

func NetBorderSrc_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NetBorder_GetsVendor(p, 4) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderSrc_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NetBorder_GetsVendor(p, 4) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderSrc_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NetBorder_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NetBorderSrc_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NetBorder_LookupVendor(p, 4)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NetBorderSrc_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 4, a)
}

func NetBorderSrc_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 4, a)
}

func NetBorderSrc_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 4)
}

func NetBorderDst_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 5, a)
}

func NetBorderDst_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 5, a)
}

func NetBorderDst_Get(p *radius.Packet) (value []byte) {
	value, _ = NetBorderDst_Lookup(p)
	return
}

func NetBorderDst_GetString(p *radius.Packet) (value string) {
	value, _ = NetBorderDst_LookupString(p)
	return
}

func NetBorderDst_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NetBorder_GetsVendor(p, 5) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderDst_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NetBorder_GetsVendor(p, 5) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderDst_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NetBorder_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NetBorderDst_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NetBorder_LookupVendor(p, 5)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NetBorderDst_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 5, a)
}

func NetBorderDst_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 5, a)
}

func NetBorderDst_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 5)
}

func NetBorderSrcChannel_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 6, a)
}

func NetBorderSrcChannel_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 6, a)
}

func NetBorderSrcChannel_Get(p *radius.Packet) (value []byte) {
	value, _ = NetBorderSrcChannel_Lookup(p)
	return
}

func NetBorderSrcChannel_GetString(p *radius.Packet) (value string) {
	value, _ = NetBorderSrcChannel_LookupString(p)
	return
}

func NetBorderSrcChannel_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NetBorder_GetsVendor(p, 6) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderSrcChannel_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NetBorder_GetsVendor(p, 6) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderSrcChannel_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NetBorder_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NetBorderSrcChannel_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NetBorder_LookupVendor(p, 6)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NetBorderSrcChannel_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 6, a)
}

func NetBorderSrcChannel_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 6, a)
}

func NetBorderSrcChannel_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 6)
}

func NetBorderDstChannel_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 7, a)
}

func NetBorderDstChannel_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 7, a)
}

func NetBorderDstChannel_Get(p *radius.Packet) (value []byte) {
	value, _ = NetBorderDstChannel_Lookup(p)
	return
}

func NetBorderDstChannel_GetString(p *radius.Packet) (value string) {
	value, _ = NetBorderDstChannel_LookupString(p)
	return
}

func NetBorderDstChannel_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NetBorder_GetsVendor(p, 7) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderDstChannel_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NetBorder_GetsVendor(p, 7) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderDstChannel_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NetBorder_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NetBorderDstChannel_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NetBorder_LookupVendor(p, 7)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NetBorderDstChannel_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 7, a)
}

func NetBorderDstChannel_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 7, a)
}

func NetBorderDstChannel_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 7)
}

func NetBorderAni_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 8, a)
}

func NetBorderAni_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 8, a)
}

func NetBorderAni_Get(p *radius.Packet) (value []byte) {
	value, _ = NetBorderAni_Lookup(p)
	return
}

func NetBorderAni_GetString(p *radius.Packet) (value string) {
	value, _ = NetBorderAni_LookupString(p)
	return
}

func NetBorderAni_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NetBorder_GetsVendor(p, 8) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderAni_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NetBorder_GetsVendor(p, 8) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderAni_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NetBorder_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NetBorderAni_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NetBorder_LookupVendor(p, 8)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NetBorderAni_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 8, a)
}

func NetBorderAni_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 8, a)
}

func NetBorderAni_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 8)
}

func NetBorderAniii_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 9, a)
}

func NetBorderAniii_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 9, a)
}

func NetBorderAniii_Get(p *radius.Packet) (value []byte) {
	value, _ = NetBorderAniii_Lookup(p)
	return
}

func NetBorderAniii_GetString(p *radius.Packet) (value string) {
	value, _ = NetBorderAniii_LookupString(p)
	return
}

func NetBorderAniii_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NetBorder_GetsVendor(p, 9) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderAniii_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NetBorder_GetsVendor(p, 9) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderAniii_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NetBorder_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NetBorderAniii_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NetBorder_LookupVendor(p, 9)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NetBorderAniii_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 9, a)
}

func NetBorderAniii_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 9, a)
}

func NetBorderAniii_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 9)
}

func NetBorderLastapp_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 10, a)
}

func NetBorderLastapp_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 10, a)
}

func NetBorderLastapp_Get(p *radius.Packet) (value []byte) {
	value, _ = NetBorderLastapp_Lookup(p)
	return
}

func NetBorderLastapp_GetString(p *radius.Packet) (value string) {
	value, _ = NetBorderLastapp_LookupString(p)
	return
}

func NetBorderLastapp_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NetBorder_GetsVendor(p, 10) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderLastapp_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NetBorder_GetsVendor(p, 10) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderLastapp_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NetBorder_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NetBorderLastapp_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NetBorder_LookupVendor(p, 10)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NetBorderLastapp_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 10, a)
}

func NetBorderLastapp_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 10, a)
}

func NetBorderLastapp_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 10)
}

func NetBorderLastdata_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 11, a)
}

func NetBorderLastdata_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 11, a)
}

func NetBorderLastdata_Get(p *radius.Packet) (value []byte) {
	value, _ = NetBorderLastdata_Lookup(p)
	return
}

func NetBorderLastdata_GetString(p *radius.Packet) (value string) {
	value, _ = NetBorderLastdata_LookupString(p)
	return
}

func NetBorderLastdata_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NetBorder_GetsVendor(p, 11) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderLastdata_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NetBorder_GetsVendor(p, 11) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderLastdata_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NetBorder_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NetBorderLastdata_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NetBorder_LookupVendor(p, 11)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NetBorderLastdata_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 11, a)
}

func NetBorderLastdata_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 11, a)
}

func NetBorderLastdata_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 11)
}

func NetBorderDisposition_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 12, a)
}

func NetBorderDisposition_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 12, a)
}

func NetBorderDisposition_Get(p *radius.Packet) (value []byte) {
	value, _ = NetBorderDisposition_Lookup(p)
	return
}

func NetBorderDisposition_GetString(p *radius.Packet) (value string) {
	value, _ = NetBorderDisposition_LookupString(p)
	return
}

func NetBorderDisposition_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NetBorder_GetsVendor(p, 12) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderDisposition_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NetBorder_GetsVendor(p, 12) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderDisposition_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NetBorder_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NetBorderDisposition_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NetBorder_LookupVendor(p, 12)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NetBorderDisposition_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 12, a)
}

func NetBorderDisposition_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 12, a)
}

func NetBorderDisposition_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 12)
}

type NetBorderHangupcause uint32

const (
	NetBorderHangupcause_Value_None                      NetBorderHangupcause = 0
	NetBorderHangupcause_Value_UnallocatedNumber         NetBorderHangupcause = 1
	NetBorderHangupcause_Value_NoRouteTransitNet         NetBorderHangupcause = 2
	NetBorderHangupcause_Value_NoRouteDestination        NetBorderHangupcause = 3
	NetBorderHangupcause_Value_ChannelUnacceptable       NetBorderHangupcause = 6
	NetBorderHangupcause_Value_CallAwardedDelivery       NetBorderHangupcause = 7
	NetBorderHangupcause_Value_NormalClearing            NetBorderHangupcause = 16
	NetBorderHangupcause_Value_UserBusy                  NetBorderHangupcause = 17
	NetBorderHangupcause_Value_NoUserResponse            NetBorderHangupcause = 18
	NetBorderHangupcause_Value_NoAnswer                  NetBorderHangupcause = 19
	NetBorderHangupcause_Value_SubscriberAbsent          NetBorderHangupcause = 20
	NetBorderHangupcause_Value_CallRejected              NetBorderHangupcause = 21
	NetBorderHangupcause_Value_NumberChanged             NetBorderHangupcause = 22
	NetBorderHangupcause_Value_RedirectoToNewDestination NetBorderHangupcause = 23
	NetBorderHangupcause_Value_ExchangeRoutingError      NetBorderHangupcause = 25
	NetBorderHangupcause_Value_DestinationOutOfOrder     NetBorderHangupcause = 27
	NetBorderHangupcause_Value_InvalidNumberFormat       NetBorderHangupcause = 28
	NetBorderHangupcause_Value_FacilityRejected          NetBorderHangupcause = 29
	NetBorderHangupcause_Value_ResponseToStatusEnquiry   NetBorderHangupcause = 30
	NetBorderHangupcause_Value_NormalUnspecified         NetBorderHangupcause = 31
	NetBorderHangupcause_Value_NormalCircuitCongestion   NetBorderHangupcause = 34
	NetBorderHangupcause_Value_NetworkOutOfOrder         NetBorderHangupcause = 38
	NetBorderHangupcause_Value_NormalTemporaryFailure    NetBorderHangupcause = 41
	NetBorderHangupcause_Value_SwitchCongestion          NetBorderHangupcause = 42
	NetBorderHangupcause_Value_AccessInfoDiscarded       NetBorderHangupcause = 43
	NetBorderHangupcause_Value_RequestedChanUnavail      NetBorderHangupcause = 44
	NetBorderHangupcause_Value_PreEmpted                 NetBorderHangupcause = 45
	NetBorderHangupcause_Value_FacilityNotSubscribed     NetBorderHangupcause = 50
	NetBorderHangupcause_Value_OutgoingCallBarred        NetBorderHangupcause = 52
	NetBorderHangupcause_Value_IncomingCallBarred        NetBorderHangupcause = 54
	NetBorderHangupcause_Value_BearercapabilityNotauth   NetBorderHangupcause = 57
	NetBorderHangupcause_Value_BearercapabilityNotavail  NetBorderHangupcause = 58
	NetBorderHangupcause_Value_ServiceUnavailable        NetBorderHangupcause = 63
	NetBorderHangupcause_Value_BearercapabilityNotimpl   NetBorderHangupcause = 65
	NetBorderHangupcause_Value_ChanNotImplemented        NetBorderHangupcause = 66
	NetBorderHangupcause_Value_FacilityNotImplemented    NetBorderHangupcause = 69
	NetBorderHangupcause_Value_ServiceNotImplemented     NetBorderHangupcause = 79
	NetBorderHangupcause_Value_InvalidCallReference      NetBorderHangupcause = 81
	NetBorderHangupcause_Value_IncompatibleDestination   NetBorderHangupcause = 88
	NetBorderHangupcause_Value_InvalidMsgUnspecified     NetBorderHangupcause = 95
	NetBorderHangupcause_Value_MandatoryIEMissing        NetBorderHangupcause = 96
	NetBorderHangupcause_Value_MessageTypeNonexist       NetBorderHangupcause = 97
	NetBorderHangupcause_Value_WrongMessage              NetBorderHangupcause = 98
	NetBorderHangupcause_Value_IENonexist                NetBorderHangupcause = 99
	NetBorderHangupcause_Value_InvalidIEContents         NetBorderHangupcause = 100
	NetBorderHangupcause_Value_WrongCallState            NetBorderHangupcause = 101
	NetBorderHangupcause_Value_RecoveryOnTimerExpire     NetBorderHangupcause = 102
	NetBorderHangupcause_Value_MandatoryIELengthError    NetBorderHangupcause = 103
	NetBorderHangupcause_Value_ProtocolError             NetBorderHangupcause = 111
	NetBorderHangupcause_Value_Interworking              NetBorderHangupcause = 127
	NetBorderHangupcause_Value_Success                   NetBorderHangupcause = 142
	NetBorderHangupcause_Value_OriginatorCancel          NetBorderHangupcause = 487
	NetBorderHangupcause_Value_Crash                     NetBorderHangupcause = 500
	NetBorderHangupcause_Value_SystemShutdown            NetBorderHangupcause = 501
	NetBorderHangupcause_Value_LoseRace                  NetBorderHangupcause = 502
	NetBorderHangupcause_Value_ManagerRequest            NetBorderHangupcause = 503
	NetBorderHangupcause_Value_BlindTransfer             NetBorderHangupcause = 600
	NetBorderHangupcause_Value_AttendedTransfer          NetBorderHangupcause = 601
	NetBorderHangupcause_Value_AllottedTimeout           NetBorderHangupcause = 602
	NetBorderHangupcause_Value_UserChallenge             NetBorderHangupcause = 603
	NetBorderHangupcause_Value_MediaTimeout              NetBorderHangupcause = 604
	NetBorderHangupcause_Value_PickedOff                 NetBorderHangupcause = 605
	NetBorderHangupcause_Value_UserNotRegistered         NetBorderHangupcause = 606
)

var NetBorderHangupcause_Strings = map[NetBorderHangupcause]string{
	NetBorderHangupcause_Value_None:                      "None",
	NetBorderHangupcause_Value_UnallocatedNumber:         "Unallocated-Number",
	NetBorderHangupcause_Value_NoRouteTransitNet:         "No-Route-Transit-Net",
	NetBorderHangupcause_Value_NoRouteDestination:        "No-Route-Destination",
	NetBorderHangupcause_Value_ChannelUnacceptable:       "Channel-Unacceptable",
	NetBorderHangupcause_Value_CallAwardedDelivery:       "Call-Awarded-Delivery",
	NetBorderHangupcause_Value_NormalClearing:            "Normal-Clearing",
	NetBorderHangupcause_Value_UserBusy:                  "User-Busy",
	NetBorderHangupcause_Value_NoUserResponse:            "No-User-Response",
	NetBorderHangupcause_Value_NoAnswer:                  "No-Answer",
	NetBorderHangupcause_Value_SubscriberAbsent:          "Subscriber-Absent",
	NetBorderHangupcause_Value_CallRejected:              "Call-Rejected",
	NetBorderHangupcause_Value_NumberChanged:             "Number-Changed",
	NetBorderHangupcause_Value_RedirectoToNewDestination: "Redirecto-To-New-Destination",
	NetBorderHangupcause_Value_ExchangeRoutingError:      "Exchange-Routing-Error",
	NetBorderHangupcause_Value_DestinationOutOfOrder:     "Destination-Out-Of-Order",
	NetBorderHangupcause_Value_InvalidNumberFormat:       "Invalid-Number-Format",
	NetBorderHangupcause_Value_FacilityRejected:          "Facility-Rejected",
	NetBorderHangupcause_Value_ResponseToStatusEnquiry:   "Response-To-Status-Enquiry",
	NetBorderHangupcause_Value_NormalUnspecified:         "Normal-Unspecified",
	NetBorderHangupcause_Value_NormalCircuitCongestion:   "Normal-Circuit-Congestion",
	NetBorderHangupcause_Value_NetworkOutOfOrder:         "Network-Out-Of-Order",
	NetBorderHangupcause_Value_NormalTemporaryFailure:    "Normal-Temporary-Failure",
	NetBorderHangupcause_Value_SwitchCongestion:          "Switch-Congestion",
	NetBorderHangupcause_Value_AccessInfoDiscarded:       "Access-Info-Discarded",
	NetBorderHangupcause_Value_RequestedChanUnavail:      "Requested-Chan-Unavail",
	NetBorderHangupcause_Value_PreEmpted:                 "Pre-Empted",
	NetBorderHangupcause_Value_FacilityNotSubscribed:     "Facility-Not-Subscribed",
	NetBorderHangupcause_Value_OutgoingCallBarred:        "Outgoing-Call-Barred",
	NetBorderHangupcause_Value_IncomingCallBarred:        "Incoming-Call-Barred",
	NetBorderHangupcause_Value_BearercapabilityNotauth:   "Bearercapability-Notauth",
	NetBorderHangupcause_Value_BearercapabilityNotavail:  "Bearercapability-Notavail",
	NetBorderHangupcause_Value_ServiceUnavailable:        "Service-Unavailable",
	NetBorderHangupcause_Value_BearercapabilityNotimpl:   "Bearercapability-Notimpl",
	NetBorderHangupcause_Value_ChanNotImplemented:        "Chan-Not-Implemented",
	NetBorderHangupcause_Value_FacilityNotImplemented:    "Facility-Not-Implemented",
	NetBorderHangupcause_Value_ServiceNotImplemented:     "Service-Not-Implemented",
	NetBorderHangupcause_Value_InvalidCallReference:      "Invalid-Call-Reference",
	NetBorderHangupcause_Value_IncompatibleDestination:   "Incompatible-Destination",
	NetBorderHangupcause_Value_InvalidMsgUnspecified:     "Invalid-Msg-Unspecified",
	NetBorderHangupcause_Value_MandatoryIEMissing:        "Mandatory-IE-Missing",
	NetBorderHangupcause_Value_MessageTypeNonexist:       "Message-Type-Nonexist",
	NetBorderHangupcause_Value_WrongMessage:              "Wrong-Message",
	NetBorderHangupcause_Value_IENonexist:                "IE-Nonexist",
	NetBorderHangupcause_Value_InvalidIEContents:         "Invalid-IE-Contents",
	NetBorderHangupcause_Value_WrongCallState:            "Wrong-Call-State",
	NetBorderHangupcause_Value_RecoveryOnTimerExpire:     "Recovery-On-Timer-Expire",
	NetBorderHangupcause_Value_MandatoryIELengthError:    "Mandatory-IE-Length-Error",
	NetBorderHangupcause_Value_ProtocolError:             "Protocol-Error",
	NetBorderHangupcause_Value_Interworking:              "Interworking",
	NetBorderHangupcause_Value_Success:                   "Success",
	NetBorderHangupcause_Value_OriginatorCancel:          "Originator-Cancel",
	NetBorderHangupcause_Value_Crash:                     "Crash",
	NetBorderHangupcause_Value_SystemShutdown:            "System-Shutdown",
	NetBorderHangupcause_Value_LoseRace:                  "Lose-Race",
	NetBorderHangupcause_Value_ManagerRequest:            "Manager-Request",
	NetBorderHangupcause_Value_BlindTransfer:             "Blind-Transfer",
	NetBorderHangupcause_Value_AttendedTransfer:          "Attended-Transfer",
	NetBorderHangupcause_Value_AllottedTimeout:           "Allotted-Timeout",
	NetBorderHangupcause_Value_UserChallenge:             "User-Challenge",
	NetBorderHangupcause_Value_MediaTimeout:              "Media-Timeout",
	NetBorderHangupcause_Value_PickedOff:                 "Picked-Off",
	NetBorderHangupcause_Value_UserNotRegistered:         "User-Not-Registered",
}

func (a NetBorderHangupcause) String() string {
	if str, ok := NetBorderHangupcause_Strings[a]; ok {
		return str
	}
	return "NetBorderHangupcause(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NetBorderHangupcause_Add(p *radius.Packet, value NetBorderHangupcause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NetBorder_AddVendor(p, 13, a)
}

func NetBorderHangupcause_Get(p *radius.Packet) (value NetBorderHangupcause) {
	value, _ = NetBorderHangupcause_Lookup(p)
	return
}

func NetBorderHangupcause_Gets(p *radius.Packet) (values []NetBorderHangupcause, err error) {
	var i uint32
	for _, attr := range _NetBorder_GetsVendor(p, 13) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NetBorderHangupcause(i))
	}
	return
}

func NetBorderHangupcause_Lookup(p *radius.Packet) (value NetBorderHangupcause, err error) {
	a, ok := _NetBorder_LookupVendor(p, 13)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NetBorderHangupcause(i)
	return
}

func NetBorderHangupcause_Set(p *radius.Packet, value NetBorderHangupcause) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NetBorder_SetVendor(p, 13, a)
}

func NetBorderHangupcause_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 13)
}

type NetBorderBillusec uint32

var NetBorderBillusec_Strings = map[NetBorderBillusec]string{}

func (a NetBorderBillusec) String() string {
	if str, ok := NetBorderBillusec_Strings[a]; ok {
		return str
	}
	return "NetBorderBillusec(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NetBorderBillusec_Add(p *radius.Packet, value NetBorderBillusec) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NetBorder_AddVendor(p, 15, a)
}

func NetBorderBillusec_Get(p *radius.Packet) (value NetBorderBillusec) {
	value, _ = NetBorderBillusec_Lookup(p)
	return
}

func NetBorderBillusec_Gets(p *radius.Packet) (values []NetBorderBillusec, err error) {
	var i uint32
	for _, attr := range _NetBorder_GetsVendor(p, 15) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NetBorderBillusec(i))
	}
	return
}

func NetBorderBillusec_Lookup(p *radius.Packet) (value NetBorderBillusec, err error) {
	a, ok := _NetBorder_LookupVendor(p, 15)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NetBorderBillusec(i)
	return
}

func NetBorderBillusec_Set(p *radius.Packet, value NetBorderBillusec) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NetBorder_SetVendor(p, 15, a)
}

func NetBorderBillusec_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 15)
}

type NetBorderAMAFlags uint32

var NetBorderAMAFlags_Strings = map[NetBorderAMAFlags]string{}

func (a NetBorderAMAFlags) String() string {
	if str, ok := NetBorderAMAFlags_Strings[a]; ok {
		return str
	}
	return "NetBorderAMAFlags(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func NetBorderAMAFlags_Add(p *radius.Packet, value NetBorderAMAFlags) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NetBorder_AddVendor(p, 16, a)
}

func NetBorderAMAFlags_Get(p *radius.Packet) (value NetBorderAMAFlags) {
	value, _ = NetBorderAMAFlags_Lookup(p)
	return
}

func NetBorderAMAFlags_Gets(p *radius.Packet) (values []NetBorderAMAFlags, err error) {
	var i uint32
	for _, attr := range _NetBorder_GetsVendor(p, 16) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, NetBorderAMAFlags(i))
	}
	return
}

func NetBorderAMAFlags_Lookup(p *radius.Packet) (value NetBorderAMAFlags, err error) {
	a, ok := _NetBorder_LookupVendor(p, 16)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = NetBorderAMAFlags(i)
	return
}

func NetBorderAMAFlags_Set(p *radius.Packet, value NetBorderAMAFlags) (err error) {
	a := radius.NewInteger(uint32(value))
	return _NetBorder_SetVendor(p, 16, a)
}

func NetBorderAMAFlags_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 16)
}

func NetBorderRDNIS_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 17, a)
}

func NetBorderRDNIS_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 17, a)
}

func NetBorderRDNIS_Get(p *radius.Packet) (value []byte) {
	value, _ = NetBorderRDNIS_Lookup(p)
	return
}

func NetBorderRDNIS_GetString(p *radius.Packet) (value string) {
	value, _ = NetBorderRDNIS_LookupString(p)
	return
}

func NetBorderRDNIS_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NetBorder_GetsVendor(p, 17) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderRDNIS_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NetBorder_GetsVendor(p, 17) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderRDNIS_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NetBorder_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NetBorderRDNIS_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NetBorder_LookupVendor(p, 17)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NetBorderRDNIS_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 17, a)
}

func NetBorderRDNIS_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 17, a)
}

func NetBorderRDNIS_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 17)
}

func NetBorderContext_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 18, a)
}

func NetBorderContext_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 18, a)
}

func NetBorderContext_Get(p *radius.Packet) (value []byte) {
	value, _ = NetBorderContext_Lookup(p)
	return
}

func NetBorderContext_GetString(p *radius.Packet) (value string) {
	value, _ = NetBorderContext_LookupString(p)
	return
}

func NetBorderContext_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NetBorder_GetsVendor(p, 18) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderContext_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NetBorder_GetsVendor(p, 18) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderContext_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NetBorder_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NetBorderContext_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NetBorder_LookupVendor(p, 18)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NetBorderContext_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 18, a)
}

func NetBorderContext_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 18, a)
}

func NetBorderContext_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 18)
}

func NetBorderSource_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 19, a)
}

func NetBorderSource_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 19, a)
}

func NetBorderSource_Get(p *radius.Packet) (value []byte) {
	value, _ = NetBorderSource_Lookup(p)
	return
}

func NetBorderSource_GetString(p *radius.Packet) (value string) {
	value, _ = NetBorderSource_LookupString(p)
	return
}

func NetBorderSource_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NetBorder_GetsVendor(p, 19) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderSource_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NetBorder_GetsVendor(p, 19) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderSource_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NetBorder_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NetBorderSource_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NetBorder_LookupVendor(p, 19)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NetBorderSource_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 19, a)
}

func NetBorderSource_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 19, a)
}

func NetBorderSource_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 19)
}

func NetBorderCallstartdate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 20, a)
}

func NetBorderCallstartdate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 20, a)
}

func NetBorderCallstartdate_Get(p *radius.Packet) (value []byte) {
	value, _ = NetBorderCallstartdate_Lookup(p)
	return
}

func NetBorderCallstartdate_GetString(p *radius.Packet) (value string) {
	value, _ = NetBorderCallstartdate_LookupString(p)
	return
}

func NetBorderCallstartdate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NetBorder_GetsVendor(p, 20) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderCallstartdate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NetBorder_GetsVendor(p, 20) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderCallstartdate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NetBorder_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NetBorderCallstartdate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NetBorder_LookupVendor(p, 20)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NetBorderCallstartdate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 20, a)
}

func NetBorderCallstartdate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 20, a)
}

func NetBorderCallstartdate_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 20)
}

func NetBorderCallanswerdate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 21, a)
}

func NetBorderCallanswerdate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 21, a)
}

func NetBorderCallanswerdate_Get(p *radius.Packet) (value []byte) {
	value, _ = NetBorderCallanswerdate_Lookup(p)
	return
}

func NetBorderCallanswerdate_GetString(p *radius.Packet) (value string) {
	value, _ = NetBorderCallanswerdate_LookupString(p)
	return
}

func NetBorderCallanswerdate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NetBorder_GetsVendor(p, 21) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderCallanswerdate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NetBorder_GetsVendor(p, 21) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderCallanswerdate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NetBorder_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NetBorderCallanswerdate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NetBorder_LookupVendor(p, 21)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NetBorderCallanswerdate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 21, a)
}

func NetBorderCallanswerdate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 21, a)
}

func NetBorderCallanswerdate_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 21)
}

func NetBorderCalltransferdate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 22, a)
}

func NetBorderCalltransferdate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 22, a)
}

func NetBorderCalltransferdate_Get(p *radius.Packet) (value []byte) {
	value, _ = NetBorderCalltransferdate_Lookup(p)
	return
}

func NetBorderCalltransferdate_GetString(p *radius.Packet) (value string) {
	value, _ = NetBorderCalltransferdate_LookupString(p)
	return
}

func NetBorderCalltransferdate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NetBorder_GetsVendor(p, 22) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderCalltransferdate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NetBorder_GetsVendor(p, 22) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderCalltransferdate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NetBorder_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NetBorderCalltransferdate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NetBorder_LookupVendor(p, 22)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NetBorderCalltransferdate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 22, a)
}

func NetBorderCalltransferdate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 22, a)
}

func NetBorderCalltransferdate_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 22)
}

func NetBorderCallenddate_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 23, a)
}

func NetBorderCallenddate_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 23, a)
}

func NetBorderCallenddate_Get(p *radius.Packet) (value []byte) {
	value, _ = NetBorderCallenddate_Lookup(p)
	return
}

func NetBorderCallenddate_GetString(p *radius.Packet) (value string) {
	value, _ = NetBorderCallenddate_LookupString(p)
	return
}

func NetBorderCallenddate_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NetBorder_GetsVendor(p, 23) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderCallenddate_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NetBorder_GetsVendor(p, 23) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderCallenddate_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NetBorder_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NetBorderCallenddate_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NetBorder_LookupVendor(p, 23)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NetBorderCallenddate_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 23, a)
}

func NetBorderCallenddate_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 23, a)
}

func NetBorderCallenddate_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 23)
}

func NetBorderSignalbond_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 24, a)
}

func NetBorderSignalbond_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_AddVendor(p, 24, a)
}

func NetBorderSignalbond_Get(p *radius.Packet) (value []byte) {
	value, _ = NetBorderSignalbond_Lookup(p)
	return
}

func NetBorderSignalbond_GetString(p *radius.Packet) (value string) {
	value, _ = NetBorderSignalbond_LookupString(p)
	return
}

func NetBorderSignalbond_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _NetBorder_GetsVendor(p, 24) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderSignalbond_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _NetBorder_GetsVendor(p, 24) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func NetBorderSignalbond_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _NetBorder_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func NetBorderSignalbond_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _NetBorder_LookupVendor(p, 24)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func NetBorderSignalbond_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 24, a)
}

func NetBorderSignalbond_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _NetBorder_SetVendor(p, 24, a)
}

func NetBorderSignalbond_Del(p *radius.Packet) {
	_NetBorder_DelVendor(p, 24)
}
