// Code generated by radius-dict-gen. DO NOT EDIT.

package zyxel

import (
	"strconv"

	"layeh.com/radius"
	"layeh.com/radius/rfc2865"
)

const (
	_Zyxel_VendorID = 890
)

func _Zyxel_AddVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	var vsa radius.Attribute
	vendor := make(radius.Attribute, 2+len(attr))
	vendor[0] = typ
	vendor[1] = byte(len(vendor))
	copy(vendor[2:], attr)
	vsa, err = radius.NewVendorSpecific(_Zyxel_VendorID, vendor)
	if err != nil {
		return
	}
	p.Add(rfc2865.VendorSpecific_Type, vsa)
	return
}

func _Zyxel_GetsVendor(p *radius.Packet, typ byte) (values []radius.Attribute) {
	for _, attr := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Zyxel_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				values = append(values, vsa[2:int(vsaLen)])
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Zyxel_LookupVendor(p *radius.Packet, typ byte) (attr radius.Attribute, ok bool) {
	for _, a := range p.Attributes[rfc2865.VendorSpecific_Type] {
		vendorID, vsa, err := radius.VendorSpecific(a)
		if err != nil || vendorID != _Zyxel_VendorID {
			continue
		}
		for len(vsa) >= 3 {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				break
			}
			if vsaTyp == typ {
				return vsa[2:int(vsaLen)], true
			}
			vsa = vsa[int(vsaLen):]
		}
	}
	return
}

func _Zyxel_SetVendor(p *radius.Packet, typ byte, attr radius.Attribute) (err error) {
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		vendorID, vsa, err := radius.VendorSpecific(p.Attributes[rfc2865.VendorSpecific_Type][i])
		if err != nil || vendorID != _Zyxel_VendorID {
			i++
			continue
		}
		for j := 0; len(vsa[j:]) >= 3; {
			vsaTyp, vsaLen := vsa[0], vsa[1]
			if int(vsaLen) > len(vsa[j:]) || vsaLen < 3 {
				i++
				break
			}
			if vsaTyp == typ {
				vsa = append(vsa[:j], vsa[j+int(vsaLen):]...)
			}
			j += int(vsaLen)
		}
		if len(vsa) > 0 {
			copy(p.Attributes[rfc2865.VendorSpecific_Type][i][4:], vsa)
			i++
		} else {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+i:]...)
		}
	}
	return _Zyxel_AddVendor(p, typ, attr)
}

func _Zyxel_DelVendor(p *radius.Packet, typ byte) {
vsaLoop:
	for i := 0; i < len(p.Attributes[rfc2865.VendorSpecific_Type]); {
		attr := p.Attributes[rfc2865.VendorSpecific_Type][i]
		vendorID, vsa, err := radius.VendorSpecific(attr)
		if err != nil || vendorID != _Zyxel_VendorID {
			continue
		}
		offset := 0
		for len(vsa[offset:]) >= 3 {
			vsaTyp, vsaLen := vsa[offset], vsa[offset+1]
			if int(vsaLen) > len(vsa) || vsaLen < 3 {
				continue vsaLoop
			}
			if vsaTyp == typ {
				copy(vsa[offset:], vsa[offset+int(vsaLen):])
				vsa = vsa[:len(vsa)-int(vsaLen)]
			} else {
				offset += int(vsaLen)
			}
		}
		if offset == 0 {
			p.Attributes[rfc2865.VendorSpecific_Type] = append(p.Attributes[rfc2865.VendorSpecific_Type][:i], p.Attributes[rfc2865.VendorSpecific_Type][i+1:]...)
		} else {
			i++
		}
	}
	return
}

func ZyxelPrivilegeAVPair_Add(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Zyxel_AddVendor(p, 3, a)
}

func ZyxelPrivilegeAVPair_AddString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Zyxel_AddVendor(p, 3, a)
}

func ZyxelPrivilegeAVPair_Get(p *radius.Packet) (value []byte) {
	value, _ = ZyxelPrivilegeAVPair_Lookup(p)
	return
}

func ZyxelPrivilegeAVPair_GetString(p *radius.Packet) (value string) {
	value, _ = ZyxelPrivilegeAVPair_LookupString(p)
	return
}

func ZyxelPrivilegeAVPair_Gets(p *radius.Packet) (values [][]byte, err error) {
	var i []byte
	for _, attr := range _Zyxel_GetsVendor(p, 3) {
		i = radius.Bytes(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZyxelPrivilegeAVPair_GetStrings(p *radius.Packet) (values []string, err error) {
	var i string
	for _, attr := range _Zyxel_GetsVendor(p, 3) {
		i = radius.String(attr)
		if err != nil {
			return
		}
		values = append(values, i)
	}
	return
}

func ZyxelPrivilegeAVPair_Lookup(p *radius.Packet) (value []byte, err error) {
	a, ok := _Zyxel_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.Bytes(a)
	return
}

func ZyxelPrivilegeAVPair_LookupString(p *radius.Packet) (value string, err error) {
	a, ok := _Zyxel_LookupVendor(p, 3)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	value = radius.String(a)
	return
}

func ZyxelPrivilegeAVPair_Set(p *radius.Packet, value []byte) (err error) {
	var a radius.Attribute
	a, err = radius.NewBytes(value)
	if err != nil {
		return
	}
	return _Zyxel_SetVendor(p, 3, a)
}

func ZyxelPrivilegeAVPair_SetString(p *radius.Packet, value string) (err error) {
	var a radius.Attribute
	a, err = radius.NewString(value)
	if err != nil {
		return
	}
	return _Zyxel_SetVendor(p, 3, a)
}

func ZyxelPrivilegeAVPair_Del(p *radius.Packet) {
	_Zyxel_DelVendor(p, 3)
}

type ZyxelCallbackOption uint32

const (
	ZyxelCallbackOption_Value_None      ZyxelCallbackOption = 0
	ZyxelCallbackOption_Value_Optional  ZyxelCallbackOption = 1
	ZyxelCallbackOption_Value_Mandatory ZyxelCallbackOption = 2
)

var ZyxelCallbackOption_Strings = map[ZyxelCallbackOption]string{
	ZyxelCallbackOption_Value_None:      "None",
	ZyxelCallbackOption_Value_Optional:  "Optional",
	ZyxelCallbackOption_Value_Mandatory: "Mandatory",
}

func (a ZyxelCallbackOption) String() string {
	if str, ok := ZyxelCallbackOption_Strings[a]; ok {
		return str
	}
	return "ZyxelCallbackOption(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZyxelCallbackOption_Add(p *radius.Packet, value ZyxelCallbackOption) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Zyxel_AddVendor(p, 192, a)
}

func ZyxelCallbackOption_Get(p *radius.Packet) (value ZyxelCallbackOption) {
	value, _ = ZyxelCallbackOption_Lookup(p)
	return
}

func ZyxelCallbackOption_Gets(p *radius.Packet) (values []ZyxelCallbackOption, err error) {
	var i uint32
	for _, attr := range _Zyxel_GetsVendor(p, 192) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZyxelCallbackOption(i))
	}
	return
}

func ZyxelCallbackOption_Lookup(p *radius.Packet) (value ZyxelCallbackOption, err error) {
	a, ok := _Zyxel_LookupVendor(p, 192)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZyxelCallbackOption(i)
	return
}

func ZyxelCallbackOption_Set(p *radius.Packet, value ZyxelCallbackOption) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Zyxel_SetVendor(p, 192, a)
}

func ZyxelCallbackOption_Del(p *radius.Packet) {
	_Zyxel_DelVendor(p, 192)
}

type ZyxelCallbackPhoneSource uint32

const (
	ZyxelCallbackPhoneSource_Value_Preconfigured ZyxelCallbackPhoneSource = 0
	ZyxelCallbackPhoneSource_Value_User          ZyxelCallbackPhoneSource = 1
)

var ZyxelCallbackPhoneSource_Strings = map[ZyxelCallbackPhoneSource]string{
	ZyxelCallbackPhoneSource_Value_Preconfigured: "Preconfigured",
	ZyxelCallbackPhoneSource_Value_User:          "User",
}

func (a ZyxelCallbackPhoneSource) String() string {
	if str, ok := ZyxelCallbackPhoneSource_Strings[a]; ok {
		return str
	}
	return "ZyxelCallbackPhoneSource(" + strconv.FormatUint(uint64(a), 10) + ")"
}

func ZyxelCallbackPhoneSource_Add(p *radius.Packet, value ZyxelCallbackPhoneSource) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Zyxel_AddVendor(p, 193, a)
}

func ZyxelCallbackPhoneSource_Get(p *radius.Packet) (value ZyxelCallbackPhoneSource) {
	value, _ = ZyxelCallbackPhoneSource_Lookup(p)
	return
}

func ZyxelCallbackPhoneSource_Gets(p *radius.Packet) (values []ZyxelCallbackPhoneSource, err error) {
	var i uint32
	for _, attr := range _Zyxel_GetsVendor(p, 193) {
		i, err = radius.Integer(attr)
		if err != nil {
			return
		}
		values = append(values, ZyxelCallbackPhoneSource(i))
	}
	return
}

func ZyxelCallbackPhoneSource_Lookup(p *radius.Packet) (value ZyxelCallbackPhoneSource, err error) {
	a, ok := _Zyxel_LookupVendor(p, 193)
	if !ok {
		err = radius.ErrNoAttribute
		return
	}
	var i uint32
	i, err = radius.Integer(a)
	if err != nil {
		return
	}
	value = ZyxelCallbackPhoneSource(i)
	return
}

func ZyxelCallbackPhoneSource_Set(p *radius.Packet, value ZyxelCallbackPhoneSource) (err error) {
	a := radius.NewInteger(uint32(value))
	return _Zyxel_SetVendor(p, 193, a)
}

func ZyxelCallbackPhoneSource_Del(p *radius.Packet) {
	_Zyxel_DelVendor(p, 193)
}
